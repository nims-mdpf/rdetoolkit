{"config":{"lang":["ja","en"],"separator":"[\\s\\-\\.]+","pipeline":["stemmer"]},"docs":[{"location":"README_ja/","title":"README ja","text":""},{"location":"README_ja/#rdetoolkit","title":"RDEToolKit","text":"<p>RDEToolKit\u306f\u3001RDE\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306aPython\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002 RDEToolKit\u306e\u5404\u7a2e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001RDE\u3078\u306e\u7814\u7a76\u30fb\u5b9f\u9a13\u30c7\u30fc\u30bf\u306e\u767b\u9332\u51e6\u7406\u3092\u7c21\u5358\u306b\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u7814\u7a76\u3084\u5b9f\u9a13\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u308bPython\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u767b\u9332\u304b\u3089\u52a0\u5de5\u3001\u30b0\u30e9\u30d5\u5316\u306a\u3069\u3088\u308a\u591a\u69d8\u306a\u51e6\u7406\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"README_ja/#documents","title":"Documents","text":"<p>See documentation for more details.</p>"},{"location":"README_ja/#contributing","title":"Contributing","text":"<p>\u5909\u66f4\u3092\u52a0\u3048\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4e00\u8aad\u304a\u9858\u3044\u3057\u307e\u3059\u3002</p> <ul> <li>CONTRIBUTING.md</li> </ul>"},{"location":"README_ja/#install","title":"Install","text":"<p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u3001\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>pip install rdetoolkit\n</code></pre>"},{"location":"README_ja/#usage","title":"Usage","text":"<p>RDE\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u69cb\u7bc9\u306e\u4e00\u4f8b\u3067\u3059\u3002</p>"},{"location":"README_ja/#_1","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b","text":"<p>\u307e\u305a\u3001RDE\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u30bf\u30fc\u30df\u30ca\u30eb\u3084\u30b7\u30a7\u30eb\u4e0a\u3067\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>python3 -m rdetoolkit init\n</code></pre> <p>\u30b3\u30de\u30f3\u30c9\u304c\u6b63\u3057\u304f\u52d5\u4f5c\u3059\u308b\u3068\u3001\u4e0b\u8a18\u3067\u793a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>container</code>\u3068\u3044\u3046\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3066\u3001\u958b\u767a\u3092\u9032\u3081\u307e\u3059\u3002</p> <ul> <li>requirements.txt</li> <li>\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u69cb\u7bc9\u3067\u4f7f\u7528\u3057\u305f\u3044Python\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066<code>pip install</code>\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>modules</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u3067\u4f7f\u7528\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u683c\u7d0d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5225\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8aac\u660e\u3057\u307e\u3059\u3002</li> <li>main.py</li> <li>\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8d77\u52d5\u51e6\u7406\u3092\u5b9a\u7fa9</li> <li>data/inputdata</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u5bfe\u8c61\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>data/invoice</li> <li>\u30ed\u30fc\u30ab\u30eb\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u7a7a\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002</li> <li>data/tasksupport</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u88dc\u52a9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> <pre><code>container\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport\n\u2502       \u251c\u2500\u2500 invoice.schema.json\n\u2502       \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 modules\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"README_ja/#_2","title":"\u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u88c5","text":"<p>\u5165\u529b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u30c7\u30fc\u30bf\u52a0\u5de5\u30fb\u30b0\u30e9\u30d5\u5316\u30fb\u6a5f\u68b0\u5b66\u7fd2\u7528\u306ecsv\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u306a\u3069\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3001RDE\u3078\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3067\u304d\u307e\u3059\u3002\u4e0b\u8a18\u306e\u66f8\u5f0f\u306b\u5f93\u3063\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u3001\u72ec\u81ea\u306e\u51e6\u7406\u3092RDE\u306e\u69cb\u9020\u5316\u51e6\u7406\u306e\u30d5\u30ed\u30fc\u306b\u7d44\u307f\u8fbc\u307f\u8fbc\u3080\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002</p> <p><code>dataset()</code>\u306f\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u5f15\u6570\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>srcpaths (RdeInputDirPaths): \u51e6\u7406\u306e\u305f\u3081\u306e\u5165\u529b\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30d1\u30b9</li> <li>resource_paths (RdeOutputResourcePath): \u51e6\u7406\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u51fa\u529b\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30d1\u30b9</li> </ul> <pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    ...\n</code></pre> <p>\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3001<code>modules</code>\u4ee5\u4e0b\u306b\u3001<code>def display_messsage()</code>\u3068\u3044\u3046\u30c0\u30df\u30fc\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3001\u72ec\u81ea\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002<code>modules/modules.py</code>\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code># modules/modules.py\ndef display_messsage(path_list):\n    print(f\"Test Message!: {path_list}\")\n\ndef dataset(srcpaths, resource_paths):\n    display_messsage(srcpaths)\n    display_messsage(resource_paths)\n</code></pre>"},{"location":"README_ja/#_3","title":"\u8d77\u52d5\u51e6\u7406\u306b\u3064\u3044\u3066","text":"<p>\u7d9a\u3044\u3066\u3001<code>rdetoolkit.workflow.run()</code>\u3092\u4f7f\u3063\u3066\u3001\u8d77\u52d5\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u8d77\u52d5\u51e6\u7406\u3067\u4e3b\u306b\u5b9f\u884c\u51e6\u7406\u306f\u3001</p> <ul> <li>\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30c1\u30a7\u30c3\u30af</li> <li>\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3068RDE\u69cb\u9020\u5316\u3067\u898f\u5b9a\u3059\u308b\u5404\u7a2e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b</li> <li>\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u3067\u5b9a\u7fa9\u3057\u305f\u5177\u4f53\u7684\u306a\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c</li> </ul> <pre><code>import rdetoolkit\nfrom modules.modules import dataset  #\u72ec\u81ea\u3067\u5b9a\u7fa9\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\n\n#\u72ec\u81ea\u3067\u5b9a\u7fa9\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\nrdetoolkit.workflows.run(custom_dataset_function=dataset)\n</code></pre> <p>\u3082\u3057\u3001\u72ec\u81ea\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u6e21\u3055\u306a\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>import rdetoolkit\n\nrdetoolkit.workflows.run()\n</code></pre>"},{"location":"README_ja/#_4","title":"\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u52d5\u4f5c\u3055\u305b\u308b\u5834\u5408","text":"<p>\u5404\u81ea\u306e\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u3001\u30c7\u30d0\u30c3\u30b0\u3084\u30c6\u30b9\u30c8\u7684\u306bRDE\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u3001<code>data</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5fc5\u8981\u306a\u5165\u529b\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u3082\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u3002\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001main.py\u3068\u540c\u3058\u968e\u5c64\u306bdata\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u914d\u7f6e\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <pre><code>container/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 modules/\n\u2502   \u2514\u2500\u2500 modules.py\n\u2514\u2500\u2500 data/\n    \u251c\u2500\u2500 inputdata/\n    \u2502   \u2514\u2500\u2500 &lt;\u51e6\u7406\u3057\u305f\u3044\u5b9f\u9a13\u30c7\u30fc\u30bf&gt;\n    \u251c\u2500\u2500 invoice/\n    \u2502   \u2514\u2500\u2500 invoice.json\n    \u2514\u2500\u2500 tasksupport/\n        \u251c\u2500\u2500 metadata-def.json\n        \u2514\u2500\u2500 invoice.schema.json\n</code></pre>"},{"location":"","title":"RDEToolKit","text":"<p>RDEToolKit\u306f\u3001RDE\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306aPython\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002RDEToolKit\u306e\u5404\u7a2e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001RDE\u3078\u306e\u7814\u7a76\u30fb\u5b9f\u9a13\u30c7\u30fc\u30bf\u306e\u767b\u9332\u51e6\u7406\u3092\u7c21\u5358\u306b\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002\u4e3b\u306b\u3001RDEToolKit\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u5b9a\u7fa9\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u306e\u524d\u51e6\u7406\u30fb\u5f8c\u51e6\u7406\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u7814\u7a76\u3084\u5b9f\u9a13\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u3044\u308bPython\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u767b\u9332\u304b\u3089\u52a0\u5de5\u3001\u30b0\u30e9\u30d5\u5316\u306a\u3069\u3088\u308a\u591a\u69d8\u306a\u51e6\u7406\u3092\u5b9f\u73fe\u53ef\u80fd\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u306e\u30af\u30ec\u30f3\u30b8\u30f3\u30b0\u3001\u5909\u63db\u3001\u96c6\u8a08\u3001\u53ef\u8996\u5316\u306a\u3069\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u5168\u4f53\u3092\u52b9\u7387\u7684\u306b\u7ba1\u7406\u3067\u304d\u307e\u3059\u3002</p> <p></p> <p></p>"},{"location":"#_1","title":"\u8ab2\u984c\u3068\u80cc\u666f","text":"<p>\u7814\u7a76\u30c7\u30fc\u30bf\u306e\u7ba1\u7406\u3068\u5171\u6709\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u8ab2\u984c\u304c\u5b58\u5728\u3057\u3066\u3044\u307e\u3057\u305f\uff1a</p> <ul> <li>\u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u7d71\u4e00: \u7814\u7a76\u8005\u3054\u3068\u306b\u7570\u306a\u308b\u30c7\u30fc\u30bf\u5f62\u5f0f\u3084\u30d5\u30a1\u30a4\u30eb\u69cb\u9020</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316: \u4e00\u8cab\u6027\u306e\u306a\u3044\u30e1\u30bf\u30c7\u30fc\u30bf\u8a18\u8ff0</li> <li>\u51e6\u7406\u306e\u81ea\u52d5\u5316: \u624b\u52d5\u3067\u306e\u30c7\u30fc\u30bf\u5909\u63db\u3084\u6574\u7406\u4f5c\u696d\u306e\u8ca0\u62c5</li> <li>\u518d\u73fe\u6027\u306e\u78ba\u4fdd: \u51e6\u7406\u624b\u9806\u306e\u6587\u66f8\u5316\u3068\u6a19\u6e96\u5316\u306e\u56f0\u96e3</li> </ul>"},{"location":"#_2","title":"\u4e3b\u8981\u30b3\u30f3\u30bb\u30d7\u30c8","text":""},{"location":"#_3","title":"\u69cb\u9020\u5316\u51e6\u7406\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","text":"<p>RDEToolKit\u306f\u3001\u7814\u7a76\u30c7\u30fc\u30bf\u3092\u6a19\u6e96\u5316\u3055\u308c\u305fRDE\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u300c\u69cb\u9020\u5316\u51e6\u7406\u300d\u30923\u3064\u306e\u30d5\u30a7\u30fc\u30ba\u3067\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code>graph LR\n    \u8d77\u52d5\u51e6\u7406 --&gt; \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\n    \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406 --&gt; \u7d42\u4e86\u51e6\u7406\n</code></pre> <ul> <li>\u8d77\u52d5\u51e6\u7406: \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210\u3001\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u3001\u30e2\u30fc\u30c9\u5224\u5b9a</li> <li>\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406: \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30c7\u30fc\u30bf\u5909\u63db\u30fb\u89e3\u6790\u51e6\u7406</li> <li>\u7d42\u4e86\u51e6\u7406: \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3001\u30b5\u30e0\u30cd\u30a4\u30eb\u751f\u6210\u3001\u30e1\u30bf\u30c7\u30fc\u30bf\u8a18\u8ff0</li> </ul>"},{"location":"#4","title":"4\u3064\u306e\u51e6\u7406\u30e2\u30fc\u30c9","text":"<p>RDEToolKit\u306f\u3001\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u3068\u7528\u9014\u306b\u5fdc\u3058\u30664\u3064\u306e\u51e6\u7406\u30e2\u30fc\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a</p> \u30e2\u30fc\u30c9 \u7528\u9014 \u7279\u5fb4 invoice\u30e2\u30fc\u30c9 \u5358\u4e00\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb \u30c7\u30d5\u30a9\u30eb\u30c8\u30e2\u30fc\u30c9\u3001\u57fa\u672c\u7684\u306a\u69cb\u9020\u5316\u51e6\u7406 ExcelInvoice\u30e2\u30fc\u30c9 Excel\u5f62\u5f0f\u306e\u9001\u308a\u72b6 Excel\u9001\u308a\u72b6\u30d5\u30a1\u30a4\u30eb\u306e\u81ea\u52d5\u51e6\u7406 \u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb \u8907\u6570\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb \u4e00\u62ec\u51e6\u7406\u3001\u30a8\u30e9\u30fc\u51e6\u7406\u30b9\u30ad\u30c3\u30d7\u6a5f\u80fd RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9 RDE\u6a19\u6e96\u5f62\u5f0f \u65e2\u5b58RDE\u30c7\u30fc\u30bf\u306e\u518d\u51e6\u7406"},{"location":"#_4","title":"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb","text":"<p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\uff08<code>rdeconfig.yaml</code>\u307e\u305f\u306f<code>pyproject.toml</code>\uff09\u306b\u3088\u308a\u3001\u51e6\u7406\u306e\u6319\u52d5\u3092\u67d4\u8edf\u306b\u5909\u66f4\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>system:\n  extended_mode: 'MultiDataTile'\n  save_raw: true\n  magic_variable: true\n  save_thumbnail_image: true\n</code></pre>"},{"location":"#_5","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>RDEToolKit\u306fPython\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u304a\u308a\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002</p> <pre><code>pip install rdetoolkit\n</code></pre>"},{"location":"#code-sample","title":"Code Sample","text":"Sample1: \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u69cb\u9020\u5316\u51e6\u7406\u3042\u308a Sample2: \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u69cb\u9020\u5316\u51e6\u7406\u306a\u3057"},{"location":"#_6","title":"\u4e3b\u8981\u6a5f\u80fd","text":""},{"location":"#_7","title":"\u81ea\u52d5\u5316\u6a5f\u80fd","text":"<ul> <li>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306e\u81ea\u52d5\u751f\u6210: RDE\u6a19\u6e96\u306b\u6e96\u62e0\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u69cb\u6210</li> <li>\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306e\u81ea\u52d5\u5224\u5b9a: \u5165\u529b\u30c7\u30fc\u30bf\u306b\u57fa\u3065\u304f\u51e6\u7406\u30e2\u30fc\u30c9\u306e\u9078\u629e</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u81ea\u52d5\u62bd\u51fa: \u30d5\u30a1\u30a4\u30eb\u60c5\u5831\u304b\u3089\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210</li> <li>\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u306e\u81ea\u52d5\u4f5c\u6210: Main\u753b\u50cf\u304b\u3089\u306e\u4ee3\u8868\u753b\u50cf\u751f\u6210</li> </ul>"},{"location":"#_8","title":"\u691c\u8a3c\u6a5f\u80fd","text":"<ul> <li>\u30b9\u30ad\u30fc\u30de\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3: JSON Schema\u306b\u3088\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u691c\u8a3c</li> <li>\u30d5\u30a1\u30a4\u30eb\u6574\u5408\u6027\u30c1\u30a7\u30c3\u30af: \u5fc5\u9808\u30d5\u30a1\u30a4\u30eb\u306e\u5b58\u5728\u78ba\u8a8d</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u691c\u8a3c: metadata-def.json\u3068\u306e\u6574\u5408\u6027\u78ba\u8a8d</li> </ul>"},{"location":"#_9","title":"\u62e1\u5f35\u6027","text":"<ul> <li>\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u306e\u7d44\u307f\u8fbc\u307f: \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u95a2\u6570\u306e\u7d71\u5408</li> <li>\u30d7\u30e9\u30b0\u30a4\u30f3\u6a5f\u80fd: \u72ec\u81ea\u306e\u51e6\u7406\u30ed\u30b8\u30c3\u30af\u306e\u8ffd\u52a0</li> <li>\u8a2d\u5b9a\u306e\u67d4\u8edf\u6027: YAML/TOML\u5f62\u5f0f\u3067\u306e\u8a73\u7d30\u8a2d\u5b9a</li> </ul>"},{"location":"#_10","title":"\u307e\u3068\u3081","text":"<p>RDEToolKit\u306e\u4e3b\u8981\u306a\u4fa1\u5024\uff1a</p> <ul> <li>\u52b9\u7387\u6027: \u624b\u52d5\u4f5c\u696d\u306e\u81ea\u52d5\u5316\u306b\u3088\u308a\u51e6\u7406\u6642\u9593\u3092\u5927\u5e45\u77ed\u7e2e</li> <li>\u6a19\u6e96\u5316: RDE\u5f62\u5f0f\u3078\u306e\u7d71\u4e00\u7684\u306a\u5909\u63db\u51e6\u7406</li> <li>\u67d4\u8edf\u6027: \u591a\u69d8\u306a\u7814\u7a76\u30c7\u30fc\u30bf\u5f62\u5f0f\u3078\u306e\u5bfe\u5fdc</li> <li>\u4fe1\u983c\u6027: \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u306b\u3088\u308b\u54c1\u8cea\u4fdd\u8a3c</li> <li>\u62e1\u5f35\u6027: \u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u306e\u5bb9\u6613\u306a\u7d44\u307f\u8fbc\u307f</li> </ul>"},{"location":"#_11","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>RDEToolKit\u3092\u4f7f\u3044\u59cb\u3081\u308b\u306b\u306f\uff1a</p> <ol> <li>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5 - \u74b0\u5883\u69cb\u7bc9\u306e\u624b\u9806</li> <li>\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8 - \u6700\u521d\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u4f53\u9a13</li> <li>\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9 - \u8a73\u7d30\u306a\u4f7f\u7528\u65b9\u6cd5</li> </ol>"},{"location":"installation/","title":"RDEToolKit\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u65b9\u6cd5","text":""},{"location":"installation/#_1","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001RDEToolKit\u3092Python\u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u624b\u9806\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u958b\u767a\u74b0\u5883\u3068\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u74b0\u5883\u306e\u4e21\u65b9\u306b\u5bfe\u5fdc\u3057\u305f\u8907\u6570\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"installation/#_2","title":"\u524d\u63d0\u6761\u4ef6","text":"<p>RDEToolKit\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u524d\u306b\u3001\u4ee5\u4e0b\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>Python: \u30d0\u30fc\u30b8\u30e7\u30f3 3.9 \u4ee5\u4e0a</li> <li>pip: \u6700\u65b0\u7248\u3092\u63a8\u5968</li> <li>\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a: PyPI\u304b\u3089\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u5fc5\u8981</li> </ul> <p>Python\u74b0\u5883\u306e\u78ba\u8a8d</p> <p>\u73fe\u5728\u306ePython\u74b0\u5883\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\uff1a <pre><code>python --version\npip --version\n</code></pre></p>"},{"location":"installation/#_3","title":"\u624b\u9806","text":""},{"location":"installation/#1","title":"1. \u6a19\u6e96\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u6700\u3082\u4e00\u822c\u7684\u306a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3067\u3059\u3002PyPI\u304b\u3089\u306e\u5b89\u5b9a\u7248\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002</p> Unix/macOSWindows terminal<pre><code>pip install rdetoolkit\n</code></pre> command_prompt<pre><code>pip install rdetoolkit\n</code></pre>"},{"location":"installation/#2-minio","title":"2. MinIO\u30b5\u30dd\u30fc\u30c8\u4ed8\u304d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8\uff08MinIO\uff09\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u8ffd\u52a0\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002</p> Unix/macOSWindows terminal<pre><code>pip install rdetoolkit[minio]\n</code></pre> command_prompt<pre><code>pip install rdetoolkit[minio]\n</code></pre>"},{"location":"installation/#3","title":"3. \u958b\u767a\u7248\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u6700\u65b0\u306e\u958b\u767a\u7248\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u76f4\u63a5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002</p> Unix/macOSWindows terminal<pre><code>pip install git+https://github.com/nims-dpfc/rdetoolkit.git\n</code></pre> command_prompt<pre><code>pip install git+https://github.com/nims-dpfc/rdetoolkit.git\n</code></pre> <p>\u958b\u767a\u7248\u306e\u6ce8\u610f\u4e8b\u9805</p> <p>\u958b\u767a\u7248\u306f\u4e0d\u5b89\u5b9a\u306a\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u74b0\u5883\u3067\u306f\u5b89\u5b9a\u7248\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002</p>"},{"location":"installation/#4","title":"4. \u4eee\u60f3\u74b0\u5883\u3067\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3054\u3068\u306b\u72ec\u7acb\u3057\u305f\u74b0\u5883\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306e\u624b\u9806\u3067\u3059\u3002</p> venv\u4f7f\u7528conda\u4f7f\u7528 terminal<pre><code># \u4eee\u60f3\u74b0\u5883\u3092\u4f5c\u6210\npython -m venv rde_env\n\n# \u4eee\u60f3\u74b0\u5883\u3092\u6709\u52b9\u5316\nsource rde_env/bin/activate  # Unix/macOS\n# rde_env\\Scripts\\activate  # Windows\n\n# RDEToolKit\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install rdetoolkit\n</code></pre> terminal<pre><code># \u65b0\u3057\u3044\u74b0\u5883\u3092\u4f5c\u6210\nconda create -n rde_env python=3.9\n\n# \u74b0\u5883\u3092\u6709\u52b9\u5316\nconda activate rde_env\n\n# RDEToolKit\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install rdetoolkit\n</code></pre>"},{"location":"installation/#_4","title":"\u7d50\u679c\u306e\u78ba\u8a8d","text":"<p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u305f\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p>"},{"location":"installation/#_5","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u78ba\u8a8d","text":"python_console<pre><code>import rdetoolkit\nprint(rdetoolkit.__version__)\n</code></pre> <p>\u671f\u5f85\u3055\u308c\u308b\u51fa\u529b\u4f8b\uff1a <pre><code>1.2.3\n</code></pre></p>"},{"location":"installation/#_6","title":"\u57fa\u672c\u6a5f\u80fd\u30c6\u30b9\u30c8","text":"test_installation.py<pre><code>from rdetoolkit import workflows\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\n# \u57fa\u672c\u7684\u306a\u30a4\u30f3\u30dd\u30fc\u30c8\u304c\u6210\u529f\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\nprint(\"RDEToolKit installation successful!\")\n</code></pre>"},{"location":"installation/#_7","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"installation/#_8","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5","text":""},{"location":"installation/#_9","title":"\u6a29\u9650\u30a8\u30e9\u30fc","text":"<pre><code>ERROR: Could not install packages due to an EnvironmentError\n</code></pre> <p>\u89e3\u6c7a\u65b9\u6cd5: \u30e6\u30fc\u30b6\u30fc\u30ec\u30d9\u30eb\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b terminal<pre><code>pip install --user rdetoolkit\n</code></pre></p>"},{"location":"installation/#_10","title":"\u4f9d\u5b58\u95a2\u4fc2\u306e\u7af6\u5408","text":"<pre><code>ERROR: pip's dependency resolver does not currently take into account all the packages\n</code></pre> <p>\u89e3\u6c7a\u65b9\u6cd5: \u4eee\u60f3\u74b0\u5883\u3092\u4f7f\u7528\u3059\u308b terminal<pre><code>python -m venv clean_env\nsource clean_env/bin/activate\npip install rdetoolkit\n</code></pre></p>"},{"location":"installation/#python","title":"Python \u30d0\u30fc\u30b8\u30e7\u30f3\u975e\u5bfe\u5fdc","text":"<pre><code>ERROR: Package 'rdetoolkit' requires a different Python\n</code></pre> <p>\u89e3\u6c7a\u65b9\u6cd5: Python 3.9\u4ee5\u4e0a\u306b\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b</p> <p>\u30b5\u30dd\u30fc\u30c8\u60c5\u5831</p> <p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u95a2\u3059\u308b\u554f\u984c\u304c\u89e3\u6c7a\u3057\u306a\u3044\u5834\u5408\u306f\u3001GitHub\u306eIssues\u3067\u5831\u544a\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"installation/#_11","title":"\u95a2\u9023\u60c5\u5831","text":"<p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5b8c\u4e86\u5f8c\u306e\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\uff1a</p> <ul> <li>\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8 - \u6700\u521d\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c</li> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb - \u52d5\u4f5c\u8a2d\u5b9a\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba</li> <li>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 - \u8a73\u7d30\u306a\u6a5f\u80fd\u8aac\u660e</li> </ul>"},{"location":"quick-start/","title":"RDEToolKit\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8","text":""},{"location":"quick-start/#_1","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001RDEToolKit\u3092\u4f7f\u7528\u3057\u3066\u6700\u521d\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3001\u57fa\u672c\u7684\u306a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u4f53\u9a13\u3057\u307e\u3059\u3002\u6240\u8981\u6642\u9593\u306f\u7d0415\u5206\u3067\u3059\u3002</p> <p>\u5b8c\u4e86\u6642\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <ul> <li>RDE\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u57fa\u672c\u69cb\u9020\u3092\u7406\u89e3\u3059\u308b</li> <li>\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"quick-start/#1","title":"1. \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b","text":""},{"location":"quick-start/#_2","title":"\u76ee\u7684","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u69cb\u9020\u3092\u6e96\u5099\u3057\u307e\u3059\u3002</p>"},{"location":"quick-start/#_3","title":"\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9","text":"Unix/macOSWindows terminal<pre><code># \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\nmkdir my-rde-project\ncd my-rde-project\n\n# \u5fc5\u8981\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\nmkdir -p data/inputdata\nmkdir -p tasksupport\nmkdir -p modules\n</code></pre> command_prompt<pre><code># \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\nmkdir my-rde-project\ncd my-rde-project\n\n# \u5fc5\u8981\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\nmkdir data\\inputdata\nmkdir tasksupport\nmkdir modules\n</code></pre>"},{"location":"quick-start/#_4","title":"\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c","text":"<p>\u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\uff1a <pre><code>my-rde-project/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 inputdata/\n\u251c\u2500\u2500 tasksupport/\n\u2514\u2500\u2500 modules/\n</code></pre></p>"},{"location":"quick-start/#2","title":"2. \u4f9d\u5b58\u95a2\u4fc2\u3092\u5b9a\u7fa9\u3059\u308b","text":""},{"location":"quick-start/#_5","title":"\u76ee\u7684","text":"<p>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u7528\u3059\u308bPython\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p>"},{"location":"quick-start/#_6","title":"\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9","text":"requirements.txt<pre><code>rdetoolkit&gt;=1.0.0\n</code></pre>"},{"location":"quick-start/#_7","title":"\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c","text":"<p><code>requirements.txt</code>\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u3001RDEToolKit\u306e\u4f9d\u5b58\u95a2\u4fc2\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"quick-start/#3","title":"3. \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u3092\u4f5c\u6210\u3059\u308b","text":""},{"location":"quick-start/#_8","title":"\u76ee\u7684","text":"<p>\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u30ed\u30b8\u30c3\u30af\u3092\u542b\u3080\u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p>"},{"location":"quick-start/#_9","title":"\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9","text":"modules/process.py<pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\nimport json\nimport os\n\ndef display_message(message):\n    \"\"\"\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3059\u308b\u88dc\u52a9\u95a2\u6570\"\"\"\n    print(f\"[INFO] {message}\")\n\ndef create_sample_metadata(resource_paths):\n    \"\"\"\u30b5\u30f3\u30d7\u30eb\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\"\"\"\n    metadata = {\n        \"title\": \"Sample Dataset\",\n        \"description\": \"RDEToolKit tutorial sample\",\n        \"created_at\": \"2024-01-01\",\n        \"status\": \"processed\"\n    }\n\n    # \u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\n    metadata_path = os.path.join(resource_paths.tasksupport, \"sample_metadata.json\")\n    with open(metadata_path, 'w', encoding='utf-8') as f:\n        json.dump(metadata, f, ensure_ascii=False, indent=2)\n\n    display_message(f\"\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f: {metadata_path}\")\n\ndef dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"\n    \u30e1\u30a4\u30f3\u306e\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\n\n    Args:\n        srcpaths: \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u60c5\u5831\n        resource_paths: \u51fa\u529b\u30ea\u30bd\u30fc\u30b9\u306e\u30d1\u30b9\u60c5\u5831\n    \"\"\"\n    display_message(\"\u69cb\u9020\u5316\u51e6\u7406\u3092\u958b\u59cb\u3057\u307e\u3059\")\n\n    # \u5165\u529b\u30d1\u30b9\u60c5\u5831\u3092\u8868\u793a\n    display_message(f\"\u5165\u529b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {srcpaths.inputdata}\")\n    display_message(f\"\u51fa\u529b\u30ea\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {resource_paths.root}\")\n\n    # \u30b5\u30f3\u30d7\u30eb\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n    create_sample_metadata(resource_paths)\n\n    # \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u4e00\u89a7\u3092\u8868\u793a\n    if os.path.exists(srcpaths.inputdata):\n        files = os.listdir(srcpaths.inputdata)\n        display_message(f\"\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u6570: {len(files)}\")\n        for file in files:\n            display_message(f\"  - {file}\")\n\n    display_message(\"\u69cb\u9020\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\")\n</code></pre>"},{"location":"quick-start/#_10","title":"\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c","text":"<p><code>modules/process.py</code>\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u3001\u69cb\u9020\u5316\u51e6\u7406\u306e\u30ed\u30b8\u30c3\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"quick-start/#4","title":"4. \u30e1\u30a4\u30f3\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b","text":""},{"location":"quick-start/#_11","title":"\u76ee\u7684","text":"<p>RDEToolKit\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u8d77\u52d5\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p>"},{"location":"quick-start/#_12","title":"\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9","text":"main.py<pre><code>import rdetoolkit\n\nfrom modules import process\n\ndef main():\n    \"\"\"\u30e1\u30a4\u30f3\u5b9f\u884c\u95a2\u6570\"\"\"\n    print(\"=== RDEToolKit \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb ===\")\n\n    # RDE\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\n    result = rdetoolkit.workflows.run(custom_dataset_function=process.dataset)\n\n    # \u7d50\u679c\u3092\u8868\u793a\n    print(\"\\n=== \u51e6\u7406\u7d50\u679c ===\")\n    print(f\"\u5b9f\u884c\u30b9\u30c6\u30fc\u30bf\u30b9: {result}\")\n\n    return result\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"quick-start/#_13","title":"\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c","text":"<p><code>main.py</code>\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u6e96\u5099\u304c\u6574\u3044\u307e\u3059\u3002</p>"},{"location":"quick-start/#5","title":"5. \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b","text":""},{"location":"quick-start/#_14","title":"\u76ee\u7684","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p>"},{"location":"quick-start/#_15","title":"\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9","text":"data/inputdata/sample_data.txt<pre><code>Sample Research Data\n====================\n\nThis is a sample data file for RDEToolKit tutorial.\nCreated: 2024-01-01\nType: Text Data\nStatus: Ready for processing\n</code></pre>"},{"location":"quick-start/#_16","title":"\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c","text":"<p><code>data/inputdata/sample_data.txt</code>\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u3001\u51e6\u7406\u5bfe\u8c61\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u304c\u6e96\u5099\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"quick-start/#6","title":"6. \u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b","text":""},{"location":"quick-start/#_17","title":"\u76ee\u7684","text":"<p>\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067RDE\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3001\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p>"},{"location":"quick-start/#_18","title":"\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9","text":"terminal<pre><code># \u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install -r requirements.txt\n\n# \u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\npython main.py\n</code></pre>"},{"location":"quick-start/#_19","title":"\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c","text":"<p>\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>=== RDEToolKit \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb ===\n[INFO] \u69cb\u9020\u5316\u51e6\u7406\u3092\u958b\u59cb\u3057\u307e\u3059\n[INFO] \u5165\u529b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: /path/to/my-rde-project/data/inputdata\n[INFO] \u51fa\u529b\u30ea\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: /path/to/my-rde-project\n[INFO] \u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f: /path/to/my-rde-project/tasksupport/sample_metadata.json\n[INFO] \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u6570: 1\n[INFO]   - sample_data.txt\n[INFO] \u69cb\u9020\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\n\n=== \u51e6\u7406\u7d50\u679c ===\n\u5b9f\u884c\u30b9\u30c6\u30fc\u30bf\u30b9: {'statuses': [{'run_id': '0000', 'title': 'sample-dataset', 'status': 'success', ...}]}\n</code></pre>"},{"location":"quick-start/#7","title":"7. \u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b","text":""},{"location":"quick-start/#_20","title":"\u76ee\u7684","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u884c\u7d50\u679c\u3068\u30d5\u30a1\u30a4\u30eb\u751f\u6210\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p>"},{"location":"quick-start/#_21","title":"\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9","text":"terminal<pre><code># \u751f\u6210\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u69cb\u9020\u3092\u78ba\u8a8d\nfind . -type f -name \"*.json\" | head -10\n</code></pre>"},{"location":"quick-start/#_22","title":"\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c","text":"<p>\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a - <code>tasksupport/sample_metadata.json</code> - \u4f5c\u6210\u3057\u305f\u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb - <code>raw/</code> \u307e\u305f\u306f <code>nonshared_raw/</code> - \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30d4\u30fc\uff08\u8a2d\u5b9a\u306b\u3088\u308b\uff09</p>"},{"location":"quick-start/#_23","title":"\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01","text":"<p>RDEToolKit\u3092\u4f7f\u7528\u3057\u305f\u6700\u521d\u306e\u69cb\u9020\u5316\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002</p>"},{"location":"quick-start/#_24","title":"\u9054\u6210\u3057\u305f\u3053\u3068","text":"<p>\u2705 RDE\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u57fa\u672c\u69cb\u9020\u3092\u4f5c\u6210 \u2705 \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\u3092\u5b9f\u88c5 \u2705 \u69cb\u9020\u5316\u51e6\u7406\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u5b9f\u884c \u2705 \u51e6\u7406\u7d50\u679c\u306e\u78ba\u8a8d\u65b9\u6cd5\u3092\u7fd2\u5f97</p>"},{"location":"quick-start/#_25","title":"\u5b66\u3093\u3060\u91cd\u8981\u306a\u6982\u5ff5","text":"<ul> <li>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u9020: <code>data/inputdata/</code>, <code>tasksupport/</code>, <code>modules/</code>\u306e\u5f79\u5272</li> <li>\u30ab\u30b9\u30bf\u30e0\u95a2\u6570: <code>RdeInputDirPaths</code>\u3068<code>RdeOutputResourcePath</code>\u306e\u4f7f\u7528\u65b9\u6cd5</li> <li>\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u5b9f\u884c: <code>rdetoolkit.workflows.run()</code>\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9</li> </ul>"},{"location":"quick-start/#_26","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3055\u3089\u306b\u8a73\u3057\u304f\u5b66\u3076\u306b\u306f\uff1a</p> <ol> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5 - \u51e6\u7406\u30d5\u30ed\u30fc\u306e\u8a73\u7d30\u7406\u89e3</li> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb - \u52d5\u4f5c\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5</li> <li>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 - \u5229\u7528\u53ef\u80fd\u306a\u5168\u6a5f\u80fd\u306e\u78ba\u8a8d</li> </ol> <p>\u6b21\u306e\u5b9f\u8df5</p> <p>\u5b9f\u969b\u306e\u7814\u7a76\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3001\u3088\u308a\u8907\u96d1\u306a\u69cb\u9020\u5316\u51e6\u7406\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u306b\u5fdc\u3058\u3066\u3001\u9069\u5207\u306a\u51e6\u7406\u30e2\u30fc\u30c9\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002</p>"},{"location":"api/","title":"API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":""},{"location":"api/#_1","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001RDEToolKit\u306e\u5168\u6a5f\u80fd\u306b\u95a2\u3059\u308b\u6280\u8853\u4ed5\u69d8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8a73\u7d30\u306a\u6a5f\u80fd\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u8fd4\u308a\u5024\u3001\u4f7f\u7528\u4f8b\u3092\u542b\u3080\u5305\u62ec\u7684\u306a\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u3059\u3002</p>"},{"location":"api/#api_1","title":"API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u69cb\u6210","text":"<p>RDEToolKit\u306eAPI\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u65b9\u5f0f\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <ul> <li>\u81ea\u52d5\u751f\u6210\u90e8\u5206: \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306edocstring\u304b\u3089\u751f\u6210\u3055\u308c\u308b\u8a73\u7d30\u306a\u6280\u8853\u4ed5\u69d8</li> <li>\u624b\u52d5\u4f5c\u6210\u90e8\u5206: \u5b9f\u8df5\u7684\u306a\u4f7f\u7528\u4f8b\u3068\u30e2\u30b8\u30e5\u30fc\u30eb\u9593\u306e\u9023\u643a\u65b9\u6cd5</li> </ul>"},{"location":"api/#_2","title":"\u4e3b\u8981\u30e2\u30b8\u30e5\u30fc\u30eb","text":""},{"location":"api/#_3","title":"\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u7ba1\u7406","text":"<ul> <li>workflows - \u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u884c\u3068\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u7ba1\u7406</li> <li>modeproc - \u30e2\u30fc\u30c9\u51e6\u7406</li> </ul>"},{"location":"api/#_4","title":"\u8a2d\u5b9a\u3068\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c","text":"<ul> <li>config - \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u3068\u7ba1\u7406</li> <li>fileops - RDE\u95a2\u9023\u306e\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c</li> </ul>"},{"location":"api/#_5","title":"\u30c7\u30fc\u30bf\u51e6\u7406","text":"<ul> <li>invoicefile - \u9001\u308a\u72b6\u30d5\u30a1\u30a4\u30eb\u306e\u51e6\u7406</li> <li>validation - \u30c7\u30fc\u30bf\u306e\u691c\u8a3c</li> <li>rde2util - RDE\u95a2\u9023\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570</li> </ul>"},{"location":"api/#_6","title":"\u4ee3\u8868\u753b\u50cf\u64cd\u4f5c","text":"<ul> <li>img2thumb - \u753b\u50cf\u3092\u30b5\u30e0\u30cd\u30a4\u30eb\u306b\u5909\u63db</li> </ul>"},{"location":"api/#_7","title":"\u30a8\u30e9\u30fc\u51e6\u7406\u3068\u30ed\u30b0","text":"<ul> <li>rdelogger - \u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd</li> <li>errors - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</li> <li>exceptions - \u4f8b\u5916\u51e6\u7406</li> </ul>"},{"location":"api/#_8","title":"\u30c7\u30fc\u30bf\u30e2\u30c7\u30eb","text":""},{"location":"api/#_9","title":"\u8a2d\u5b9a\u30e2\u30c7\u30eb","text":"<ul> <li>models.config - \u8a2d\u5b9a\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u5b9a\u7fa9</li> </ul>"},{"location":"api/#rde","title":"RDE\u95a2\u9023\u30e2\u30c7\u30eb","text":"<ul> <li>models.rde2types - RDE\u95a2\u9023\u306e\u578b\u5b9a\u7fa9</li> <li>models.invoice - \u9001\u308a\u72b6\u30c7\u30fc\u30bf\u306e\u69cb\u9020</li> <li>models.metadata - \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u7ba1\u7406</li> </ul>"},{"location":"api/#_10","title":"\u51e6\u7406\u7d50\u679c\u30e2\u30c7\u30eb","text":"<ul> <li>\u51e6\u7406\u7d50\u679c\u306e\u7ba1\u7406\u6a5f\u80fd\u306f\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u7d71\u5408\u3055\u308c\u3066\u3044\u307e\u3059</li> </ul>"},{"location":"api/#_11","title":"\u5b9f\u88c5\u30e2\u30b8\u30e5\u30fc\u30eb","text":""},{"location":"api/#_12","title":"\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc","text":"<ul> <li>impl.input_controller - \u5165\u529b\u30e2\u30fc\u30c9\u306e\u7ba1\u7406</li> <li>impl.compressed_controller - \u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u306e\u7ba1\u7406</li> </ul>"},{"location":"api/#_13","title":"\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9","text":"<ul> <li>interface.filechecker - \u30d5\u30a1\u30a4\u30eb\u691c\u8a3c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9</li> </ul>"},{"location":"api/#_14","title":"\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3","text":"<ul> <li>CLI\u30b3\u30de\u30f3\u30c9 - \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u6a5f\u80fd\u306e\u4f7f\u7528\u65b9\u6cd5</li> </ul>"},{"location":"api/#_15","title":"\u4f7f\u7528\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"api/#_16","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":"basic_usage.py<pre><code>import rdetoolkit\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef my_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u3092\u3053\u3053\u306b\u5b9f\u88c5\n    pass\n\n# \u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u884c\nresult = rdetoolkit.workflows.run(custom_dataset_function=my_dataset_function)\n</code></pre>"},{"location":"api/#_17","title":"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u4f7f\u7528","text":"config_usage.py<pre><code>from rdetoolkit.config import parse_config_file\n\n# \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nconfig = parse_config_file()\n\n# \u8a2d\u5b9a\u5024\u306e\u53c2\u7167\nextended_mode = config.system.extended_mode\nsave_raw = config.system.save_raw\n</code></pre>"},{"location":"api/#_18","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0","text":"error_handling.py<pre><code>from rdetoolkit.exceptions import RdeToolkitError\nfrom rdetoolkit import workflows\n\ntry:\n    result = workflows.run(custom_dataset_function=my_function)\nexcept RdeToolkitError as e:\n    print(f\"RDEToolKit \u30a8\u30e9\u30fc: {e}\")\n    print(f\"\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9: {e.error_code}\")\n</code></pre>"},{"location":"api/#api_2","title":"API \u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831","text":"\u30d0\u30fc\u30b8\u30e7\u30f3 \u4e92\u63db\u6027 \u4e3b\u306a\u5909\u66f4\u70b9 1.0.x \u5b89\u5b9a\u7248 \u521d\u671f\u30ea\u30ea\u30fc\u30b9 1.1.x \u5f8c\u65b9\u4e92\u63db \u65b0\u6a5f\u80fd\u8ffd\u52a0 1.2.x \u5f8c\u65b9\u4e92\u63db \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584 <p>API \u306e\u5b89\u5b9a\u6027</p> <p>\u30e1\u30b8\u30e3\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3\u5185\u3067\u306f\u5f8c\u65b9\u4e92\u63db\u6027\u3092\u7dad\u6301\u3057\u307e\u3059\u3002\u7834\u58ca\u7684\u5909\u66f4\u306f\u30e1\u30b8\u30e3\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u6642\u306b\u306e\u307f\u884c\u308f\u308c\u307e\u3059\u3002</p>"},{"location":"api/#_19","title":"\u958b\u767a\u8005\u5411\u3051\u60c5\u5831","text":""},{"location":"api/#_20","title":"\u578b\u30d2\u30f3\u30c8","text":"<p>RDEToolKit\u306f\u5b8c\u5168\u306a\u578b\u30d2\u30f3\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\uff1a</p> type_hints.py<pre><code>from typing import Optional\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef process_data(\n    srcpaths: RdeInputDirPaths,\n    resource_paths: RdeOutputResourcePath,\n    options: Optional[dict] = None\n) -&gt; bool:\n    # \u578b\u5b89\u5168\u306a\u5b9f\u88c5\n    return True\n</code></pre>"},{"location":"api/#_21","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u7279\u5b9a\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8a73\u7d30: \u4e0a\u8a18\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u30ea\u30f3\u30af\u3092\u53c2\u7167</li> <li>\u5b9f\u8df5\u7684\u306a\u4f7f\u7528\u4f8b: \u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9</li> <li>\u958b\u767a\u3078\u306e\u53c2\u52a0: \u958b\u767a\u8005\u30ac\u30a4\u30c9</li> </ul>"},{"location":"contribute/documents_contributing/","title":"Contributing to RDEToolKit","text":""},{"location":"contribute/documents_contributing/#_1","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8","text":"<p>RDEToolKit\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304cRDE\u69cb\u9020\u5316\u51e6\u7406\u3092\u6b63\u3057\u304f\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\u5229\u7528\u8005\u306e\u7686\u69d8\u304b\u3089\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6539\u5584\u306b\u3054\u5354\u529b\u304f\u3060\u3055\u3044\u3002 \u5fc5\u305a\u3057\u3082\u3001RDEToolKit\u3078\u306e\u6df1\u3044\u7406\u89e3\u304c\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u5185\u5bb9\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u3001\u7406\u89e3\u3057\u306b\u304f\u3044\u3068\u3044\u3046\u7b87\u6240\u306f\u3001\u7a4d\u6975\u7684\u306bIssue\u3067\u306e\u5831\u544a\u3092\u304a\u5f85\u3061\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u5177\u4f53\u7684\u306a\u624b\u9806\u306b\u3064\u3044\u3066\u306f\u3001\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u304b\u3089\u8aac\u660e\u3044\u305f\u3057\u307e\u3059\u3002</p>"},{"location":"contribute/documents_contributing/#rdetoolkit","title":"RDEToolKit\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<p>rdetoolkit\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001\u672c\u30ea\u30dd\u30b8\u30c8\u30ea\u306e<code>docs</code>\u30d5\u30a9\u30eb\u30c0\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001MkDocs\u3092\u4f7f\u7528\u3057\u3066\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u69cb\u7bc9\u3057\u3066\u3044\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30b3\u30fc\u30c9\u304c\u9069\u5207\u306b\u6587\u66f8\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4ee5\u4e0b\u306f\u3001\u9069\u5207\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3055\u308c\u305f docstring \u3092\u4f7f\u7528\u3057\u3066\u6587\u66f8\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <ul> <li>\u30e2\u30b8\u30e5\u30fc\u30eb</li> <li>\u30af\u30e9\u30b9\u5b9a\u7fa9</li> <li>\u95a2\u6570\u306e\u5b9a\u7fa9</li> <li>\u30e2\u30b8\u30e5\u30fc\u30eb\u30ec\u30d9\u30eb\u306e\u5909\u6570</li> </ul>"},{"location":"contribute/documents_contributing/#_2","title":"\u6ce8\u610f\u4e8b\u9805","text":"<p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u66f4\u65b0\u306b\u95a2\u3057\u3066\u77e5\u3063\u3066\u304a\u304f\u3079\u304d\u91cd\u8981\u4e8b\u9805\u306b\u3064\u3044\u3066:</p> <ul> <li>rdetoolkit\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001\u30b3\u30fc\u30c9\u81ea\u4f53\u306edocstring\u3068\u3001\u305d\u306e\u4ed6\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e2\u3064\u306b\u5927\u5225\u3055\u308c\u307e\u3059\u3002</li> <li>docstring\u306f\u3001\u5404\u7a2e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5229\u7528\u6cd5\u304c\u8a18\u8f09\u3055\u308c\u3001GitLab CI/CD\u3067\u3001\u81ea\u52d5\u30d3\u30eb\u30c9\u3055\u308c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002</li> <li>docstring\u306f\u3001PEP 257\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u306b\u5f93\u3063\u3066\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3055\u308c\u305fGoogle Style\u306edocstring\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 (\u305d\u306e\u4ed6\u306e\u4f8b\u306b\u3064\u3044\u3066\u306f\u3001\u300cGoogle \u30b9\u30bf\u30a4\u30eb\u306e Python \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u6587\u5b57\u5217\u306e\u4f8b\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002)</li> <li>Google Style\u306e docstring \u3068 pydocstyle lint \u306e\u9593\u3067\u7af6\u5408\u3059\u308b\u5834\u5408\u306f\u3001pydocstyle lint \u306e\u30d2\u30f3\u30c8\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul>"},{"location":"contribute/documents_contributing/#_3","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584\u70b9\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b","text":"<p>\u4ee5\u4e0b\u306eURL\u3088\u308a\u3001RDEToolKit\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3001issue\u3092\u767a\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3053\u306e\u6642\u3001\u30e9\u30d9\u30eb\u306f<code>Type:documentation</code>\u3068\u3044\u3046\u30e9\u30d9\u30eb\u3092\u4ed8\u4e0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>RDEToolKit - github.com</p>"},{"location":"contribute/documents_contributing/#_4","title":"\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u5909\u66f4\u3059\u308b","text":"<p>\u5909\u66f4\u65b9\u6cd5\u306f\u3001\u30ed\u30fc\u30ab\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30d6\u30e9\u30f3\u30c1\u3092\u5909\u66f4\u3057\u3066\u3001\u5909\u66f4\u3092Push\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d6\u30e9\u30f3\u30c1\u540d\u306e\u5148\u982d\u306b<code>docs-***</code>\u3068\u3044\u3046\u63a5\u982d\u8f9e\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>git checkout -b docs-***\n# \u5b9f\u884c\u4f8b\ngit checkout -b docs-install-manual\n</code></pre> <p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u5909\u66f4\u3057\u3001\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306bPush\u3057\u307e\u3059\u3002</p> <pre><code>git add &lt;\u5909\u66f4\u3057\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8&gt;\ngit commit -m \"\u30b3\u30df\u30c3\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\"\ngit push origin &lt;\u5bfe\u8c61\u306e\u30d6\u30e9\u30f3\u30c1\u540d&gt;\n</code></pre>"},{"location":"contribute/documents_contributing/#web","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092Web\u4e0a\u3067\u78ba\u8a8d\u3059\u308b","text":"<p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092Web\u3067\u78ba\u8a8d\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u3066\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"contribute/documents_contributing/#rye","title":"rye\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u308b\u5834\u5408","text":"<pre><code>rye sync\nmkdocs serve\n</code></pre>"},{"location":"contribute/documents_contributing/#rye_1","title":"rye\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u5834\u5408","text":"<pre><code>pip install -r requirements.lock\nmkdocs serve\n</code></pre>"},{"location":"contribute/documents_contributing/#main","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092main\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u3059\u308b","text":"<p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u7ba1\u7406\u8005\u304c\u78ba\u8a8d\u3057\u3001\u554f\u984c\u304c\u306a\u3051\u308c\u3070\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002</p>"},{"location":"contribute/home/","title":"Contributing to RDEToolKit","text":""},{"location":"contribute/home/#_1","title":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306e\u6e96\u5099","text":"<p>RDEToolKit\u3078\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3092\u3057\u3066\u3044\u305f\u3060\u304f\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u304c\u5fc5\u8981\u3067\u3059\u3002</p>"},{"location":"contribute/home/#_2","title":"\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30af\u30ed\u30fc\u30f3\u3092\u30ed\u30fc\u30ab\u30eb\u306b\u4f5c\u6210\u3059\u308b","text":"<pre><code>cd &lt;\u4efb\u610f\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea&gt;\n\n# SSH\ngit clone git@github.com:nims-dpfc/rdetoolkit.git\n# HTTPS\ngit clone https://github.com/nims-dpfc/rdetoolkit.git\n\n# \u30ed\u30fc\u30ab\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u79fb\u52d5\ncd rdetoolkit\n</code></pre>"},{"location":"contribute/home/#_3","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u30c4\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>rdetoolkit\u3067\u306f\u3001<code>rye</code>\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002rye\u306f\u3001Flask\u306e\u4f5c\u8005\u304c\u4f5c\u6210\u3057\u305f\u3001Python\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u95a2\u4fc2\u7ba1\u7406\u30c4\u30fc\u30eb\u3067\u3059\u3002\u5185\u90e8\u5b9f\u88c5\u306fRust\u306e\u305f\u3081\u3001\u975e\u5e38\u306b\u9ad8\u901f\u3067\u3059\u3002poetry\u3092\u9078\u629e\u305b\u305arye\u3092\u63a1\u7528\u3057\u305f\u7406\u7531\u306f\u3001\u52d5\u4f5c\u901f\u5ea6\u306e\u89b3\u70b9\u3068\u3001<code>pyenv</code>\u3092\u5225\u9014\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002rye\u306f\u3001<code>pyenv+poetry</code>\u306e\u3088\u3046\u306b\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306e\u7ba1\u7406\u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u7ba1\u7406\u304c\u7d71\u5408\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u306e\u89b3\u70b9\u304b\u3089\u3082rye\u306e\u65b9\u304c\u512a\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u3061\u3089\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>rye\u306f\u4ee5\u4e0b\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Installation - Rye</p>"},{"location":"contribute/home/#_4","title":"\u958b\u767a\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7","text":"<p>rye\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u958b\u767a\u74b0\u5883\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u304f\u3060\u3055\u3044\u3002<code>rye sync</code>\u3067\u4eee\u60f3\u74b0\u5883\u304c\u4f5c\u6210\u3055\u308c\u3001\u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u4eee\u60f3\u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002</p> <pre><code>cd &lt;rdetoolkit\u306e\u30ed\u30fc\u30ab\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea&gt;\nrye sync\n</code></pre> <p>\u4eee\u60f3\u74b0\u5883\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002</p> <pre><code>source .venv/bin/activate\n</code></pre> <p>\u307e\u305f\u3001RDEToolKit\u3067\u306f\u30b3\u30fc\u30c9\u54c1\u8cea\u306e\u89b3\u70b9\u304b\u3089\u3001<code>pre-commit</code>\u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002pre-commit\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>pre-commit install\n</code></pre> <p>\u3082\u3057\u3001Visaul Stdio Code\u3092\u5229\u7528\u3059\u308b\u969b\u306f\u3001\u62e1\u5f35\u6a5f\u80fd<code>pre-commit</code>\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"contribute/home/#contributing","title":"Contributing","text":"<p>RDEToolKit\u3067\u306f\u3001\u4ee5\u4e0b\u306e2\u70b9\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\u3001\u5909\u66f4\u30fb\u30d0\u30b0\u30ec\u30dd\u30fc\u30c8\u30fb\u6a5f\u80fd\u4fee\u6b63\u3092\u5b9f\u65bd\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8</li> <li>\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8</li> </ul>"},{"location":"contribute/sourcecode_contributing/","title":"Contributing to RDEToolKit","text":""},{"location":"contribute/sourcecode_contributing/#_1","title":"\u6a5f\u80fd\u30d0\u30b0\u30ec\u30dd\u30fc\u30c8\u3068\u6a5f\u80fd\u62e1\u5f35\u306e\u30ea\u30af\u30a8\u30b9\u30c8","text":"<p>\u3053\u306e\u30c4\u30fc\u30eb\u3067\u3001\u65b0\u6a5f\u80fd\u30fb\u5909\u66f4\u30fb\u4e0d\u5177\u5408\u7b49\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u5909\u66f4\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>\u4e0a\u8a18\u30ea\u30dd\u30b8\u30c8\u30ea\u306eissue\u3067\u3001Issue\u3092\u4f5c\u6210\u3057\u65b0\u6a5f\u80fd\u3001\u554f\u984c\u3084\u4e0d\u5177\u5408\u3092\u5831\u544a\u3059\u308b</li> <li>\u5909\u66f4\u3092\u5b9f\u969b\u306b\u52a0\u3048\u308b\u5834\u5408\u3001\u30ed\u30fc\u30ab\u30eb\u3067\u65b0\u898f\u306b\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\u3001\u5909\u66f4\u3092\u52a0\u3048\u308b\u3002</li> <li>CI\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3001\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51fa\u3059</li> <li>CI\u30c6\u30b9\u30c8\u304c\u5168\u3066\u30d1\u30b9\u3001\u30ec\u30d3\u30e5\u30fc\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u30de\u30fc\u30b8\u3059\u308b</li> <li>Release\u30da\u30fc\u30b8\u3092\u4f5c\u6210\u3059\u308b</li> </ul> <p>\u3053\u306e\u624b\u9806\u66f8\u3092\u53c2\u8003\u306b\u3057\u3066\u3001RDEToolKit\u306e\u958b\u767a\u30fb\u5909\u66f4\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u5171\u540c\u958b\u767a\u3092\u5186\u6ed1\u306b\u9032\u3081\u308b\u305f\u3081\u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u3068\u3057\u3066\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"contribute/sourcecode_contributing/#issue","title":"Issue\u3092\u4f5c\u6210\u3059\u308b","text":"<p>\u554f\u984c\u3084\u4e0d\u5177\u5408\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u4ee5\u4e0b\u306eisuue\u3078\u8d77\u7968\u304a\u9858\u3044\u3057\u307e\u3059\u3002\u3053\u306e\u6642\u3001\u30e9\u30d9\u30eb\u306f<code>Type:improvement</code>, <code>Type: new feature</code>\u306e\u3069\u3061\u3089\u304b\u306e\u4ed8\u4e0e\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002</p> <p>https://github.com/nims-dpfc/rdetoolkit/issues</p>"},{"location":"contribute/sourcecode_contributing/#_2","title":"\u30d6\u30e9\u30f3\u30c1\u306e\u4f5c\u6210","text":"<p>\u65b0\u3057\u3044\u6a5f\u80fd\u3084\u4fee\u6b63\u3092\u884c\u3046\u969b\u306f\u3001\u65b0\u3057\u3044\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>\u30d6\u30e9\u30f3\u30c1\u540d\u306e\u63a5\u982d\u8f9e\u306f\u3001<code>develop-v&lt;x.y.z&gt;</code>\u3068\u3044\u3046\u30d6\u30e9\u30f3\u30c1\u304b\u3089\u3001\u672b\u5c3e\u306b\u4efb\u610f\u306e\u6587\u5b57\u5217\u3092\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> <pre><code>git checkout -b develop-v&lt;x.y.z&gt;-&lt;\u4efb\u610f\u306e\u6a5f\u80fd\u540d\u306a\u3069&gt; origin/develop-v&lt;x.y.z&gt;\n</code></pre>"},{"location":"contribute/sourcecode_contributing/#_3","title":"\u65b0\u6a5f\u80fd\u30fb\u4fee\u6b63\u3092\u52a0\u3048\u308b","text":""},{"location":"contribute/sourcecode_contributing/#_4","title":"\u5fc5\u8981\u306a\u30c4\u30fc\u30eb","text":"<ul> <li><code>Python</code> (\u63a8\u5968\u30d0\u30fc\u30b8\u30e7\u30f3: 3.9\u4ee5\u4e0a)</li> <li>rye or Poetry(\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7ba1\u7406\u30c4\u30fc\u30eb)</li> <li><code>git</code> (\u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406)</li> </ul>"},{"location":"contribute/sourcecode_contributing/#_5","title":"\u30b3\u30fc\u30c9\u306e\u30b9\u30bf\u30a4\u30eb\u3068\u8981\u4ef6","text":""},{"location":"contribute/sourcecode_contributing/#pep8","title":"\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04(PEP8)\u306b\u3064\u3044\u3066","text":"<p>\u4e00\u8cab\u3057\u305f\u30b3\u30fc\u30c9\u30b9\u30bf\u30a4\u30eb\u306b\u5f93\u3046\u3053\u3068\u3067\u3001\u30b3\u30fc\u30c9\u3092\u3088\u308a\u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3001RDE\u306e\u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u958b\u767a\u3067\u306f\u3001PEP8(Python Enhance Proposal #8) \u306b\u5f93\u3063\u3066\u958b\u767a\u3092\u884c\u3046\u3002</p>"},{"location":"contribute/sourcecode_contributing/#_6","title":"\u57fa\u672c\u7684\u306b\u5f93\u3046\u898f\u7d04","text":"<p>\u5f15\u7528: PEP 8 \u2013 Style Guide for Python Code / Python Enhancement Proposals \u53c2\u8003: Python \u30b3\u30fc\u30c9\u306e\u30b9\u30bf\u30a4\u30eb\u30ac\u30a4\u30c9 - pep8-ja</p>"},{"location":"contribute/sourcecode_contributing/#_7","title":"\u7a7a\u767d","text":"<p>Python\u306f\u7a7a\u767d\u304c\u69cb\u6587\u4e0a\u610f\u5473\u3092\u6301\u3061\u307e\u3059\u3002Python\u4f7f\u3046\u5834\u5408\u3001\u7a7a\u767d\u306e\u52b9\u679c\u3068\u305d\u306e\u5f71\u97ff\u306b\u7279\u306b\u610f\u8b58\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u65b9\u304c\u3044\u3044\u3067\u3059\u3002</p> <ul> <li>\u30a4\u30f3\u30c7\u30f3\u30c8\u306b\u306f\u3001\u30bf\u30d6\u3067\u306f\u306a\u304f\u7a7a\u767d\u3092\u4f7f\u3046</li> <li>\u69cb\u6587\u4e0a\u610f\u5473\u3092\u6301\u3064\u30ec\u30d9\u30eb\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u306b\u306f\u30014\u500b\u306e\u7a7a\u767d\u3092\u4f7f\u3046</li> <li>\u5404\u884c\u306e\u9577\u3055\u304c~~79\u6587\u5b57\u304b\u305d\u308c\u4ee5\u4e0b\u3068\u3059\u308b~~ -&gt; \u4e0a\u9650\u306a\u3057\u3002</li> <li>\u9577\u3044\u5f0f\u3092\u7d9a\u3051\u308b\u305f\u3081\u306b\u306b\u6b21\u306e\u884c\u3092\u4f7f\u3046\u6642\u3001\u901a\u5e38\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u304b\u30894\u500b\u306e\u8ffd\u52a0\u7a7a\u767d\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30c7\u30f3\u30c8\u3059\u308b\u3002</li> <li>\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u3001\u95a2\u6570\u3068\u30af\u30e9\u30b9\u306f\u3001\u7a7a\u767d2\u884c\u3067\u5206\u3051\u308b\u3002</li> <li>\u30af\u30e9\u30b9\u3067\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u7a7a\u767d\u884c\u3067\u5206\u3051\u308b\u3002</li> <li>\u8f9e\u66f8\u3067\u306f\u3001\u30ad\u30fc\u3068\u30b3\u30ed\u30f3(<code>:</code>)\u306e\u9593\u306b\u306f\u7a7a\u767d\u3092\u304a\u304b\u305a\u306b\u3001\u540c\u3058\u884c\u306b\u5024\u3092\u66f8\u304f\u5834\u5408\u306b\u306f\u5024\u306e\u524d\u306b\u7a7a\u767d\u30921\u3064\u7f6e\u304f\u3002</li> <li>\u5909\u6570\u4ee3\u5165\u306e\u524d\u5f8c\u306b\u306f\u3001\u7a7a\u767d\u30921\u3064\u3001\u5fc5\u305a1\u3064\u3060\u3051\u304a\u304f</li> <li>\u578b\u30d2\u30f3\u30c8(\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3)\u3067\u306f\u3001\u5909\u6570\u540d\u306e\u76f4\u5f8c\u306b\u30b3\u30ed\u30f3\u3092\u304a\u304d\u3001\u578b\u60c5\u5831\u306e\u524d\u306b\u7a7a\u767d\u30921\u3064\u304a\u304f</li> </ul>"},{"location":"contribute/sourcecode_contributing/#_8","title":"\u540d\u524d\u4ed8\u3051","text":"<p>PEP8\u306f\u3001\u8a00\u8a9e\u306e\u7570\u306a\u308b\u7b87\u6240\u3054\u3068\u306b\u4ed6\u3068\u7570\u306a\u308b\u30b9\u30bf\u30a4\u30eb\u3092\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002</p> <ul> <li>\u95a2\u6570\u3001\u5909\u6570\u3001\u5c5e\u6027\u306f\u3001<code>lowercase_underscore</code>\u306e\u3088\u3046\u306b\u5c0f\u6587\u5b57\u3067\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3092\u631f\u3080</li> <li>\u30d7\u30ed\u30c6\u30af\u30c6\u30c3\u30c9\u5c5e\u6027\u306f\u3001_leading_underscore\u306e\u3088\u3046\u306b\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3092\u5148\u982d\u306b\u3064\u3051\u308b</li> <li>\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u5c5e\u6027\u306f\u3001__double_underscore\u306e\u3088\u3046\u306b\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u30922\u3064\u5148\u982d\u306b\u3064\u3051\u308b</li> <li>\u30af\u30e9\u30b9\u3068\u4f8b\u5916\u306f\u3001<code>CapitalizedWord</code>\u306e\u3088\u3046\u306b\u5148\u982d\u3092\u5927\u6587\u5b57\u306b\u3059\u308b</li> <li>\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306e\u5b9a\u6570\u306f\u3001ALL_CAPS\u306e\u3088\u3046\u306b\u5168\u3066\u5927\u6587\u5b57\u3067\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3067\u631f\u3080</li> <li>\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306f\u3001(\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3059\u308b)\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u540d\u524d\u306b<code>self</code>\u3092\u4f7f\u3046\u3002</li> <li>\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u306f\u3001(\u30af\u30e9\u30b9\u3092\u53c2\u7167\u3059\u308b)\u7b2c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u540d\u524d\u306b<code>cls</code>\u3092\u4f7f\u3046\u3002</li> </ul>"},{"location":"contribute/sourcecode_contributing/#_9","title":"\u5f0f\u3068\u6587","text":"<ul> <li>\u5f0f\u306e\u5426\u5b9a(<code>if not a is b</code>)\u3067\u306f\u306a\u304f\u3001\u5185\u5074\u306e\u9805\u306e\u5426\u5b9a(<code>if a is not b</code>)\u3092\u4f7f\u3046</li> <li>\u30b3\u30f3\u30c6\u30ca\u3084\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9577\u3055(<code>if len(somelist) == 0</code>)\u3092\u4f7f\u3063\u3066\u3001\u7a7a\u5024(<code>[]</code>\u3084<code>''</code>\u306a\u3069)\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\u3002<code>if not somelist</code>\u3092\u4f7f\u3063\u3066\u3001\u7a7a\u5024\u304c\u6697\u9ed9\u306b<code>False</code>\u3068\u8a55\u4fa1\u3055\u308c\u308b\u3053\u3068\u3092\u4f7f\u3046\u3002</li> <li>\u4e0a\u3068\u540c\u3058\u3053\u3068\u3092\u3001\u975e\u7a7a\u5024(<code>[1]</code>\u3084<code>hi</code>\u306a\u3069)\u306b\u3082\u4f7f\u3046\u3002\u975e\u7a7a\u5024\u306b\u3064\u3044\u3066\u3001<code>if somelist</code>\u306f\u3001\u6697\u9ed9\u7684\u306b<code>True</code>\u3068\u8a55\u4fa1\u3055\u308c\u308b\u3002</li> <li><code>if</code>, <code>for</code>, <code>while</code>\u30eb\u30fc\u30d7\u3001<code>except</code>\u8907\u5408\u6587\u30921\u884c\u3067\u66f8\u304b\u306a\u3044\u3002\u660e\u78ba\u306b\u306a\u308b\u3088\u3046\u306b\u8907\u6570\u884c\u306b\u3059\u308b\u3002</li> <li>\u5f0f\u304c1\u884c\u306b\u53ce\u307e\u3089\u306a\u3044\u5834\u5408\u306f\u3001\u62ec\u5f27\u3067\u62ec\u3063\u3066\u3001\u8907\u6570\u884c\u306b\u3057\u3066\u3001\u8aad\u307f\u3084\u3059\u3044\u3088\u3046\u306b\u30a4\u30f3\u30c7\u30f3\u30c8\u3059\u308b\u3002</li> <li><code>\\</code>\u3067\u884c\u308f\u3051\u3059\u308b\u3088\u308a\u306f\u3001\u62ec\u5f27\u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u5f0f\u3092\u56f2\u3080\u65b9\u304c\u826f\u3044\u3002</li> </ul>"},{"location":"contribute/sourcecode_contributing/#import","title":"import","text":"<ul> <li><code>import</code>\u6587\u306f\u3001(<code>from x import y</code>\u3082\u542b\u3081\u3066)\u5e38\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u7f6e\u304f\u3002</li> <li>\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3068\u304d\u306f\u3001\u5e38\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u7d76\u5bfe\u540d\u3092\u4f7f\u3044\u3001\u73fe\u30e2\u30b8\u30e5\u30fc\u30eb\u30d1\u30b9\u304b\u3089\u306e\u76f8\u5bfe\u540d\u3092\u4f7f\u308f\u306a\u3044\u3002\u4f8b\u3048\u3070\u3001\u30e2\u30b8\u30e5\u30fc\u30eb<code>foo</code>\u3092\u30d1\u30c3\u30b1\u30fc\u30b8<code>bar</code>\u304b\u3089\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u6642\u306f\u3001<code>import foo</code>\u3067\u306f\u306a\u304f\u3001<code>from bar import foo</code>\u3092\u4f7f\u3046\u3002</li> <li>\u76f8\u5bfe\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u6642\u306b\u306f\u3001\u660e\u793a\u7684\u306a\u69cb\u6587<code>from . import foo</code> \u3092\u4f7f\u3046\u3002</li> <li>\u30a4\u30f3\u30dd\u30fc\u30c8\u306f\u30011.\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30e2\u30b8\u30e5\u30fc\u30eb\u30012.\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30e2\u30b8\u30e5\u30fc\u30eb\u30013.\u81ea\u5206\u306e\u4f5c\u6210\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u9806\u306b\u884c\u3046\u3002\u305d\u308c\u305e\u308c\u306e\u90e8\u5206\u3067\u306f\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b</li> </ul>"},{"location":"contribute/sourcecode_contributing/#rdetoolkit","title":"RDEToolKit\u3067\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\u30fb\u30ea\u30f3\u30bf\u30fc\u306b\u3064\u3044\u3066","text":"<p>RDEToolKit\u3067\u306f\u3001<code>Ruff</code>\u3068<code>mypy</code>\u3092\u4f7f\u7528\u3057\u3066\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3001\u30ea\u30f3\u30bf\u30fc\u3092\u52d5\u4f5c\u3055\u305b\u3066\u30b3\u30fc\u30c9\u54c1\u8cea\u3092\u4e00\u5b9a\u306b\u4fdd\u3064\u3053\u3068\u3092\u76ee\u6a19\u3068\u3057\u3066\u3044\u307e\u3059\u3002<code>Ruff</code>\u306f\u3001isort, black, flake8\u306e\u6a5f\u80fd\u306b\u5909\u308f\u308b\u30c4\u30fc\u30eb\u3067\u3059\u3002Rust\u3067\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001isort, black, flake8\u3067\u52d5\u4f5c\u3055\u305b\u308b\u3088\u308a\u6bb5\u9055\u3044\u306b\u9ad8\u901f\u3067\u3059\u3002\u307e\u305f\u3001<code>mypy</code>\u306f\u3001\u9759\u7684\u578b\u30c1\u30a7\u30c3\u30af\u30c4\u30fc\u30eb\u3067\u3059\u3002RDEToolKit\u306f\u578b\u306e\u8a73\u7d30\u306a\u5b9a\u7fa9\u3092\u5f37\u5236\u3059\u308b\u3053\u3068\u3067\u3001\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u3068\u4fdd\u5b88\u6027\u306e\u5411\u4e0a\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p> <ul> <li>Ruff: https://docs.astral.sh/ruff/</li> <li>mypy: https://mypy.readthedocs.io/en/stable/</li> </ul>"},{"location":"contribute/sourcecode_contributing/#_10","title":"\u30c6\u30b9\u30c8\u306e\u5b9f\u884c","text":"<p>\u5909\u66f4\u3092\u884c\u3063\u305f\u5f8c\u306f\u3001\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3066\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>tox\n</code></pre>"},{"location":"contribute/sourcecode_contributing/#_11","title":"\u30b3\u30df\u30c3\u30c8\u3068\u30d7\u30c3\u30b7\u30e5","text":"<p>\u5909\u66f4\u3092\u30b3\u30df\u30c3\u30c8\u3057\u3001\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30d7\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002</p> <pre><code>git add .\ngit commit -m \"#[issue\u756a\u53f7] [\u5909\u66f4\u5185\u5bb9\u306e\u7c21\u5358\u306a\u8aac\u660e]\"\ngit push origin develop-v&lt;x.y.z&gt;-&lt;\u5148\u307b\u3069\u3064\u3051\u305f\u540d\u79f0&gt;\n</code></pre> <p>\u3082\u3057\u3001pre-commit\u306e\u30c1\u30a7\u30c3\u30af\u3067\u30b3\u30df\u30c3\u30c8\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u5168\u3066\u306e\u30a8\u30e9\u30fc\u3092\u89e3\u6d88\u3057\u305f\u4e0a\u3067\u30b3\u30df\u30c3\u30c8\u3092\u304a\u9858\u3044\u3057\u307e\u3059\u3002</p>"},{"location":"contribute/sourcecode_contributing/#pull-request","title":"\u5909\u66f4\u30ea\u30af\u30a8\u30b9\u30c8 (Pull Request)","text":"<p> \u3053\u306e\u6642\u3001<code>main</code>\u30d6\u30e9\u30f3\u30c1\u306b\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3057\u3066\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002</p> <p>\u5909\u66f4\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001GitHub\u7b49\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u4f7f\u7528\u3057\u3066\u5909\u66f4\u30ea\u30af\u30a8\u30b9\u30c8 (PR) \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u3053\u306e\u6642\u3001\u30ec\u30d3\u30e5\u30fc\u3092\u53d7\u3051\u3001\u5fc5\u305aCI\u30c6\u30b9\u30c8\u304c\u5168\u3066\u30d1\u30b9\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u3082\u3057\u3001CI\u4e0a\u306e\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3057\u306a\u3044\u5834\u5408\u3001\u5168\u3066\u306e\u30a8\u30e9\u30fc\u3092\u89e3\u6d88\u3057\u305f\u4e0a\u3067\u3001\u30ec\u30d3\u30e5\u30fc\u306e\u4f9d\u983c\u3092\u767a\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"contribute/sourcecode_contributing/#_12","title":"\u30de\u30fc\u30b8","text":"<p>\u30ec\u30d3\u30e5\u30fc\u304c\u5b8c\u4e86\u3057\u3001\u554f\u984c\u304c\u306a\u3044\u3068\u5224\u65ad\u3055\u308c\u305f\u3089\u3001\u5bfe\u8c61\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002</p> <p>\u307e\u305f\u3001\u5168\u3066\u306e\u958b\u767a\u304cfix\u3057\u305f\u3089\u3001main\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u3057\u3066\u304f\u3060\u3055\u3044\u3002main\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\u5f8c\u3001\u30c7\u30d7\u30ed\u30a4\u304c\u6b63\u3057\u304f\u5b9f\u884c\u3067\u304d\u305f\u3089\u3001tag\u306e\u4f5c\u6210\u3068Release\u30da\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Release\u30da\u30fc\u30b8: https://github.com/nims-dpfc/rdetoolkit/releases</p>"},{"location":"development/contributing/","title":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u65b9\u6cd5","text":""},{"location":"development/contributing/#_2","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001RDEToolKit\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u52b9\u679c\u7684\u306b\u8ca2\u732e\u3059\u308b\u305f\u3081\u306e\u5177\u4f53\u7684\u306a\u624b\u9806\u3068\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u521d\u56de\u8ca2\u732e\u8005\u304b\u3089\u7d4c\u9a13\u8c4a\u5bcc\u306a\u958b\u767a\u8005\u307e\u3067\u3001\u5168\u3066\u306e\u65b9\u304c\u5186\u6ed1\u306b\u8ca2\u732e\u3067\u304d\u308b\u3088\u3046\u8a73\u7d30\u306a\u60c5\u5831\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"development/contributing/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<p>\u8ca2\u732e\u3092\u958b\u59cb\u3059\u308b\u524d\u306b\u3001\u4ee5\u4e0b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>GitHub \u30a2\u30ab\u30a6\u30f3\u30c8: \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4f5c\u6210\u306b\u5fc5\u8981</li> <li>Git \u306e\u57fa\u672c\u77e5\u8b58: \u30d6\u30e9\u30f3\u30c1\u64cd\u4f5c\u3001\u30b3\u30df\u30c3\u30c8\u3001\u30d7\u30c3\u30b7\u30e5</li> <li>Python \u958b\u767a\u7d4c\u9a13: \u57fa\u672c\u7684\u306aPython\u77e5\u8b58</li> <li>\u958b\u767a\u74b0\u5883: \u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9\u304c\u5b8c\u4e86\u6e08\u307f</li> </ul>"},{"location":"development/contributing/#_4","title":"\u624b\u9806","text":""},{"location":"development/contributing/#1","title":"1. \u8ca2\u732e\u3059\u308b\u5185\u5bb9\u3092\u6c7a\u5b9a\u3059\u308b","text":""},{"location":"development/contributing/#issue","title":"Issue \u306e\u78ba\u8a8d","text":"<p>\u65e2\u5b58\u306eIssue\u304b\u3089\u4f5c\u696d\u3092\u9078\u629e\u3059\u308b\u304b\u3001\u65b0\u3057\u3044Issue\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> terminal<pre><code># \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u6700\u65b0\u72b6\u614b\u3092\u53d6\u5f97\ngit fetch origin\ngit checkout main\ngit pull origin main\n</code></pre>"},{"location":"development/contributing/#_5","title":"\u8ca2\u732e\u306e\u7a2e\u985e","text":"\u7a2e\u985e \u8aac\u660e \u30e9\u30d9\u30eb \u30d0\u30b0\u4fee\u6b63 \u65e2\u5b58\u6a5f\u80fd\u306e\u554f\u984c\u89e3\u6c7a <code>bug</code> \u65b0\u6a5f\u80fd \u6a5f\u80fd\u8ffd\u52a0\u3084\u62e1\u5f35 <code>enhancement</code> \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584 <code>documentation</code> \u30c6\u30b9\u30c8 \u30c6\u30b9\u30c8\u306e\u8ffd\u52a0\u3084\u6539\u5584 <code>testing</code> <p>\u521d\u56de\u8ca2\u732e\u8005\u5411\u3051</p> <p><code>good first issue</code> \u30e9\u30d9\u30eb\u306e\u4ed8\u3044\u305fIssue\u304b\u3089\u59cb\u3081\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p>"},{"location":"development/contributing/#2","title":"2. \u958b\u767a\u30d6\u30e9\u30f3\u30c1\u3092\u4f5c\u6210\u3059\u308b","text":""},{"location":"development/contributing/#_6","title":"\u30d6\u30e9\u30f3\u30c1\u547d\u540d\u898f\u5247","text":"terminal<pre><code># \u6a5f\u80fd\u8ffd\u52a0\u306e\u5834\u5408\ngit checkout -b feature/issue-123-add-new-validator\n\n# \u30d0\u30b0\u4fee\u6b63\u306e\u5834\u5408\ngit checkout -b bugfix/issue-456-fix-config-parsing\n\n# \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u66f4\u65b0\u306e\u5834\u5408\ngit checkout -b docs/issue-789-update-api-reference\n</code></pre>"},{"location":"development/contributing/#_7","title":"\u30d6\u30e9\u30f3\u30c1\u540d\u306e\u69cb\u6210\u8981\u7d20","text":"<ul> <li>\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9: <code>feature/</code>, <code>bugfix/</code>, <code>docs/</code></li> <li>Issue\u756a\u53f7: <code>issue-123</code></li> <li>\u7c21\u6f54\u306a\u8aac\u660e: <code>add-new-validator</code></li> </ul>"},{"location":"development/contributing/#3","title":"3. \u958b\u767a\u3092\u5b9f\u884c\u3059\u308b","text":""},{"location":"development/contributing/#_8","title":"\u30b3\u30fc\u30c9\u5909\u66f4","text":"example_contribution.py<pre><code>from typing import List, Optional\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\n\ndef validate_input_files(srcpaths: RdeInputDirPaths) -&gt; List[str]:\n    \"\"\"\n    \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u59a5\u5f53\u6027\u3092\u691c\u8a3c\u3059\u308b\n\n    Args:\n        srcpaths: \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u60c5\u5831\n\n    Returns:\n        \u691c\u8a3c\u30a8\u30e9\u30fc\u306e\u30ea\u30b9\u30c8\uff08\u7a7a\u306e\u5834\u5408\u306f\u59a5\u5f53\uff09\n\n    Example:\n        &gt;&gt;&gt; errors = validate_input_files(srcpaths)\n        &gt;&gt;&gt; if not errors:\n        ...     print(\"All files are valid\")\n    \"\"\"\n    errors = []\n\n    # \u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5b58\u5728\u78ba\u8a8d\n    if not srcpaths.inputdata.exists():\n        errors.append(\"Input data directory does not exist\")\n\n    # \u30d5\u30a1\u30a4\u30eb\u6570\u306e\u78ba\u8a8d\n    if srcpaths.inputdata.exists():\n        files = list(srcpaths.inputdata.glob(\"*\"))\n        if len(files) == 0:\n            errors.append(\"No input files found\")\n\n    return errors\n</code></pre>"},{"location":"development/contributing/#_9","title":"\u30c6\u30b9\u30c8\u306e\u8ffd\u52a0","text":"test_contribution.py<pre><code>import pytest\nfrom pathlib import Path\nfrom rdetoolkit.validation import validate_input_files\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\n\nclass TestValidateInputFiles:\n    def test_valid_directory_with_files(self, tmp_path):\n        \"\"\"\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u6709\u52b9\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30c6\u30b9\u30c8\"\"\"\n        # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n        input_dir = tmp_path / \"inputdata\"\n        input_dir.mkdir()\n        (input_dir / \"test_file.txt\").write_text(\"test content\")\n\n        srcpaths = RdeInputDirPaths(inputdata=input_dir)\n\n        # \u30c6\u30b9\u30c8\u5b9f\u884c\n        errors = validate_input_files(srcpaths)\n\n        # \u691c\u8a3c\n        assert errors == []\n\n    def test_missing_directory(self, tmp_path):\n        \"\"\"\u5b58\u5728\u3057\u306a\u3044\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30c6\u30b9\u30c8\"\"\"\n        input_dir = tmp_path / \"nonexistent\"\n        srcpaths = RdeInputDirPaths(inputdata=input_dir)\n\n        errors = validate_input_files(srcpaths)\n\n        assert \"Input data directory does not exist\" in errors\n\n    def test_empty_directory(self, tmp_path):\n        \"\"\"\u7a7a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30c6\u30b9\u30c8\"\"\"\n        input_dir = tmp_path / \"inputdata\"\n        input_dir.mkdir()\n\n        srcpaths = RdeInputDirPaths(inputdata=input_dir)\n\n        errors = validate_input_files(srcpaths)\n\n        assert \"No input files found\" in errors\n</code></pre>"},{"location":"development/contributing/#4","title":"4. \u54c1\u8cea\u30c1\u30a7\u30c3\u30af\u3092\u5b9f\u884c\u3059\u308b","text":""},{"location":"development/contributing/#_10","title":"\u81ea\u52d5\u30c1\u30a7\u30c3\u30af\u306e\u5b9f\u884c","text":"terminal<pre><code># \u5168\u3066\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5b9f\u884c\nrye test\nrye lint\nrye fmt\n\n# \u500b\u5225\u30c1\u30a7\u30c3\u30af\npytest tests/test_contribution.py -v\nmypy src/rdetoolkit/validation.py\nblack src/rdetoolkit/validation.py\n</code></pre>"},{"location":"development/contributing/#pre-commit","title":"pre-commit \u306e\u5b9f\u884c","text":"terminal<pre><code># pre-commit\u30d5\u30c3\u30af\u306e\u624b\u52d5\u5b9f\u884c\npre-commit run --all-files\n\n# \u7279\u5b9a\u306e\u30d5\u30c3\u30af\u306e\u307f\u5b9f\u884c\npre-commit run black --all-files\npre-commit run mypy --all-files\n</code></pre>"},{"location":"development/contributing/#5","title":"5. \u30b3\u30df\u30c3\u30c8\u3068\u30d7\u30c3\u30b7\u30e5\u3092\u884c\u3046","text":""},{"location":"development/contributing/#_11","title":"\u30b3\u30df\u30c3\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u898f\u5247","text":"terminal<pre><code># \u6a5f\u80fd\u8ffd\u52a0\ngit commit -m \"feat: add input file validation function\n\n- Add validate_input_files function to check directory existence\n- Add comprehensive test cases for validation scenarios\n- Update documentation with usage examples\n\nCloses #123\"\n\n# \u30d0\u30b0\u4fee\u6b63\ngit commit -m \"fix: resolve config parsing error for YAML files\n\n- Fix YAML parsing issue when file contains special characters\n- Add error handling for malformed YAML files\n- Update tests to cover edge cases\n\nFixes #456\"\n</code></pre>"},{"location":"development/contributing/#_12","title":"\u30b3\u30df\u30c3\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u69cb\u6210","text":"<ul> <li>\u30bf\u30a4\u30d7: <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>test</code>, <code>refactor</code></li> <li>\u8aac\u660e: \u5909\u66f4\u5185\u5bb9\u306e\u7c21\u6f54\u306a\u8aac\u660e</li> <li>\u8a73\u7d30: \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8a73\u7d30\u306a\u8aac\u660e</li> <li>Issue\u53c2\u7167: <code>Closes #123</code>, <code>Fixes #456</code></li> </ul>"},{"location":"development/contributing/#6","title":"6. \u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b","text":""},{"location":"development/contributing/#_13","title":"\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8","text":"pull_request_template.md<pre><code>## \u6982\u8981\n\u3053\u306e\u5909\u66f4\u306e\u76ee\u7684\u3068\u5185\u5bb9\u3092\u7c21\u6f54\u306b\u8aac\u660e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u5909\u66f4\u5185\u5bb9\n- [ ] \u65b0\u6a5f\u80fd\u306e\u8ffd\u52a0\n- [ ] \u30d0\u30b0\u306e\u4fee\u6b63\n- [ ] \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u66f4\u65b0\n- [ ] \u30c6\u30b9\u30c8\u306e\u8ffd\u52a0\n- [ ] \u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n\n## \u30c6\u30b9\u30c8\n- [ ] \u65e2\u5b58\u306e\u30c6\u30b9\u30c8\u304c\u5168\u3066\u901a\u904e\u3059\u308b\n- [ ] \u65b0\u3057\u3044\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3057\u305f\n- [ ] \u624b\u52d5\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u305f\n\n## \u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8\n- [ ] \u30b3\u30fc\u30c9\u304c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30bf\u30a4\u30eb\u30ac\u30a4\u30c9\u306b\u6e96\u62e0\u3057\u3066\u3044\u308b\n- [ ] \u81ea\u5df1\u30ec\u30d3\u30e5\u30fc\u3092\u5b9f\u884c\u3057\u305f\n- [ ] \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u66f4\u65b0\u3057\u305f\n- [ ] \u5909\u66f4\u304cbreaking change\u3092\u542b\u307e\u306a\u3044\n\n## \u95a2\u9023Issue\nCloses #123\n</code></pre>"},{"location":"development/contributing/#_14","title":"\u30ec\u30d3\u30e5\u30fc\u30d7\u30ed\u30bb\u30b9","text":"<ol> <li>\u81ea\u52d5\u30c1\u30a7\u30c3\u30af: CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u901a\u904e</li> <li>\u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc: \u30e1\u30f3\u30c6\u30ca\u30fc\u306b\u3088\u308b\u30ec\u30d3\u30e5\u30fc</li> <li>\u4fee\u6b63\u5bfe\u5fdc: \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306b\u57fa\u3065\u304f\u4fee\u6b63</li> <li>\u30de\u30fc\u30b8: \u627f\u8a8d\u5f8c\u306e\u30de\u30fc\u30b8</li> </ol>"},{"location":"development/contributing/#_15","title":"\u7d50\u679c\u306e\u78ba\u8a8d","text":""},{"location":"development/contributing/#cicd","title":"CI/CD \u306e\u78ba\u8a8d","text":"terminal<pre><code># GitHub Actions \u306e\u72b6\u6cc1\u78ba\u8a8d\ngh pr checks\n\n# \u7279\u5b9a\u306e\u30c1\u30a7\u30c3\u30af\u306e\u8a73\u7d30\u78ba\u8a8d\ngh run view --log\n</code></pre>"},{"location":"development/contributing/#_16","title":"\u30ec\u30d3\u30e5\u30fc\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3078\u306e\u5bfe\u5fdc","text":"terminal<pre><code># \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306b\u57fa\u3065\u304f\u4fee\u6b63\ngit add .\ngit commit -m \"fix: address review feedback\n\n- Update function documentation\n- Add missing type hints\n- Fix test assertion logic\"\n\ngit push origin feature/issue-123-add-new-validator\n</code></pre>"},{"location":"development/contributing/#_17","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"development/contributing/#_18","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5","text":""},{"location":"development/contributing/#_19","title":"\u30c6\u30b9\u30c8\u306e\u5931\u6557","text":"terminal<pre><code># \u8a73\u7d30\u306a\u30c6\u30b9\u30c8\u7d50\u679c\u306e\u78ba\u8a8d\npytest -v --tb=long\n\n# \u7279\u5b9a\u306e\u30c6\u30b9\u30c8\u306e\u307f\u5b9f\u884c\npytest tests/test_contribution.py::TestValidateInputFiles::test_valid_directory_with_files -v\n</code></pre>"},{"location":"development/contributing/#_20","title":"\u30ea\u30f3\u30c8\u30a8\u30e9\u30fc","text":"terminal<pre><code># \u81ea\u52d5\u4fee\u6b63\u53ef\u80fd\u306a\u30a8\u30e9\u30fc\u306e\u4fee\u6b63\nblack src/\nisort src/\n\n# \u624b\u52d5\u4fee\u6b63\u304c\u5fc5\u8981\u306a\u30a8\u30e9\u30fc\u306e\u78ba\u8a8d\nflake8 src/\npylint src/\n</code></pre>"},{"location":"development/contributing/#_21","title":"\u30de\u30fc\u30b8\u30b3\u30f3\u30d5\u30ea\u30af\u30c8","text":"terminal<pre><code># \u6700\u65b0\u306emain\u30d6\u30e9\u30f3\u30c1\u3092\u53d6\u5f97\ngit fetch origin\ngit checkout main\ngit pull origin main\n\n# \u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30d6\u30e9\u30f3\u30c1\u306b\u30de\u30fc\u30b8\ngit checkout feature/issue-123-add-new-validator\ngit merge main\n\n# \u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u3092\u89e3\u6c7a\u5f8c\ngit add .\ngit commit -m \"resolve merge conflicts with main\"\ngit push origin feature/issue-123-add-new-validator\n</code></pre>"},{"location":"development/contributing/#_22","title":"\u95a2\u9023\u60c5\u5831","text":"<p>\u8ca2\u732e\u306b\u95a2\u3059\u308b\u8a73\u7d30\u60c5\u5831\uff1a</p> <ul> <li>\u958b\u767a\u8005\u30ac\u30a4\u30c9 - \u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9</li> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4f5c\u6210 - \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u8ca2\u732e\u306e\u65b9\u6cd5</li> <li>GitHub Issues - \u4f5c\u696d\u53ef\u80fd\u306a\u30bf\u30b9\u30af</li> </ul> <p>\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30b5\u30dd\u30fc\u30c8</p> <p>\u8cea\u554f\u3084\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u308c\u3070\u3001GitHub Discussions\u3067\u6c17\u8efd\u306b\u76f8\u8ac7\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"development/docs/","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4f5c\u6210\u65b9\u6cd5","text":""},{"location":"development/docs/#_2","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001RDEToolKit\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4f5c\u6210\u30fb\u66f4\u65b0\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u591a\u8a00\u8a9e\u5bfe\u5fdc\u3001\u69cb\u9020\u5316\u3055\u308c\u305f\u57f7\u7b46\u3001\u54c1\u8cea\u4fdd\u8a3c\u306e\u624b\u9806\u3092\u542b\u3080\u5305\u62ec\u7684\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4f5c\u6210\u30d7\u30ed\u30bb\u30b9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"development/docs/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4f5c\u6210\u3092\u958b\u59cb\u3059\u308b\u524d\u306b\u3001\u4ee5\u4e0b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u958b\u767a\u74b0\u5883: \u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9\u304c\u5b8c\u4e86\u6e08\u307f</li> <li>MkDocs\u77e5\u8b58: \u57fa\u672c\u7684\u306aMarkdown\u3068MkDocs\u306e\u7406\u89e3</li> <li>\u591a\u8a00\u8a9e\u5bfe\u5fdc: \u65e5\u672c\u8a9e\u3068\u82f1\u8a9e\u3067\u306e\u57f7\u7b46\u80fd\u529b</li> </ul>"},{"location":"development/docs/#_4","title":"\u624b\u9806","text":""},{"location":"development/docs/#1","title":"1. \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u69cb\u9020\u3092\u7406\u89e3\u3059\u308b","text":""},{"location":"development/docs/#_5","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.ja.md, index.en.md\n\u251c\u2500\u2500 installation.ja.md, installation.en.md\n\u251c\u2500\u2500 quick-start.ja.md, quick-start.en.md\n\u251c\u2500\u2500 user-guide/\n\u2502   \u251c\u2500\u2500 index.ja.md, index.en.md\n\u2502   \u251c\u2500\u2500 structured-processing.ja.md, structured-processing.en.md\n\u2502   \u251c\u2500\u2500 config.ja.md, config.en.md\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 index.ja.md, index.en.md\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 development/\n    \u251c\u2500\u2500 index.ja.md, index.en.md\n    \u251c\u2500\u2500 contributing.ja.md, contributing.en.md\n    \u2514\u2500\u2500 docs.ja.md, docs.en.md\n</code></pre>"},{"location":"development/docs/#_6","title":"\u30d5\u30a1\u30a4\u30eb\u547d\u540d\u898f\u5247","text":"<ul> <li>\u65e5\u672c\u8a9e\u7248: <code>[filename].ja.md</code></li> <li>\u82f1\u8a9e\u7248: <code>[filename].en.md</code></li> <li>\u30da\u30a2\u30d5\u30a1\u30a4\u30eb: \u5168\u3066\u306e\u30da\u30fc\u30b8\u3067\u65e5\u82f1\u4e21\u65b9\u3092\u4f5c\u6210</li> </ul>"},{"location":"development/docs/#2","title":"2. \u30da\u30fc\u30b8\u30bf\u30a4\u30d7\u3092\u6c7a\u5b9a\u3059\u308b","text":""},{"location":"development/docs/#4","title":"4\u3064\u306e\u30da\u30fc\u30b8\u30bf\u30a4\u30d7","text":"\u30bf\u30a4\u30d7 \u76ee\u7684 \u547d\u540d\u4f8b \u69cb\u6210\u8981\u7d20 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u4f53\u9a13\u5b66\u7fd2 <code>quick-start.ja.md</code> \u30b9\u30c6\u30c3\u30d7\u3001\u671f\u5f85\u7d50\u679c\u3001\u9054\u6210\u611f \u30cf\u30a6\u30c4\u30fc\u30ac\u30a4\u30c9 \u554f\u984c\u89e3\u6c7a <code>installation.ja.md</code> \u524d\u63d0\u6761\u4ef6\u3001\u624b\u9806\u3001\u78ba\u8a8d\u65b9\u6cd5 \u6982\u5ff5\u89e3\u8aac \u7406\u89e3\u4fc3\u9032 <code>structured-processing.ja.md</code> \u80cc\u666f\u3001\u4e3b\u8981\u6982\u5ff5\u3001\u307e\u3068\u3081 \u6280\u8853\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u4ed5\u69d8\u63d0\u4f9b <code>api/workflows.ja.md</code> \u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u8fd4\u308a\u5024\u3001\u4f8b"},{"location":"development/docs/#_7","title":"\u30da\u30fc\u30b8\u30bf\u30a4\u30d7\u306e\u9078\u629e\u57fa\u6e96","text":"<pre><code>graph TD\n    A[\u65b0\u3057\u3044\u30da\u30fc\u30b8] --&gt; B{\u30e6\u30fc\u30b6\u30fc\u306e\u76ee\u7684\u306f\uff1f}\n    B --&gt;|\u5b66\u7fd2\u3057\u305f\u3044| C[\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb]\n    B --&gt;|\u554f\u984c\u3092\u89e3\u6c7a\u3057\u305f\u3044| D[\u30cf\u30a6\u30c4\u30fc\u30ac\u30a4\u30c9]\n    B --&gt;|\u7406\u89e3\u3092\u6df1\u3081\u305f\u3044| E[\u6982\u5ff5\u89e3\u8aac]\n    B --&gt;|\u4ed5\u69d8\u3092\u78ba\u8a8d\u3057\u305f\u3044| F[\u6280\u8853\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9]\n</code></pre>"},{"location":"development/docs/#3","title":"3. \u65e5\u672c\u8a9e\u7248\u3092\u4f5c\u6210\u3059\u308b","text":""},{"location":"development/docs/#_8","title":"\u57fa\u672c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8","text":"template.ja.md<pre><code># [\u52d5\u8a5e\u5f62\u306e\u30bf\u30a4\u30c8\u30eb]\n\n## \u76ee\u7684\n\n\u3053\u306e\u30da\u30fc\u30b8\u306e\u76ee\u7684\u3068\u8aad\u8005\u304c\u5f97\u3089\u308c\u308b\u4fa1\u5024\u3092\u660e\u78ba\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n## [\u524d\u63d0\u6761\u4ef6/\u8ab2\u984c\u3068\u80cc\u666f]\n\n\u5fc5\u8981\u306a\u77e5\u8b58\u3084\u74b0\u5883\u3001\u89e3\u6c7a\u3059\u3079\u304d\u8ab2\u984c\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n## [\u4e3b\u8981\u30b3\u30f3\u30bb\u30d7\u30c8/\u624b\u9806]\n\n### \u30b5\u30d6\u30bb\u30af\u30b7\u30e7\u30f31\n\n\u5177\u4f53\u7684\u306a\u5185\u5bb9\u3092\u69cb\u9020\u5316\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```python title=\"example.py\"\n# \u91cd\u8981\u306a\u884c\u306b\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u8ffd\u52a0\ndef example_function():\n    return \"Hello, RDE!\"\n</code></pre>"},{"location":"development/docs/#2_1","title":"\u30b5\u30d6\u30bb\u30af\u30b7\u30e7\u30f32","text":"<p>\u30d2\u30f3\u30c8</p> <p>\u8aad\u8005\u306b\u5f79\u7acb\u3064\u8ffd\u52a0\u60c5\u5831\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <p>\u6ce8\u610f</p> <p>\u91cd\u8981\u306a\u6ce8\u610f\u4e8b\u9805\u3092\u5f37\u8abf\u3057\u307e\u3059\u3002</p>"},{"location":"development/docs/#_9","title":"\u307e\u3068\u3081","text":"<p>\u4e3b\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u3092\u7b87\u6761\u66f8\u304d\u3067\u307e\u3068\u3081\u307e\u3059\uff1a</p> <ul> <li>\u30dd\u30a4\u30f3\u30c81</li> <li>\u30dd\u30a4\u30f3\u30c82</li> <li>\u30dd\u30a4\u30f3\u30c83</li> </ul>"},{"location":"development/docs/#_10","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u95a2\u9023\u3059\u308b\u30da\u30fc\u30b8\u3078\u306e\u30ea\u30f3\u30af\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a</p> <ul> <li>\u958b\u767a\u8005\u30ac\u30a4\u30c9 - \u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9</li> <li>\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 - \u8ca2\u732e\u306e\u65b9\u6cd5 <pre><code>#### \u57f7\u7b46\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\n\n**\u69cb\u9020\u5316\u3055\u308c\u305f\u57f7\u7b46**:\n- \u7b87\u6761\u66f8\u304d\u3068\u30c6\u30fc\u30d6\u30eb\u3092\u7a4d\u6975\u7684\u306b\u4f7f\u7528\n- \u9577\u3044\u6587\u7ae0\u3092\u907f\u3051\u3001\u8aad\u307f\u3084\u3059\u3055\u3092\u91cd\u8996\n- \u30bb\u30af\u30b7\u30e7\u30f3\u3054\u3068\u306b\u660e\u78ba\u306a\u76ee\u7684\u3092\u8a2d\u5b9a\n\n**\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306e\u66f8\u304d\u65b9**:\n```python title=\"config_example.py\"\n# \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\nconfig = load_config(\"rdeconfig.yaml\")\n\n# \u91cd\u8981\u306a\u8a2d\u5b9a\u5024\u306e\u53d6\u5f97\nextended_mode = config.system.extended_mode  # \u51e6\u7406\u30e2\u30fc\u30c9\u306e\u6307\u5b9a\nsave_raw = config.system.save_raw  # Raw\u4fdd\u5b58\u306e\u6709\u52b9\u5316\n</code></pre></li> </ul> <p>Admonition\u306e\u4f7f\u7528: <pre><code>!!! note \"\u88dc\u8db3\u60c5\u5831\"\n    \u8ffd\u52a0\u306e\u8aac\u660e\u3084\u80cc\u666f\u60c5\u5831\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n!!! tip \"\u5b9f\u8df5\u7684\u306a\u30d2\u30f3\u30c8\"\n    \u52b9\u7387\u7684\u306a\u4f7f\u7528\u65b9\u6cd5\u3084\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n!!! warning \"\u91cd\u8981\u306a\u6ce8\u610f\u4e8b\u9805\"\n    \u30a8\u30e9\u30fc\u3092\u907f\u3051\u308b\u305f\u3081\u306e\u8b66\u544a\u3084\u5236\u9650\u4e8b\u9805\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n</code></pre></p>"},{"location":"development/docs/#4_1","title":"4. \u82f1\u8a9e\u7248\u3092\u7ffb\u8a33\u3059\u308b","text":""},{"location":"development/docs/#_11","title":"\u7ffb\u8a33\u306e\u539f\u5247","text":"<ul> <li>\u81ea\u7136\u306a\u6280\u8853\u82f1\u8a9e: \u76f4\u8a33\u3092\u907f\u3051\u3001\u82f1\u8a9e\u3068\u3057\u3066\u81ea\u7136\u306a\u8868\u73fe\u3092\u4f7f\u7528</li> <li>\u7528\u8a9e\u306e\u7d71\u4e00: \u5c02\u9580\u7528\u8a9e\u306e\u4e00\u8cab\u3057\u305f\u7ffb\u8a33</li> <li>\u6587\u5316\u7684\u9069\u5fdc: \u82f1\u8a9e\u570f\u306e\u8aad\u8005\u306b\u9069\u3057\u305f\u8aac\u660e\u65b9\u6cd5</li> </ul>"},{"location":"development/docs/#_12","title":"\u7528\u8a9e\u5bfe\u7167\u8868","text":"\u65e5\u672c\u8a9e \u82f1\u8a9e \u5099\u8003 \u69cb\u9020\u5316\u51e6\u7406 Structured Processing \u4e2d\u6838\u6982\u5ff5 \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb Configuration File \u4e00\u822c\u7684\u306a\u7528\u8a9e \u524d\u63d0\u6761\u4ef6 Prerequisites \u6a19\u6e96\u7684\u306a\u8868\u73fe \u624b\u9806 Steps / Instructions \u6587\u8108\u306b\u5fdc\u3058\u3066\u9078\u629e \u78ba\u8a8d Verification \u7d50\u679c\u78ba\u8a8d\u306e\u610f\u5473"},{"location":"development/docs/#_13","title":"\u7ffb\u8a33\u4f8b","text":"<p>\u65e5\u672c\u8a9e: <pre><code>## \u624b\u9806\n\n### 1. \u74b0\u5883\u3092\u6e96\u5099\u3059\u308b\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001\u5fc5\u8981\u306a\u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff1a\n\n```bash\npip install rdetoolkit\n</code></pre> <pre><code>**\u82f1\u8a9e**:\n```markdown\n## Steps\n\n### 1. Prepare Environment\n\nExecute the following command to install required dependencies:\n\n```bash\npip install rdetoolkit\n</code></pre> <pre><code>### 5. \u5185\u90e8\u30ea\u30f3\u30af\u3092\u8a2d\u5b9a\u3059\u308b\n\n#### \u30ea\u30f3\u30af\u306e\u7a2e\u985e\n\n```markdown\n# \u540c\u4e00\u8a00\u8a9e\u5185\u306e\u30ea\u30f3\u30af\n[\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb](config.ja.md)\n[Configuration File](config.en.md)\n\n# \u30bb\u30af\u30b7\u30e7\u30f3\u5185\u30ea\u30f3\u30af\n[\u624b\u9806](#\u624b\u9806)\n[Steps](#steps)\n\n# \u5916\u90e8\u30ea\u30f3\u30af\n[GitHub Issues](https://github.com/nims-dpfc/rdetoolkit/issues)\n</code></pre></p>"},{"location":"development/docs/#_14","title":"\u30ea\u30f3\u30af\u691c\u8a3c","text":"terminal<pre><code># \u5185\u90e8\u30ea\u30f3\u30af\u306e\u78ba\u8a8d\nmkdocs build --strict\n\n# \u30ea\u30f3\u30af\u5207\u308c\u306e\u691c\u51fa\nfind docs/ -name \"*.md\" -exec grep -l \"](.*\\.md)\" {} \\;\n</code></pre>"},{"location":"development/docs/#6-mkdocs","title":"6. MkDocs\u30b5\u30a4\u30c8\u3092\u30d3\u30eb\u30c9\u3059\u308b","text":""},{"location":"development/docs/#_15","title":"\u30ed\u30fc\u30ab\u30eb\u3067\u306e\u78ba\u8a8d","text":"terminal<pre><code># \u958b\u767a\u30b5\u30fc\u30d0\u30fc\u306e\u8d77\u52d5\nmkdocs serve\n\n# \u65e5\u672c\u8a9e\u7248\u306e\u78ba\u8a8d\nopen http://localhost:8000\n\n# \u82f1\u8a9e\u7248\u306e\u78ba\u8a8d\nopen http://localhost:8000/en/\n</code></pre>"},{"location":"development/docs/#_16","title":"\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc\u306e\u5bfe\u51e6","text":"terminal<pre><code># \u8a73\u7d30\u306a\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u8868\u793a\nmkdocs build --verbose --strict\n\n# \u7279\u5b9a\u306e\u30da\u30fc\u30b8\u306e\u307f\u30c6\u30b9\u30c8\nmkdocs build --config-file mkdocs.yml --site-dir test-site\n</code></pre>"},{"location":"development/docs/#_17","title":"\u7d50\u679c\u306e\u78ba\u8a8d","text":""},{"location":"development/docs/#_18","title":"\u54c1\u8cea\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8","text":""},{"location":"development/docs/#_19","title":"\u5185\u5bb9\u306e\u54c1\u8cea","text":"<ul> <li>[ ] \u76ee\u7684\u304c\u660e\u78ba\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b</li> <li>[ ] \u69cb\u9020\u5316\u3055\u308c\u305f\u57f7\u7b46\u306b\u306a\u3063\u3066\u3044\u308b</li> <li>[ ] \u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306b\u30bf\u30a4\u30c8\u30eb\u304c\u4ed8\u3044\u3066\u3044\u308b</li> <li>[ ] \u9069\u5207\u306aAdmonition\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b</li> <li>[ ] \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b</li> </ul>"},{"location":"development/docs/#_20","title":"\u591a\u8a00\u8a9e\u5bfe\u5fdc","text":"<ul> <li>[ ] \u65e5\u82f1\u4e21\u65b9\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b</li> <li>[ ] \u7528\u8a9e\u304c\u7d71\u4e00\u3055\u308c\u3066\u3044\u308b</li> <li>[ ] \u5185\u90e8\u30ea\u30f3\u30af\u304c\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b</li> <li>[ ] \u8a00\u8a9e\u5207\u308a\u66ff\u3048\u304c\u6a5f\u80fd\u3059\u308b</li> </ul>"},{"location":"development/docs/#_21","title":"\u6280\u8853\u7684\u54c1\u8cea","text":"<ul> <li>[ ] MkDocs\u30d3\u30eb\u30c9\u304c\u6210\u529f\u3059\u308b</li> <li>[ ] \u30ea\u30f3\u30af\u5207\u308c\u304c\u306a\u3044</li> <li>[ ] \u753b\u50cf\u304c\u6b63\u3057\u304f\u8868\u793a\u3055\u308c\u308b</li> <li>[ ] \u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u304c\u6b63\u3057\u304f\u30cf\u30a4\u30e9\u30a4\u30c8\u3055\u308c\u308b</li> </ul>"},{"location":"development/docs/#_22","title":"\u81ea\u52d5\u30c1\u30a7\u30c3\u30af","text":"terminal<pre><code># \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30ea\u30f3\u30c8\nmarkdownlint docs/**/*.md\n\n# \u30ea\u30f3\u30af\u30c1\u30a7\u30c3\u30af\nmarkdown-link-check docs/**/*.md\n\n# \u30b9\u30da\u30eb\u30c1\u30a7\u30c3\u30af\ncspell \"docs/**/*.md\"\n</code></pre>"},{"location":"development/docs/#_23","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"development/docs/#_24","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5","text":""},{"location":"development/docs/#mkdocs","title":"MkDocs\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc","text":"<pre><code>ERROR - Config value: 'nav'. Error: Page file 'missing-page.md' does not exist.\n</code></pre> <p>\u89e3\u6c7a\u65b9\u6cd5: <code>mkdocs.yml</code>\u306enav\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u78ba\u8a8d\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664</p>"},{"location":"development/docs/#_25","title":"\u30ea\u30f3\u30af\u5207\u308c","text":"<pre><code>ERROR - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: page.md\n</code></pre> <p>\u89e3\u6c7a\u65b9\u6cd5: <code>mkdocs.yml</code>\u306b\u30da\u30fc\u30b8\u3092\u8ffd\u52a0\u3059\u308b\u304b\u3001\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u524a\u9664</p>"},{"location":"development/docs/#_26","title":"\u591a\u8a00\u8a9e\u8868\u793a\u306e\u554f\u984c","text":"<p>\u78ba\u8a8d\u4e8b\u9805: 1. <code>mkdocs.yml</code>\u306e<code>extra.alternate</code>\u8a2d\u5b9a 2. \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u547d\u540d\u898f\u5247\uff08.ja.md/.en.md\uff09 3. nav\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u8a00\u8a9e\u5225\u8a2d\u5b9a</p>"},{"location":"development/docs/#_27","title":"\u95a2\u9023\u60c5\u5831","text":"<p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4f5c\u6210\u306e\u8a73\u7d30\u60c5\u5831\uff1a</p> <ul> <li>\u958b\u767a\u8005\u30ac\u30a4\u30c9 - \u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9</li> <li>\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 - \u8ca2\u732e\u306e\u65b9\u6cd5</li> <li>MkDocs\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 - MkDocs\u306e\u8a73\u7d30\u4ed5\u69d8</li> </ul> <p>\u7d99\u7d9a\u7684\u6539\u5584</p> <p>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u7d99\u7d9a\u7684\u306b\u6539\u5584\u3057\u3066\u3044\u304f\u3082\u306e\u3067\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u7a4d\u6975\u7684\u306b\u53ce\u96c6\u3057\u3001\u5b9a\u671f\u7684\u306a\u898b\u76f4\u3057\u3092\u884c\u3044\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"development/","title":"\u958b\u767a\u8005\u30ac\u30a4\u30c9","text":""},{"location":"development/#_2","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001RDEToolKit\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3078\u306e\u8ca2\u732e\u65b9\u6cd5\u3068\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u30d0\u30b0\u4fee\u6b63\u3001\u65b0\u6a5f\u80fd\u306e\u8ffd\u52a0\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584\u306a\u3069\u3001\u69d8\u3005\u306a\u5f62\u3067\u306e\u8ca2\u732e\u3092\u6b53\u8fce\u3057\u307e\u3059\u3002</p>"},{"location":"development/#_3","title":"\u8ca2\u732e\u306e\u7a2e\u985e","text":""},{"location":"development/#_4","title":"\u30b3\u30fc\u30c9\u8ca2\u732e","text":"<ul> <li>\u30d0\u30b0\u4fee\u6b63: \u65e2\u5b58\u306e\u554f\u984c\u306e\u89e3\u6c7a</li> <li>\u65b0\u6a5f\u80fd\u958b\u767a: \u6a5f\u80fd\u8ffd\u52a0\u3068\u62e1\u5f35</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584: \u51e6\u7406\u901f\u5ea6\u3068\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306e\u6700\u9069\u5316</li> <li>\u30c6\u30b9\u30c8\u306e\u8ffd\u52a0: \u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u5411\u4e0a</li> </ul>"},{"location":"development/#_5","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u8ca2\u732e","text":"<ul> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584: \u65e2\u5b58\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u54c1\u8cea\u5411\u4e0a</li> <li>\u7ffb\u8a33: \u591a\u8a00\u8a9e\u5bfe\u5fdc\u306e\u62e1\u5145</li> <li>\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u4f5c\u6210: \u5b66\u7fd2\u30ea\u30bd\u30fc\u30b9\u306e\u5145\u5b9f</li> </ul>"},{"location":"development/#_6","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u8ca2\u732e","text":"<ul> <li>\u30d0\u30b0\u5831\u544a: \u554f\u984c\u306e\u767a\u898b\u3068\u5831\u544a</li> <li>\u6a5f\u80fd\u8981\u671b: \u65b0\u6a5f\u80fd\u306e\u63d0\u6848</li> <li>\u8cea\u554f\u3078\u306e\u56de\u7b54: \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30b5\u30dd\u30fc\u30c8</li> </ul>"},{"location":"development/#\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9","title":"\u958b\u767a\u74b0\u5883\u306e\u69cb\u7bc9","text":""},{"location":"development/#_7","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>Python: 3.9\u4ee5\u4e0a</li> <li>Git: \u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406</li> <li>Rye: \u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u30c4\u30fc\u30eb</li> </ul>"},{"location":"development/#_8","title":"\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u624b\u9806","text":"<ol> <li> <p>\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30af\u30ed\u30fc\u30f3 terminal<pre><code>git clone https://github.com/nims-dpfc/rdetoolkit.git\ncd rdetoolkit\n</code></pre></p> </li> <li> <p>Rye\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb terminal<pre><code>curl -sSf https://rye-up.com/get | bash\nsource ~/.rye/env\n</code></pre></p> </li> <li> <p>\u4f9d\u5b58\u95a2\u4fc2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb terminal<pre><code>rye sync\n</code></pre></p> </li> <li> <p>\u958b\u767a\u74b0\u5883\u306e\u6709\u52b9\u5316 terminal<pre><code>source .venv/bin/activate\n</code></pre></p> </li> <li> <p>pre-commit\u306e\u8a2d\u5b9a terminal<pre><code>pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"development/#_9","title":"\u958b\u767a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","text":""},{"location":"development/#_10","title":"\u30d6\u30e9\u30f3\u30c1\u6226\u7565","text":"<ul> <li>main: \u5b89\u5b9a\u7248\u306e\u30e1\u30a4\u30f3\u30d6\u30e9\u30f3\u30c1</li> <li>feature/: \u65b0\u6a5f\u80fd\u958b\u767a\u7528\u30d6\u30e9\u30f3\u30c1</li> <li>bugfix/: \u30d0\u30b0\u4fee\u6b63\u7528\u30d6\u30e9\u30f3\u30c1</li> <li>docs/: \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u66f4\u65b0\u7528\u30d6\u30e9\u30f3\u30c1</li> </ul>"},{"location":"development/#_11","title":"\u958b\u767a\u624b\u9806","text":"<ol> <li>Issue\u306e\u4f5c\u6210\u307e\u305f\u306f\u78ba\u8a8d</li> <li>\u4f5c\u696d\u5185\u5bb9\u3092GitHub Issues\u3067\u660e\u78ba\u5316</li> <li> <p>\u65e2\u5b58\u306eIssue\u304c\u3042\u308b\u304b\u78ba\u8a8d</p> </li> <li> <p>\u30d6\u30e9\u30f3\u30c1\u306e\u4f5c\u6210 terminal<pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>\u958b\u767a\u3068\u30c6\u30b9\u30c8 terminal<pre><code># \u30b3\u30fc\u30c9\u306e\u5909\u66f4\n# \u30c6\u30b9\u30c8\u306e\u5b9f\u884c\nrye test\n\n# \u30ea\u30f3\u30c8\u30c1\u30a7\u30c3\u30af\nrye lint\n\n# \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\nrye fmt\n</code></pre></p> </li> <li> <p>\u30b3\u30df\u30c3\u30c8\u3068\u30d7\u30c3\u30b7\u30e5 terminal<pre><code>git add .\ngit commit -m \"feat: add new feature description\"\ngit push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u4f5c\u6210</p> </li> <li>GitHub\u4e0a\u3067\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4f5c\u6210</li> <li>\u8a73\u7d30\u306a\u8aac\u660e\u3068\u30c6\u30b9\u30c8\u7d50\u679c\u3092\u8a18\u8f09</li> </ol>"},{"location":"development/#_12","title":"\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04","text":""},{"location":"development/#python","title":"Python \u30b9\u30bf\u30a4\u30eb","text":"<ul> <li>PEP 8: Python\u6a19\u6e96\u306e\u30b9\u30bf\u30a4\u30eb\u30ac\u30a4\u30c9\u306b\u6e96\u62e0</li> <li>\u578b\u30d2\u30f3\u30c8: \u5168\u3066\u306e\u95a2\u6570\u306b\u578b\u6ce8\u91c8\u3092\u8ffd\u52a0</li> <li>docstring: Google\u5f62\u5f0f\u306edocstring\u3092\u4f7f\u7528</li> </ul> example_function.py<pre><code>def process_data(\n    input_data: List[Dict[str, Any]],\n    config: Optional[Config] = None\n) -&gt; ProcessResult:\n    \"\"\"\n    \u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u95a2\u6570\n\n    Args:\n        input_data: \u51e6\u7406\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u30ea\u30b9\u30c8\n        config: \u51e6\u7406\u8a2d\u5b9a\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09\n\n    Returns:\n        \u51e6\u7406\u7d50\u679c\u3092\u542b\u3080ProcessResult\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n    Raises:\n        ValueError: \u5165\u529b\u30c7\u30fc\u30bf\u304c\u7121\u52b9\u306a\u5834\u5408\n        ProcessingError: \u51e6\u7406\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\n\n    Example:\n        &gt;&gt;&gt; data = [{\"key\": \"value\"}]\n        &gt;&gt;&gt; result = process_data(data)\n        &gt;&gt;&gt; print(result.status)\n        'success'\n    \"\"\"\n    if not input_data:\n        raise ValueError(\"Input data cannot be empty\")\n\n    # \u51e6\u7406\u30ed\u30b8\u30c3\u30af\n    return ProcessResult(status=\"success\")\n</code></pre>"},{"location":"development/#_13","title":"\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9","text":"test_example.py<pre><code>import pytest\nfrom rdetoolkit.processing import process_data\n\nclass TestProcessData:\n    def test_valid_input(self):\n        \"\"\"\u6b63\u5e38\u306a\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30c6\u30b9\u30c8\"\"\"\n        data = [{\"key\": \"value\"}]\n        result = process_data(data)\n        assert result.status == \"success\"\n\n    def test_empty_input(self):\n        \"\"\"\u7a7a\u306e\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30c6\u30b9\u30c8\"\"\"\n        with pytest.raises(ValueError):\n            process_data([])\n\n    def test_invalid_input(self):\n        \"\"\"\u7121\u52b9\u306a\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30c6\u30b9\u30c8\"\"\"\n        with pytest.raises(TypeError):\n            process_data(\"invalid\")\n</code></pre>"},{"location":"development/#_14","title":"\u54c1\u8cea\u4fdd\u8a3c","text":""},{"location":"development/#_15","title":"\u81ea\u52d5\u30c1\u30a7\u30c3\u30af","text":"<ul> <li>pre-commit: \u30b3\u30df\u30c3\u30c8\u524d\u306e\u81ea\u52d5\u30c1\u30a7\u30c3\u30af</li> <li>GitHub Actions: CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3</li> <li>codecov: \u30c6\u30b9\u30c8\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u6e2c\u5b9a</li> </ul>"},{"location":"development/#_16","title":"\u30c1\u30a7\u30c3\u30af\u9805\u76ee","text":"<ul> <li>\u30ea\u30f3\u30c8: flake8, pylint</li> <li>\u30d5\u30a9\u30fc\u30de\u30c3\u30c8: black, isort</li> <li>\u578b\u30c1\u30a7\u30c3\u30af: mypy</li> <li>\u30c6\u30b9\u30c8: pytest</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3: bandit</li> </ul>"},{"location":"development/#_17","title":"\u30ea\u30ea\u30fc\u30b9\u30d7\u30ed\u30bb\u30b9","text":""},{"location":"development/#_18","title":"\u30d0\u30fc\u30b8\u30e7\u30cb\u30f3\u30b0","text":"<p>\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30d0\u30fc\u30b8\u30e7\u30cb\u30f3\u30b0\uff08SemVer\uff09\u3092\u63a1\u7528\uff1a</p> <ul> <li>MAJOR: \u7834\u58ca\u7684\u5909\u66f4</li> <li>MINOR: \u5f8c\u65b9\u4e92\u63db\u6027\u306e\u3042\u308b\u6a5f\u80fd\u8ffd\u52a0</li> <li>PATCH: \u5f8c\u65b9\u4e92\u63db\u6027\u306e\u3042\u308b\u30d0\u30b0\u4fee\u6b63</li> </ul>"},{"location":"development/#_19","title":"\u30ea\u30ea\u30fc\u30b9\u624b\u9806","text":"<ol> <li>\u5909\u66f4\u30ed\u30b0\u306e\u66f4\u65b0</li> <li>\u30d0\u30fc\u30b8\u30e7\u30f3\u756a\u53f7\u306e\u66f4\u65b0</li> <li>\u30bf\u30b0\u306e\u4f5c\u6210</li> <li>PyPI\u3078\u306e\u516c\u958b</li> <li>GitHub Release\u306e\u4f5c\u6210</li> </ol>"},{"location":"development/#_20","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3","text":""},{"location":"development/#_21","title":"\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3","text":"<ul> <li>GitHub Issues: \u30d0\u30b0\u5831\u544a\u3068\u6a5f\u80fd\u8981\u671b</li> <li>GitHub Discussions: \u8cea\u554f\u3068\u8b70\u8ad6</li> <li>Pull Request: \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\u3068\u8b70\u8ad6</li> </ul>"},{"location":"development/#_22","title":"\u884c\u52d5\u898f\u7bc4","text":"<ul> <li>\u5c0a\u91cd: \u5168\u3066\u306e\u53c2\u52a0\u8005\u3092\u5c0a\u91cd\u3059\u308b</li> <li>\u5efa\u8a2d\u7684: \u5efa\u8a2d\u7684\u306a\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u63d0\u4f9b\u3059\u308b</li> <li>\u5354\u529b\u7684: \u30c1\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u91cd\u8996\u3059\u308b</li> <li>\u5305\u62ec\u7684: \u591a\u69d8\u6027\u3092\u6b53\u8fce\u3059\u308b</li> </ul>"},{"location":"development/#_23","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u958b\u767a\u306b\u53c2\u52a0\u3059\u308b\u306b\u306f\uff1a</p> <ol> <li>\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3 - \u8a73\u7d30\u306a\u8ca2\u732e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3</li> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4f5c\u6210 - \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4f5c\u6210\u306e\u65b9\u6cd5</li> <li>GitHub Issues - \u4f5c\u696d\u53ef\u80fd\u306a\u30bf\u30b9\u30af\u306e\u78ba\u8a8d</li> </ol> <p>\u521d\u56de\u8ca2\u732e\u8005\u3078</p> <p>\u521d\u3081\u3066\u8ca2\u732e\u3059\u308b\u5834\u5408\u306f\u3001\u300cgood first issue\u300d\u30e9\u30d9\u30eb\u306e\u4ed8\u3044\u305fIssue\u304b\u3089\u59cb\u3081\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p>"},{"location":"rdetoolkit/","title":"API Documentation","text":""},{"location":"rdetoolkit/#purpose","title":"Purpose","text":"<p>This section provides comprehensive API documentation for RDEToolKit modules. The documentation combines auto-generated content from Python docstrings with manual explanations and practical usage examples.</p>"},{"location":"rdetoolkit/#core-modules","title":"Core Modules","text":"<ul> <li>workflows: Module for defining and managing workflows in structured data processing.</li> <li>config: Module for loading and managing configuration files.</li> <li>fileops: Module providing RDE-related file operations.</li> <li>rde2util: Module providing RDE-related utility functions.</li> <li>invoicefile: Module for processing invoice files.</li> <li>validation: Module for data validation and verification.</li> <li>modeproc: Module for mode processing operations.</li> <li>img2thumb: Module for converting images to thumbnails.</li> <li>rdelogger: Module providing logging functionality.</li> <li>exceptions: Module for exception handling.</li> <li>core: Core functionality module.</li> </ul>"},{"location":"rdetoolkit/#data-models","title":"Data Models","text":"<ul> <li>config: Configuration file loading and management models.</li> <li>invoice_schema: Invoice schema definition models.</li> <li>invoice: Invoice and Excel invoice information models.</li> <li>metadata: Metadata management models.</li> <li>rde2types: RDE-related type definitions.</li> <li>result: Processing result management models.</li> </ul>"},{"location":"rdetoolkit/#implementation","title":"Implementation","text":"<ul> <li>compressed_controller: Compressed file management implementation.</li> <li>input_controller: Input mode management implementation.</li> </ul>"},{"location":"rdetoolkit/#interfaces","title":"Interfaces","text":"<ul> <li>filechecker: File checking interface definitions.</li> </ul>"},{"location":"rdetoolkit/#commands","title":"Commands","text":"<ul> <li>command: Base command implementations.</li> </ul>"},{"location":"rdetoolkit/#storage-artifacts","title":"Storage &amp; Artifacts","text":"<ul> <li>minio: MinIO object storage integration.</li> <li>report: Report generation functionality.</li> </ul>"},{"location":"rdetoolkit/#getting-started","title":"Getting Started","text":"<p>Each module documentation includes:</p> <ul> <li>Purpose: Overview of the module's functionality</li> <li>Key Features: Main capabilities and features</li> <li>Auto-generated API: Complete function and class documentation from docstrings</li> <li>Practical Usage: Code examples and real-world usage patterns</li> </ul> <p>Navigate to any module above to explore its detailed API documentation.</p>"},{"location":"rdetoolkit/config/","title":"Config API","text":""},{"location":"rdetoolkit/config/#purpose","title":"Purpose","text":"<p>This module handles loading, parsing, and managing configuration files for RDEToolKit. It supports YAML and TOML format configuration files and provides configuration information that controls the behavior of the entire system.</p>"},{"location":"rdetoolkit/config/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/config/#configuration-file-parsing","title":"Configuration File Parsing","text":"<ul> <li>Automatic detection and loading of YAML and TOML format configuration files</li> <li>Configuration file search and discovery</li> <li>Configuration information extraction from pyproject.toml</li> </ul>"},{"location":"rdetoolkit/config/#configuration-management","title":"Configuration Management","text":"<ul> <li>Generation of structured configuration objects</li> <li>Application of default configuration values</li> <li>Configuration validation and error handling</li> </ul>"},{"location":"rdetoolkit/config/#src.rdetoolkit.config.parse_config_file","title":"<code>src.rdetoolkit.config.parse_config_file(*, path=None)</code>","text":"<p>Parse the configuration file and return a Config object.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the configuration file. If not provided, the function will attempt to find and parse the default configuration file.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Config</code> <code>Config</code> <p>The parsed configuration object.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified configuration file does not exist.</p> File Loading Priority <ol> <li>If <code>path</code> is provided and the file extension is \".toml\", the function will attempt to read the file as a TOML file.</li> <li>If <code>path</code> is provided and the file extension is \".yaml\" or \".yml\", the function will attempt to read the file as a YAML file.</li> <li>If <code>path</code> is not provided, the function will attempt to find and parse the default configuration file named \"pyproject.toml\" in the current working directory.</li> </ol> Accepted Config Files <ul> <li>\"rdeconfig.yaml\"</li> <li>\"rdeconfig.yml\"</li> <li>\"pyproject.toml\"</li> </ul> Note <ul> <li>If the specified configuration file does not exist or is not in the correct format, an empty Config object will be returned.</li> </ul> Example <p>parse_config_file(path=\"config.yaml\")</p>"},{"location":"rdetoolkit/config/#src.rdetoolkit.config.find_config_files","title":"<code>src.rdetoolkit.config.find_config_files(target_dir_path)</code>","text":"<p>Find and return a list of configuration files in the given input directory.</p> <p>Parameters:</p> Name Type Description Default <code>target_dir_path</code> <code>RdeFsPath</code> <p>(RdeFsPath): An object containing the paths to the input directories.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of configuration file paths.</p>"},{"location":"rdetoolkit/config/#src.rdetoolkit.config.get_config","title":"<code>src.rdetoolkit.config.get_config(target_dir_path)</code>","text":"<p>Retrieves the configuration from the specified directory path.</p> <p>This function searches for configuration files in the specified directory. It parses each found configuration file until it finds a valid configuration, which it then returns. If no valid configuration is found in the directory, it searches for a pyproject.toml file, parses it, and returns its configuration if valid. If no valid configuration is found, it returns None.</p> <p>Parameters:</p> Name Type Description Default <code>target_dir_path</code> <code>RdeFsPath</code> <p>The path of the directory to search for configuration files.</p> required <p>Returns:</p> Type Description <code>Config | None</code> <p>Optional[Config]: The first valid configuration found, or None if no valid configuration is found.</p>"},{"location":"rdetoolkit/config/#src.rdetoolkit.config.load_config","title":"<code>src.rdetoolkit.config.load_config(tasksupport_path, *, config=None)</code>","text":"<p>Loads the configuration for the RDE Toolkit.</p> <p>Parameters:</p> Name Type Description Default <code>tasksupport_path</code> <code>RdeFsPath</code> <p>The path to the tasksupport directory.</p> required <code>config</code> <code>Optional[Config]</code> <p>An optional existing configuration object.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Config</code> <code>Config</code> <p>The loaded configuration object.</p>"},{"location":"rdetoolkit/config/#src.rdetoolkit.config.is_toml","title":"<code>src.rdetoolkit.config.is_toml(filename)</code>","text":"<p>Check if the given filename has a .toml extension.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the filename has a .toml extension, False otherwise.</p>"},{"location":"rdetoolkit/config/#src.rdetoolkit.config.is_yaml","title":"<code>src.rdetoolkit.config.is_yaml(filename)</code>","text":"<p>Check if the given filename has a YAML file extension.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the filename has a YAML file extension, False otherwise.</p>"},{"location":"rdetoolkit/config/#src.rdetoolkit.config.get_pyproject_toml","title":"<code>src.rdetoolkit.config.get_pyproject_toml()</code>","text":"<p>Get the pyproject.toml file.</p> <p>Returns:</p> Type Description <code>Path | None</code> <p>Optional[Path]: The path to the pyproject.toml file.</p>"},{"location":"rdetoolkit/config/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/config/#basic-configuration-file-loading","title":"Basic Configuration File Loading","text":"basic_config.py<pre><code>from rdetoolkit.config import parse_config_file, load_config\nfrom pathlib import Path\n\n# Parse configuration file\nconfig = parse_config_file()\nprint(f\"System settings: {config.system}\")\nprint(f\"Extended mode: {config.system.extended_mode}\")\nprint(f\"Save raw data: {config.system.save_raw}\")\n\n# Load configuration from specific directory\nproject_dir = Path(\"/path/to/project\")\nconfig = load_config(project_dir)\n</code></pre>"},{"location":"rdetoolkit/config/#configuration-file-search-and-detection","title":"Configuration File Search and Detection","text":"config_detection.py<pre><code>from rdetoolkit.config import find_config_files, is_yaml, is_toml\nfrom pathlib import Path\n\n# Search for configuration files\nconfig_dir = Path(\"./config\")\nconfig_files = find_config_files(config_dir)\nprint(f\"Found configuration files: {config_files}\")\n\n# Detect file format\nfor config_file in config_files:\n    if is_yaml(config_file):\n        print(f\"{config_file} is a YAML file\")\n    elif is_toml(config_file):\n        print(f\"{config_file} is a TOML file\")\n</code></pre>"},{"location":"rdetoolkit/config/#configuration-retrieval-from-pyprojecttoml","title":"Configuration Retrieval from pyproject.toml","text":"pyproject_config.py<pre><code>from rdetoolkit.config import get_pyproject_toml\nfrom pathlib import Path\n\n# Load pyproject.toml\nproject_root = Path(\".\")\npyproject_data = get_pyproject_toml(project_root)\n\nif pyproject_data:\n    print(f\"Project name: {pyproject_data.get('project', {}).get('name')}\")\n    print(f\"Version: {pyproject_data.get('project', {}).get('version')}\")\n</code></pre>"},{"location":"rdetoolkit/core/","title":"Core API","text":""},{"location":"rdetoolkit/core/#purpose","title":"Purpose","text":"<p>This module provides core functionality for RDEToolKit. It is currently under development and will eventually implement the central features of the framework.</p>"},{"location":"rdetoolkit/core/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/core/#development-features","title":"Development Features","text":"<ul> <li>Core framework functionality</li> <li>Foundation utilities</li> <li>Common interfaces</li> </ul>"},{"location":"rdetoolkit/core/#src.rdetoolkit.core","title":"<code>src.rdetoolkit.core</code>","text":""},{"location":"rdetoolkit/core/#src.rdetoolkit.core.__all__","title":"<code>__all__ = ['resize_image_aspect_ratio', 'detect_encoding', 'read_file_with_encoding', 'ManagedDirectory', 'DirectoryOps']</code>  <code>module</code>","text":"<p>Built-in mutable sequence.</p> <p>If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.</p>"},{"location":"rdetoolkit/core/#src.rdetoolkit.core.__doc__","title":"<code>__doc__ = ''</code>  <code>module</code>","text":"<p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"rdetoolkit/core/#src.rdetoolkit.core.__file__","title":"<code>__file__ = '/home/runner/work/rdetoolkit/rdetoolkit/src/rdetoolkit/core.cpython-311-x86_64-linux-gnu.so'</code>  <code>module</code>","text":"<p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"rdetoolkit/core/#src.rdetoolkit.core.__name__","title":"<code>__name__ = 'rdetoolkit.core'</code>  <code>module</code>","text":"<p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"rdetoolkit/core/#src.rdetoolkit.core.__package__","title":"<code>__package__ = 'rdetoolkit'</code>  <code>module</code>","text":"<p>str(object='') -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</p> <p>Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.str() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.</p>"},{"location":"rdetoolkit/core/#src.rdetoolkit.core.read_from_json_file","title":"<code>read_from_json_file(path)</code>","text":""},{"location":"rdetoolkit/core/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/core/#basic-usage","title":"Basic Usage","text":"core_usage.py<pre><code>from rdetoolkit import core\n\n# Core functionality usage examples will be provided after development completion\nprint(\"Core module is under development\")\n</code></pre> <p>Development Status</p> <p>This module is currently under development. API documentation will be updated as features are implemented.</p>"},{"location":"rdetoolkit/core/#available-classes","title":"Available Classes","text":"<p>The core module provides the following main classes:</p> <ul> <li>ManagedDirectory: Directory management functionality</li> <li>DirectoryOps: Directory operations and utilities</li> </ul>"},{"location":"rdetoolkit/errors/","title":"Errors API","text":""},{"location":"rdetoolkit/errors/#purpose","title":"Purpose","text":"<p>This module handles error handling and exception management in RDEToolKit. It provides functionality for custom exception classes, error message management, exception capture and processing.</p>"},{"location":"rdetoolkit/errors/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/errors/#exception-management","title":"Exception Management","text":"<ul> <li>Exception capture and appropriate handling</li> <li>Simplified traceback display</li> <li>Dedicated handling for structured errors</li> </ul>"},{"location":"rdetoolkit/errors/#error-handling","title":"Error Handling","text":"<ul> <li>Standardization of error messages</li> <li>Creation of job error log files</li> <li>Generic error processing functionality</li> </ul>"},{"location":"rdetoolkit/errors/#src.rdetoolkit.errors.catch_exception_with_message","title":"<code>src.rdetoolkit.errors.catch_exception_with_message(*, error_message=None, error_code=None, eobj=None, verbose=False)</code>","text":"<p>A decorator that catches exceptions and re-raises a StructuredError with a customized message and error code.</p> <p>This decorator catches exceptions thrown within the decorated function. If a StructuredError is raised, it re-raises it with the specified error message, error code, and optional additional error object. For other exceptions, it re-raises them as standard Exceptions. The verbosity level of the error message can be controlled via the verbose parameter.</p> <p>Parameters:</p> Name Type Description Default <code>error_message</code> <code>Optional[str]</code> <p>Customized message to be used in case of an error. Defaults to None.</p> <code>None</code> <code>error_code</code> <code>Optional[int]</code> <p>Error code to be used in case of an error. Defaults to None.</p> <code>None</code> <code>eobj</code> <code>Optional[Any]</code> <p>Additional object to include in the error. Defaults to None.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>If set to True, provides detailed error messages. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>Callable</code> <p>A function decorator that provides customized error handling on exception occurrence.</p>"},{"location":"rdetoolkit/errors/#src.rdetoolkit.errors.format_simplified_traceback","title":"<code>src.rdetoolkit.errors.format_simplified_traceback(tb_list)</code>","text":"<p>Formats a simplified version of the traceback information.</p> <p>This function takes a list of traceback frame summaries and constructs a formatted string representing the call stack. The formatted string includes indentation and node characters to indicate the call path, highlighting the file, line number, and function name. The final line of the traceback is marked with a fire emoji.</p> <p>Parameters:</p> Name Type Description Default <code>tb_list</code> <code>list[FrameSummary]</code> <p>A list of traceback frame summaries to format.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A formatted string representing the simplified traceback information.</p>"},{"location":"rdetoolkit/errors/#src.rdetoolkit.errors.handle_exception","title":"<code>src.rdetoolkit.errors.handle_exception(e, error_message=None, error_code=None, eobj=None, verbose=False)</code>","text":"<p>Handles exceptions and formats them into a StructuredError with optional custom message, error code, and additional object.</p> <p>This function captures the exception type and traceback, then formats a simplified version of the traceback. It constructs a custom error message, optionally including the full original traceback if verbose mode is enabled. The function returns a StructuredError containing the error message, error code, optional additional object, and simplified traceback information.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>Exception</code> <p>The exception to handle.</p> required <code>error_message</code> <code>Optional[str]</code> <p>Customized message to be used in case of an error. Defaults to the exception message.</p> <code>None</code> <code>error_code</code> <code>Optional[int]</code> <p>Error code to be used in case of an error. Defaults to 1.</p> <code>None</code> <code>eobj</code> <code>Optional[Any]</code> <p>Additional object to include in the error. Defaults to None.</p> <code>None</code> <code>verbose</code> <code>bool</code> <p>If set to True, includes the original traceback in the error message. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>StructuredError</code> <code>StructuredError</code> <p>A structured error object containing the error message, error code, additional object,</p> <code>StructuredError</code> <p>and simplified traceback information.</p>"},{"location":"rdetoolkit/errors/#src.rdetoolkit.errors.handle_and_exit_on_structured_error","title":"<code>src.rdetoolkit.errors.handle_and_exit_on_structured_error(e, logger)</code>","text":"<p>Catch StructuredError and write to log file.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>StructuredError</code> <p>StructuredError instance</p> required <code>logger</code> <code>Logger</code> <p>Logger instance</p> required"},{"location":"rdetoolkit/errors/#src.rdetoolkit.errors.handle_generic_error","title":"<code>src.rdetoolkit.errors.handle_generic_error(e, logger)</code>","text":"<p>Catch generic error and write to log file.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>Exception</code> <p>Exception instance</p> required <code>logger</code> <code>Logger</code> <p>Logger instance</p> required"},{"location":"rdetoolkit/errors/#src.rdetoolkit.errors.write_job_errorlog_file","title":"<code>src.rdetoolkit.errors.write_job_errorlog_file(code, message, *, filename='job.failed')</code>","text":"<p>Write the error log to a file.</p> <p>This function writes the given error code and message to a specified file. The file will be saved in a directory determined by <code>StorageDir.get_datadir(False)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int</code> <p>The error code to be written to the log file.</p> required <code>message</code> <code>str</code> <p>The error message to be written to the log file.</p> required <code>filename</code> <code>str</code> <p>The name of the file to which the error log will be written. Defaults to \"job.failed\".</p> <code>'job.failed'</code> Example <pre><code>write_job_errorlog_file(404, 'Not Found', filename='error.log')\n</code></pre>"},{"location":"rdetoolkit/errors/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/errors/#using-exception-capture-decorator","title":"Using Exception Capture Decorator","text":"exception_decorator.py<pre><code>from rdetoolkit.errors import catch_exception_with_message\nfrom pathlib import Path\n\n@catch_exception_with_message(\"Error occurred during data processing\")\ndef process_data(data_file):\n    \"\"\"Data processing function (with error handling)\"\"\"\n    if not data_file.exists():\n        raise FileNotFoundError(f\"File not found: {data_file}\")\n\n    # Data processing simulation\n    with open(data_file, 'r') as f:\n        content = f.read()\n        if not content:\n            raise ValueError(\"File is empty\")\n\n    return {\"status\": \"success\", \"size\": len(content)}\n\n# Usage example\ntry:\n    result = process_data(Path(\"data/sample.txt\"))\n    print(f\"Processing result: {result}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/errors/#using-simplified-traceback","title":"Using Simplified Traceback","text":"simplified_traceback.py<pre><code>from rdetoolkit.errors import format_simplified_traceback\nimport traceback\n\ndef problematic_function():\n    \"\"\"Problematic function\"\"\"\n    raise ValueError(\"Some error occurred\")\n\ndef calling_function():\n    \"\"\"Calling function\"\"\"\n    problematic_function()\n\ntry:\n    calling_function()\nexcept Exception as e:\n    # Standard traceback\n    print(\"=== Standard Traceback ===\")\n    traceback.print_exc()\n\n    # Simplified traceback\n    print(\"\\n=== Simplified Traceback ===\")\n    simplified_tb = format_simplified_traceback()\n    print(simplified_tb)\n</code></pre>"},{"location":"rdetoolkit/errors/#structured-error-handling","title":"Structured Error Handling","text":"structured_error_handling.py<pre><code>from rdetoolkit.errors import handle_and_exit_on_structured_error, handle_exception\nfrom rdetoolkit.exceptions import StructuredError\n\ndef risky_operation():\n    \"\"\"Risky operation\"\"\"\n    # Raise structured error\n    raise StructuredError(\"Error occurred in structured processing\")\n\n# Dedicated handling for structured errors\ntry:\n    risky_operation()\nexcept StructuredError as e:\n    handle_and_exit_on_structured_error(e)\nexcept Exception as e:\n    handle_exception(e, \"Unexpected error occurred\")\n</code></pre>"},{"location":"rdetoolkit/errors/#creating-error-log-files","title":"Creating Error Log Files","text":"error_logging.py<pre><code>from rdetoolkit.errors import write_job_errorlog_file, handle_generic_error\nfrom pathlib import Path\nimport traceback\n\ndef run_job_with_error_logging(job_id: str):\n    \"\"\"Job execution with error logging\"\"\"\n\n    try:\n        # Execute job (may cause errors)\n        print(f\"Starting job {job_id}\")\n\n        # Intentionally cause error\n        if job_id == \"error_job\":\n            raise RuntimeError(\"Error occurred during job execution\")\n\n        print(f\"Job {job_id} completed successfully\")\n        return {\"status\": \"success\", \"job_id\": job_id}\n\n    except Exception as e:\n        # Create error log file\n        error_log_path = Path(f\"logs/job_{job_id}_error.log\")\n        error_log_path.parent.mkdir(parents=True, exist_ok=True)\n\n        write_job_errorlog_file(str(error_log_path), str(e), traceback.format_exc())\n\n        # Generic error handling\n        handle_generic_error(e, f\"Error occurred in job {job_id}\")\n\n        return {\"status\": \"error\", \"job_id\": job_id, \"error_log\": str(error_log_path)}\n\n# Usage example\njobs = [\"normal_job\", \"error_job\", \"another_job\"]\n\nfor job in jobs:\n    print(f\"\\n--- Executing {job} ---\")\n    result = run_job_with_error_logging(job)\n    print(f\"Result: {result}\")\n</code></pre>"},{"location":"rdetoolkit/errors/#comprehensive-error-handling-system","title":"Comprehensive Error Handling System","text":"comprehensive_error_handling.py<pre><code>from rdetoolkit.errors import (\n    catch_exception_with_message, \n    handle_exception, \n    format_simplified_traceback,\n    write_job_errorlog_file\n)\nfrom pathlib import Path\nimport logging\n\nclass ErrorHandlingSystem:\n    \"\"\"Comprehensive error handling system\"\"\"\n\n    def __init__(self, log_dir: Path):\n        self.log_dir = log_dir\n        self.log_dir.mkdir(parents=True, exist_ok=True)\n\n        # Configure logger\n        self.logger = logging.getLogger(\"error_system\")\n        self.logger.setLevel(logging.INFO)\n\n        # Add file handler\n        handler = logging.FileHandler(self.log_dir / \"system.log\")\n        formatter = logging.Formatter(\n            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n        )\n        handler.setFormatter(formatter)\n        self.logger.addHandler(handler)\n\n    @catch_exception_with_message(\"Error occurred during system processing\")\n    def safe_execute(self, func, *args, **kwargs):\n        \"\"\"Safe function execution\"\"\"\n        try:\n            self.logger.info(f\"Starting execution of function {func.__name__}\")\n            result = func(*args, **kwargs)\n            self.logger.info(f\"Function {func.__name__} completed successfully\")\n            return result\n        except Exception as e:\n            # Detailed error logging\n            error_log_path = self.log_dir / f\"error_{func.__name__}.log\"\n            simplified_tb = format_simplified_traceback()\n            write_job_errorlog_file(str(error_log_path), str(e), simplified_tb)\n\n            # Error handling\n            handle_exception(e, f\"Error occurred in function {func.__name__}\")\n\n            return {\"status\": \"error\", \"function\": func.__name__, \"error\": str(e)}\n\n# Usage example\ndef sample_function(value):\n    \"\"\"Sample function\"\"\"\n    if value &lt; 0:\n        raise ValueError(\"Negative values are not allowed\")\n    return value * 2\n\ndef another_function(data):\n    \"\"\"Another sample function\"\"\"\n    if not data:\n        raise RuntimeError(\"Data is empty\")\n    return len(data)\n\n# Use error handling system\nerror_system = ErrorHandlingSystem(Path(\"logs/error_system\"))\n\n# Normal case\nresult1 = error_system.safe_execute(sample_function, 5)\nprint(f\"Result 1: {result1}\")\n\n# Error case\nresult2 = error_system.safe_execute(sample_function, -1)\nprint(f\"Result 2: {result2}\")\n\nresult3 = error_system.safe_execute(another_function, [])\nprint(f\"Result 3: {result3}\")\n</code></pre>"},{"location":"rdetoolkit/exceptions/","title":"Exceptions API","text":""},{"location":"rdetoolkit/exceptions/#purpose","title":"Purpose","text":"<p>This module defines specialized exception classes for RDEToolKit. It provides exception handling specific to structured processing, metadata validation, invoice schema validation, and other functionality.</p>"},{"location":"rdetoolkit/exceptions/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/exceptions/#specialized-exception-classes","title":"Specialized Exception Classes","text":"<ul> <li>Exceptions specific to structured processing</li> <li>Error handling for each mode</li> <li>Metadata validation errors</li> <li>Invoice schema validation errors</li> </ul>"},{"location":"rdetoolkit/exceptions/#error-classification","title":"Error Classification","text":"<ul> <li>Function-specific error classification</li> <li>Detailed error information provision</li> <li>Debugging support information</li> </ul>"},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.StructuredError","title":"<code>src.rdetoolkit.exceptions.StructuredError(emsg='', ecode=1, eobj=None, traceback_info=None)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>A custom exception class providing structured error information.</p> <p>This class extends the standard Exception class to include additional information such as an error message, an error code, an error object, and traceback information. This allows for a more detailed representation of errors.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>The error message.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>The error code. Defaults to 1.</p> <code>1</code> <code>eobj</code> <code>any</code> <p>An additional error object. This can be an object of any type to provide more context to the error.</p> <code>None</code> <code>traceback_info</code> <code>str</code> <p>Additional traceback information. Defaults to None.</p> <code>None</code>"},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.StructuredError.ecode","title":"<code>ecode: Incomplete = ecode</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.StructuredError.emsg","title":"<code>emsg: Incomplete = emsg</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.StructuredError.eobj","title":"<code>eobj: Incomplete = eobj</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.StructuredError.traceback_info","title":"<code>traceback_info: Incomplete = traceback_info</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.InvoiceModeError","title":"<code>src.rdetoolkit.exceptions.InvoiceModeError(emsg='', ecode=100, eobj=None, traceback_info=None)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors related to invoice mode.</p> <p>Attributes:</p> Name Type Description <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 100.</p> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the exception. Default is None.</p> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 100.</p> <code>100</code> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the exception. Default is None.</p> <code>None</code> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <code>None</code>"},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.InvoiceModeError.ecode","title":"<code>ecode: Incomplete = ecode</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.InvoiceModeError.emsg","title":"<code>emsg: Incomplete = emsg</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.InvoiceModeError.eobj","title":"<code>eobj: Incomplete = eobj</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.InvoiceModeError.traceback_info","title":"<code>traceback_info: Incomplete = traceback_info</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.ExcelInvoiceModeError","title":"<code>src.rdetoolkit.exceptions.ExcelInvoiceModeError(emsg='', ecode=101, eobj=None, traceback_info=None)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors related to Excelinvoice mode.</p> <p>Attributes:</p> Name Type Description <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 101.</p> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the exception. Default is None.</p> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 102.</p> <code>101</code> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the exception. Default is None.</p> <code>None</code> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <code>None</code>"},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.ExcelInvoiceModeError.ecode","title":"<code>ecode: Incomplete = ecode</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.ExcelInvoiceModeError.emsg","title":"<code>emsg: Incomplete = emsg</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.ExcelInvoiceModeError.eobj","title":"<code>eobj: Incomplete = eobj</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.ExcelInvoiceModeError.traceback_info","title":"<code>traceback_info: Incomplete = traceback_info</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.MultiDataTileModeError","title":"<code>src.rdetoolkit.exceptions.MultiDataTileModeError(emsg='', ecode=102, eobj=None, traceback_info=None)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in MultiData tile mode operations.</p> <p>Attributes:</p> Name Type Description <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 102.</p> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the error. Default is None.</p> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 101.</p> <code>102</code> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the error. Default is None.</p> <code>None</code> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <code>None</code>"},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.MultiDataTileModeError.ecode","title":"<code>ecode: Incomplete = ecode</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.MultiDataTileModeError.emsg","title":"<code>emsg: Incomplete = emsg</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.MultiDataTileModeError.eobj","title":"<code>eobj: Incomplete = eobj</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.MultiDataTileModeError.traceback_info","title":"<code>traceback_info: Incomplete = traceback_info</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.RdeFormatModeError","title":"<code>src.rdetoolkit.exceptions.RdeFormatModeError(emsg='', ecode=103, eobj=None, traceback_info=None)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors in the RDE format mode.</p> <p>Attributes:</p> Name Type Description <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 103.</p> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the error. Default is None.</p> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <p>Parameters:</p> Name Type Description Default <code>emsg</code> <code>str</code> <p>Error message describing the exception.</p> <code>''</code> <code>ecode</code> <code>int</code> <p>Error code associated with the exception. Default is 103.</p> <code>103</code> <code>eobj</code> <code>Any | None</code> <p>Optional object related to the error. Default is None.</p> <code>None</code> <code>traceback_info</code> <code>str | None</code> <p>Optional traceback information. Default is None.</p> <code>None</code>"},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.RdeFormatModeError.ecode","title":"<code>ecode: Incomplete = ecode</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.RdeFormatModeError.emsg","title":"<code>emsg: Incomplete = emsg</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.RdeFormatModeError.eobj","title":"<code>eobj: Incomplete = eobj</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.RdeFormatModeError.traceback_info","title":"<code>traceback_info: Incomplete = traceback_info</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.InvoiceSchemaValidationError","title":"<code>src.rdetoolkit.exceptions.InvoiceSchemaValidationError(message='Validation error')</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a validation error occurs.</p>"},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.InvoiceSchemaValidationError.message","title":"<code>message: Incomplete = message</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.MetadataValidationError","title":"<code>src.rdetoolkit.exceptions.MetadataValidationError(message='Validation error')</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a validation error occurs.</p>"},{"location":"rdetoolkit/exceptions/#src.rdetoolkit.exceptions.MetadataValidationError.message","title":"<code>message: Incomplete = message</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/exceptions/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/exceptions/#structured-processing-error-handling","title":"Structured Processing Error Handling","text":"structured_error_handling.py<pre><code>from rdetoolkit.exceptions import StructuredError\nfrom rdetoolkit.workflows import run\n\ndef safe_structured_processing(dataset_function):\n    \"\"\"Safe structured processing execution\"\"\"\n    try:\n        result = run(custom_dataset_function=dataset_function)\n        print(f\"Structured processing completed: {result}\")\n        return result\n\n    except StructuredError as e:\n        print(f\"Structured processing error: {e}\")\n        print(f\"Error type: {type(e).__name__}\")\n\n        if hasattr(e, 'error_code'):\n            print(f\"Error code: {e.error_code}\")\n        if hasattr(e, 'context'):\n            print(f\"Error context: {e.context}\")\n\n        return {\"status\": \"error\", \"error\": str(e)}\n\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return {\"status\": \"unexpected_error\", \"error\": str(e)}\n\n# Usage example\ndef problematic_dataset_function(srcpaths, resource_paths):\n    raise StructuredError(\"Error occurred in dataset processing\")\n\nresult = safe_structured_processing(problematic_dataset_function)\nprint(f\"Final result: {result}\")\n</code></pre>"},{"location":"rdetoolkit/exceptions/#mode-specific-error-handling","title":"Mode-Specific Error Handling","text":"mode_specific_errors.py<pre><code>from rdetoolkit.exceptions import (\n    InvoiceModeError, \n    ExcelInvoiceModeError, \n    MultiDataTileModeError, \n    RdeFormatModeError\n)\n\ndef handle_mode_specific_error(mode: str, operation):\n    \"\"\"Mode-specific error handling\"\"\"\n    try:\n        return operation()\n    except InvoiceModeError as e:\n        print(f\"Invoice mode error: {e}\")\n        return {\"status\": \"invoice_error\", \"error\": str(e)}\n    except ExcelInvoiceModeError as e:\n        print(f\"ExcelInvoice mode error: {e}\")\n        return {\"status\": \"excel_invoice_error\", \"error\": str(e)}\n    except MultiDataTileModeError as e:\n        print(f\"MultiDataTile mode error: {e}\")\n        return {\"status\": \"multidatatile_error\", \"error\": str(e)}\n    except RdeFormatModeError as e:\n        print(f\"RdeFormat mode error: {e}\")\n        return {\"status\": \"rdeformat_error\", \"error\": str(e)}\n\n# Usage examples\ndef invoice_operation():\n    raise InvoiceModeError(\"Error occurred in Invoice processing\")\n\ndef excel_operation():\n    raise ExcelInvoiceModeError(\"Error occurred in ExcelInvoice processing\")\n\nresult1 = handle_mode_specific_error(\"Invoice\", invoice_operation)\nresult2 = handle_mode_specific_error(\"ExcelInvoice\", excel_operation)\n</code></pre>"},{"location":"rdetoolkit/exceptions/#validation-error-handling","title":"Validation Error Handling","text":"validation_errors.py<pre><code>from rdetoolkit.exceptions import MetadataValidationError, InvoiceSchemaValidationError\nfrom rdetoolkit.validation import metadata_validate, invoice_validate\nfrom pathlib import Path\n\ndef comprehensive_validation(data_dir: Path):\n    \"\"\"Comprehensive validation processing\"\"\"\n    results = {\"metadata\": None, \"invoice\": None, \"errors\": []}\n\n    # Metadata validation\n    metadata_path = data_dir / \"meta\" / \"metadata.json\"\n    try:\n        metadata_validate(metadata_path)\n        results[\"metadata\"] = \"valid\"\n        print(f\"\u2713 Metadata validation successful: {metadata_path}\")\n    except MetadataValidationError as e:\n        results[\"metadata\"] = \"invalid\"\n        results[\"errors\"].append(f\"Metadata error: {e}\")\n        print(f\"\u2717 Metadata validation failed: {e}\")\n\n    # Invoice validation\n    invoice_path = data_dir / \"invoice\" / \"invoice.json\"\n    schema_path = data_dir / \"tasksupport\" / \"invoice.schema.json\"\n    try:\n        invoice_validate(invoice_path, schema_path)\n        results[\"invoice\"] = \"valid\"\n        print(f\"\u2713 Invoice validation successful: {invoice_path}\")\n    except InvoiceSchemaValidationError as e:\n        results[\"invoice\"] = \"invalid\"\n        results[\"errors\"].append(f\"Invoice error: {e}\")\n        print(f\"\u2717 Invoice validation failed: {e}\")\n\n    return results\n\n# Usage example\ndata_directory = Path(\"data/experiment_001\")\nvalidation_results = comprehensive_validation(data_directory)\n\nif all([validation_results[\"metadata\"] == \"valid\", validation_results[\"invoice\"] == \"valid\"]):\n    print(\"All validations successful\")\nelse:\n    print(\"Validation errors found:\")\n    for error in validation_results[\"errors\"]:\n        print(f\"  - {error}\")\n</code></pre>"},{"location":"rdetoolkit/fileops/","title":"FileOps API","text":""},{"location":"rdetoolkit/fileops/#purpose","title":"Purpose","text":"<p>This module provides a unified interface for file operations in RDEToolKit. It enables reading and writing of various file formats such as JSON, YAML, TOML, and CSV through a concise and consistent API.</p>"},{"location":"rdetoolkit/fileops/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/fileops/#file-reading","title":"File Reading","text":"<ul> <li>Reading JSON, YAML, TOML, and CSV files</li> <li>Automatic encoding detection and processing</li> <li>Error handling and exception processing</li> </ul>"},{"location":"rdetoolkit/fileops/#file-writing","title":"File Writing","text":"<ul> <li>File output in various formats</li> <li>Saving in appropriate formats</li> <li>Character encoding management</li> </ul>"},{"location":"rdetoolkit/fileops/#src.rdetoolkit.fileops.readf_json","title":"<code>src.rdetoolkit.fileops.readf_json(path)</code>","text":"<p>A function that reads a JSON file and returns the JSON object.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the JSON file.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The parsed json object.</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If an error occurs while processing the file.</p>"},{"location":"rdetoolkit/fileops/#src.rdetoolkit.fileops.writef_json","title":"<code>src.rdetoolkit.fileops.writef_json(path, obj, *, enc='utf_8')</code>","text":"<p>Writes an content to a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path to the destination JSON file.</p> required <code>obj</code> <code>dict[str, Any]</code> <p>Invoice object to be serialized and written.</p> required <code>enc</code> <code>str</code> <p>Encoding to use when writing the file. Defaults to \"utf_8\".</p> <code>'utf_8'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The parsed json object.</p>"},{"location":"rdetoolkit/fileops/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/fileops/#json-file-operations","title":"JSON File Operations","text":"json_operations.py<pre><code>from rdetoolkit.fileops import readf_json, writef_json\nfrom pathlib import Path\n\n# Read JSON file\nconfig_path = Path(\"config/settings.json\")\nconfig_data = readf_json(config_path)\nprint(f\"Configuration data: {config_data}\")\n\n# Write JSON file\noutput_data = {\n    \"experiment_id\": \"EXP001\",\n    \"parameters\": {\n        \"temperature\": 25.0,\n        \"pressure\": 1013.25,\n        \"humidity\": 60\n    },\n    \"results\": [1.2, 3.4, 5.6, 7.8]\n}\n\noutput_path = Path(\"results/experiment_001.json\")\nwritef_json(output_data, output_path)\nprint(f\"Results saved to {output_path}\")\n</code></pre>"},{"location":"rdetoolkit/fileops/#file-operations-with-error-handling","title":"File Operations with Error Handling","text":"safe_file_operations.py<pre><code>from rdetoolkit.fileops import readf_json, writef_json\nfrom pathlib import Path\nimport json\n\ndef safe_read_json(file_path: Path):\n    \"\"\"Safe JSON reading\"\"\"\n    try:\n        data = readf_json(file_path)\n        print(f\"\u2713 JSON read successful: {file_path}\")\n        return data\n    except FileNotFoundError:\n        print(f\"\u2717 File not found: {file_path}\")\n        return None\n    except json.JSONDecodeError as e:\n        print(f\"\u2717 JSON format error: {e}\")\n        return None\n\ndef safe_write_json(data, file_path: Path):\n    \"\"\"Safe JSON writing\"\"\"\n    try:\n        # Create directory\n        file_path.parent.mkdir(parents=True, exist_ok=True)\n\n        writef_json(data, file_path)\n        print(f\"\u2713 JSON write successful: {file_path}\")\n        return True\n    except Exception as e:\n        print(f\"\u2717 JSON write error: {e}\")\n        return False\n\n# Usage example\nconfig_data = safe_read_json(Path(\"config/experiment.json\"))\nif config_data:\n    # Update data\n    config_data[\"last_updated\"] = \"2024-01-01T10:00:00Z\"\n    safe_write_json(config_data, Path(\"config/experiment_updated.json\"))\n</code></pre>"},{"location":"rdetoolkit/img2thumb/","title":"Img2Thumb API","text":""},{"location":"rdetoolkit/img2thumb/#purpose","title":"Purpose","text":"<p>This module handles processing of representative images (thumbnail images) in RDEToolKit. It provides functionality for identifying main images, generating thumbnails, and managing image files.</p>"},{"location":"rdetoolkit/img2thumb/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/img2thumb/#image-processing","title":"Image Processing","text":"<ul> <li>Automatic identification of main images</li> <li>Generation and copying of thumbnail images</li> <li>Image file format conversion and resizing</li> </ul>"},{"location":"rdetoolkit/img2thumb/#file-management","title":"File Management","text":"<ul> <li>Image extraction from raw data files</li> <li>Placement in thumbnail directory</li> <li>Standardization of image paths</li> </ul>"},{"location":"rdetoolkit/img2thumb/#src.rdetoolkit.img2thumb.copy_images_to_thumbnail","title":"<code>src.rdetoolkit.img2thumb.copy_images_to_thumbnail(out_dir_thumb_img, out_dir_main_img, *, target_image_name=None, img_ext=None)</code>","text":"<p>Copy the image files in the other image folder and the main image folder to the thumbnail folder.</p> <p>Parameters:</p> Name Type Description Default <code>out_dir_thumb_img</code> <code>str</code> <p>directory path where thumbnail image is saved</p> required <code>out_dir_main_img</code> <code>str</code> <p>directory path where main image is saved</p> required <code>target_image_name</code> <code>str</code> <p>Specify the name of the image file to be copied to the thumbnail folder.</p> <code>None</code> <code>img_ext</code> <code>str</code> <p>image file extension.</p> <code>None</code>"},{"location":"rdetoolkit/img2thumb/#src.rdetoolkit.img2thumb.resize_image","title":"<code>src.rdetoolkit.img2thumb.resize_image(path, width=640, height=480, output_path=None)</code>","text":"<p>Resize an image to the specified width and height while maintaining its aspect ratio.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the image file.</p> required <code>width</code> <code>int</code> <p>The target width of the resized image. Defaults to 640.</p> <code>640</code> <code>height</code> <code>int</code> <p>The target height of the resized image. Defaults to 480.</p> <code>480</code> <code>output_path</code> <code>str | Path | None</code> <p>The path where the resized image will be saved. If None, the original image will be overwritten.</p> <code>None</code> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If the width or height is less than or equal to 0.</p> <p>Returns:</p> Name Type Description <code>NoReturn</code> <code>str</code> <p>This function does not return a value.</p>"},{"location":"rdetoolkit/img2thumb/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/img2thumb/#basic-thumbnail-generation","title":"Basic Thumbnail Generation","text":"basic_thumbnail.py<pre><code>from rdetoolkit.img2thumb import copy_images_to_thumbnail, resize_image\nfrom rdetoolkit.models.rde2types import RdeOutputResourcePath\nfrom pathlib import Path\n\n# Configure resource paths\nresource_paths = RdeOutputResourcePath(\n    rawfiles=Path(\"data/rawfiles\"),\n    thumbnail=Path(\"data/thumbnail\"),\n    meta=Path(\"data/meta\"),\n    invoice=Path(\"data/invoice\")\n)\n\n# Copy image files to thumbnail directory\ncopy_images_to_thumbnail(resource_paths)\nprint(\"Copied image files to thumbnail directory\")\n</code></pre>"},{"location":"rdetoolkit/img2thumb/#image-resize-processing","title":"Image Resize Processing","text":"image_resize.py<pre><code>from rdetoolkit.img2thumb import resize_image\nfrom pathlib import Path\n\n# Resize image\ninput_image = Path(\"data/rawfiles/large_image.jpg\")\noutput_image = Path(\"data/thumbnail/resized_image.jpg\")\n\n# Resize to specified dimensions\nresize_image(input_image, output_image, width=800, height=600)\nprint(f\"Image resized: {output_image}\")\n\n# Resize while maintaining aspect ratio\nresize_image(input_image, output_image, max_size=500)\nprint(f\"Image resized maintaining aspect ratio: {output_image}\")\n</code></pre>"},{"location":"rdetoolkit/img2thumb/#batch-image-file-processing","title":"Batch Image File Processing","text":"batch_image_processing.py<pre><code>from rdetoolkit.img2thumb import copy_images_to_thumbnail, resize_image\nfrom rdetoolkit.models.rde2types import RdeOutputResourcePath\nfrom pathlib import Path\n\ndef process_experiment_images(experiment_dir: Path):\n    \"\"\"Batch process images in experiment directory\"\"\"\n\n    # Configure resource paths\n    resource_paths = RdeOutputResourcePath(\n        rawfiles=experiment_dir / \"rawfiles\",\n        thumbnail=experiment_dir / \"thumbnail\",\n        meta=experiment_dir / \"meta\",\n        invoice=experiment_dir / \"invoice\"\n    )\n\n    # Create thumbnail directory\n    resource_paths.thumbnail.mkdir(parents=True, exist_ok=True)\n\n    # Copy image files\n    try:\n        copy_images_to_thumbnail(resource_paths)\n        print(f\"\u2713 Image copy completed: {resource_paths.thumbnail}\")\n\n        # Resize each image\n        for image_file in resource_paths.thumbnail.glob(\"*.{jpg,jpeg,png,gif}\"):\n            resized_file = resource_paths.thumbnail / f\"resized_{image_file.name}\"\n            resize_image(image_file, resized_file, max_size=300)\n            print(f\"\u2713 Resize completed: {resized_file}\")\n\n        return {\"status\": \"success\", \"processed_count\": len(list(resource_paths.thumbnail.glob(\"resized_*\")))}\n\n    except Exception as e:\n        print(f\"\u2717 Image processing error: {e}\")\n        return {\"status\": \"error\", \"error\": str(e)}\n\n# Usage example\nexperiment_dirs = [\n    Path(\"experiments/exp_001\"),\n    Path(\"experiments/exp_002\"),\n    Path(\"experiments/exp_003\")\n]\n\nfor exp_dir in experiment_dirs:\n    if exp_dir.exists():\n        print(f\"\\nProcessing experiment directory: {exp_dir}\")\n        result = process_experiment_images(exp_dir)\n        print(f\"Processing result: {result}\")\n</code></pre>"},{"location":"rdetoolkit/invoicefile/","title":"InvoiceFile API","text":""},{"location":"rdetoolkit/invoicefile/#purpose","title":"Purpose","text":"<p>This module handles processing of invoice files (invoice.json) and Excel invoice files in RDEToolKit. It provides functionality for data file management, metadata extraction, and file path operations.</p>"},{"location":"rdetoolkit/invoicefile/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/invoicefile/#invoice-file-management","title":"Invoice File Management","text":"<ul> <li>Loading and manipulation of JSON format invoice files</li> <li>Processing of Excel format invoice files</li> <li>Path management and listing of raw data files</li> </ul>"},{"location":"rdetoolkit/invoicefile/#data-processing","title":"Data Processing","text":"<ul> <li>Application and replacement of magic variables</li> <li>Updating descriptions with feature information</li> <li>File existence verification and validation</li> <li>Rule-based replacement processing</li> </ul>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.read_excelinvoice","title":"<code>src.rdetoolkit.invoicefile.read_excelinvoice(excelinvoice_filepath)</code>","text":"<p>Reads an ExcelInvoice and processes each sheet into a dataframe.</p> <p>This function reads an Excel file and processes three specific sheets: 1. A sheet containing 'invoiceList_format_id' in cell A1 (duplicate sheets with this value are not allowed) 2. A sheet named 'generalTerm' 3. A sheet named 'specificTerm'</p> <p>Parameters:</p> Name Type Description Default <code>excelinvoice_filepath</code> <code>str</code> <p>The file path of the Excel invoice file.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[DataFrame, DataFrame, DataFrame]</code> <p>A tuple containing dataframes for the invoice list, general terms, and specific terms.If any of these sheets are missing or if there are multiple invoice list sheets, a StructuredError is raised.</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If there are multiple sheets with <code>invoiceList_format_id</code> in the ExcelInvoice, or if no sheets are present in the ExcelInvoice.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.check_exist_rawfiles","title":"<code>src.rdetoolkit.invoicefile.check_exist_rawfiles(dfexcelinvoice, excel_rawfiles)</code>","text":"<p>Checks for the existence of raw file paths listed in a DataFrame against a list of file Paths.</p> <p>This function compares a set of file names extracted from the <code>data_file_names/name</code> column of the provided DataFrame (dfexcelinvoice) with the names of files in the excel_rawfiles list. If there are file names in the DataFrame that are not present in the excel_rawfiles list, it raises a StructuredError with a message indicating the missing file. If all file names in the DataFrame are present in the excel_rawfiles list, it returns a list of Path objects from excel_rawfiles, sorted in the order they appear in the DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>dfexcelinvoice</code> <code>DataFrame</code> <p>A DataFrame containing file names in the 'data_file_names/name' column.</p> required <code>excel_rawfiles</code> <code>list[Path]</code> <p>A list of Path objects representing file paths.</p> required <p>Raises:</p> Type Description <code>tructuredError</code> <p>If any file name in dfexcelinvoice is not found in excel_rawfiles.</p> <p>Returns:</p> Type Description <code>list[Path]</code> <p>list[Path]: A list of Path objects corresponding to the file names in dfexcelinvoice, ordered as they appear in the DataFrame.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile._assign_invoice_val","title":"<code>src.rdetoolkit.invoicefile._assign_invoice_val(invoiceobj, key1, key2, valobj, invoiceschema_obj)</code>","text":"<p>When the destination key, which is the first key 'keys1', is 'custom', valobj is cast according to the invoiceschema_obj. In all other cases, valobj is assigned without changing its type.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.overwrite_invoicefile_for_dpfterm","title":"<code>src.rdetoolkit.invoicefile.overwrite_invoicefile_for_dpfterm(invoiceobj, invoice_dst_filepath, invoiceschema_filepath, invoice_info)</code>","text":"<p>A function to overwrite DPF metadata into an invoice file.</p> <p>Parameters:</p> Name Type Description Default <code>invoiceobj</code> <code>dict[str, Any]</code> <p>The object of invoice.json.</p> required <code>invoice_dst_filepath</code> <code>RdeFsPath</code> <p>The file path for the destination invoice.json.</p> required <code>invoiceschema_filepath</code> <code>RdeFsPath</code> <p>The file path of invoice.schema.json.</p> required <code>invoice_info</code> <code>dict[str, Any]</code> <p>Information about the invoice file.</p> required"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile","title":"<code>src.rdetoolkit.invoicefile.InvoiceFile(invoice_path)</code>","text":"<p>Represents an invoice file and provides utilities to read and overwrite it.</p> <p>Attributes:</p> Name Type Description <code>invoice_path</code> <code>Path</code> <p>Path to the invoice file.</p> <code>invoice_obj</code> <code>dict</code> <p>Dictionary representation of the invoice JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>invoice_path</code> <code>Path</code> <p>The path to the invoice file.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>invoice_obj</code> is not a dictionary.</p> Example"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile--usage","title":"Usage","text":"<p>invoice = InvoiceFile(\"invoice.json\") invoice.invoice_obj\"basic\" = \"new_data_name\" invoice.overwrite(\"invoice_new.json\")</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.invoice_obj","title":"<code>invoice_obj: dict[str, Any]</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the invoice object.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.invoice_path","title":"<code>invoice_path: Incomplete = invoice_path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.__delitem__","title":"<code>__delitem__(key)</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.__getitem__","title":"<code>__getitem__(key)</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.__setitem__","title":"<code>__setitem__(key, value)</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.copy_original_invoice","title":"<code>copy_original_invoice(src_file_path, dst_file_path)</code>  <code>classmethod</code>","text":"<p>Copies the original invoice file from the source file path to the destination file path.</p> <p>Parameters:</p> Name Type Description Default <code>src_file_path</code> <code>Path</code> <p>The source file path of the original invoice file.</p> required <code>dst_file_path</code> <code>Path</code> <p>The destination file path where the original invoice file will be copied to.</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>If the source file path does not exist.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.overwrite","title":"<code>overwrite(dst_file_path, *, src_obj=None)</code>","text":"<p>Overwrites the contents of the destination file with the invoice JSON data.</p> <p>Parameters:</p> Name Type Description Default <code>dst_file_path</code> <code>Path</code> <p>The path to the destination file.</p> required <code>src_obj</code> <code>Optional[Path]</code> <p>The path to the source object. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If the destination file does not exist.</p> Example"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.overwrite--usage","title":"Usage","text":"<p>invoice = InvoiceFile(\"invoice.json\") invoice.invoice_obj\"basic\" = \"new_data_name\" invoice.overwrite(\"invoice_new.json\")</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.InvoiceFile.read","title":"<code>read(*, target_path=None)</code>","text":"<p>Reads the content of the invoice file and returns it as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>target_path</code> <code>Optional[Path]</code> <p>Path to the target invoice file. If not provided, uses the path from <code>self.invoice_path</code>. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Dictionary representation of the invoice JSON file.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile","title":"<code>src.rdetoolkit.invoicefile.ExcelInvoiceFile(invoice_path)</code>","text":"<p>Class representing an invoice file in Excel format. Provides utilities for reading and overwriting the invoice file.</p> <p>Attributes:</p> Name Type Description <code>invoice_path</code> <code>Path</code> <p>Path to the excel invoice file (.xlsx).</p> <code>dfexcelinvoice</code> <code>DataFrame</code> <p>Dataframe of the invoice.</p> <code>df_general</code> <code>DataFrame</code> <p>Dataframe of general data.</p> <code>df_specific</code> <code>DataFrame</code> <p>Dataframe of specific data.</p> <code>self.template_generator</code> <code>ExcelInvoiceTemplateGenerator</code> <p>Template generator for the Excelinvoice.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.invoice_path","title":"<code>invoice_path: Incomplete = invoice_path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.template_generator","title":"<code>template_generator: Incomplete = ExcelInvoiceTemplateGenerator(FixedHeaders())</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.__is_empty_row","title":"<code>__is_empty_row(row)</code>  <code>staticmethod</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.check_intermittent_empty_rows","title":"<code>check_intermittent_empty_rows(df)</code>  <code>staticmethod</code>","text":"<p>Function to detect if there are empty rows between data rows in the ExcelInvoice (in DataFrame format).</p> <p>If an empty row exists, an exception is raised.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Information of Sheet 1 of ExcelInvoice.</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>An exception is raised if an empty row exists.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.generate_template","title":"<code>generate_template(invoice_schema_path, save_path, file_mode='file')</code>  <code>classmethod</code>","text":"<p>Generates a template DataFrame based on the provided invoice schema and saves it to the specified path.</p> <p>Parameters:</p> Name Type Description Default <code>invoice_schema_path</code> <code>str | Path</code> <p>The path to the invoice schema file.</p> required <code>save_path</code> <code>str | Path</code> <p>The path where the generated template will be saved.</p> required <code>file_mode</code> <code>Literal['file', 'folder']</code> <p>The mode indicating whether the input is a file or a folder. Defaults to \"file\".</p> <code>'file'</code> <p>Returns:</p> Type Description <code>tuple[DataFrame, DataFrame, DataFrame]</code> <p>tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]: - A DataFrame representing the generated template. - A DataFrame containing references for general terms. - A DataFrame containing references for specific terms.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.overwrite","title":"<code>overwrite(invoice_org, dist_path, invoice_schema_path, idx)</code>","text":"<p>Overwrites the content of the original invoice file based on the data from the Excel invoice and saves it as a new file.</p> <p>Parameters:</p> Name Type Description Default <code>invoice_org</code> <code>Path</code> <p>Path to the original invoice file.</p> required <code>dist_path</code> <code>Path</code> <p>Path to where the overwritten invoice file will be saved.</p> required <code>invoice_schema_path</code> <code>Path</code> <p>Path to the invoice schema.</p> required <code>idx</code> <code>int</code> <p>Index of the target row in the invoice dataframe.</p> required"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.read","title":"<code>read(*, target_path=None)</code>","text":"<p>Reads the content of the Excel invoice file and returns it as three dataframes.</p> <p>Parameters:</p> Name Type Description Default <code>target_path</code> <code>Optional[Path]</code> <p>Path to the excelinvoice file(.xlsx) to be read. If not provided, uses the path from <code>self.invoice_path</code>. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[DataFrame, DataFrame, DataFrame]</code> <p>tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]: Three dataframes (dfexcelinvoice, df_general, df_specific).</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If the invoice file is not found, or if multiple sheets exist in the invoice list files,</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceFile.save","title":"<code>save(save_path, *, invoice=None, sheet_name='invoice_form', index=None, header=None)</code>","text":"<p>Save the invoice DataFrame to an Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>save_path</code> <code>str | Path</code> <p>The path where the Excel file will be saved.</p> required <code>invoice</code> <code>DataFrame | None</code> <p>The DataFrame containing the invoice data. Defaults to None.</p> <code>None</code> <code>sheet_name</code> <code>str</code> <p>The name of the sheet in the Excel file. Defaults to \"invoice_form\".</p> <code>'invoice_form'</code> <code>index</code> <code>list[str] | None</code> <p>The list of index labels to use. If None, index will not be written. Defaults to None.</p> <code>None</code> <code>header</code> <code>list[str] | None</code> <p>The list of column headers to use. If None, header will not be written. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceTemplateGenerator","title":"<code>src.rdetoolkit.invoicefile.ExcelInvoiceTemplateGenerator(fixed_header)</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceTemplateGenerator.CUSTOM_PREFIX","title":"<code>CUSTOM_PREFIX: str = 'custom'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceTemplateGenerator.GENERAL_PREFIX","title":"<code>GENERAL_PREFIX: str = 'sample.general'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceTemplateGenerator.SPECIFIC_PREFIX","title":"<code>SPECIFIC_PREFIX: str = 'sample.specific'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceTemplateGenerator.fixed_header","title":"<code>fixed_header: Incomplete = fixed_header</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceTemplateGenerator.generate","title":"<code>generate(config)</code>","text":"<p>Generates a template based on the provided configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>TemplateConfig</code> <p>The configuration object.</p> required <p>Returns:</p> Type Description <code>tuple[DataFrame, DataFrame, DataFrame, DataFrame]</code> <p>tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]: - A DataFrame representing the generated template. - A DataFrame containing references for general terms. - A DataFrame containing references for specific terms. - A DataFrame containing rdetoolkit version.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.ExcelInvoiceTemplateGenerator.save","title":"<code>save(dataframes, save_path)</code>","text":"<p>Save the given DataFrame to an Excel file with specific formatting.</p> <p>Parameters:</p> Name Type Description Default <code>dataframes</code> <code>dict[str, DataFrame]</code> <p>The DataFrame to be saved.</p> required <code>save_path</code> <code>str</code> <p>The path where the Excel file will be saved.</p> required Note <p>The method performs the following operations: - Writes the DataFrame to an Excel file starting from the 5th row without headers. - Sets the height of the 5th row to 40. - Adjusts the width of all columns to 20. - Applies a thin border to all cells in the range from row 5 to row 40. - Applies a thick top border and a double bottom border to the cells in the 5th row.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.backup_invoice_json_files","title":"<code>src.rdetoolkit.invoicefile.backup_invoice_json_files(excel_invoice_file, mode)</code>","text":"<p>Backs up invoice files and retrieves paths based on the mode specified in the input.</p> <p>For excelinvoice and rdeformat modes, it backs up invoice.json as the original file in the temp directory in MultiDataTile mode. For other modes, it treats the files in the invoice directory as the original files. After backing up, it returns the file paths for invoice_org.json and invoice.schema.json.</p> <p>Parameters:</p> Name Type Description Default <code>excel_invoice_file</code> <code>Optional[Path]</code> <p>File path for excelinvoice mode</p> required <code>mode</code> <code>str</code> <p>mode flags</p> required <p>Returns:</p> Type Description <code>Path</code> <p>tuple[Path, Path]: File paths for invoice.json and invoice.schema.json</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.update_description_with_features","title":"<code>src.rdetoolkit.invoicefile.update_description_with_features(rde_resource, dst_invoice_json, metadata_def_json)</code>","text":"<p>Writes the provided features to the description field RDE.</p> <p>This function takes a dictionary of features and formats them to be written into the description field(to invoice.json)</p> <p>Parameters:</p> Name Type Description Default <code>rde_resource</code> <code>RdeOutputResourcePath</code> <p>Path object containing resource paths needed for RDE processing.</p> required <code>dst_invoice_json</code> <code>Path</code> <p>Path to the invoice.json file where the features will be written.</p> required <code>metadata_def_json</code> <code>Path</code> <p>Path to the metadata list JSON file, which may include definitions or schema information.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>The function does not return a value but writes the features to the invoice.json file in the description field.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer","title":"<code>src.rdetoolkit.invoicefile.RuleBasedReplacer(*, rule_file_path=None)</code>","text":"<p>A class for changing the rules of data naming.</p> <p>This class is used to manage and apply file name mapping rules. It reads rules from a JSON format rule file, sets rules, and performs file name transformations and replacements based on those rules.</p> <p>Attributes:</p> Name Type Description <code>rules</code> <code>dict[str, str]</code> <p>Dictionary holding the mapping rules.</p> <code>last_apply_result</code> <code>dict[str, Any]</code> <p>The result of the last applied rules.</p> <p>Parameters:</p> Name Type Description Default <code>rule_file_path</code> <code>Optional[Union[str, Path]]</code> <p>Path to the rule file. If specified, rules are loaded from this path.</p> <code>None</code>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.last_apply_result","title":"<code>last_apply_result: Incomplete = {}</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.rules","title":"<code>rules: Incomplete = {}</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.get_apply_rules_obj","title":"<code>get_apply_rules_obj(replacements, source_json_obj, *, mapping_rules=None)</code>","text":"<p>Function to convert file mapping rules into a JSON format.</p> <p>This function takes string mappings separated by dots ('.') and converts them into a dictionary format, making it easier to handle within a target JsonObject.</p> <p>Parameters:</p> Name Type Description Default <code>replacements</code> <code>dict[str, str]</code> <p>The object containing mapping rules.</p> required <code>source_json_obj</code> <code>Optional[dict[str, Any]]</code> <p>Objects of key and value to which you want to apply the rule</p> required <code>mapping_rules</code> <code>Optional[dict[str, str]]</code> <p>Rules for mapping key and value. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: dictionary type data after conversion</p> Example"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.get_apply_rules_obj--rulejson","title":"rule.json","text":"<p>rule = {     \"filename_mapping\": {         \"invoice.basic.dataName\": \"${filename}\",         \"invoice.sample.names\": [\"${somedataname}\"],     } } replacer = RuleBasedReplacer('rules.json') replacements = {     '${filename}': 'example.txt',     '${somedataname}': ['some data'] } result = replacer.apply_rules(replacement_rule, save_file_path, mapping_rules = rule) print(result)</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.load_rules","title":"<code>load_rules(filepath)</code>","text":"<p>Function to read file mapping rules.</p> <p>The file containing the mapping rules must be in JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Union[str, Path]</code> <p>The file path of the JSON file containing the mapping rules.</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>An exception is raised if the file extension is not json.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.set_rule","title":"<code>set_rule(path, variable)</code>","text":"<p>Sets a new rule.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the target location for replacement.</p> required <code>variable</code> <code>str</code> <p>The rule after replacement.</p> required Example <p>replacer = RuleBasedReplacer() replacer.set_rule('invoice.basic.dataName', 'filename') replacer.set_rule('invoice.sample.name', 'dataname') print(replacer.rules)</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.RuleBasedReplacer.write_rule","title":"<code>write_rule(replacements_rule, save_file_path)</code>","text":"<p>Function to write file mapping rules to a target JSON file.</p> <p>Writes the set mapping rules (in JSON format) to the target file</p> <p>Parameters:</p> Name Type Description Default <code>replacements_rule</code> <code>dict[str, str]</code> <p>The object containing mapping rules.</p> required <code>save_file_path</code> <code>Union[str, Path]</code> <p>The file path for saving.</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>An exception error occurs if the extension of the save path is not .json.</p> <code>StructuredError</code> <p>An exception error occurs if values cannot be written to the json.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The result of writing to the target JSON.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.apply_default_filename_mapping_rule","title":"<code>src.rdetoolkit.invoicefile.apply_default_filename_mapping_rule(replacement_rule, save_file_path)</code>","text":"<p>Applies a default filename mapping rule based on the basename of the save file path.</p> <p>This function creates an instance of RuleBasedReplacer and applies a default mapping rule. If the basename of the save file path is 'invoice', it sets a specific rule for 'basic.dataName'. After setting the rule, it writes the mapping rule to the specified file path and returns the result of the last applied rules.</p> <p>Parameters:</p> Name Type Description Default <code>replacement_rule</code> <code>dict[str, Any]</code> <p>The replacement rules to be applied.</p> required <code>save_file_path</code> <code>Union[str, Path]</code> <p>The file path where the replacement rules are saved.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The result of the last applied replacement rules.</p> <p>The function assumes the existence of certain structures in the replacement rules and file paths, and it specifically checks for a basename of 'invoice' to apply a predefined rule.</p>"},{"location":"rdetoolkit/invoicefile/#src.rdetoolkit.invoicefile.apply_magic_variable","title":"<code>src.rdetoolkit.invoicefile.apply_magic_variable(invoice_path, rawfile_path, *, save_filepath=None)</code>","text":"<p>Converts the magic variable ${filename}.</p> <p>If ${filename} is present in basic.dataName of invoice.json, it is replaced with the filename of rawfile_path.</p> <p>Parameters:</p> Name Type Description Default <code>invoice_path</code> <code>Union[str, Path]</code> <p>The file path of invoice.json.</p> required <code>rawfile_path</code> <code>Union[str, Path]</code> <p>The file path of the input data.</p> required <code>save_filepath</code> <code>Optional[Union[str, Path]]</code> <p>The file path to save to. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The content of invoice.json after replacement.</p>"},{"location":"rdetoolkit/invoicefile/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/invoicefile/#basic-invoice-file-operations","title":"Basic Invoice File Operations","text":"basic_invoice.py<pre><code>from rdetoolkit.invoicefile import InvoiceFile\nfrom pathlib import Path\n\n# Load invoice file\ninvoice_path = Path(\"data/invoice/invoice.json\")\ninvoice = InvoiceFile(invoice_path)\n\n# Read invoice data\ninvoice_data = invoice.read()\nprint(f\"Data name: {invoice_data.get('basic', {}).get('dataName')}\")\n\n# Overwrite invoice file\nupdated_data = invoice_data.copy()\nupdated_data['basic']['description'] = \"Updated description\"\ninvoice.overwrite(updated_data)\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#excel-invoice-file-processing","title":"Excel Invoice File Processing","text":"excel_invoice.py<pre><code>from rdetoolkit.invoicefile import ExcelInvoiceFile, read_excelinvoice\nfrom pathlib import Path\n\n# Load Excel invoice file\nexcel_path = Path(\"data/invoice/invoice.xlsx\")\nexcel_invoice = ExcelInvoiceFile(excel_path)\n\n# Read data\nexcel_data = excel_invoice.read()\nprint(f\"Loaded data: {excel_data}\")\n\n# Generate template\ntemplate_data = excel_invoice.generate_template()\nexcel_invoice.save(template_data, Path(\"data/invoice/template.xlsx\"))\n\n# Read as dataframes\ndataframes = read_excelinvoice(excel_path)\nprint(f\"Number of sheets: {len(dataframes)}\")\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#file-existence-verification-and-validation","title":"File Existence Verification and Validation","text":"file_validation.py<pre><code>from rdetoolkit.invoicefile import check_exist_rawfiles\nfrom pathlib import Path\n\n# Check existence of raw data files\nrawfiles_dir = Path(\"data/rawfiles\")\nfile_list = [\"data1.csv\", \"data2.txt\", \"image.png\"]\n\nmissing_files = check_exist_rawfiles(rawfiles_dir, file_list)\nif missing_files:\n    print(f\"Missing files: {missing_files}\")\nelse:\n    print(\"All files exist\")\n</code></pre>"},{"location":"rdetoolkit/invoicefile/#magic-variables-and-rule-based-replacement","title":"Magic Variables and Rule-Based Replacement","text":"magic_variables_and_rules.py<pre><code>from rdetoolkit.invoicefile import apply_magic_variable, RuleBasedReplacer\nfrom rdetoolkit.models.rde2types import RdeOutputResourcePath\nfrom pathlib import Path\n\n# Apply magic variables\nresource_paths = RdeOutputResourcePath(\n    rawfiles=Path(\"data/rawfiles\"),\n    thumbnail=Path(\"data/thumbnail\"),\n    meta=Path(\"data/meta\"),\n    invoice=Path(\"data/invoice\")\n)\n\ninvoice_path = resource_paths.invoice / \"invoice.json\"\napply_magic_variable(resource_paths, invoice_path)\n\n# Use rule-based replacer\nreplacer = RuleBasedReplacer()\nreplacer.load_rules(Path(\"config/replacement_rules.json\"))\n\n# Apply replacement rules\napply_rules_obj = replacer.get_apply_rules_obj()\nreplacer.set_rule(\"temperature\", \"Temperature\")\nreplacer.write_rule(Path(\"config/updated_rules.json\"))\n</code></pre>"},{"location":"rdetoolkit/modeproc/","title":"ModeProc API","text":""},{"location":"rdetoolkit/modeproc/#purpose","title":"Purpose","text":"<p>This module defines processing for various input modes in RDEToolKit's structured processing. It provides dedicated processing flows for Invoice, ExcelInvoice, RDEFormat, and MultiFile modes.</p>"},{"location":"rdetoolkit/modeproc/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/modeproc/#input-mode-processing","title":"Input Mode Processing","text":"<ul> <li>Invoice Mode: Processing using JSON format invoice files</li> <li>Excel Invoice Mode: Processing using Excel format invoice files</li> <li>RDEFormat Mode: Processing in RDE standard format</li> <li>MultiFile Mode: Batch processing of multiple files</li> </ul>"},{"location":"rdetoolkit/modeproc/#file-operations","title":"File Operations","text":"<ul> <li>Copying input files to raw data directory</li> <li>Generation and placement of thumbnail images</li> <li>Metadata validation and updates</li> </ul>"},{"location":"rdetoolkit/modeproc/#src.rdetoolkit.modeproc.invoice_mode_process","title":"<code>src.rdetoolkit.modeproc.invoice_mode_process(index, srcpaths, resource_paths, datasets_process_function=None)</code>","text":"<p>Processes invoice-related data, applies dataset transformations using the provided callback function, and updates descriptions.</p> <p>This function performs several steps:</p> <ol> <li>Copies input files to the rawfile directory.</li> <li>Runs a custom dataset process function if provided.</li> <li>Copies images to the thumbnail directory.</li> <li>Replaces the placeholder '${filename}' in the invoice with the actual filename if necessary.</li> <li>Attempts to update descriptions with features, ignoring any errors during this step.</li> <li>Validates the metadata-def.json file.</li> <li>Validates the invoice file against the invoice schema.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>The workflow execution ID (run_id) is a unique identifier used to distinguish a specific execution of a workflow.</p> required <code>srcpaths</code> <code>RdeInputDirPaths</code> <p>Input paths for the source data.</p> required <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <code>datasets_process_function</code> <code>_CallbackType</code> <p>A callback function that processes datasets. Defaults to None.</p> <code>None</code> <code>config</code> <code>Config</code> <p>Configuration instance for structured processing execution. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>WorkflowExecutionStatus</code> <code>WorkflowExecutionStatus</code> <p>An object containing the execution status of the workflow, including: - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits. - title (str): A descriptive title for the workflow execution. - status (str): The status of the workflow execution, either \"success\" or \"failed\". - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\". - error_code (int | None): The error code if an error occurred, otherwise None. - error_message (str | None): The error message if an error occurred, otherwise None. - target (str): The target directory or file path related to the workflow execution.</p>"},{"location":"rdetoolkit/modeproc/#src.rdetoolkit.modeproc.excel_invoice_mode_process","title":"<code>src.rdetoolkit.modeproc.excel_invoice_mode_process(srcpaths, resource_paths, excel_invoice_file, idx, datasets_process_function=None)</code>","text":"<p>Processes invoice data from an Excel file and applies dataset transformations using the provided callback function.</p> <p>This function performs several steps:</p> <ol> <li>Overwrites the Excel invoice file.</li> <li>Copies input files to the rawfile directory.</li> <li>Runs a custom dataset process function if provided.</li> <li>Replaces the placeholder '${filename}' in the invoice with the actual filename if necessary.</li> <li>Copies images to the thumbnail directory.</li> <li>Attempts to update descriptions with features, ignoring any errors during this step.</li> <li>Validates the metadata-def.json file.</li> <li>Validates the invoice file against the invoice schema.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>srcpaths</code> <code>RdeInputDirPaths</code> <p>Input paths for the source data.</p> required <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <code>excel_invoice_file</code> <code>Path</code> <p>Path to the source Excel invoice file.</p> required <code>idx</code> <code>int</code> <p>Index or identifier for the data being processed.</p> required <code>datasets_process_function</code> <code>_CallbackType</code> <p>A callback function that processes datasets. Defaults to None.</p> <code>None</code> <code>config</code> <code>Config</code> <p>Configuration instance for structured processing execution. Defaults to None.</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>When encountering issues related to Excel invoice overwriting or during the validation steps.</p> <p>Returns:</p> Name Type Description <code>WorkflowExecutionStatus</code> <code>WorkflowExecutionStatus</code> <p>An object containing the execution status of the workflow, including: - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits. - title (str): A descriptive title for the workflow execution. - status (str): The status of the workflow execution, either \"success\" or \"failed\". - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\". - error_code (int | None): The error code if an error occurred, otherwise None. - error_message (str | None): The error message if an error occurred, otherwise None. - target (str): The target directory or file path related to the workflow execution.</p>"},{"location":"rdetoolkit/modeproc/#src.rdetoolkit.modeproc.rdeformat_mode_process","title":"<code>src.rdetoolkit.modeproc.rdeformat_mode_process(index, srcpaths, resource_paths, datasets_process_function=None)</code>","text":"<p>Process the source data and apply specific transformations using the provided callback function.</p> <p>This function performs several steps:</p> <ol> <li>Overwrites the invoice file.</li> <li>Copies input files to the rawfile directory.</li> <li>Runs a custom dataset process function if provided.</li> <li>Copies images to the thumbnail directory.</li> <li>Updates descriptions with features, ignoring any errors during this step.</li> <li>Validates the metadata-def.json file.</li> <li>Validates the invoice file against the invoice schema.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>The workflow execution ID (run_id) is a unique identifier used to distinguish a specific execution of a workflow.</p> required <code>srcpaths</code> <code>RdeInputDirPaths</code> <p>Input paths for the source data.</p> required <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <code>datasets_process_function</code> <code>_CallbackType</code> <p>A callback function that processes datasets. Defaults to None.</p> <code>None</code> <code>config</code> <code>Config</code> <p>Configuration instance for structured processing execution. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>WorkflowExecutionStatus</code> <code>WorkflowExecutionStatus</code> <p>An object containing the execution status of the workflow, including: - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits. - title (str): A descriptive title for the workflow execution. - status (str): The status of the workflow execution, either \"success\" or \"failed\". - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\". - error_code (int | None): The error code if an error occurred, otherwise None. - error_message (str | None): The error message if an error occurred, otherwise None. - target (str): The target directory or file path related to the workflow execution.</p>"},{"location":"rdetoolkit/modeproc/#src.rdetoolkit.modeproc.copy_input_to_rawfile_for_rdeformat","title":"<code>src.rdetoolkit.modeproc.copy_input_to_rawfile_for_rdeformat(resource_paths)</code>","text":"<p>Copy the input raw files to their respective directories based on the file's part names.</p> <p>This function scans through the parts of each file's path in <code>resource_paths.rawfiles</code>. If the file path contains a directory name listed in the <code>directories</code> dict, the file will be copied to the corresponding directory.</p> <p>Parameters:</p> Name Type Description Default <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"rdetoolkit/modeproc/#src.rdetoolkit.modeproc.multifile_mode_process","title":"<code>src.rdetoolkit.modeproc.multifile_mode_process(index, srcpaths, resource_paths, datasets_process_function=None)</code>","text":"<p>Processes multiple source files and applies transformations using the provided callback function.</p> <p>This function performs several steps:</p> <ol> <li>Overwrites the invoice file.</li> <li>Copies input files to the rawfile directory.</li> <li>Runs a custom dataset process function if provided.</li> <li>Replaces the placeholder '${filename}' in the invoice with the actual filename if necessary.</li> <li>Copies images to the thumbnail directory.</li> <li>Attempts to update descriptions with features, ignoring any errors during this step.</li> <li>Validates the metadata-def.json file.</li> <li>Validates the invoice file against the invoice schema.</li> </ol> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>The workflow execution ID (run_id) is a unique identifier used to distinguish a specific execution of a workflow.</p> required <code>srcpaths</code> <code>RdeInputDirPaths</code> <p>Input paths for the source data.</p> required <code>resource_paths</code> <code>RdeOutputResourcePath</code> <p>Paths to the resources where data will be written or read from.</p> required <code>datasets_process_function</code> <code>_CallbackType</code> <p>A callback function that processes datasets. Defaults to None.</p> <code>None</code> <code>config</code> <code>Config</code> <p>Configuration instance for structured processing execution. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>WorkflowExecutionStatus</code> <code>WorkflowExecutionStatus</code> <p>An object containing the execution status of the workflow, including: - run_id (str): The unique identifier for the workflow execution, zero-padded to four digits. - title (str): A descriptive title for the workflow execution. - status (str): The status of the workflow execution, either \"success\" or \"failed\". - mode (str): The mode in which the workflow was executed, e.g., \"rdeformat\". - error_code (int | None): The error code if an error occurred, otherwise None. - error_message (str | None): The error message if an error occurred, otherwise None. - target (str): The target directory or file path related to the workflow execution.</p>"},{"location":"rdetoolkit/modeproc/#src.rdetoolkit.modeproc.copy_input_to_rawfile","title":"<code>src.rdetoolkit.modeproc.copy_input_to_rawfile(raw_dir_path, raw_files)</code>","text":"<p>Copy the input raw files to the specified directory.</p> <p>This function takes a list of raw file paths and copies each file to the given <code>raw_dir_path</code>.</p> <p>Parameters:</p> Name Type Description Default <code>raw_dir_path</code> <code>Path</code> <p>The directory path where the raw files will be copied to.</p> required <code>raw_files</code> <code>tuple[Path, ...]</code> <p>A tuple of file paths that need to be copied.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"rdetoolkit/modeproc/#src.rdetoolkit.modeproc.selected_input_checker","title":"<code>src.rdetoolkit.modeproc.selected_input_checker(src_paths, unpacked_dir_path, mode, config=None)</code>","text":"<p>Determine the appropriate input file checker based on the provided format flags and source paths.</p> <p>The function scans the source paths to identify the type of input files present. Based on the file type and format flags provided, it instantiates and returns the appropriate checker.</p> <p>Parameters:</p> Name Type Description Default <code>src_paths</code> <code>RdeInputDirPaths</code> <p>Paths for the source input files.</p> required <code>unpacked_dir_path</code> <code>Path</code> <p>Directory path for unpacked files.</p> required <code>mode</code> <code>str | None</code> <p>Format flags indicating which checker mode is enabled. Expected values include \"rdeformat\", \"multidatatile\", or None.</p> required <code>config</code> <code>Config | None</code> <p>Configuration instance for structured processing execution. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>IInputFileChecker</code> <code>IInputFileChecker</code> <p>An instance of the appropriate input file checker based on the provided criteria.</p>"},{"location":"rdetoolkit/modeproc/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/modeproc/#rdeformat-mode-processing","title":"RDEFormat Mode Processing","text":"rdeformat_processing.py<pre><code>from rdetoolkit.modeproc import rdeformat_mode_process\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef custom_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"Custom dataset processing function\"\"\"\n    # Set metadata\n    metadata = {\n        \"processing_mode\": \"rdeformat\",\n        \"timestamp\": \"2024-01-01T10:00:00Z\"\n    }\n\n    # Create metadata file\n    import json\n    with open(resource_paths.meta / \"metadata.json\", \"w\") as f:\n        json.dump(metadata, f, ensure_ascii=False, indent=2)\n\n# Execute RDEFormat mode processing\nresult = rdeformat_mode_process(\n    index=\"001\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_process_function=custom_dataset_function\n)\n\nprint(f\"Processing result: {result.status}\")\nprint(f\"Execution ID: {result.run_id}\")\n</code></pre>"},{"location":"rdetoolkit/modeproc/#invoice-mode-processing","title":"Invoice Mode Processing","text":"invoice_processing.py<pre><code>from rdetoolkit.modeproc import invoice_mode_process\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\n# Execute Invoice mode processing\nresult = invoice_mode_process(\n    index=\"002\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_process_function=custom_dataset_function\n)\n\nif result.status == \"success\":\n    print(f\"Invoice processing completed successfully: {result.title}\")\nelse:\n    print(f\"Processing error: {result.error_message}\")\n</code></pre>"},{"location":"rdetoolkit/modeproc/#excel-invoice-mode-processing","title":"Excel Invoice Mode Processing","text":"excel_invoice_processing.py<pre><code>from rdetoolkit.modeproc import excel_invoice_mode_process\nfrom pathlib import Path\n\n# Specify Excel invoice file\nexcel_invoice_path = Path(\"data/invoice/invoice.xlsx\")\n\n# Execute Excel Invoice mode processing\nresult = excel_invoice_mode_process(\n    index=\"003\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_process_function=custom_dataset_function,\n    excel_invoice_file=excel_invoice_path\n)\n\nprint(f\"Excel Invoice processing result: {result.status}\")\n</code></pre>"},{"location":"rdetoolkit/modeproc/#multifile-mode-processing","title":"MultiFile Mode Processing","text":"multifile_processing.py<pre><code>from rdetoolkit.modeproc import multifile_mode_process\n\n# Batch processing of multiple files\nresult = multifile_mode_process(\n    index=\"004\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_process_function=custom_dataset_function\n)\n\nprint(f\"MultiFile processing result: {result.status}\")\nprint(f\"Processing target: {result.target}\")\n</code></pre>"},{"location":"rdetoolkit/modeproc/#using-input-checker","title":"Using Input Checker","text":"input_checker.py<pre><code>from rdetoolkit.modeproc import selected_input_checker\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\n\n# Check appropriateness of input files\nsrcpaths = RdeInputDirPaths(\n    inputdata=Path(\"data/input\"),\n    invoice=Path(\"data/invoice\"),\n    tasksupport=Path(\"data/tasksupport\")\n)\n\nchecker_result = selected_input_checker(srcpaths, mode=\"Invoice\")\nif checker_result:\n    print(\"Input files are appropriate\")\nelse:\n    print(\"There are issues with input files\")\n</code></pre>"},{"location":"rdetoolkit/rde2util/","title":"RDE2Util API","text":""},{"location":"rdetoolkit/rde2util/#purpose","title":"Purpose","text":"<p>This module provides various utility functions used in RDEToolKit's structured processing. It includes a wide range of support functions such as metadata management, storage operations, character encoding detection, and data type conversion.</p>"},{"location":"rdetoolkit/rde2util/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/rde2util/#metadata-management","title":"Metadata Management","text":"<ul> <li>Creation, updating, and validation of metadata</li> <li>Conversion of dictionary format data to metadata</li> <li>Reading and writing metadata files</li> </ul>"},{"location":"rdetoolkit/rde2util/#storage-operations","title":"Storage Operations","text":"<ul> <li>Management and creation of data directories</li> <li>Dynamic generation of output directories</li> <li>Standardization of file paths</li> </ul>"},{"location":"rdetoolkit/rde2util/#data-processing","title":"Data Processing","text":"<ul> <li>Automatic detection of character encoding</li> <li>Automatic data type conversion and casting</li> <li>Reading and writing JSON files</li> <li>Extraction of Japanese ZIP files</li> </ul>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta","title":"<code>src.rdetoolkit.rde2util.Meta(metadef_filepath, *, metafilepath=None)</code>","text":"<p>This class initializes metadata from a definition file, with existing metadata loading not currently supported.</p> <p>Initializes the Meta class.</p> <p>This method supports either loading existing metadata (if <code>metafilepath</code> is specified) or creating new metadata (if <code>metaDefFilePath</code> is specified). Currently, the functionality to load existing metadata is not supported and will raise an error.</p> <p>Parameters:</p> Name Type Description Default <code>metadef_filepath</code> <code>RdeFsPath</code> <p>The file path for metadata definition, used for creating new metadata.</p> required <code>metafilepath</code> <code>Optional[RdeFsPath]</code> <p>The file path for existing metadata, intended for future support                                 in loading existing metadata. Currently not supported.</p> <code>None</code> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If <code>metafilepath</code> is not None, as loading existing metadata is not supported yet.</p> Note <p>The <code>metaDefFilterFunc</code> attribute is currently not in use and has been removed.</p> <p>Attributes:</p> Name Type Description <code>metaConst</code> <code>dict[str, MetaItem]</code> <p>A dictionary for constant metadata.</p> <code>metaVar</code> <code>list[dict[str, MetaItem]]</code> <p>A list of dictionaries for variable metadata.</p> <code>actions</code> <code>list[str]</code> <p>A list of actions.</p> <code>referedmap</code> <code>dict[str, Optional[Union[str, list]]]</code> <p>A dictionary mapping references.</p> <code>metaDef</code> <code>dict[str, MetadataDefJson]</code> <p>A dictionary for metadata definition, read from the metadata definition file.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.actions","title":"<code>actions: Incomplete = []</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.metaConst","title":"<code>metaConst: Incomplete = {}</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.metaDef","title":"<code>metaDef: Incomplete = self._read_metadef_file(metadef_filepath)</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.metaVar","title":"<code>metaVar: Incomplete = []</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.referedmap","title":"<code>referedmap: Incomplete = {}</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.__convert_to_str","title":"<code>__convert_to_str(value)</code>","text":"<p>Convert the given value to string or list of strings.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.__get_source_key","title":"<code>__get_source_key(kdef, vdef, entry_dict_meta)</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.__process_meta_value","title":"<code>__process_meta_value(kdef, vdef, _vsrc, ignore_empty_strvalue)</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.__register_refered_values","title":"<code>__register_refered_values(entry_dict_meta)</code>","text":"<p>Register referred values in the reference table.</p> <p>This method converts the values from the input metadata dictionary to strings and registers them in the referred values table using the original keys.</p> <p>Parameters:</p> Name Type Description Default <code>entry_dict_meta</code> <code>Union[MetaType, RepeatedMetaType]</code> <p>The metadata dictionary</p> required"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.__registerd_refered_table","title":"<code>__registerd_refered_table(key, value)</code>","text":"<p>Registers the referenced value in the referred value table for actions and referred units, using the raw name.</p> <p>This method updates the referred value table with the provided key and value. If the key already exists in the table, its value is replaced. If the key does not exist and is found within any of the actions, it is added to the table.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key to be registered in the referred value table. Typically represents an action or unit name.</p> required <code>value</code> <code>Union[str, list[str]]</code> <p>The value to be registered in the referred value table. This can be a single string or a list of strings, representing the raw names to be associated with the key.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This method does not return anything. It updates the referredmap attribute of the class.</p> Note <p>This method is intended for internal use and not covered by automated testing (as indicated by 'pragma: no cover').</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.__set_const_metadata","title":"<code>__set_const_metadata(key, metavalue, metadefvalue)</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.__set_variable_metadata","title":"<code>__set_variable_metadata(key, metavalues, metadefvalue, opt_ignore_emptystr)</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.__sort_by_metadef","title":"<code>__sort_by_metadef(data_dict)</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.assign_vals","title":"<code>assign_vals(entry_dict_meta, *, ignore_empty_strvalue=True)</code>","text":"<p>Register the value of metadata.</p> <p>Perform validation and casting on the input metadata value in the specified format, and register it. The target format is validated using the key, format, and Unit specified in metadata-def.json.</p> <p>Parameters:</p> Name Type Description Default <code>entry_dict_meta</code> <code>EntryMetaData</code> <p>metadata(key/value) to register</p> required <code>ignore_empty_strvalue</code> <code>bool</code> <p>When ignore_empty_strvalue is True,</p> <code>True</code> <p>Raises:</p> Type Description <code>StructuredError</code> <p>an exception is raised when the 'action' is included in the metadata-def.json.</p> <p>Returns:</p> Type Description <code>dict[str, set]</code> <p>dict[str, set]: The key that could be registered as metadata is added to the object ret for storing the registration result.</p> <p>Caution! / Items with a metadata value of None to be registered are excluded from assignment.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.metadata_validation","title":"<code>metadata_validation(vsrc, outtype, outfmt, orgtype, outunit)</code>","text":"<p>Casts the input metadata to the specified format and performs validation to check.</p> <p>if it can be cast to the specified data type. The formats for various metadata are described in metadata-def.json.</p> <p>Parameters:</p> Name Type Description Default <code>vsrc</code> <code>str</code> <p>The value of the input metadata.</p> required <code>outtype</code> <code>Optional[str]</code> <p>The data type of the converted metadata.</p> required <code>outfmt</code> <code>Optional[str]</code> <p>The format of the converted metadata.</p> required <code>orgtype</code> <code>Optional[str]</code> <p>The data type of the original metadata.</p> required <code>outunit</code> <code>Optional[str]</code> <p>The unit of the converted metadata.</p> required <p>Returns:</p> Type Description <code>dict[str, bool | int | float | str]</code> <p>dict[str, Union[bool, int, float, str]]: Returns the conversion result in the form of metadata for metadata.json.</p> Note <p>original func: _vDict()</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.Meta.writefile","title":"<code>writefile(meta_filepath, enc='utf_8')</code>","text":"<p>Writes the metadata to a file after processing units and actions.</p> <p>This method serializes the metadata into JSON format and writes it to the specified file. It processes units and actions for each metadata entry, sorts items according to 'metaDef', and outputs the sorted data to a file.</p> <p>The method also returns a list of keys from 'metaDef' that were not assigned values in the output.</p> <p>Parameters:</p> Name Type Description Default <code>meta_filepath</code> <code>str</code> <p>The file path where the metadata will be written.</p> required <code>enc</code> <code>str</code> <p>The encoding for the output file. Default is \"utf_8\".</p> <code>'utf_8'</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>A dictionary with keys 'assigned' and 'unknown'. 'assigned' contains the set of keys that were assigned values, and 'unknown' contains the set of keys from 'metaDef' that were not used.</p> <p>Raises:</p> Type Description <code>CustomException</code> <p>If the metadata generation fails, with a custom error message and error code.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.StorageDir","title":"<code>src.rdetoolkit.rde2util.StorageDir</code>","text":"<p>A class to handle storage directory operations.</p> <p>It provides methods to generate and create directories for storing data, with support for dividing data into specific indexes.</p> <p>Attributes:</p> Name Type Description <code>__nDigit</code> <code>int</code> <p>The number of digits used for the divided data index. Fixed value.</p> Note <p>In this system, the creation and support of the following folders are accommodated. Other folders can also be created, but they will not be reflected in the system:</p> <ul> <li>invoice</li> <li>invoice_patch</li> <li>inputdata</li> <li>invoice_patch</li> <li>structured</li> <li>temp</li> <li>logs</li> <li>meta</li> <li>thumbnail</li> <li>main_image</li> <li>other_image</li> <li>attachment</li> <li>nonshared_raw</li> <li>raw</li> <li>tasksupport</li> </ul>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.StorageDir.__nDigit","title":"<code>__nDigit = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.StorageDir.get_datadir","title":"<code>get_datadir(is_mkdir, idx=0)</code>  <code>classmethod</code>","text":"<p>Generates a data directory path based on an index and optionally creates it.</p> <p>This method generates a directory path under 'data' or 'data/divided' based on the provided index. If <code>is_mkdir</code> is True, the directory is created.</p> <p>Parameters:</p> Name Type Description Default <code>is_mkdir</code> <code>bool</code> <p>Flag to indicate whether to create the directory.</p> required <code>idx</code> <code>int</code> <p>The index for the divided data. Default is 0, which refers to the base 'data' directory.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The path of the generated data directory.</p> Warning <p>This method is deprecated. Use 'from rdetoolkit.core import DirectoryOps' instead.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.StorageDir.get_specific_outputdir","title":"<code>get_specific_outputdir(is_mkdir, dir_basename, idx=0)</code>  <code>classmethod</code>","text":"<p>Generates and optionally creates a specific output directory based on a base name and index.</p> <p>This method facilitates creating directories for specific outputs like 'invoice_patch', 'temp', etc., within the structured data directories.</p> <p>Parameters:</p> Name Type Description Default <code>is_mkdir</code> <code>bool</code> <p>Flag to indicate whether to create the directory.</p> required <code>dir_basename</code> <code>str</code> <p>The base name of the specific output directory.</p> required <code>idx</code> <code>int</code> <p>The index for the divided data. Default is 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>Path</code> <p>pathlib.Path: The path of the specific output directory.</p> Warning <p>This method is deprecated. Use 'from rdetoolkit.core import DirectoryOps' instead.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.get_default_values","title":"<code>src.rdetoolkit.rde2util.get_default_values(default_values_filepath)</code>","text":"<p>Reads default values from a default_value.csv file and returns them as a dictionary.</p> <p>This function opens a file specified by 'default_values_filepath', detects its encoding, and reads its content as a CSV. Each row in the CSV file should have 'key' and 'value' columns. The function constructs and returns a dictionary mapping keys to their corresponding values.</p> <p>Parameters:</p> Name Type Description Default <code>default_values_filepath</code> <code>RdeFsPath</code> <p>The file path to the CSV file containing default values.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>A dictionary containing the keys and their corresponding default values.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.CharDecEncoding","title":"<code>src.rdetoolkit.rde2util.CharDecEncoding</code>","text":"<p>A class to handle character encoding detection and conversion for text files.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.CharDecEncoding.USUAL_ENCs","title":"<code>USUAL_ENCs: Incomplete = ('ascii', 'shift_jis', 'utf_8', 'utf_8_sig', 'euc_jp')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.CharDecEncoding.__detect","title":"<code>__detect(text_filepath)</code>  <code>classmethod</code>","text":"<p>Detect the encoding of a given text file using chardet.</p> <p>Parameters:</p> Name Type Description Default <code>text_filepath</code> <code>str</code> <p>Path to the text file to be analyzed.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The detected encoding of the text file.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.CharDecEncoding.detect_text_file_encoding","title":"<code>detect_text_file_encoding(text_filepath)</code>  <code>classmethod</code>","text":"<p>Detect the encoding of a given text file.</p> <p>This function attempts to detect the encoding of a text file. If the initially detected encoding isn't one of the usual ones, it uses chardet for a more thorough detection.</p> <p>Parameters:</p> Name Type Description Default <code>text_filepath</code> <code>RdeFsPath</code> <p>Path to the text file to be analyzed.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The detected encoding of the text file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the given file path does not exist.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.unzip_japanese_zip","title":"<code>src.rdetoolkit.rde2util.unzip_japanese_zip(src_zipfilepath, dst_dirpath)</code>","text":"<p>Extracts files from a ZIP archive considering Japanese file name encodings.</p> <p>This function handles ZIP archives that may have file names encoded with Japanese-specific encodings (like Shift JIS). It decodes the file names appropriately before extracting them to ensure they are correctly named in the destination directory.</p> <p>Parameters:</p> Name Type Description Default <code>src_zipfilepath</code> <code>str</code> <p>Path to the source ZIP file to be extracted.</p> required <code>dst_dirpath</code> <code>str</code> <p>Destination directory path where the files should be extracted.</p> required"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.read_from_json_file","title":"<code>src.rdetoolkit.rde2util.read_from_json_file(invoice_file_path)</code>","text":"<p>A function that reads json file and returns the json object.</p> <p>.. deprecated:: 1.1.0     Use :func:<code>rdetoolkit.fileops.readf_json</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>invoice_file_path</code> <code>RdeFsPath</code> <p>The path to the JSON file.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The parsed json object.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.write_to_json_file","title":"<code>src.rdetoolkit.rde2util.write_to_json_file(invoicefile_path, invoiceobj, enc='utf_8')</code>","text":"<p>Writes an content to a JSON file.</p> <p>.. deprecated:: 1.0.0     Use :func:<code>rdetoolkit.fileops.writef_json</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>invoicefile_path</code> <code>RdeFsPath</code> <p>Path to the destination JSON file.</p> required <code>invoiceobj</code> <code>dict[str, Any]</code> <p>Object to be serialized and written.</p> required <code>enc</code> <code>str</code> <p>Encoding to use when writing the file. Defaults to \"utf_8\".</p> <code>'utf_8'</code> <p>Returns:</p> Type Description <code>None</code> <p>dict[str, Any]: The written json object.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.castval","title":"<code>src.rdetoolkit.rde2util.castval(valstr, outtype, outfmt)</code>","text":"<p>The function formats the string valstr based on outtype and outfmt and returns the formatted value.</p> <p>The function returns a formatted value of the string valstr according to the specified outtype and outfmt. The outtype must be a string (\"string\") for outfmt to be used. If valstr contains a value with units, the assignment of units is not handled within this function. It should be assigned separately as needed.</p> <p>Parameters:</p> Name Type Description Default <code>valstr</code> <code>Any</code> <p>String to be converted of type</p> required <code>outtype</code> <code>str</code> <p>Type information at output</p> required <code>outfmt</code> <code>str</code> <p>Formatting at output (related to date data)</p> required"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.ValueCaster","title":"<code>src.rdetoolkit.rde2util.ValueCaster</code>","text":"<p>A utility class for casting values and converting date formats.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.ValueCaster.convert_to_date_format","title":"<code>convert_to_date_format(value, fmt)</code>  <code>staticmethod</code>","text":"<p>Converts the given value to the specified date format.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to be converted.</p> required <code>fmt</code> <code>str</code> <p>The desired date format.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The converted value in the specified date format.</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If the specified format is unknown.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.ValueCaster.trycast","title":"<code>trycast(valstr, tp)</code>  <code>staticmethod</code>","text":"<p>Tries to cast the given value string to the specified type.</p> <p>Parameters:</p> Name Type Description Default <code>valstr</code> <code>str</code> <p>The value string to be casted.</p> required <code>tp</code> <code>Callable[[str], Any]</code> <p>The type to cast the value to.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The casted value if successful, otherwise None.</p>"},{"location":"rdetoolkit/rde2util/#src.rdetoolkit.rde2util.dict2meta","title":"<code>src.rdetoolkit.rde2util.dict2meta(metadef_filepath, metaout_filepath, const_info, val_info)</code>","text":"<p>Converts dictionary data into metadata and writes it to a specified file.</p> <p>This function takes metadata definitions and dictionary information for constants and variables, then creates a Meta object to process and write this data to a metadata output file.</p> <p>Parameters:</p> Name Type Description Default <code>metadef_filepath</code> <code>Path</code> <p>The file path to the metadata definition file.                             This file defines the structure and expected types of the metadata.</p> required <code>metaout_filepath</code> <code>Path</code> <p>The file path where the processed metadata should be written.</p> required <code>const_info</code> <code>MetaType</code> <p>A dictionary containing constant metadata information.                     This should match the structure defined in the metadef_filepath.</p> required <code>val_info</code> <code>MetaType</code> <p>A dictionary containing variable metadata information.                 This too should align with the structure defined in the metadef_filepath.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, set[Any]]</code> <p>A dictionary containing information about the assigned and unknown metadata fields.     The 'assigned' key contains a set of fields that were successfully assigned values,     while the 'unknown' key contains a set of fields defined in the metadata definition but not present in the input dictionaries.</p> Note <p>MetaType is expected to be a dictionary or a similar structure containing metadata information.</p>"},{"location":"rdetoolkit/rde2util/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/rde2util/#metadata-creation-and-management","title":"Metadata Creation and Management","text":"metadata_management.py<pre><code>from rdetoolkit.rde2util import Meta, dict2meta\nfrom pathlib import Path\n\n# Create metadata object\nmeta = Meta()\n\n# Assign values\nmeta.assign_vals(\"temperature\", 25.5, \"\u2103\")\nmeta.assign_vals(\"pressure\", 1013.25, \"hPa\")\nmeta.assign_vals(\"humidity\", 60, \"%\")\n\n# Write metadata file\noutput_path = Path(\"data/meta/metadata.json\")\nmeta.writefile(output_path)\n\n# Convert dictionary to metadata\ndata_dict = {\n    \"experiment_id\": \"EXP001\",\n    \"date\": \"2024-01-01\",\n    \"researcher\": \"John Doe\"\n}\nmetadata = dict2meta(data_dict)\n</code></pre>"},{"location":"rdetoolkit/rde2util/#storage-directory-management","title":"Storage Directory Management","text":"storage_management.py<pre><code>from rdetoolkit.rde2util import StorageDir\n\n# Get data directory\ndata_dir = StorageDir.get_datadir()\nprint(f\"Data directory: {data_dir}\")\n\n# Get specific output directories\nrawfiles_dir = StorageDir.get_specific_outputdir(False, \"rawfiles\")\nmeta_dir = StorageDir.get_specific_outputdir(False, \"meta\")\nthumbnail_dir = StorageDir.get_specific_outputdir(False, \"thumbnail\")\n\nprint(f\"Raw data directory: {rawfiles_dir}\")\nprint(f\"Metadata directory: {meta_dir}\")\nprint(f\"Thumbnail directory: {thumbnail_dir}\")\n</code></pre>"},{"location":"rdetoolkit/rde2util/#character-encoding-detection","title":"Character Encoding Detection","text":"encoding_detection.py<pre><code>from rdetoolkit.rde2util import CharDecEncoding\nfrom pathlib import Path\n\n# Create encoding detector\ndetector = CharDecEncoding()\n\n# Detect text file encoding\ntext_file = Path(\"data/sample.txt\")\nencoding = detector.detect_text_file_encoding(text_file)\nprint(f\"Detected encoding: {encoding}\")\n\n# Read file using detected encoding\nwith open(text_file, 'r', encoding=encoding) as f:\n    content = f.read()\n    print(f\"File content: {content[:100]}...\")\n</code></pre>"},{"location":"rdetoolkit/rde2util/#data-type-conversion","title":"Data Type Conversion","text":"data_casting.py<pre><code>from rdetoolkit.rde2util import castval, ValueCaster\n\n# Basic type conversion\nint_value = castval(\"123\", int)\nfloat_value = castval(\"45.67\", float)\nbool_value = castval(\"true\", bool)\n\nprint(f\"Integer: {int_value}, Float: {float_value}, Boolean: {bool_value}\")\n\n# Advanced conversion using ValueCaster\ncaster = ValueCaster()\nconverted_values = caster.cast_multiple([\n    (\"100\", int),\n    (\"3.14\", float),\n    (\"yes\", bool)\n])\nprint(f\"Conversion results: {converted_values}\")\n</code></pre>"},{"location":"rdetoolkit/rde2util/#json-file-operations","title":"JSON File Operations","text":"json_operations.py<pre><code>from rdetoolkit.rde2util import read_from_json_file, write_to_json_file\nfrom pathlib import Path\n\n# Read JSON file\njson_path = Path(\"data/config.json\")\ndata = read_from_json_file(json_path)\nprint(f\"Loaded data: {data}\")\n\n# Write JSON file\noutput_data = {\n    \"experiment\": \"sample_001\",\n    \"parameters\": {\n        \"temperature\": 25.0,\n        \"pressure\": 1013.25\n    },\n    \"results\": [1.2, 3.4, 5.6]\n}\n\noutput_path = Path(\"data/output.json\")\nwrite_to_json_file(output_data, output_path)\nprint(f\"Data saved to {output_path}\")\n</code></pre>"},{"location":"rdetoolkit/rdelogger/","title":"RdeLogger API","text":""},{"location":"rdetoolkit/rdelogger/#purpose","title":"Purpose","text":"<p>This module handles collection and management of execution logs in RDEToolKit's structured processing. It provides functionality for detailed log recording, level control, and output destination management.</p>"},{"location":"rdetoolkit/rdelogger/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/rdelogger/#log-management","title":"Log Management","text":"<ul> <li>Collection of structured processing execution logs</li> <li>Efficient log output through lazy file handlers</li> <li>Custom log configuration and decorators</li> </ul>"},{"location":"rdetoolkit/rdelogger/#output-control","title":"Output Control","text":"<ul> <li>Switching between file output and console output</li> <li>Log handler management</li> <li>Detailed control of debug information</li> </ul>"},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.LazyFileHandler","title":"<code>src.rdetoolkit.rdelogger.LazyFileHandler(filename, mode='a', encoding='utf-8')</code>","text":"<p>               Bases: <code>Handler</code></p> <p>A logging handler that lazily creates the actual FileHandler when needed.</p> <p>This handler delays the creation of the log file until the first log message is emitted. This helps prevent unnecessary file creation when logging is configured but not used.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The path to the log file.</p> required <code>mode</code> <code>str</code> <p>The file opening mode. Defaults to 'a' (append).</p> <code>'a'</code> <code>encoding</code> <code>str</code> <p>The encoding to use for the file. Defaults to None.</p> <code>'utf-8'</code> <p>Attributes:</p> Name Type Description <code>filename</code> <code>Incomplete</code> <p>The path where the log file will be created.</p> <code>mode</code> <code>Incomplete</code> <p>The file opening mode.</p> <code>encoding</code> <code>Incomplete</code> <p>The file encoding.</p> <code>_handler</code> <code>FileHandler | None</code> <p>The underlying FileHandler instance, created on first use.</p>"},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.LazyFileHandler.encoding","title":"<code>encoding: Incomplete = encoding</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.LazyFileHandler.filename","title":"<code>filename: Incomplete = filename</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.LazyFileHandler.mode","title":"<code>mode: Incomplete = mode</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.LazyFileHandler.emit","title":"<code>emit(record)</code>","text":"<p>Lazily creates the actual FileHandler and delegates the emission of the log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>The LogRecord instance containing all the information of the logging event.</p> required"},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.get_logger","title":"<code>src.rdetoolkit.rdelogger.get_logger(name, *, file_path=None, level=logging.DEBUG)</code>","text":"<p>Creates and configures a logger using Python's built-in logging module.</p> <p>This function creates a logger identified by <code>name</code>, sets its logging level, and, if a file path is provided, adds a lazy file handler to output log messages to that file. The default logging level is DEBUG, but it can be modified via the <code>level</code> parameter.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger (typically the module name, e.g. name).</p> required <code>file_path</code> <code>Optional[RdeFsPath]</code> <p>The file path where log messages will be written. If not provided, log output will be directed to the standard output. Defaults to None.</p> <code>None</code> <code>level</code> <code>int</code> <p>The logging level to set for the logger and its handlers, such as logging.DEBUG or logging.INFO. Defaults to logging.DEBUG.</p> <code>DEBUG</code> <p>Returns:</p> Type Description <code>Logger</code> <p>logging.Logger: A configured logger instance.</p> Example <pre><code>from rdetoolkit import rdelogger\nimport logging\n\n# Create a logger with the default DEBUG level.\nlogger = rdelogger.get_logger(__name__, \"data/logs/rdesys.log\")\nlogger.debug('This is a debug message.')\n\n# Create a logger with a custom logging level (INFO).\nlogger_info = rdelogger.get_logger(__name__, \"data/logs/rdesys.log\", level=logging.INFO)\nlogger_info.info('This is an info message.')\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.CustomLog","title":"<code>src.rdetoolkit.rdelogger.CustomLog(name='rdeuser')</code>","text":"<p>The CustomLog class is a class for writing custom logs to a user's log file.</p> <p>To create an instance of this class, call <code>CustomLog</code> with the module name as an argument. Then, by calling the <code>get_log</code> method, you can get a logger for writing logs.</p> Example <pre><code>logger = CustomLog(__name__).get_log()\n\n# If you do not want to write a log, pass `False` as an argument to the `get_log` method.\nlogger = CustomLog(__name__).get_log(False)\n\n#In the above code, a logger is generated, but no log is written.\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.CustomLog.logger","title":"<code>logger: Incomplete = logger</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.CustomLog.get_logger","title":"<code>get_logger(needlogs=True)</code>","text":"<p>Retrieves the logger instance.</p> <p>Parameters:</p> Name Type Description Default <code>needlogs</code> <code>bool</code> <p>Indicates whether logs are needed. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Logger</code> <code>Logger</code> <p>The logger instance.</p>"},{"location":"rdetoolkit/rdelogger/#src.rdetoolkit.rdelogger.log_decorator","title":"<code>src.rdetoolkit.rdelogger.log_decorator()</code>","text":"<p>A decorator function that logs the start and end of a decorated function.</p> <p>Returns:</p> Name Type Description <code>function</code> <code>Callable</code> <p>The decorated function.</p> Example <pre><code>@log_decorator()\ndef my_function():\n    print(\"Hello, World!\")\nmy_function()\n# Output:\n# my_function     --&gt; Start\n# Hello, World!\n# my_function     &lt;-- End\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/rdelogger/#basic-log-configuration","title":"Basic Log Configuration","text":"basic_logging.py<pre><code>from rdetoolkit.rdelogger import get_logger, CustomLog\nfrom pathlib import Path\n\n# Get basic logger\nlogger = get_logger(\"experiment_001\")\n\n# Output logs\nlogger.info(\"Starting experiment\")\nlogger.debug(\"Debug information: Parameter verification\")\nlogger.warning(\"Warning: Temperature exceeds threshold\")\nlogger.error(\"Error: Data file not found\")\n\nprint(\"Log configuration completed\")\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#custom-log-configuration","title":"Custom Log Configuration","text":"custom_logging.py<pre><code>from rdetoolkit.rdelogger import CustomLog\nfrom pathlib import Path\n\n# Configure custom log\nlog_file = Path(\"logs/experiment.log\")\nlog_file.parent.mkdir(parents=True, exist_ok=True)\n\ncustom_log = CustomLog()\nlogger = custom_log.get_logger(\"custom_logger\", str(log_file))\n\n# Record logs\nlogger.info(\"Started custom logging\")\nlogger.info(\"Starting experimental data processing\")\n\n# Processing simulation\nfor i in range(5):\n    logger.debug(f\"Executing processing step {i+1}/5\")\n\nlogger.info(\"Experimental data processing completed\")\nprint(f\"Recorded to log file: {log_file}\")\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#using-log-decorator","title":"Using Log Decorator","text":"log_decorator_usage.py<pre><code>from rdetoolkit.rdelogger import log_decorator, get_logger\n\n# Configure logger\nlogger = get_logger(\"decorated_functions\")\n\n@log_decorator(logger)\ndef process_data(data_file):\n    \"\"\"Data processing function (with log decorator)\"\"\"\n    if not data_file.exists():\n        raise FileNotFoundError(f\"File not found: {data_file}\")\n\n    # Data processing simulation\n    with open(data_file, 'r') as f:\n        content = f.read()\n        if not content:\n            raise ValueError(\"File is empty\")\n\n    return {\"status\": \"success\", \"size\": len(content)}\n\n@log_decorator(logger)\ndef analyze_results(results):\n    \"\"\"Result analysis function (with log decorator)\"\"\"\n    if not results:\n        raise ValueError(\"Result data is empty\")\n\n    analysis = {\n        \"count\": len(results),\n        \"average\": sum(results) / len(results),\n        \"max\": max(results),\n        \"min\": min(results)\n    }\n\n    return analysis\n\n# Usage example\nfrom pathlib import Path\n\ntry:\n    # Execute data processing (logs are automatically recorded)\n    result = process_data(Path(\"data/sample.txt\"))\n    print(f\"Processing result: {result}\")\n\n    # Execute result analysis (logs are automatically recorded)\n    test_results = [1.2, 3.4, 5.6, 7.8, 9.0]\n    analysis = analyze_results(test_results)\n    print(f\"Analysis result: {analysis}\")\n\nexcept Exception as e:\n    logger.error(f\"Error occurred during processing: {e}\")\n</code></pre>"},{"location":"rdetoolkit/rdelogger/#utilizing-lazy-file-handler","title":"Utilizing Lazy File Handler","text":"lazy_file_handler.py<pre><code>from rdetoolkit.rdelogger import LazyFileHandler, get_logger\nimport logging\nfrom pathlib import Path\n\ndef setup_lazy_logging(log_file_path: Path):\n    \"\"\"Log configuration using lazy file handler\"\"\"\n\n    # Create lazy file handler\n    lazy_handler = LazyFileHandler(str(log_file_path))\n    lazy_handler.setLevel(logging.INFO)\n\n    # Configure formatter\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    lazy_handler.setFormatter(formatter)\n\n    # Configure logger\n    logger = get_logger(\"lazy_logger\")\n    logger.addHandler(lazy_handler)\n    logger.setLevel(logging.INFO)\n\n    return logger\n\n# Usage example\nlog_path = Path(\"logs/lazy_experiment.log\")\nlogger = setup_lazy_logging(log_path)\n\n# Record logs (file is not created until actually written to)\nlogger.info(\"Started lazy log system\")\nlogger.info(\"Starting experimental data processing\")\n\n# Process large amount of logs\nfor i in range(100):\n    if i % 10 == 0:\n        logger.info(f\"Processing progress: {i}/100\")\n    logger.debug(f\"Detailed log: Step {i}\")\n\nlogger.info(\"Experiment completed\")\nprint(f\"Lazy log file: {log_path}\")\n</code></pre>"},{"location":"rdetoolkit/validation/","title":"Validation API","text":""},{"location":"rdetoolkit/validation/#purpose","title":"Purpose","text":"<p>This module provides validation functionality for template files in RDEToolKit. It validates the structure and data validity of metadata files (metadata.json) and invoice files (invoice.json).</p>"},{"location":"rdetoolkit/validation/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/validation/#metadata-validation","title":"Metadata Validation","text":"<ul> <li>Structure validation of metadata.json files</li> <li>Schema validation using Pydantic models</li> <li>Detailed error message provision</li> </ul>"},{"location":"rdetoolkit/validation/#invoice-validation","title":"Invoice Validation","text":"<ul> <li>Schema validation of invoice.json files</li> <li>Consistency verification with invoice.schema.json</li> <li>JSONSchema Draft 2020-12 compliant validation</li> </ul>"},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.MetadataValidator","title":"<code>src.rdetoolkit.validation.MetadataValidator()</code>","text":""},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.MetadataValidator.schema","title":"<code>schema: Incomplete = MetadataItem</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.MetadataValidator.validate","title":"<code>validate(*, path=None, json_obj=None)</code>","text":"<p>Validates the provided JSON data against the MetadataItem schema.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>The path to the JSON file to be validated. Defaults to None.</p> <code>None</code> <code>json_obj</code> <code>dict[str, Any]</code> <p>The JSON object to be validated. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The validated JSON data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither 'path' nor 'json_obj' is provided.</p> <code>ValueError</code> <p>If both 'path' and 'json_obj' are provided.</p> <code>ValueError</code> <p>If an unexpected error occurs.</p>"},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.metadata_validate","title":"<code>src.rdetoolkit.validation.metadata_validate(path)</code>","text":"<p>Validate metadata.json file.</p> <p>This function validates the metadata definition file specified by the given path. It checks if the file exists and then uses a validator to validate the file against a schema.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>The path to the metadata definition file.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the schema and path do not exist.</p> <code>MetadataValidationError</code> <p>If there is an error in validating the metadata definition file.</p>"},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.InvoiceValidator","title":"<code>src.rdetoolkit.validation.InvoiceValidator(schema_path)</code>","text":""},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.InvoiceValidator.pre_basic_info_schema","title":"<code>pre_basic_info_schema: Incomplete = os.path.join(os.path.dirname(__file__), 'static', 'invoice_basic_and_sample.schema_.json')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.InvoiceValidator.schema","title":"<code>schema: Incomplete = self.__pre_validate()</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.InvoiceValidator.schema_path","title":"<code>schema_path: Incomplete = schema_path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.InvoiceValidator.__get_data","title":"<code>__get_data(path, obj)</code>","text":""},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.InvoiceValidator.__pre_validate","title":"<code>__pre_validate()</code>","text":""},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.InvoiceValidator.__temporarily_modify_json_schema","title":"<code>__temporarily_modify_json_schema()</code>","text":"<p>Temporarily modifies the structure of the schema to validate invoice.json using invoice.schema.json.</p> <p>This method modifies the 'generalAttributes' and 'specificAttributes' sections of the schema by replacing the 'items' with a new dictionary that has 'oneOf' as the key and the original 'items' as the value. This allows the schema to validate invoice.json using invoice.schema.json.</p> Note <ul> <li>The modifications are temporary and only affect the current instance of the schema.</li> <li>If the 'sample' property does not exist in the schema, the method returns the original schema without any modifications.</li> </ul>"},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.InvoiceValidator.validate","title":"<code>validate(*, path=None, obj=None)</code>","text":"<p>Validate the provided JSON data against the schema.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Optional[Union[str, Path]]</code> <p>The path to the JSON file to validate.</p> <code>None</code> <code>obj</code> <code>Optional[dict[str, Any]]</code> <p>The JSON object to validate.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither 'path' nor 'obj' is provided.</p> <code>ValueError</code> <p>If both 'path' and 'obj' are provided.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>None</p>"},{"location":"rdetoolkit/validation/#src.rdetoolkit.validation.invoice_validate","title":"<code>src.rdetoolkit.validation.invoice_validate(path, schema)</code>","text":"<p>invoice.json validation function.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>invoice.json file path</p> required <code>schema</code> <code>Union[str, Path]</code> <p>invoice.schema.json file path</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the provided schema file does not exist.</p> <code>FileNotFoundError</code> <p>If the provided invoice.json file does not exist.</p> <code>InvoiceSchemaValidationError</code> <p>If the invoice.json file fails to validate against the schema.</p>"},{"location":"rdetoolkit/validation/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/validation/#metadata-file-validation","title":"Metadata File Validation","text":"metadata_validation.py<pre><code>from rdetoolkit.validation import MetadataValidator, metadata_validate\nfrom rdetoolkit.exceptions import MetadataValidationError\nfrom pathlib import Path\n\n# Basic metadata validation\ntry:\n    metadata_path = Path(\"data/meta/metadata.json\")\n    metadata_validate(metadata_path)\n    print(\"Metadata file is valid\")\nexcept MetadataValidationError as e:\n    print(f\"Metadata validation error: {e}\")\nexcept FileNotFoundError as e:\n    print(f\"File not found: {e}\")\n\n# Validation using MetadataValidator class\nvalidator = MetadataValidator()\n\n# Validate from file path\ntry:\n    validated_data = validator.validate(path=metadata_path)\n    print(f\"Validated data: {validated_data}\")\nexcept ValueError as e:\n    print(f\"Validation error: {e}\")\n\n# Direct validation from JSON object\nmetadata_obj = {\n    \"basic\": {\n        \"dataName\": \"Experiment Data 001\",\n        \"description\": \"Temperature measurement experiment\"\n    },\n    \"sample\": {\n        \"generalAttributes\": [],\n        \"specificAttributes\": []\n    }\n}\n\ntry:\n    validated_data = validator.validate(json_obj=metadata_obj)\n    print(\"JSON object is valid\")\nexcept ValueError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/validation/#invoice-file-validation","title":"Invoice File Validation","text":"invoice_validation.py<pre><code>from rdetoolkit.validation import InvoiceValidator, invoice_validate\nfrom rdetoolkit.exceptions import InvoiceSchemaValidationError\nfrom pathlib import Path\n\n# Basic invoice validation\ntry:\n    invoice_path = Path(\"data/invoice/invoice.json\")\n    schema_path = Path(\"data/tasksupport/invoice.schema.json\")\n\n    invoice_validate(invoice_path, schema_path)\n    print(\"Invoice file is valid\")\nexcept InvoiceSchemaValidationError as e:\n    print(f\"Invoice validation error: {e}\")\nexcept FileNotFoundError as e:\n    print(f\"File not found: {e}\")\n\n# Detailed validation using InvoiceValidator class\nvalidator = InvoiceValidator(schema_path)\n\n# Validate from file path\ntry:\n    validated_data = validator.validate(path=invoice_path)\n    print(\"Invoice file validation completed\")\n    print(f\"Data name: {validated_data.get('basic', {}).get('dataName')}\")\nexcept InvoiceSchemaValidationError as e:\n    print(f\"Schema validation error: {e}\")\n\n# Direct validation from JSON object\ninvoice_obj = {\n    \"basic\": {\n        \"dataName\": \"Experiment Data 001\",\n        \"description\": \"Temperature measurement experiment\",\n        \"tags\": [\"temperature\", \"measurement\"]\n    },\n    \"sample\": {\n        \"generalAttributes\": [],\n        \"specificAttributes\": []\n    }\n}\n\ntry:\n    validated_data = validator.validate(obj=invoice_obj)\n    print(\"Invoice object is valid\")\nexcept InvoiceSchemaValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/validation/#batch-validation-processing","title":"Batch Validation Processing","text":"batch_validation.py<pre><code>from rdetoolkit.validation import metadata_validate, invoice_validate\nfrom pathlib import Path\nimport logging\n\ndef validate_rde_files(data_dir: Path):\n    \"\"\"Batch validation of RDE file groups\"\"\"\n    results = {\n        \"metadata\": False,\n        \"invoice\": False,\n        \"errors\": []\n    }\n\n    # Validate metadata file\n    metadata_path = data_dir / \"meta\" / \"metadata.json\"\n    if metadata_path.exists():\n        try:\n            metadata_validate(metadata_path)\n            results[\"metadata\"] = True\n            print(f\"\u2713 Metadata validation successful: {metadata_path}\")\n        except Exception as e:\n            results[\"errors\"].append(f\"Metadata error: {e}\")\n            print(f\"\u2717 Metadata validation failed: {e}\")\n\n    # Validate invoice file\n    invoice_path = data_dir / \"invoice\" / \"invoice.json\"\n    schema_path = data_dir / \"tasksupport\" / \"invoice.schema.json\"\n\n    if invoice_path.exists() and schema_path.exists():\n        try:\n            invoice_validate(invoice_path, schema_path)\n            results[\"invoice\"] = True\n            print(f\"\u2713 Invoice validation successful: {invoice_path}\")\n        except Exception as e:\n            results[\"errors\"].append(f\"Invoice error: {e}\")\n            print(f\"\u2717 Invoice validation failed: {e}\")\n\n    return results\n\n# Usage example\ndata_directory = Path(\"data/experiment_001\")\nvalidation_results = validate_rde_files(data_directory)\n\nif all([validation_results[\"metadata\"], validation_results[\"invoice\"]]):\n    print(\"All file validations successful\")\nelse:\n    print(\"Validation errors found:\")\n    for error in validation_results[\"errors\"]:\n        print(f\"  - {error}\")\n</code></pre>"},{"location":"rdetoolkit/workflows/","title":"Workflows API","text":""},{"location":"rdetoolkit/workflows/#purpose","title":"Purpose","text":"<p>This module provides core functionality for executing structured processing workflows in RDEToolKit. It manages data classification, folder path generation, and structured processing execution.</p>"},{"location":"rdetoolkit/workflows/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/workflows/#file-classification-and-validation","title":"File Classification and Validation","text":"<ul> <li>Determines appropriateness of input file patterns</li> <li>Supports Invoice, ExcelInvoice, RDEFormat, and MultiFile modes</li> <li>Automatic detection of file mode (single file) and folder mode (multiple files)</li> </ul>"},{"location":"rdetoolkit/workflows/#workflow-execution","title":"Workflow Execution","text":"<ul> <li>Integration of custom dataset processing functions</li> <li>Configuration file-based behavior control</li> <li>Error handling and execution status tracking</li> </ul>"},{"location":"rdetoolkit/workflows/#src.rdetoolkit.workflows.check_files","title":"<code>src.rdetoolkit.workflows.check_files(srcpaths, *, mode, config=None)</code>","text":"<p>Classify input files to determine if the input pattern is appropriate.</p> <ol> <li>Invoice<ol> <li>File mode (e.g. sample.txt)</li> <li>Folder mode (e.g. sample1.txt, sample2.txt)</li> <li>Input file none</li> </ol> </li> <li>ExcelInvoice<ol> <li>File mode (e.g. sample.zip (compressed with only one file) + *_excel_invoice.xlsx)</li> <li>Folder mode (e.g. sample.zip (folder compressed) + _excel_invoice.xlsx) 2-3. None (e.g. _excel_invoice.xlsx)</li> </ol> </li> <li>Format (e.g. *.zip, tasksupport/rdeformat.txt)</li> <li>Multiple Files in a Flat Structure (e.g., sample1.txt, sample2.txt, sample3.txt)</li> </ol> <p>Returns:</p> Name Type Description <code>tuple</code> <code>list[tuple[Path, ...]]), Optional[Path], Optional[Path]</code> <code>Path | None</code> <p>Registered data file path group, presence of Excel invoice file, presence of SmartTable file</p> Example <pre><code># MODE: Invoice / Mode: File / Input: single file\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([(Path('data/inputdata/sample.txt'),)], None)\n\n# MODE: Invoice / Mode: Folder / Input: multi files\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([(Path('data/inputdata/sample1.txt'), (Path('data/inputdata/sample2.txt'))], None)\n\n# MODE: Invoice / Mode: None / Input: no files\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([()], None)\n\n# MODE: ExcelInvoice / Mode: File / Input: zip + *_excel_invoice.xlsx\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([(Path('data/inputdata/sample.txt'),)], Path(\"data/inputdata/dataset_excel_invoice.xlsx\"))\n\n# MODE: ExcelInvoice / Mode: Folder / Input: zip + *_excel_invoice.xlsx\ncheckFiles(srcpaths, fmt_flags=format_flags)\ntuple([(Path('data/inputdata/sample1.txt'), (Path('data/inputdata/sample2.txt'))], Path(\"data/inputdata/dataset_excel_invoice.xlsx\"))\n\n# MODE: ExcelInvoice / Mode: None / Input: *_excel_invoice.xlsx\ncheck_files(srcpaths, fmt_flags=format_flags)\ntuple([], Path(\"data/inputdata/dataset_excel_invoice.xlsx\"))\n</code></pre> Note <p>The destination paths for reading input files are different for the shipping label and ExcelInvoice. invoice: /data/inputdata/ excelinvoice: /data/temp/"},{"location":"rdetoolkit/workflows/#src.rdetoolkit.workflows.generate_folder_paths_iterator","title":"<code>src.rdetoolkit.workflows.generate_folder_paths_iterator(raw_files_group, invoice_org_filepath, invoice_schema_filepath)</code>","text":"<p>Generates iterator for RDE output folder paths.</p> <p>Create data folders for registration in the RDE system. Excel invoice: Create divided folders according to the number of registered data.</p> <p>Parameters:</p> Name Type Description Default <code>raw_files_group</code> <code>List[Tuple[Path, ...]]</code> <p>A list of tuples containing raw file paths.</p> required <code>invoice_org_filepath</code> <code>Path</code> <p>invoice_org.json file path</p> required <code>invoice_schema_filepath</code> <code>Path</code> <p>invoice.schema.json file path</p> required <p>Yields:</p> Name Type Description <code>RdeOutputResourcePath</code> <code>RdeOutputResourcePath</code> <p>A named tuple of output folder paths for RDE resources</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>Occurs when the structured process fails to process correctly.</p> Example <pre><code>rawfiles_tplList = [(Path('data/temp/samle1.txt'),), (Path('data/temp/sample2.txt'),), (Path('data/temp/sample3.txt'),)]\n\nexcel_invoice_files = Path(\"data/inputdata/sample_excel_invoice.xlsx\")\n\ncreate_folders(raw_files_group, excel_invoice_files)\n</code></pre>"},{"location":"rdetoolkit/workflows/#src.rdetoolkit.workflows.run","title":"<code>src.rdetoolkit.workflows.run(*, custom_dataset_function=None, config=None)</code>","text":"<p>RDE Structuring Processing Function.</p> <p>This function executes the structuring process for RDE data. If you want to implement custom processing for the input data, you can pass a user-defined function as an argument. The function should accept the data class <code>RdeInputDirPaths</code>, which is internally parsed by RDE, and the data class <code>RdeOutputResourcePath</code>, which stores the output directory paths used by RDE.</p> <p>Parameters:</p> Name Type Description Default <code>custom_dataset_function</code> <code>Optional[_CallbackType]</code> <p>User-defined structuring function. Defaults to None.</p> <code>None</code> <code>config</code> <code>Optional[Config]</code> <p>Configuration class for the structuring process. If not specified, default values are loaded automatically. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The JSON representation of the workflow execution results.</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If a structured error occurs during the process.</p> <code>Exception</code> <p>If a generic error occurs during the process.</p> Note <p>If <code>extended_mode</code> is specified, the evaluation of the execution mode is performed in the order of <code>extended_mode -&gt; excelinvoice -&gt; invoice</code>, and the structuring process is executed.</p> Example <pre><code>### custom.py\ndef custom_dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n    ...(original process)...\n\n### main.py\nfrom rdetoolkit import workflow\nfrom custom import custom_dataset # User-defined structuring processing function\n\ncfg = Config(save_raw=True, save_main_image=False, save_thumbnail_image=False, magic_variable=False)\nworkflow.run(custom_dataset_function=custom_dataset, config=cfg) # Execute structuring process\n</code></pre> <p>If options are specified (setting the mode to \"RDEformat\"):</p> <pre><code>### main.py\nfrom rdetoolkit.models.config import Config, MultiDataTileSettings, SystemSettings\nfrom rdetoolkit import workflow\nfrom custom import custom_dataset # User-defined structuring processing function\n\ncfg = Config(\n    system=SystemSettings(extended_mode=\"MultiDataTile\", save_raw=False, save_nonshared_raw=True, save_thumbnail_image=True),\n    multidata_tile=MultiDataTileSettings(ignore_errors=\"False\")\n)\nworkflow.run(custom_dataset_function=custom_dataset, config=cfg) # Execute structuring process\n</code></pre>"},{"location":"rdetoolkit/workflows/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/workflows/#basic-workflow-execution","title":"Basic Workflow Execution","text":"basic_workflow.py<pre><code>from rdetoolkit import workflows\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef my_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"Custom data processing function\"\"\"\n    # Set metadata\n    metadata = {\n        \"experiment_date\": \"2024-01-01\",\n        \"researcher\": \"John Doe\",\n        \"status\": \"completed\"\n    }\n\n    # Create metadata file\n    import json\n    with open(resource_paths.meta / \"metadata.json\", \"w\") as f:\n        json.dump(metadata, f, ensure_ascii=False, indent=2)\n\n# Execute workflow\nresult = workflows.run(custom_dataset_function=my_dataset_function)\nprint(f\"Execution result: {result}\")\n</code></pre>"},{"location":"rdetoolkit/workflows/#configuration-based-workflow","title":"Configuration-based Workflow","text":"config_workflow.py<pre><code>from rdetoolkit import workflows\nfrom rdetoolkit.config import Config, SystemSettings\n\n# Create configuration\nconfig = Config(\n    system=SystemSettings(\n        save_raw=True,\n        save_thumbnail_image=True,\n        extended_mode=\"MultiDataTile\"\n    )\n)\n\n# Execute workflow with configuration\nresult = workflows.run(\n    custom_dataset_function=my_dataset_function,\n    config=config\n)\n</code></pre>"},{"location":"rdetoolkit/workflows/#file-classification-verification","title":"File Classification Verification","text":"file_classification.py<pre><code>from rdetoolkit.workflows import check_files\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\nfrom rdetoolkit.rde2util import StorageDir\n\n# Set input paths\nsrcpaths = RdeInputDirPaths(\n    inputdata=StorageDir.get_specific_outputdir(False, \"inputdata\"),\n    invoice=StorageDir.get_specific_outputdir(False, \"invoice\"),\n    tasksupport=StorageDir.get_specific_outputdir(False, \"tasksupport\"),\n)\n\n# Execute file classification\nraw_files, excel_invoice = check_files(srcpaths, mode=\"Invoice\")\n\nprint(f\"Classified files: {raw_files}\")\nprint(f\"Excel invoice: {excel_invoice}\")\n</code></pre>"},{"location":"rdetoolkit/artifact/report/","title":"Report Generator API","text":""},{"location":"rdetoolkit/artifact/report/#purpose","title":"Purpose","text":"<p>This module defines report generation processing in RDEToolKit. It provides functionality for creating experimental result reports, data visualization, and security scanning.</p>"},{"location":"rdetoolkit/artifact/report/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/artifact/report/#report-generation","title":"Report Generation","text":"<ul> <li>Markdown template-based report generation</li> <li>Automatic report creation from experimental data</li> <li>Customizable report formats</li> </ul>"},{"location":"rdetoolkit/artifact/report/#security-scanning","title":"Security Scanning","text":"<ul> <li>Code security scanning</li> <li>External connection scanning</li> <li>Security report generation</li> </ul>"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.TemplateMarkdownReportGenerator","title":"<code>src.rdetoolkit.artifact.report.TemplateMarkdownReportGenerator(template_str=None)</code>","text":"<p>               Bases: <code>IReportGenerator</code></p> <p>TemplateMarkdownReportGenerator is a class that generates a markdown report for the given template and data.</p>"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.TemplateMarkdownReportGenerator.template","title":"<code>template: Incomplete = Template(self.template_str)</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.TemplateMarkdownReportGenerator.template_str","title":"<code>template_str: Incomplete = template_str or '# Execution Report\\n\\n**Execution Date:** $exec_date\\n\\n- **Dockerfile:** $dockerfile_status\\n- **Requirements:** $requirements_status\\n\\n## Included Directories\\n\\n$included_dirs\\n\\n## Code Scan Results\\n\\n$vuln_results\\n\\n## External Communication Check Results\\n\\n$ext_comm_results\\n'</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.TemplateMarkdownReportGenerator.text","title":"<code>text: str = ''</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.TemplateMarkdownReportGenerator.generate","title":"<code>generate(data)</code>","text":"<p>Generates a report string based on the provided detail data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ReportItem</code> <p>An object containing the details required to generate the report.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The generated report as a string.</p> The report includes <ul> <li>Dockerfile status (OK or N/A based on the presence of a Dockerfile path).</li> <li>Requirements file status (OK or N/A based on the presence of a requirements file path).</li> <li>A list of included directories/files.</li> <li>Bandit analysis results in JSON format.</li> <li>External requests code snippets with file paths and code snippets formatted.</li> </ul> <p>The generated report is created by substituting the provided data into a predefined template.</p>"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.TemplateMarkdownReportGenerator.save","title":"<code>save(output_path)</code>","text":"<p>Saves the generated report to the specified output path.</p> <p>Parameters:</p> Name Type Description Default <code>output_path</code> <code>str | Path</code> <p>The path where the report will be saved.</p> required"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.CodeSecurityScanner","title":"<code>src.rdetoolkit.artifact.report.CodeSecurityScanner(source_dir)</code>","text":"<p>               Bases: <code>ICodeScanner</code></p>"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.CodeSecurityScanner.results","title":"<code>results: Incomplete = []</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.CodeSecurityScanner.source_dir","title":"<code>source_dir: Incomplete = Path(source_dir) if isinstance(source_dir, str) else source_dir</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.CodeSecurityScanner.get_results","title":"<code>get_results()</code>","text":"<p>Retrieve the list of code snippets stored in the results.</p> <p>Returns:</p> Type Description <code>list[CodeSnippet]</code> <p>list[CodeSnippet]: A list of CodeSnippet objects representing the results.</p>"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.CodeSecurityScanner.scan","title":"<code>scan()</code>","text":"<p>Scans the source directory for Python files, excluding specific directories, and processes each Python file found.</p> <p>This method traverses the directory tree starting from <code>self.source_dir</code>, skipping directories named \"venv\" and \"site-packages\". For each Python file (files with a \".py\" extension) encountered, it calls the <code>scan_file</code> method with the file's path.</p> <p>Returns:</p> Type Description <code>list[CodeSnippet]</code> <p>None</p>"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.CodeSecurityScanner.scan_file","title":"<code>scan_file(file_path)</code>","text":"<p>Scans a file for vulnerabilities based on predefined patterns and stores the results.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Path</code> <p>The path to the file to be scanned.</p> required Behavior <ul> <li>Reads the file line by line.</li> <li>Searches each line for matches against vulnerability patterns.</li> <li>If a match is found, extracts a snippet of surrounding lines for context.</li> <li>Appends the result, including the file path, snippet, and vulnerability description, to the results list.</li> </ul> Error Handling <ul> <li>Logs an error and exits the function if the file cannot be read.</li> </ul> Note <ul> <li>The file path in the results is relative to the source directory.</li> <li>The snippet includes up to 3 lines before and 4 lines after the matched line.</li> </ul>"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.ExternalConnScanner","title":"<code>src.rdetoolkit.artifact.report.ExternalConnScanner(source_dir)</code>","text":"<p>               Bases: <code>ICodeScanner</code></p>"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.ExternalConnScanner.external_comm_packages","title":"<code>external_comm_packages: Incomplete = ['requests', 'urllib', 'urllib3', 'httplib', 'http.client', 'socket', 'ftplib', 'telnetlib', 'smtplib', 'aiohttp', 'httpx', 'pycurl']</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.ExternalConnScanner.source_dir","title":"<code>source_dir: Incomplete = Path(source_dir) if isinstance(source_dir, str) else source_dir</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.ExternalConnScanner.scan","title":"<code>scan()</code>","text":"<p>Scans the source directory for Python files and extracts code snippets that match specified patterns for external communication package usage.</p> <p>Returns:</p> Type Description <code>list[CodeSnippet]</code> <p>list[CodeSnippet]: A list of <code>CodeSnippet</code> objects containing the file</p> <code>list[CodeSnippet]</code> <p>path and the relevant code snippet for each match.</p>"},{"location":"rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.get_scanner","title":"<code>src.rdetoolkit.artifact.report.get_scanner(scanner_type, source_dir)</code>","text":"<p>A method to switch the type of scanner (vulnerability or external).</p> <p>Parameters:</p> Name Type Description Default <code>scanner_type</code> <code>Literal['vulnerability', 'external']</code> <p>Expected to be either \"vulnerability\" or \"external\".</p> required <code>source_dir</code> <code>str | Path</code> <p>The directory to be scanned.</p> required <p>Returns:</p> Name Type Description <code>ICodeScanner</code> <code>ICodeScanner</code> <p>An instance of the corresponding scanner.</p>"},{"location":"rdetoolkit/artifact/report/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/artifact/report/#basic-report-generation","title":"Basic Report Generation","text":"basic_report_generation.py<pre><code>from rdetoolkit.artifact.report import TemplateMarkdownReportGenerator\nfrom pathlib import Path\n\n# Create report generator\ngenerator = TemplateMarkdownReportGenerator()\n\n# Prepare experimental data\nexperiment_data = {\n    \"experiment_id\": \"EXP001\",\n    \"title\": \"Temperature Measurement Experiment\",\n    \"researcher\": \"John Doe\",\n    \"date\": \"2024-01-01\",\n    \"measurements\": [\n        {\"time\": \"09:00\", \"temperature\": 25.0, \"humidity\": 60},\n        {\"time\": \"10:00\", \"temperature\": 26.5, \"humidity\": 58},\n        {\"time\": \"11:00\", \"temperature\": 28.0, \"humidity\": 55}\n    ]\n}\n\n# Generate report\ntry:\n    report_content = generator.generate(\n        template_name=\"experiment_report\",\n        data=experiment_data\n    )\n    print(f\"\u2713 Report generation completed\")\n\n    # Save report\n    output_path = Path(\"reports/experiment_001_report.md\")\n    output_path.parent.mkdir(parents=True, exist_ok=True)\n\n    generator.save(report_content, str(output_path))\n    print(f\"\u2713 Report saved: {output_path}\")\n\nexcept Exception as e:\n    print(f\"\u2717 Report generation error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/artifact/report/#security-scanning-execution","title":"Security Scanning Execution","text":"security_scanning.py<pre><code>from rdetoolkit.artifact.report import CodeSecurityScanner, ExternalConnScanner, get_scanner\nfrom pathlib import Path\n\n# Execute code security scan\ncode_scanner = CodeSecurityScanner()\n\n# Single file scan\nsource_file = Path(\"src/rdetoolkit/workflows.py\")\nif source_file.exists():\n    try:\n        scan_result = code_scanner.scan_file(str(source_file))\n        print(f\"\u2713 File scan completed: {source_file}\")\n        print(f\"Issues detected: {len(scan_result.get('issues', []))}\")\n\n    except Exception as e:\n        print(f\"\u2717 File scan error: {e}\")\n\n# Directory-wide scan\nsource_dir = Path(\"src/rdetoolkit\")\nif source_dir.exists():\n    try:\n        scan_results = code_scanner.scan(str(source_dir))\n        print(f\"\u2713 Directory scan completed: {source_dir}\")\n\n        # Get results\n        results = code_scanner.get_results()\n        print(f\"Total scanned files: {results.get('total_files', 0)}\")\n        print(f\"Total issues: {results.get('total_issues', 0)}\")\n\n    except Exception as e:\n        print(f\"\u2717 Directory scan error: {e}\")\n\n# Execute external connection scan\nexternal_scanner = ExternalConnScanner()\n\ntry:\n    external_results = external_scanner.scan(source_dir)\n    print(f\"\u2713 External connection scan completed\")\n    print(f\"External connections detected: {len(external_results.get('connections', []))}\")\n\nexcept Exception as e:\n    print(f\"\u2717 External connection scan error: {e}\")\n\n# Get appropriate scanner\nscanner = get_scanner(\"code_security\")\nif scanner:\n    print(f\"\u2713 Scanner acquisition successful: {type(scanner).__name__}\")\nelse:\n    print(\"\u2717 Scanner acquisition failed\")\n</code></pre>"},{"location":"rdetoolkit/artifact/report/#integrated-report-system","title":"Integrated Report System","text":"integrated_report_system.py<pre><code>from rdetoolkit.artifact.report import (\n    TemplateMarkdownReportGenerator, \n    CodeSecurityScanner, \n    ExternalConnScanner\n)\nfrom pathlib import Path\nfrom datetime import datetime\n\nclass IntegratedReportSystem:\n    \"\"\"Integrated report system\"\"\"\n\n    def __init__(self):\n        self.report_generator = TemplateMarkdownReportGenerator()\n        self.code_scanner = CodeSecurityScanner()\n        self.external_scanner = ExternalConnScanner()\n\n    def generate_comprehensive_report(self, project_dir: Path) -&gt; dict:\n        \"\"\"Generate comprehensive project report\"\"\"\n\n        report_data = {\n            \"project_name\": project_dir.name,\n            \"scan_date\": datetime.now().isoformat(),\n            \"code_security\": {},\n            \"external_connections\": {},\n            \"summary\": {}\n        }\n\n        # Code security scan\n        try:\n            print(\"Executing code security scan...\")\n            self.code_scanner.scan(str(project_dir))\n            security_results = self.code_scanner.get_results()\n\n            report_data[\"code_security\"] = {\n                \"total_files\": security_results.get(\"total_files\", 0),\n                \"total_issues\": security_results.get(\"total_issues\", 0),\n                \"high_severity\": security_results.get(\"high_severity\", 0),\n                \"medium_severity\": security_results.get(\"medium_severity\", 0),\n                \"low_severity\": security_results.get(\"low_severity\", 0)\n            }\n\n            print(f\"\u2713 Security scan completed: {security_results.get('total_issues', 0)} issues detected\")\n\n        except Exception as e:\n            print(f\"\u2717 Security scan error: {e}\")\n            report_data[\"code_security\"][\"error\"] = str(e)\n\n        # External connection scan\n        try:\n            print(\"Executing external connection scan...\")\n            external_results = self.external_scanner.scan(project_dir)\n\n            report_data[\"external_connections\"] = {\n                \"total_connections\": len(external_results.get(\"connections\", [])),\n                \"unique_domains\": len(set(conn.get(\"domain\", \"\") for conn in external_results.get(\"connections\", []))),\n                \"protocols\": list(set(conn.get(\"protocol\", \"\") for conn in external_results.get(\"connections\", [])))\n            }\n\n            print(f\"\u2713 External connection scan completed: {len(external_results.get('connections', []))} connections detected\")\n\n        except Exception as e:\n            print(f\"\u2717 External connection scan error: {e}\")\n            report_data[\"external_connections\"][\"error\"] = str(e)\n\n        # Generate summary\n        report_data[\"summary\"] = {\n            \"security_score\": self._calculate_security_score(report_data[\"code_security\"]),\n            \"external_risk_level\": self._assess_external_risk(report_data[\"external_connections\"]),\n            \"recommendations\": self._generate_recommendations(report_data)\n        }\n\n        # Generate and save report\n        try:\n            report_content = self.report_generator.generate(\n                template_name=\"security_report\",\n                data=report_data\n            )\n\n            report_file = project_dir / \"reports\" / f\"security_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md\"\n            report_file.parent.mkdir(parents=True, exist_ok=True)\n\n            self.report_generator.save(report_content, str(report_file))\n\n            report_data[\"report_file\"] = str(report_file)\n            print(f\"\u2713 Integrated report saved: {report_file}\")\n\n        except Exception as e:\n            print(f\"\u2717 Report generation error: {e}\")\n            report_data[\"report_error\"] = str(e)\n\n        return report_data\n\n    def _calculate_security_score(self, security_data: dict) -&gt; int:\n        \"\"\"Calculate security score\"\"\"\n        if \"error\" in security_data:\n            return 0\n\n        total_issues = security_data.get(\"total_issues\", 0)\n        high_severity = security_data.get(\"high_severity\", 0)\n\n        if total_issues == 0:\n            return 100\n        elif high_severity &gt; 0:\n            return max(0, 50 - high_severity * 10)\n        else:\n            return max(0, 80 - total_issues * 5)\n\n    def _assess_external_risk(self, external_data: dict) -&gt; str:\n        \"\"\"Assess external risk level\"\"\"\n        if \"error\" in external_data:\n            return \"unknown\"\n\n        total_connections = external_data.get(\"total_connections\", 0)\n\n        if total_connections == 0:\n            return \"low\"\n        elif total_connections &lt; 5:\n            return \"medium\"\n        else:\n            return \"high\"\n\n    def _generate_recommendations(self, report_data: dict) -&gt; list:\n        \"\"\"Generate recommendations\"\"\"\n        recommendations = []\n\n        # Security-related recommendations\n        security_score = report_data[\"summary\"][\"security_score\"]\n        if security_score &lt; 70:\n            recommendations.append(\"Prioritize fixing security issues\")\n\n        # External connection-related recommendations\n        risk_level = report_data[\"summary\"][\"external_risk_level\"]\n        if risk_level == \"high\":\n            recommendations.append(\"Consider reviewing external connections and strengthening security\")\n\n        if not recommendations:\n            recommendations.append(\"Current security status is good\")\n\n        return recommendations\n\n# Usage example\nreport_system = IntegratedReportSystem()\nproject_directory = Path(\".\")\n\nprint(\"=== Integrated Security Report Generation ===\")\ncomprehensive_report = report_system.generate_comprehensive_report(project_directory)\n\nprint(f\"\\n=== Report Results ===\")\nprint(f\"Project: {comprehensive_report['project_name']}\")\nprint(f\"Security score: {comprehensive_report['summary']['security_score']}/100\")\nprint(f\"External risk level: {comprehensive_report['summary']['external_risk_level']}\")\nprint(f\"Recommendations: {', '.join(comprehensive_report['summary']['recommendations'])}\")\n\nif \"report_file\" in comprehensive_report:\n    print(f\"Detailed report: {comprehensive_report['report_file']}\")\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/","title":"Archive Module","text":"<p>The <code>rdetoolkit.cmd.archive</code> module provides functionality for creating project archives with automated security scanning and report generation. This module is designed to package Python projects into compressed archives while analyzing code for potential security vulnerabilities and external dependencies.</p>"},{"location":"rdetoolkit/cmd/archive/#overview","title":"Overview","text":"<p>The archive module offers comprehensive project archiving capabilities with built-in analysis features:</p> <ul> <li>Project Archiving: Create compressed archives of Python projects with configurable exclusion patterns</li> <li>Security Scanning: Automated vulnerability detection and external connection analysis</li> <li>Report Generation: Markdown reports with scan results and project metadata</li> <li>File Detection: Automatic detection of important project files (Dockerfile, requirements.txt)</li> </ul>"},{"location":"rdetoolkit/cmd/archive/#classes","title":"Classes","text":""},{"location":"rdetoolkit/cmd/archive/#createartifactcommand","title":"CreateArtifactCommand","text":"<p>A command class that orchestrates the complete artifact creation process, including archiving, scanning, and report generation.</p>"},{"location":"rdetoolkit/cmd/archive/#constructor","title":"Constructor","text":"<pre><code>CreateArtifactCommand(source_dir: pathlib.Path, *, output_archive_path: pathlib.Path | None = None, exclude_patterns: list[str] | None = None)\n</code></pre> <p>Parameters: - <code>source_dir</code> (pathlib.Path): Source directory containing the project to archive - <code>output_archive_path</code> (pathlib.Path | None): Output path for the archive file. If None, generates a default filename with timestamp and UUID - <code>exclude_patterns</code> (list[str] | None): List of patterns to exclude from archiving. Defaults to <code>['.*', 'venv', '.venv', 'site-packages']</code></p>"},{"location":"rdetoolkit/cmd/archive/#class-constants","title":"Class Constants","text":"<p>The class defines several emoji markers for output formatting:</p> <ul> <li><code>MARK_SUCCESS</code> = \"\u2705\": Success operations</li> <li><code>MARK_WARNING</code> = \"\u26a0\ufe0f\": Warning messages</li> <li><code>MARK_ERROR</code> = \"\ud83d\udd25\": Error conditions</li> <li><code>MARK_INFO</code> = \"\ud83d\udccc\": Information messages</li> <li><code>MARK_SCAN</code> = \"\ud83d\udd0d\": Scanning operations</li> <li><code>MARK_ARCHIVE</code> = \"\ud83d\udce6\": Archive operations</li> </ul>"},{"location":"rdetoolkit/cmd/archive/#attributes","title":"Attributes","text":"<ul> <li><code>source_dir</code> (pathlib.Path): The source directory to archive</li> <li><code>output_archive_path</code> (pathlib.Path): Path where the archive will be created</li> <li><code>exclude_patterns</code> (list[str]): Patterns to exclude during archiving</li> <li><code>template_report_generator</code> (TemplateMarkdownReportGenerator): Report generator instance</li> </ul>"},{"location":"rdetoolkit/cmd/archive/#methods","title":"Methods","text":""},{"location":"rdetoolkit/cmd/archive/#invoke","title":"invoke()","text":"<p>Execute the complete artifact creation process.</p> <pre><code>def invoke() -&gt; None\n</code></pre> <p>Raises: - <code>click.Abort</code>: If any step in the process fails</p> <p>Example: <pre><code>import pathlib\nfrom rdetoolkit.cmd.archive import CreateArtifactCommand\n\n# Create an artifact with default settings\nsource = pathlib.Path(\"/path/to/project\")\ncommand = CreateArtifactCommand(source)\ncommand.invoke()\n</code></pre></p>"},{"location":"rdetoolkit/cmd/archive/#_check_filetarget_filename-logonone","title":"_check_file(target_filename, *, logo=None)","text":"<p>Check for the existence of a specific file in the project directory.</p> <pre><code>def _check_file(target_filename: str, *, logo: str | None = None) -&gt; str\n</code></pre> <p>Parameters: - <code>target_filename</code> (str): Name of the file to search for - <code>logo</code> (str | None): Optional emoji or symbol to display with the filename</p> <p>Returns: - <code>str</code>: Relative path to the file if found, or \"{filename} not found\" if not found</p> <p>Example: <pre><code># Check for Dockerfile\ndockerfile_path = command._check_file(\"Dockerfile\", logo=\"\ud83d\udc33\")\n</code></pre></p>"},{"location":"rdetoolkit/cmd/archive/#_check_extention_type","title":"_check_extention_type()","text":"<p>Validate the output archive file extension.</p> <pre><code>def _check_extention_type() -&gt; str\n</code></pre> <p>Returns: - <code>str</code>: The file extension without the leading dot</p> <p>Raises: - <code>click.Abort</code>: If the extension is not .zip</p>"},{"location":"rdetoolkit/cmd/archive/#_archive_target_dirfmt","title":"_archive_target_dir(fmt)","text":"<p>Create the archive file using the specified format.</p> <pre><code>def _archive_target_dir(fmt: str) -&gt; list[pathlib.Path] | None\n</code></pre> <p>Parameters: - <code>fmt</code> (str): Archive format (currently supports \"zip\")</p> <p>Returns: - <code>list[pathlib.Path] | None</code>: List of directories included in the archive</p> <p>Raises: - <code>click.Abort</code>: If archiving fails</p>"},{"location":"rdetoolkit/cmd/archive/#_scan_external_conn","title":"_scan_external_conn()","text":"<p>Scan the project for external connection references.</p> <pre><code>def _scan_external_conn() -&gt; list[CodeSnippet]\n</code></pre> <p>Returns: - <code>list[CodeSnippet]</code>: List of code snippets containing external connections</p> <p>Raises: - <code>click.Abort</code>: If scanning fails</p>"},{"location":"rdetoolkit/cmd/archive/#_scan_code_security","title":"_scan_code_security()","text":"<p>Scan the project for potential security vulnerabilities.</p> <pre><code>def _scan_code_security() -&gt; list[CodeSnippet]\n</code></pre> <p>Returns: - <code>list[CodeSnippet]</code>: List of code snippets with potential security issues</p> <p>Raises: - <code>click.Abort</code>: If scanning fails</p>"},{"location":"rdetoolkit/cmd/archive/#_generate_reportitem","title":"_generate_report(item)","text":"<p>Generate a markdown report with scan results and project information.</p> <pre><code>def _generate_report(item: ReportItem) -&gt; None\n</code></pre> <p>Parameters: - <code>item</code> (ReportItem): Report data containing scan results and metadata</p> <p>Raises: - <code>click.Abort</code>: If report generation fails</p>"},{"location":"rdetoolkit/cmd/archive/#_safe_relativep","title":"_safe_relative(p)","text":"<p>Safely convert a path to a relative path string.</p> <pre><code>def _safe_relative(p: pathlib.Path) -&gt; str\n</code></pre> <p>Parameters: - <code>p</code> (pathlib.Path): Path to convert</p> <p>Returns: - <code>str</code>: Relative path string or absolute path string if conversion fails</p>"},{"location":"rdetoolkit/cmd/archive/#complete-usage-examples","title":"Complete Usage Examples","text":""},{"location":"rdetoolkit/cmd/archive/#basic-project-archiving","title":"Basic Project Archiving","text":"<pre><code>import pathlib\nfrom rdetoolkit.cmd.archive import CreateArtifactCommand\n\n# Archive a project with default settings\nproject_dir = pathlib.Path(\"/path/to/my_project\")\ncommand = CreateArtifactCommand(project_dir)\ncommand.invoke()\n\n# This will create:\n# - An archive file with timestamp and UUID in the filename\n# - A markdown report with the same base name\n# - Security and external connection scan results\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#custom-archive-configuration","title":"Custom Archive Configuration","text":"<pre><code>import pathlib\nfrom rdetoolkit.cmd.archive import CreateArtifactCommand\n\n# Custom archive path and exclusion patterns\nsource_dir = pathlib.Path(\"/path/to/project\")\noutput_path = pathlib.Path(\"/output/my_project_archive.zip\")\nexclude_patterns = [\n    \".*\",           # Hidden files\n    \"venv\",         # Virtual environment\n    \"__pycache__\",  # Python cache\n    \"node_modules\", # Node.js modules\n    \"*.log\",        # Log files\n]\n\ncommand = CreateArtifactCommand(\n    source_dir,\n    output_archive_path=output_path,\n    exclude_patterns=exclude_patterns\n)\n\ncommand.invoke()\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#programmatic-archive-creation","title":"Programmatic Archive Creation","text":"<pre><code>import pathlib\nfrom datetime import datetime\nfrom rdetoolkit.cmd.archive import CreateArtifactCommand\n\ndef create_project_backup(project_path: str, backup_dir: str) -&gt; tuple[pathlib.Path, pathlib.Path]:\n    \"\"\"Create a project backup with timestamp.\"\"\"\n\n    source = pathlib.Path(project_path)\n    backup_base = pathlib.Path(backup_dir)\n\n    # Create timestamped filename\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    project_name = source.name\n    archive_name = f\"{project_name}_{timestamp}_backup.zip\"\n\n    output_path = backup_base / archive_name\n\n    # Create the archive\n    command = CreateArtifactCommand(\n        source,\n        output_archive_path=output_path,\n        exclude_patterns=[\n            \".*\",\n            \"venv\",\n            \".venv\",\n            \"__pycache__\",\n            \"*.pyc\",\n            \".git\"\n        ]\n    )\n\n    try:\n        command.invoke()\n        return output_path, output_path.with_suffix(\".md\")\n    except Exception as e:\n        print(f\"Backup failed: {e}\")\n        raise\n\n# Usage\narchive_path, report_path = create_project_backup(\n    \"/path/to/project\",\n    \"/backups\"\n)\nprint(f\"Archive created: {archive_path}\")\nprint(f\"Report created: {report_path}\")\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#batch-project-archiving","title":"Batch Project Archiving","text":"<pre><code>import pathlib\nfrom rdetoolkit.cmd.archive import CreateArtifactCommand\n\ndef archive_multiple_projects(projects_dir: str, output_dir: str):\n    \"\"\"Archive multiple projects in a directory.\"\"\"\n\n    projects_path = pathlib.Path(projects_dir)\n    output_path = pathlib.Path(output_dir)\n\n    # Ensure output directory exists\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    # Find all project directories (containing Python files)\n    for project_dir in projects_path.iterdir():\n        if not project_dir.is_dir():\n            continue\n\n        # Check if directory contains Python files\n        python_files = list(project_dir.rglob(\"*.py\"))\n        if not python_files:\n            continue\n\n        print(f\"Archiving project: {project_dir.name}\")\n\n        # Create archive for this project\n        archive_name = f\"{project_dir.name}_archive.zip\"\n        archive_path = output_path / archive_name\n\n        try:\n            command = CreateArtifactCommand(\n                project_dir,\n                output_archive_path=archive_path\n            )\n            command.invoke()\n            print(f\"\u2705 Successfully archived: {project_dir.name}\")\n\n        except Exception as e:\n            print(f\"\u274c Failed to archive {project_dir.name}: {e}\")\n\n# Usage\narchive_multiple_projects(\"/path/to/projects\", \"/path/to/archives\")\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#error-handling","title":"Error Handling","text":""},{"location":"rdetoolkit/cmd/archive/#common-exceptions","title":"Common Exceptions","text":"<p>The archive module operations may raise the following exceptions:</p>"},{"location":"rdetoolkit/cmd/archive/#clickabort","title":"click.Abort","text":"<p>Raised when critical errors occur during the archiving process:</p> <pre><code>try:\n    command = CreateArtifactCommand(source_dir)\n    command.invoke()\nexcept click.Abort:\n    print(\"Archive creation was aborted due to an error\")\n    # Check console output for specific error details\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#filenotfounderror","title":"FileNotFoundError","text":"<p>May be raised if the source directory doesn't exist:</p> <pre><code>import pathlib\nfrom rdetoolkit.cmd.archive import CreateArtifactCommand\n\nsource_dir = pathlib.Path(\"/nonexistent/path\")\n\nif not source_dir.exists():\n    print(f\"Source directory does not exist: {source_dir}\")\nelse:\n    command = CreateArtifactCommand(source_dir)\n    command.invoke()\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#permissionerror","title":"PermissionError","text":"<p>May be raised if there are insufficient permissions:</p> <pre><code>try:\n    command = CreateArtifactCommand(source_dir, output_archive_path=output_path)\n    command.invoke()\nexcept PermissionError as e:\n    print(f\"Permission denied: {e}\")\n    print(\"Check write permissions for the output directory\")\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Validate paths before archiving:    <pre><code>if not source_dir.exists():\n    raise ValueError(f\"Source directory does not exist: {source_dir}\")\nif not source_dir.is_dir():\n    raise ValueError(f\"Source path is not a directory: {source_dir}\")\n</code></pre></p> </li> <li> <p>Ensure output directory exists:    <pre><code>output_path.parent.mkdir(parents=True, exist_ok=True)\n</code></pre></p> </li> <li> <p>Handle large projects gracefully:    <pre><code># Add more exclusion patterns for large projects\nexclude_patterns = [\n    \".*\",\n    \"venv\", \".venv\",\n    \"node_modules\",\n    \"__pycache__\", \"*.pyc\",\n    \"*.log\", \"*.tmp\",\n    \".git\", \".svn\",\n    \"build\", \"dist\"\n]\n</code></pre></p> </li> <li> <p>Monitor disk space:    <pre><code>import shutil\n\n# Check available disk space before archiving\nfree_space = shutil.disk_usage(output_path.parent).free\nif free_space &lt; 1_000_000_000:  # Less than 1GB\n    print(\"Warning: Low disk space available\")\n</code></pre></p> </li> </ol>"},{"location":"rdetoolkit/cmd/archive/#performance-notes","title":"Performance Notes","text":"<ul> <li>The archiving process is optimized for typical Python project structures</li> <li>Large projects with many files may take significant time to scan and archive</li> <li>Exclude patterns are applied during directory traversal to improve performance</li> <li>Security scanning performance depends on the size and complexity of the codebase</li> <li>Memory usage scales with the number of files and the complexity of scan patterns</li> </ul>"},{"location":"rdetoolkit/cmd/archive/#integration-with-other-modules","title":"Integration with Other Modules","text":""},{"location":"rdetoolkit/cmd/archive/#report-generation","title":"Report Generation","text":"<p>The archive module integrates with the report generation system:</p> <pre><code>from rdetoolkit.artifact.report import TemplateMarkdownReportGenerator\nfrom rdetoolkit.models.reports import ReportItem\n\n# The CreateArtifactCommand uses these internally\n# but you can also use them directly for custom reporting\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#compression-support","title":"Compression Support","text":"<p>Archives are created using the compressed controller:</p> <pre><code>from rdetoolkit.impl.compressed_controller import get_artifact_archiver\n\n# This is used internally by CreateArtifactCommand\n# Currently supports ZIP format only\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#code-scanning","title":"Code Scanning","text":"<p>Security and external connection scanning is performed by:</p> <pre><code>from rdetoolkit.artifact.report import get_scanner\n\n# Used internally for vulnerability and external connection analysis\nscanner_vuln = get_scanner('vulnerability', source_dir)\nscanner_ext = get_scanner('external', source_dir)\n</code></pre>"},{"location":"rdetoolkit/cmd/archive/#see-also","title":"See Also","text":"<ul> <li>Artifact Report Module - For custom report generation</li> <li>Models Module - For report data structures</li> <li>Compressed Controller - For archive creation</li> <li>Configuration Guide - For project configuration options</li> </ul>"},{"location":"rdetoolkit/cmd/command/","title":"Command API","text":""},{"location":"rdetoolkit/cmd/command/#purpose","title":"Purpose","text":"<p>This module defines the base classes and various commands for RDEToolKit's command-line interface. It provides common functionality including command execution, argument validation, log configuration, and error handling.</p>"},{"location":"rdetoolkit/cmd/command/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/cmd/command/#command-base-classes","title":"Command Base Classes","text":"<ul> <li>Unified interface for command execution</li> <li>Initialization and version display commands</li> <li>Various generator commands</li> </ul>"},{"location":"rdetoolkit/cmd/command/#file-generation-functionality","title":"File Generation Functionality","text":"<ul> <li>Automatic Dockerfile generation</li> <li>requirements.txt generation</li> <li>Configuration file generation</li> </ul>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.Command","title":"<code>src.rdetoolkit.cmd.command.Command(name, **attrs)</code>","text":"<p>               Bases: <code>Command</code></p>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand","title":"<code>src.rdetoolkit.cmd.command.InitCommand</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.default_dirs","title":"<code>default_dirs: Incomplete = [Path('container/modules'), Path('container/data/inputdata'), Path('container/data/invoice'), Path('container/data/tasksupport'), Path('input/invoice'), Path('input/inputdata'), Path('templates/tasksupport')]</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.__delete_dirs","title":"<code>__delete_dirs()</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.__make_dirs","title":"<code>__make_dirs()</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.__make_dockerfile","title":"<code>__make_dockerfile(path)</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.__make_invoice_json","title":"<code>__make_invoice_json(path)</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.__make_main_script","title":"<code>__make_main_script(path)</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.__make_metadata_def_json","title":"<code>__make_metadata_def_json(path)</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.__make_requirements_txt","title":"<code>__make_requirements_txt(path)</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.__make_template_json","title":"<code>__make_template_json(path)</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand.invoke","title":"<code>invoke()</code>","text":"<p>Invokes the command and performs the necessary actions.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The Click context object.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.VersionCommand","title":"<code>src.rdetoolkit.cmd.command.VersionCommand</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.VersionCommand.invoke","title":"<code>invoke()</code>","text":"<p>Invokes the command and prints the version number.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The Click context object.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.DockerfileGenerator","title":"<code>src.rdetoolkit.cmd.command.DockerfileGenerator(path='Dockerfile')</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.DockerfileGenerator.path","title":"<code>path: Incomplete = path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.DockerfileGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a Dockerfile based on the specified path.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: The content of the generated Dockerfile.</p>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.RequirementsTxtGenerator","title":"<code>src.rdetoolkit.cmd.command.RequirementsTxtGenerator(path='requirements.txt')</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.RequirementsTxtGenerator.path","title":"<code>path: Incomplete = path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.RequirementsTxtGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a requirements.txt file based on the specified path.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: The content of the generated requirements.txt file.</p>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceSchemaJsonGenerator","title":"<code>src.rdetoolkit.cmd.command.InvoiceSchemaJsonGenerator(path='invoice.schema.json')</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceSchemaJsonGenerator.path","title":"<code>path: Incomplete = path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceSchemaJsonGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a invoice.schema.json file based on the specified path.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The content of the generated invoice.schema.json file.</p>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MetadataDefJsonGenerator","title":"<code>src.rdetoolkit.cmd.command.MetadataDefJsonGenerator(path='metadata-def.json')</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MetadataDefJsonGenerator.path","title":"<code>path: Incomplete = path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MetadataDefJsonGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a metadata-def.json file based on the specified path.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The content of the metadata-def.json file.</p>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceJsonGenerator","title":"<code>src.rdetoolkit.cmd.command.InvoiceJsonGenerator(path='invoice.json')</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceJsonGenerator.path","title":"<code>path: Incomplete = path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceJsonGenerator.generate","title":"<code>generate()</code>","text":"<p>Generate a invoice.json file based on the specified path.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: The content of the invoice.json file.</p>"},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MainScriptGenerator","title":"<code>src.rdetoolkit.cmd.command.MainScriptGenerator(path)</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MainScriptGenerator.path","title":"<code>path: Incomplete = path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MainScriptGenerator.generate","title":"<code>generate()</code>","text":"<p>Generates a script template for the source code.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of strings representing the contents of the generated script.</p>"},{"location":"rdetoolkit/cmd/command/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/cmd/command/#basic-command-execution","title":"Basic Command Execution","text":"basic_command_execution.py<pre><code>from rdetoolkit.cmd.command import InitCommand, VersionCommand\n\n# Execute initialization command\ninit_command = InitCommand()\ntry:\n    result = init_command.invoke()\n    print(f\"\u2713 Initialization completed: {result}\")\nexcept Exception as e:\n    print(f\"\u2717 Initialization error: {e}\")\n\n# Execute version display command\nversion_command = VersionCommand()\ntry:\n    version_info = version_command.invoke()\n    print(f\"RDEToolKit version: {version_info}\")\nexcept Exception as e:\n    print(f\"\u2717 Version retrieval error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#using-file-generation-commands","title":"Using File Generation Commands","text":"file_generation_commands.py<pre><code>from rdetoolkit.cmd.command import (\n    DockerfileGenerator, RequirementsTxtGenerator,\n    InvoiceSchemaJsonGenerator, MetadataDefJsonGenerator\n)\nfrom pathlib import Path\n\n# Prepare output directory\noutput_dir = Path(\"generated_files\")\noutput_dir.mkdir(exist_ok=True)\n\n# Generate Dockerfile\ndockerfile_gen = DockerfileGenerator()\ntry:\n    dockerfile_content = dockerfile_gen.generate()\n    dockerfile_path = output_dir / \"Dockerfile\"\n\n    with open(dockerfile_path, 'w') as f:\n        f.write(dockerfile_content)\n\n    print(f\"\u2713 Dockerfile generation completed: {dockerfile_path}\")\nexcept Exception as e:\n    print(f\"\u2717 Dockerfile generation error: {e}\")\n\n# Generate requirements.txt\nrequirements_gen = RequirementsTxtGenerator()\ntry:\n    requirements_content = requirements_gen.generate()\n    requirements_path = output_dir / \"requirements.txt\"\n\n    with open(requirements_path, 'w') as f:\n        f.write(requirements_content)\n\n    print(f\"\u2713 requirements.txt generation completed: {requirements_path}\")\nexcept Exception as e:\n    print(f\"\u2717 requirements.txt generation error: {e}\")\n\n# Generate Invoice schema JSON\ninvoice_schema_gen = InvoiceSchemaJsonGenerator()\ntry:\n    schema_content = invoice_schema_gen.generate()\n    schema_path = output_dir / \"invoice.schema.json\"\n\n    with open(schema_path, 'w') as f:\n        f.write(schema_content)\n\n    print(f\"\u2713 Invoice schema generation completed: {schema_path}\")\nexcept Exception as e:\n    print(f\"\u2717 Invoice schema generation error: {e}\")\n\n# Generate metadata definition JSON\nmetadata_def_gen = MetadataDefJsonGenerator()\ntry:\n    metadata_content = metadata_def_gen.generate()\n    metadata_path = output_dir / \"metadata_def.json\"\n\n    with open(metadata_path, 'w') as f:\n        f.write(metadata_content)\n\n    print(f\"\u2713 Metadata definition generation completed: {metadata_path}\")\nexcept Exception as e:\n    print(f\"\u2717 Metadata definition generation error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/cmd/command/#project-initialization-system","title":"Project Initialization System","text":"<p>project_initialization.py<pre><code>from rdetoolkit.cmd.command import (\n    InitCommand, DockerfileGenerator, RequirementsTxtGenerator,\n    InvoiceJsonGenerator, MainScriptGenerator\n)\nfrom pathlib import Path\n\nclass ProjectInitializer:\n    \"\"\"Project initialization system\"\"\"\n\n    def __init__(self, project_dir: Path):\n        self.project_dir = project_dir\n        self.generators = {\n            \"dockerfile\": DockerfileGenerator(),\n            \"requirements\": RequirementsTxtGenerator(),\n            \"invoice\": InvoiceJsonGenerator(),\n            \"main_script\": MainScriptGenerator()\n        }\n\n    def initialize_project(self) -&gt; dict:\n        \"\"\"Initialize project\"\"\"\n\n        # Create project directory\n        self.project_dir.mkdir(parents=True, exist_ok=True)\n\n        results = {\n            \"project_dir\": str(self.project_dir),\n            \"generated_files\": [],\n            \"failed_files\": [],\n            \"status\": \"success\"\n        }\n\n        # Execute initialization command\n        init_command = InitCommand()\n        try:\n            init_result = init_command.invoke()\n            print(f\"\u2713 Project initialization: {init_result}\")\n        except Exception as e:\n            print(f\"\u2717 Initialization error: {e}\")\n            results[\"status\"] = \"partial_failure\"\n\n        # Generate various files\n        file_configs = {\n            \"dockerfile\": {\"filename\": \"Dockerfile\", \"generator\": \"dockerfile\"},\n            \"requirements\": {\"filename\": \"requirements.txt\", \"generator\": \"requirements\"},\n            \"invoice\": {\"filename\": \"invoice_template.json\", \"generator\": \"invoice\"},\n            \"main_script\": {\"filename\": \"main.py\", \"generator\": \"main_script\"}\n        }\n\n        for file_type, config in file_configs.items():\n            try:\n                generator = self.generators[config[\"generator\"]]\n                content = generator.generate()\n\n                file_path = self.project_dir / config[\"filename\"]\n                with open(file_path, 'w', encoding='utf-8') as f:\n                    f.write(content)\n\n                results[\"generated_files\"].append({\n                    \"type\": file_type,\n                    \"filename\": config[\"filename\"],\n                    \"path\": str(file_path)\n                })\n\n                print(f\"\u2713 {config['filename']} generation completed\")\n\n            except Exception as e:\n                results[\"failed_files\"].append({\n                    \"type\": file_type,\n                    \"filename\": config[\"filename\"],\n                    \"error\": str(e)\n                })\n\n                print(f\"\u2717 {config['filename']} generation failed: {e}\")\n                results[\"status\"] = \"partial_failure\"\n\n        return results\n\n    def create_directory_structure(self):\n        \"\"\"Create directory structure\"\"\"\n\n        directories = [\n            \"data/input\",\n            \"data/output\",\n            \"data/invoice\",\n            \"data/tasksupport\",\n            \"config\",\n            \"scripts\",\n            \"logs\"\n        ]\n\n        for dir_path in directories:\n            full_path = self.project_dir / dir_path\n            full_path.mkdir(parents=True, exist_ok=True)\n            print(f\"\u2713 Directory created: {dir_path}\")\n\n    def generate_readme(self):\n        \"\"\"Generate README.md\"\"\"\n\n        readme_content = f\"\"\"# RDEToolKit Project\n\nThis project was created using RDEToolKit.\n\n## Directory Structure\n</code></pre> {self.project_dir.name}/ \u251c\u2500\u2500 data/ \u2502   \u251c\u2500\u2500 input/          # Input data \u2502   \u251c\u2500\u2500 output/         # Output data \u2502   \u251c\u2500\u2500 invoice/        # Invoice files \u2502   \u2514\u2500\u2500 tasksupport/    # Task support files \u251c\u2500\u2500 config/             # Configuration files \u251c\u2500\u2500 scripts/            # Script files \u251c\u2500\u2500 logs/               # Log files \u251c\u2500\u2500 Dockerfile          # Docker configuration \u251c\u2500\u2500 requirements.txt    # Python dependencies \u251c\u2500\u2500 main.py            # Main script \u2514\u2500\u2500 README.md          # This file <pre><code>## Usage\n\n1. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n2. Run main script:\n   ```bash\n   python main.py\n   ```\n\n3. Run with Docker:\n   ```bash\n   docker build -t rdetoolkit-project .\n   docker run rdetoolkit-project\n   ```\n\"\"\"\n\n        readme_path = self.project_dir / \"README.md\"\n        with open(readme_path, 'w', encoding='utf-8') as f:\n            f.write(readme_content)\n\n        print(f\"\u2713 README.md generation completed: {readme_path}\")\n\n# Usage example\nproject_name = \"my_rde_project\"\nproject_path = Path(f\"projects/{project_name}\")\n\ninitializer = ProjectInitializer(project_path)\n\nprint(f\"=== {project_name} Project Initialization ===\")\n\n# Initialize project\ninit_results = initializer.initialize_project()\n\n# Create directory structure\ninitializer.create_directory_structure()\n\n# Generate README.md\ninitializer.generate_readme()\n\n# Results summary\nprint(f\"\\n=== Initialization Results ===\")\nprint(f\"Project directory: {init_results['project_dir']}\")\nprint(f\"Generated files: {len(init_results['generated_files'])}\")\nprint(f\"Failed files: {len(init_results['failed_files'])}\")\nprint(f\"Status: {init_results['status']}\")\n\nif init_results[\"failed_files\"]:\n    print(\"\\nFailed files:\")\n    for failed_file in init_results[\"failed_files\"]:\n        print(f\"  - {failed_file['filename']}: {failed_file['error']}\")\n</code></pre></p>"},{"location":"rdetoolkit/cmd/gen_excelinvoice/","title":"Excel Invoice Generator API","text":""},{"location":"rdetoolkit/cmd/gen_excelinvoice/#purpose","title":"Purpose","text":"<p>This module defines Excel invoice template generation processing in RDEToolKit. It provides functionality for template creation, saving, validation, and customization.</p>"},{"location":"rdetoolkit/cmd/gen_excelinvoice/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/cmd/gen_excelinvoice/#template-generation","title":"Template Generation","text":"<ul> <li>Automatic Excel invoice template generation</li> <li>Customizable template structure</li> <li>Multilingual header generation</li> </ul>"},{"location":"rdetoolkit/cmd/gen_excelinvoice/#command-execution","title":"Command Execution","text":"<ul> <li>Template generation via command line</li> <li>Configuration file-based generation</li> <li>Batch processing support</li> </ul>"},{"location":"rdetoolkit/cmd/gen_excelinvoice/#src.rdetoolkit.cmd.gen_excelinvoice.GenerateExcelInvoiceCommand","title":"<code>src.rdetoolkit.cmd.gen_excelinvoice.GenerateExcelInvoiceCommand(invoice_schema_file, output_path, mode)</code>","text":""},{"location":"rdetoolkit/cmd/gen_excelinvoice/#src.rdetoolkit.cmd.gen_excelinvoice.GenerateExcelInvoiceCommand.invoice_schema_file","title":"<code>invoice_schema_file: Incomplete = invoice_schema_file</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/gen_excelinvoice/#src.rdetoolkit.cmd.gen_excelinvoice.GenerateExcelInvoiceCommand.mode","title":"<code>mode: Incomplete = mode</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/gen_excelinvoice/#src.rdetoolkit.cmd.gen_excelinvoice.GenerateExcelInvoiceCommand.output_path","title":"<code>output_path: Incomplete = output_path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/cmd/gen_excelinvoice/#src.rdetoolkit.cmd.gen_excelinvoice.GenerateExcelInvoiceCommand.invoke","title":"<code>invoke()</code>","text":"<p>Invokes the command and generates an Excel invoice.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The Click context object.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"rdetoolkit/cmd/gen_excelinvoice/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/cmd/gen_excelinvoice/#basic-command-execution","title":"Basic Command Execution","text":"basic_excel_invoice_generation.py<pre><code>from rdetoolkit.cmd.gen_excelinvoice import GenerateExcelInvoiceCommand\n\n# Create Excel invoice generation command\ncommand = GenerateExcelInvoiceCommand()\n\n# Execute command\ntry:\n    result = command.invoke()\n    print(f\"\u2713 Excel invoice template generation completed: {result}\")\nexcept Exception as e:\n    print(f\"\u2717 Excel invoice generation error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/cmd/gen_excelinvoice/#generation-with-custom-configuration","title":"Generation with Custom Configuration","text":"custom_excel_invoice_generation.py<pre><code>from rdetoolkit.cmd.gen_excelinvoice import GenerateExcelInvoiceCommand\nfrom pathlib import Path\nimport json\n\n# Create custom configuration file\ncustom_config = {\n    \"template_name\": \"Material Science Experiment Invoice\",\n    \"output_path\": \"templates/material_science_invoice.xlsx\",\n    \"basic_fields\": [\n        {\"name\": \"dataName\", \"label\": \"Data Name\", \"required\": True},\n        {\"name\": \"researcher\", \"label\": \"Researcher\", \"required\": True},\n        {\"name\": \"institution\", \"label\": \"Institution\", \"required\": True},\n        {\"name\": \"experiment_date\", \"label\": \"Experiment Date\", \"required\": True}\n    ],\n    \"general_attributes\": [\n        {\"name\": \"temperature\", \"unit\": \"\u2103\", \"description\": \"Measurement temperature\"},\n        {\"name\": \"pressure\", \"unit\": \"hPa\", \"description\": \"Atmospheric pressure\"},\n        {\"name\": \"humidity\", \"unit\": \"%\", \"description\": \"Humidity\"}\n    ],\n    \"specific_attributes\": [\n        {\"name\": \"material_type\", \"description\": \"Material type\"},\n        {\"name\": \"sample_size\", \"unit\": \"mm\", \"description\": \"Sample size\"},\n        {\"name\": \"surface_treatment\", \"description\": \"Surface treatment\"}\n    ],\n    \"styling\": {\n        \"header_color\": \"#4472C4\",\n        \"font_name\": \"Arial\",\n        \"font_size\": 11\n    }\n}\n\n# Save configuration file\nconfig_path = Path(\"config/custom_invoice_config.json\")\nconfig_path.parent.mkdir(parents=True, exist_ok=True)\n\nwith open(config_path, 'w', encoding='utf-8') as f:\n    json.dump(custom_config, f, ensure_ascii=False, indent=2)\n\n# Execute command with custom configuration\ncommand = GenerateExcelInvoiceCommand()\n\ntry:\n    result = command.invoke(config_file=str(config_path))\n    print(f\"\u2713 Custom Excel invoice generation completed: {result}\")\n\n    output_file = Path(custom_config[\"output_path\"])\n    if output_file.exists():\n        print(f\"\u2713 File generation confirmed: {output_file}\")\n        print(f\"File size: {output_file.stat().st_size:,} bytes\")\n\nexcept Exception as e:\n    print(f\"\u2717 Custom Excel invoice generation error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/","title":"Compressed Controller API","text":""},{"location":"rdetoolkit/impl/compressed_controller/#purpose","title":"Purpose","text":"<p>This module defines compressed file processing in RDEToolKit. It provides functionality for compressed file extraction, validation, information retrieval, and temporary file management.</p>"},{"location":"rdetoolkit/impl/compressed_controller/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/impl/compressed_controller/#compressed-file-processing","title":"Compressed File Processing","text":"<ul> <li>Support for various compression formats including ZIP, TAR, GZ</li> <li>Compressed file extraction and validation</li> <li>Proper handling of Japanese file names</li> </ul>"},{"location":"rdetoolkit/impl/compressed_controller/#file-management","title":"File Management","text":"<ul> <li>Temporary directory management</li> <li>Organization of extracted files</li> <li>Cleanup processing</li> </ul>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFlatFileParser","title":"<code>src.rdetoolkit.impl.compressed_controller.CompressedFlatFileParser(xlsx_invoice)</code>","text":"<p>               Bases: <code>ICompressedFileStructParser</code></p> <p>Parser for compressed flat files, providing functionality to read and extract the contents.</p> <p>This parser specifically deals with flat files that are compressed. It extracts the files and ensures they match the expected structure described in an excelinvoice.</p> <p>Attributes:</p> Name Type Description <code>xlsx_invoice</code> <code>DataFrame</code> <p>DataFrame representing the expected structure or content description of the compressed files.</p>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFlatFileParser.xlsx_invoice","title":"<code>xlsx_invoice: Incomplete = xlsx_invoice</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFlatFileParser.read","title":"<code>read(zipfile, target_path)</code>","text":"<p>Extracts the contents of the zipfile to the target path and checks their existence against the Excelinvoice.</p> <p>Parameters:</p> Name Type Description Default <code>zipfile</code> <code>Path</code> <p>Path to the compressed flat file to be read.</p> required <code>target_path</code> <code>Path</code> <p>Destination directory where the zipfile will be extracted to.</p> required <p>Returns:</p> Type Description <code>list[tuple[Path, ...]]</code> <p>List[Tuple[Path, ...]]: A list of tuples containing file paths. Each tuple</p> <code>list[tuple[Path, ...]]</code> <p>represents files from the compressed archive that matched the xlsx_invoice structure.</p>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFolderParser","title":"<code>src.rdetoolkit.impl.compressed_controller.CompressedFolderParser(xlsx_invoice)</code>","text":"<p>               Bases: <code>ICompressedFileStructParser</code></p> <p>Parser for compressed folders, extracting contents and ensuring they match an expected structure.</p> <p>This parser is specifically designed for compressed folders. It extracts the content and verifies against a provided xlsx invoice structure.</p> <p>Attributes:</p> Name Type Description <code>xlsx_invoice</code> <code>DataFrame</code> <p>DataFrame representing the expected structure or content description of the compressed folder contents.</p>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFolderParser.xlsx_invoice","title":"<code>xlsx_invoice: Incomplete = xlsx_invoice</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFolderParser.read","title":"<code>read(zipfile, target_path)</code>","text":"<p>Extracts the contents of the zipfile and returns validated file paths.</p> <p>Parameters:</p> Name Type Description Default <code>zipfile</code> <code>Path</code> <p>Path to the compressed folder to be read.</p> required <code>target_path</code> <code>Path</code> <p>Destination directory where the zipfile will be extracted.</p> required <p>Returns:</p> Type Description <code>list[tuple[Path, ...]]</code> <p>List[Tuple[Path, ...]]: A list of tuples containing file paths that have been</p> <code>list[tuple[Path, ...]]</code> <p>validated based on unique directory names.</p>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.CompressedFolderParser.validation_uniq_fspath","title":"<code>validation_uniq_fspath(target_path, exclude_names)</code>","text":"<p>Check if there are any non-unique directory names under the target directory.</p> <p>Parameters:</p> Name Type Description Default <code>target_path</code> <code>Union[str, Path]</code> <p>The directory path to scan</p> required <code>exclude_names</code> <code>list[str]</code> <p>Excluded files</p> required <p>Raises:</p> Type Description <code>StructuredError</code> <p>An exception is raised when duplicate directory names are detected</p> <p>Returns:</p> Type Description <code>dict[str, list[Path]]</code> <p>dict[str, Path]: Returns the unique directory names and a list of files under each directory</p> Note <p>This function checks for the existence of folders with the same name, differing only in case (e.g., 'folder1' and 'Folder1'). In a Unix-based filesystem, such folders can coexist when creating a zip file. However, Windows does not allow for this coexistence when downloading and unzipping the file, leading to an unzip failure in my environment. Therefore, it's necessary to check for folders whose names differ only in case.</p>"},{"location":"rdetoolkit/impl/compressed_controller/#src.rdetoolkit.impl.compressed_controller.parse_compressedfile_mode","title":"<code>src.rdetoolkit.impl.compressed_controller.parse_compressedfile_mode(xlsx_invoice)</code>","text":"<p>Parses the mode of a compressed file and returns the corresponding parser object.</p> <p>Parameters:</p> Name Type Description Default <code>xlsx_invoice</code> <code>DataFrame</code> <p>The invoice data in Excel format.</p> required <p>Returns:</p> Name Type Description <code>ICompressedFileStructParser</code> <code>ICompressedFileStructParser</code> <p>An instance of the compressed file structure parser.</p>"},{"location":"rdetoolkit/impl/compressed_controller/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/impl/compressed_controller/#basic-compressed-file-processing","title":"Basic Compressed File Processing","text":"basic_compressed_processing.py<pre><code>from rdetoolkit.impl.compressed_controller import CompressedFlatFileParser, CompressedFolderParser\nfrom pathlib import Path\n\n# Use flat file parser\nflat_parser = CompressedFlatFileParser()\n\n# Read compressed file\narchive_path = Path(\"data/input/experiment_data.zip\")\nif archive_path.exists():\n    try:\n        # Read file\n        parsed_data = flat_parser.read(archive_path)\n        print(f\"\u2713 Compressed file analysis completed: {parsed_data}\")\n\n        # Extract files\n        unpacked_files = flat_parser._unpacked(archive_path)\n        print(f\"Number of extracted files: {len(unpacked_files)}\")\n\n        for file_path in unpacked_files:\n            print(f\"  - {file_path}\")\n\n    except Exception as e:\n        print(f\"\u2717 Compressed file processing error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#folder-structure-compressed-file-processing","title":"Folder Structure Compressed File Processing","text":"folder_compressed_processing.py<pre><code>from rdetoolkit.impl.compressed_controller import CompressedFolderParser\nfrom pathlib import Path\n\n# Use folder parser\nfolder_parser = CompressedFolderParser()\n\n# Process compressed folder\narchive_path = Path(\"data/input/experiment_folder.zip\")\nif archive_path.exists():\n    try:\n        # Read folder structure\n        folder_data = folder_parser.read(archive_path)\n        print(f\"\u2713 Folder structure analysis completed: {folder_data}\")\n\n        # Validate unique paths\n        validation_result = folder_parser.validation_uniq_fspath(folder_data)\n        if validation_result:\n            print(\"\u2713 File path uniqueness validation successful\")\n        else:\n            print(\"\u2717 File path uniqueness validation failed\")\n\n        # Extract files\n        unpacked_files = folder_parser._unpacked(archive_path)\n        print(f\"Number of extracted files: {len(unpacked_files)}\")\n\n    except Exception as e:\n        print(f\"\u2717 Folder compressed file processing error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/impl/compressed_controller/#compressed-file-mode-analysis","title":"Compressed File Mode Analysis","text":"compressed_mode_analysis.py<pre><code>from rdetoolkit.impl.compressed_controller import parse_compressedfile_mode\nfrom pathlib import Path\n\n# Mode analysis for multiple compressed files\narchive_files = [\n    Path(\"data/input/flat_data.zip\"),\n    Path(\"data/input/folder_structure.zip\"),\n    Path(\"data/input/mixed_content.tar.gz\")\n]\n\nfor archive_path in archive_files:\n    if archive_path.exists():\n        try:\n            # Analyze compressed file mode\n            mode_result = parse_compressedfile_mode(archive_path)\n            print(f\"File: {archive_path.name}\")\n            print(f\"Mode: {mode_result}\")\n            print(f\"---\")\n\n        except Exception as e:\n            print(f\"\u2717 Mode analysis error {archive_path.name}: {e}\")\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/","title":"Input Controller API","text":""},{"location":"rdetoolkit/impl/input_controller/#purpose","title":"Purpose","text":"<p>This module defines file operation processing corresponding to various input modes in RDEToolKit. It provides functionality for input mode determination, file validation, and processing control.</p>"},{"location":"rdetoolkit/impl/input_controller/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/impl/input_controller/#input-mode-management","title":"Input Mode Management","text":"<ul> <li>Automatic determination of mode from input file patterns</li> <li>Support for Invoice, ExcelInvoice, RDEFormat, and MultiFile modes</li> <li>Input file validation and preprocessing</li> </ul>"},{"location":"rdetoolkit/impl/input_controller/#file-operation-control","title":"File Operation Control","text":"<ul> <li>Acquisition and classification of input files</li> <li>File format validation</li> <li>Control of processing workflow</li> </ul>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.InvoiceChecker","title":"<code>src.rdetoolkit.impl.input_controller.InvoiceChecker(unpacked_dir_basename)</code>","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to determine and parse the invoice mode.</p> <p>This class groups and checks invoice files, specifically identifying zip files, Excel invoice files, and other types of files.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for the unpacked content.</p> Note <p>For the purpose of this checker, notable files are primarily Excel invoices with a specific naming convention.</p>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.InvoiceChecker.checker_type","title":"<code>checker_type: str</code>  <code>property</code>","text":"<p>Return the type identifier for this checker.</p>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.InvoiceChecker.out_dir_temp","title":"<code>out_dir_temp: Incomplete = unpacked_dir_basename</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.InvoiceChecker.parse","title":"<code>parse(src_dir_input)</code>","text":"<p>Parses the source input directory, grouping files based on their type.</p> <p>Parameters:</p> Name Type Description Default <code>src_dir_input</code> <code>Path</code> <p>Source directory containing the input files.</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Optional[Path]]:</p> <ul> <li>RawFiles: A list of tuples where each tuple contains file paths grouped as 'other files'.</li> <li>Optional[Path]: This is always None for this implementation.</li> </ul>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker","title":"<code>src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker(unpacked_dir_basename)</code>","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to determine and parse the ExcelInvoice mode.</p> <p>This class is used to identify, group, and validate the files in ExcelInvoice mode. The primary focus is on determining the presence and validity of ZIP files, Excel Invoice files, and other file types.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for unpacked content.</p> <p>Methods:</p> Name Description <code>parse</code> <p>Path) -&gt; tuple[RawFiles, Optional[Path]]: Parse the source input directory, validate the file groups, and return the raw files and the Excel Invoice file.</p>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker.checker_type","title":"<code>checker_type: str</code>  <code>property</code>","text":"<p>Return the type identifier for this checker.</p>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker.out_dir_temp","title":"<code>out_dir_temp: Incomplete = unpacked_dir_basename</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker.get_index","title":"<code>get_index(paths, sort_items)</code>","text":"<p>Retrieves the index of the <code>divided</code> folder.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>Path</code> <p>Directory path of the raw files.</p> required <code>sort_items</code> <code>Sequence</code> <p>A list of files sorted in the order described in the Excel invoice.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The index number.</p>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker.parse","title":"<code>parse(src_dir_input)</code>","text":"<p>Parse the source input directory, group files by their type, validate the groups, and return the raw files and Excel Invoice file.</p> <p>Parameters:</p> Name Type Description Default <code>src_dir_input</code> <code>Path</code> <p>Source directory containing the input files.</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Optional[Path]]:</p> <ul> <li>RawFiles: List of tuples containing paths of raw files.</li> <li>Optional[Path]: Path to the Excel Invoice file.</li> </ul>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.RDEFormatChecker","title":"<code>src.rdetoolkit.impl.input_controller.RDEFormatChecker(unpacked_dir_basename)</code>","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to identify and parse the RDE Format.</p> <p>This class is designed to handle files in the RDE Format. It checks the presence of ZIP files, unpacks them, and retrieves raw files from the unpacked content.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for unpacked content.</p>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.RDEFormatChecker.checker_type","title":"<code>checker_type: str</code>  <code>property</code>","text":"<p>Return the type identifier for this checker.</p>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.RDEFormatChecker.out_dir_temp","title":"<code>out_dir_temp: Incomplete = unpacked_dir_basename</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.RDEFormatChecker.parse","title":"<code>parse(src_dir_input)</code>","text":"<p>Parse the source input directory, identify ZIP files, unpack the ZIP file, and return the raw files.</p> <p>Parameters:</p> Name Type Description Default <code>src_dir_input</code> <code>Path</code> <p>Source directory containing the input files.</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Optional[Path]]:</p> <ul> <li>RawFiles: List of tuples containing paths of raw files.</li> <li>Optional[Path]: This will always return None for this implementation.</li> </ul>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.MultiFileChecker","title":"<code>src.rdetoolkit.impl.input_controller.MultiFileChecker(unpacked_dir_basename)</code>","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to identify and parse the MultiFile mode.</p> <p>This class is designed to handle multiple file modes. It checks the files in the source input directory, groups them, and retrieves the raw files.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory used for certain operations.</p>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.MultiFileChecker.checker_type","title":"<code>checker_type: str</code>  <code>property</code>","text":"<p>Return the type identifier for this checker.</p>"},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.MultiFileChecker.out_dir_temp","title":"<code>out_dir_temp: Incomplete = unpacked_dir_basename</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.MultiFileChecker.parse","title":"<code>parse(src_dir_input)</code>","text":"<p>Parse the source input directory, group ZIP files and other files, and return the raw files.</p> <p>Parameters:</p> Name Type Description Default <code>src_dir_input</code> <code>Path</code> <p>Source directory containing the input files.</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Optional[Path]]:</p> <ul> <li>RawFiles: List of tuples containing paths of raw files.</li> <li>Optional[Path]: This will always return None for this implementation.</li> </ul>"},{"location":"rdetoolkit/impl/input_controller/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/impl/input_controller/#invoice-mode-processing","title":"Invoice Mode Processing","text":"invoice_mode_processing.py<pre><code>from rdetoolkit.impl.input_controller import InvoiceChecker\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\nfrom pathlib import Path\n\n# Configure input paths\ninput_paths = RdeInputDirPaths(\n    inputdata=Path(\"data/input\"),\n    invoice=Path(\"data/invoice\"),\n    tasksupport=Path(\"data/tasksupport\")\n)\n\n# Create an Invoice checker\ninvoice_checker = InvoiceChecker(input_paths)\n\ntry:\n    # Parse the Invoice file\n    parsed_data = invoice_checker.parse()\n    print(f\"\u2713 Invoice parsing successful: {parsed_data}\")\n\n    # Get file groups\n    file_groups = invoice_checker._get_group_by_files()\n    print(f\"Number of file groups: {len(file_groups)}\")\n\n    for i, group in enumerate(file_groups):\n        print(f\"Group {i+1}: {group}\")\n\nexcept Exception as e:\n    print(f\"\u2717 Invoice processing error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#excelinvoice-mode-processing","title":"ExcelInvoice Mode Processing","text":"excel_invoice_mode_processing.py<pre><code>from rdetoolkit.impl.input_controller import ExcelInvoiceChecker\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\nfrom pathlib import Path\n\n# Configure input paths\ninput_paths = RdeInputDirPaths(\n    inputdata=Path(\"data/input\"),\n    invoice=Path(\"data/invoice\"),\n    tasksupport=Path(\"data/tasksupport\")\n)\n\n# Create an ExcelInvoice checker\nexcel_checker = ExcelInvoiceChecker(input_paths)\n\ntry:\n    # Read the Excel invoice\n    excel_data = excel_checker.read()\n    print(\"\u2713 Excel invoice read successfully\")\n\n    # Get index\n    index = excel_checker.get_index()\n    print(f\"Index: {index}\")\n\n    # Get raw data files\n    rawfiles = excel_checker._get_rawfiles()\n    print(f\"Number of raw data files: {len(rawfiles)}\")\n\n    # Validate files\n    validation_result = excel_checker._validate_files()\n    if validation_result:\n        print(\"\u2713 File validation successful\")\n    else:\n        print(\"\u2717 File validation failed\")\n\n        # Detect invalid files\n        invalid_zips = excel_checker._detect_invalid_zipfiles()\n        invalid_excels = excel_checker._detect_invalid_excel_invoice_files()\n        invalid_others = excel_checker._detect_invalid_other_files()\n\n        if invalid_zips:\n            print(f\"Invalid ZIP files: {invalid_zips}\")\n        if invalid_excels:\n            print(f\"Invalid Excel files: {invalid_excels}\")\n        if invalid_others:\n            print(f\"Other invalid files: {invalid_others}\")\n\nexcept Exception as e:\n    print(f\"\u2717 ExcelInvoice processing error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#rdeformat-mode-processing","title":"RDEFormat Mode Processing","text":"rde_format_mode_processing.py<pre><code>from rdetoolkit.impl.input_controller import RDEFormatChecker\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\nfrom pathlib import Path\n\n# Configure input paths\ninput_paths = RdeInputDirPaths(\n    inputdata=Path(\"data/input\"),\n    invoice=Path(\"data/invoice\"),\n    tasksupport=Path(\"data/tasksupport\")\n)\n\n# Create an RDEFormat checker\nrde_checker = RDEFormatChecker(input_paths)\n\ntry:\n    # Parse the RDE format\n    parsed_data = rde_checker.parse()\n    print(f\"\u2713 RDE format parsing successful: {parsed_data}\")\n\n    # Get ZIP files\n    zipfiles = rde_checker._get_zipfiles()\n    print(f\"Number of ZIP files: {len(zipfiles)}\")\n\n    # Unpack files\n    unpacked_files = rde_checker._unpacked()\n    print(f\"Number of unpacked files: {len(unpacked_files)}\")\n\n    # Get raw data files\n    rawfiles = rde_checker._get_rawfiles()\n    print(f\"Number of raw data files: {len(rawfiles)}\")\n\n    for rawfile in rawfiles:\n        print(f\"  - {rawfile}\")\n\nexcept Exception as e:\n    print(f\"\u2717 RDEFormat processing error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#multifile-mode-processing","title":"MultiFile Mode Processing","text":"multifile_mode_processing.py<pre><code>from rdetoolkit.impl.input_controller import MultiFileChecker\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\nfrom pathlib import Path\n\n# Configure input paths\ninput_paths = RdeInputDirPaths(\n    inputdata=Path(\"data/input\"),\n    invoice=Path(\"data/invoice\"),\n    tasksupport=Path(\"data/tasksupport\")\n)\n\n# Create a MultiFile checker\nmultifile_checker = MultiFileChecker(input_paths)\n\ntry:\n    # Parse the MultiFile input\n    parsed_data = multifile_checker.parse()\n    print(f\"\u2713 MultiFile parsing successful: {parsed_data}\")\n\n    # Get file groups\n    file_groups = multifile_checker._get_group_by_files()\n    print(f\"Number of file groups: {len(file_groups)}\")\n\n    for i, group in enumerate(file_groups):\n        print(f\"Group {i+1}: {len(group)} files\")\n        for file_path in group:\n            print(f\"  - {file_path}\")\n\n    # Unpack files (if there are compressed files)\n    unpacked_files = multifile_checker._unpacked()\n    if unpacked_files:\n        print(f\"Number of unpacked files: {len(unpacked_files)}\")\n        for unpacked_file in unpacked_files:\n            print(f\"  - {unpacked_file}\")\n\nexcept Exception as e:\n    print(f\"\u2717 MultiFile processing error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/impl/input_controller/#integrated-input-control-system","title":"Integrated Input Control System","text":"integrated_input_control.py<pre><code>from rdetoolkit.impl.input_controller import (\n    InvoiceChecker, ExcelInvoiceChecker,\n    RDEFormatChecker, MultiFileChecker\n)\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\nfrom pathlib import Path\n\nclass InputModeController:\n    \"\"\"Integrated input mode control system\"\"\"\n\n    def __init__(self, input_paths: RdeInputDirPaths):\n        self.input_paths = input_paths\n        self.checkers = {\n            \"Invoice\": InvoiceChecker(input_paths),\n            \"ExcelInvoice\": ExcelInvoiceChecker(input_paths),\n            \"RDEFormat\": RDEFormatChecker(input_paths),\n            \"MultiFile\": MultiFileChecker(input_paths)\n        }\n\n    def detect_input_mode(self) -&gt; str:\n        \"\"\"Automatic detection of input mode\"\"\"\n\n        # Check for Excel invoice files\n        excel_files = list(self.input_paths.invoice.glob(\"*.xlsx\"))\n        if excel_files:\n            return \"ExcelInvoice\"\n\n        # Check for JSON invoice files\n        json_files = list(self.input_paths.invoice.glob(\"*.json\"))\n        if json_files:\n            return \"Invoice\"\n\n        # Check for ZIP files\n        zip_files = list(self.input_paths.inputdata.glob(\"*.zip\"))\n        if zip_files:\n            return \"RDEFormat\"\n\n        # Default to MultiFile\n        return \"MultiFile\"\n\n    def process_input(self) -&gt; dict:\n        \"\"\"Execute processing based on detected input mode\"\"\"\n\n        detected_mode = self.detect_input_mode()\n        print(f\"Detected input mode: {detected_mode}\")\n\n        try:\n            checker = self.checkers[detected_mode]\n\n            if detected_mode == \"ExcelInvoice\":\n                data = checker.read()\n                index = checker.get_index()\n                rawfiles = checker._get_rawfiles()\n\n                return {\n                    \"mode\": detected_mode,\n                    \"status\": \"success\",\n                    \"data\": data,\n                    \"index\": index,\n                    \"rawfiles\": rawfiles\n                }\n\n            else:\n                parsed_data = checker.parse()\n                file_groups = checker._get_group_by_files() if hasattr(checker, '_get_group_by_files') else []\n\n                return {\n                    \"mode\": detected_mode,\n                    \"status\": \"success\",\n                    \"data\": parsed_data,\n                    \"file_groups\": file_groups\n                }\n\n        except Exception as e:\n            return {\n                \"mode\": detected_mode,\n                \"status\": \"error\",\n                \"error\": str(e)\n            }\n\n# Example usage\ninput_paths = RdeInputDirPaths(\n    inputdata=Path(\"data/input\"),\n    invoice=Path(\"data/invoice\"),\n    tasksupport=Path(\"data/tasksupport\")\n)\n\ncontroller = InputModeController(input_paths)\nresult = controller.process_input()\n\nprint(f\"Result: {result}\")\nif result[\"status\"] == \"success\":\n    print(f\"\u2713 Successfully processed in {result['mode']} mode\")\nelse:\n    print(f\"\u2717 Error in {result['mode']} mode: {result['error']}\")\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/","title":"FileChecker Interface API","text":""},{"location":"rdetoolkit/interface/filechecker/#purpose","title":"Purpose","text":"<p>This module defines the interfaces for file validation processes in RDEToolKit. It provides features such as existence checks, size validation, format checks, and content verification for files.</p>"},{"location":"rdetoolkit/interface/filechecker/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/interface/filechecker/#file-validation-interfaces","title":"File Validation Interfaces","text":"<ul> <li>Helper interface for input file operations</li> <li>Interface for file validation</li> <li>Interface for compressed file structure parsing</li> </ul>"},{"location":"rdetoolkit/interface/filechecker/#abstraction-layer","title":"Abstraction Layer","text":"<ul> <li>Unified file operation interfaces</li> <li>Extensible validation system</li> <li>Plugin-based architecture</li> </ul>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.IInputFileHelper","title":"<code>src.rdetoolkit.interfaces.filechecker.IInputFileHelper</code>","text":"<p>               Bases: <code>ABC</code></p> <p>An abstract interface representing a helper for input file operations.</p> <p>This interface defines the expected operations to handle and process zip files among a list of input files.</p> <p>Methods:</p> Name Description <code>get_zipfiles</code> <p>list[Path]) -&gt; ZipFilesPathList:</p> <code>unpacked</code> <p>Path, target_dir: Path) -&gt; UnZipFilesPathList:</p>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.IInputFileHelper.get_zipfiles","title":"<code>get_zipfiles(input_files)</code>  <code>abstractmethod</code>","text":"<p>Retrieves a list of paths to zip files from a list of input file paths.</p> <p>Parameters:</p> Name Type Description Default <code>input_files</code> <code>list[Path]</code> <p>A list of file paths to search for zip files.</p> required <p>Returns:</p> Name Type Description <code>ZipFilesPathList</code> <code>ZipFilesPathList</code> <p>A list of paths pointing to the found zip files.</p>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.IInputFileHelper.unpacked","title":"<code>unpacked(zipfile, target_dir)</code>  <code>abstractmethod</code>","text":"<p>Unpacks a specified zip file into a target directory and returns a list of paths to the unpacked files.</p> <p>Parameters:</p> Name Type Description Default <code>zipfile</code> <code>Path</code> <p>The path to the zip file to be unpacked.</p> required <code>target_dir</code> <code>Path</code> <p>The directory where the zip file contents will be unpacked.</p> required <p>Returns:</p> Name Type Description <code>UnZipFilesPathList</code> <code>UnZipFilesPathList</code> <p>A list of paths to the unpacked files.</p>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.IInputFileChecker","title":"<code>src.rdetoolkit.interfaces.filechecker.IInputFileChecker</code>","text":"<p>               Bases: <code>ABC</code></p> <p>An abstract interface for checking and parsing input files.</p> <p>This interface is designed to define the structure for classes that handle the parsing of source input files. It's responsible for validating and extracting necessary information from these files.</p>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.IInputFileChecker.checker_type","title":"<code>checker_type: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Return the type identifier for this checker.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string identifier representing the checker type.</p>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.IInputFileChecker.parse","title":"<code>parse(src_input_path)</code>  <code>abstractmethod</code>","text":"<p>Parses the given source input path and extracts relevant information.</p> <p>This method should analyze the file or files located at the specified path and extract essential data needed for further processing.</p> <p>Parameters:</p> Name Type Description Default <code>src_input_path</code> <code>Path</code> <p>The path to the source input file(s).</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Optional[Path]]: A tuple where the first element is the extracted raw file data,                             and the second element is an optional path to additional relevant data.</p>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.ICompressedFileStructParser","title":"<code>src.rdetoolkit.interfaces.filechecker.ICompressedFileStructParser</code>","text":"<p>               Bases: <code>ABC</code></p> <p>An abstract interface for parsing the structure of compressed files.</p> <p>This interface defines the expected operations for classes that are responsible for reading and understanding the structure of compressed files (like zip files), especially focusing on how these files are organized internally.</p>"},{"location":"rdetoolkit/interface/filechecker/#src.rdetoolkit.interfaces.filechecker.ICompressedFileStructParser.read","title":"<code>read(zipfile, target_path)</code>  <code>abstractmethod</code>","text":"<p>Reads and parses the structure of the compressed file.</p> <p>This method should open and inspect the contents of a compressed file, extracting information about its internal structure, such as file paths and organization.</p> <p>Parameters:</p> Name Type Description Default <code>zipfile</code> <code>Path</code> <p>The path to the compressed file to be read.</p> required <code>target_path</code> <code>Path</code> <p>The path where the contents of the compressed file might be extracted or analyzed.</p> required <p>Returns:</p> Type Description <code>list[tuple[Path, ...]]</code> <p>List[Tuple[Path, ...]]: A list of tuples, each containing paths or other relevant data extracted from the compressed file.</p>"},{"location":"rdetoolkit/interface/filechecker/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/interface/filechecker/#implementing-a-custom-file-helper","title":"Implementing a Custom File Helper","text":"custom_file_helper.py<pre><code>from rdetoolkit.interfaces.filechecker import IInputFileHelper\nfrom pathlib import Path\nfrom typing import List\n\nclass CustomInputFileHelper(IInputFileHelper):\n    \"\"\"Custom implementation of the input file helper\"\"\"\n\n    def get_zipfiles(self, directory: Path) -&gt; List[Path]:\n        \"\"\"Retrieve ZIP files in a directory\"\"\"\n        zip_files = []\n\n        # Basic ZIP file search\n        zip_files.extend(directory.glob(\"*.zip\"))\n        zip_files.extend(directory.glob(\"*.ZIP\"))\n\n        # Recursive search\n        zip_files.extend(directory.rglob(\"*.zip\"))\n\n        # Remove duplicates\n        unique_zip_files = list(set(zip_files))\n\n        print(f\"Found {len(unique_zip_files)} ZIP files:\")\n        for zip_file in unique_zip_files:\n            print(f\"  - {zip_file}\")\n\n        return unique_zip_files\n\n    def unpacked(self, zip_file: Path) -&gt; List[Path]:\n        \"\"\"Extract contents of a ZIP file\"\"\"\n        import zipfile\n\n        extracted_files = []\n        extract_dir = zip_file.parent / f\"{zip_file.stem}_extracted\"\n        extract_dir.mkdir(exist_ok=True)\n\n        try:\n            with zipfile.ZipFile(zip_file, 'r') as zf:\n                zf.extractall(extract_dir)\n\n                # List extracted files\n                for file in extract_dir.rglob(\"*\"):\n                    if file.is_file():\n                        extracted_files.append(file)\n\n            print(f\"\u2713 Extraction complete: {len(extracted_files)} files\")\n            return extracted_files\n\n        except Exception as e:\n            print(f\"\u2717 Extraction error: {e}\")\n            return []\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/#implementing-a-custom-file-checker","title":"Implementing a Custom File Checker","text":"custom_file_checker.py<pre><code>from rdetoolkit.interfaces.filechecker import IInputFileChecker\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nclass CustomInputFileChecker(IInputFileChecker):\n    \"\"\"Custom implementation of the input file checker\"\"\"\n\n    def __init__(self):\n        self.validation_rules = {\n            \".csv\": {\"max_size\": 10 * 1024 * 1024, \"encoding\": \"utf-8\"},\n            \".json\": {\"max_size\": 1 * 1024 * 1024, \"required_keys\": [\"basic\"]},\n            \".xlsx\": {\"max_size\": 20 * 1024 * 1024},\n            \".zip\": {\"max_size\": 100 * 1024 * 1024}\n        }\n\n    def parse(self, file_path: Path) -&gt; Dict[str, Any]:\n        \"\"\"Validate and parse a file according to its extension and rules\"\"\"\n        result = {\n            \"file_path\": str(file_path),\n            \"exists\": file_path.exists(),\n            \"size\": 0,\n            \"extension\": file_path.suffix.lower(),\n            \"valid\": False,\n            \"errors\": []\n        }\n\n        if not result[\"exists\"]:\n            result[\"errors\"].append(\"File does not exist\")\n            return result\n\n        # Get file size\n        result[\"size\"] = file_path.stat().st_size\n\n        # Validate based on extension\n        ext = result[\"extension\"]\n        if ext in self.validation_rules:\n            rules = self.validation_rules[ext]\n\n            # Size check\n            if result[\"size\"] &gt; rules[\"max_size\"]:\n                result[\"errors\"].append(\"File size exceeds the maximum limit\")\n\n            # Extension-specific checks\n            if ext == \".json\":\n                result.update(self._validate_json(file_path, rules))\n            elif ext == \".csv\":\n                result.update(self._validate_csv(file_path, rules))\n            elif ext == \".xlsx\":\n                result.update(self._validate_excel(file_path, rules))\n\n        result[\"valid\"] = len(result[\"errors\"]) == 0\n        return result\n\n    def _validate_json(self, file_path: Path, rules: Dict) -&gt; Dict:\n        \"\"\"Validate JSON file structure and required keys\"\"\"\n        import json\n\n        validation_result = {\"json_valid\": False, \"errors\": []}\n\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n\n            validation_result[\"json_valid\"] = True\n\n            # Check required keys\n            if \"required_keys\" in rules:\n                missing = [k for k in rules[\"required_keys\"] if k not in data]\n                if missing:\n                    validation_result[\"errors\"] = [f\"Missing required keys: {missing}\"]\n\n        except json.JSONDecodeError as e:\n            validation_result[\"errors\"] = [f\"JSON format error: {e}\"]\n        except Exception as e:\n            validation_result[\"errors\"] = [f\"File read error: {e}\"]\n\n        return validation_result\n\n    def _validate_csv(self, file_path: Path, rules: Dict) -&gt; Dict:\n        \"\"\"Validate CSV file format and count rows\"\"\"\n        import csv\n\n        validation_result = {\"csv_valid\": False, \"row_count\": 0, \"errors\": []}\n\n        try:\n            with open(file_path, 'r', encoding=rules.get(\"encoding\", \"utf-8\")) as f:\n                reader = csv.reader(f)\n                rows = list(reader)\n                validation_result[\"row_count\"] = len(rows)\n                validation_result[\"csv_valid\"] = True\n\n        except Exception as e:\n            validation_result[\"errors\"] = [f\"CSV read error: {e}\"]\n\n        return validation_result\n\n    def _validate_excel(self, file_path: Path, rules: Dict) -&gt; Dict:\n        \"\"\"Validate basic Excel file format\"\"\"\n        validation_result = {\"excel_valid\": False, \"errors\": []}\n\n        try:\n            if file_path.suffix.lower() in ['.xlsx', '.xls']:\n                validation_result[\"excel_valid\"] = True\n            else:\n                validation_result[\"errors\"] = [\"Not an Excel file\"]\n\n        except Exception as e:\n            validation_result[\"errors\"] = [f\"Excel validation error: {e}\"]\n\n        return validation_result\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/#example-usage-of-file-checker","title":"Example Usage of File Checker","text":"filechecker_example.py<pre><code>from pathlib import Path\nfrom custom_file_checker import CustomInputFileChecker\n\nchecker = CustomInputFileChecker()\n\ntest_files = [\n    Path(\"data/input/data.csv\"),\n    Path(\"data/invoice/invoice.json\"),\n    Path(\"data/templates/template.xlsx\"),\n    Path(\"data/archives/data.zip\")\n]\n\nprint(\"=== File Validation Results ===\")\nfor fp in test_files:\n    result = checker.parse(fp)\n    status = \"\u2713\" if result[\"valid\"] else \"\u2717\"\n    print(f\"{status} {fp.name}\")\n    print(f\"   Size: {result['size']:,} bytes\")\n    print(f\"   Extension: {result['extension']}\")\n\n    if result[\"errors\"]:\n        print(f\"   Errors: {', '.join(result['errors'])}\")\n    print()\n</code></pre>"},{"location":"rdetoolkit/interface/filechecker/#implementing-a-custom-compressed-file-structure-parser","title":"Implementing a Custom Compressed File Structure Parser","text":"compressed_struct_parser.py<pre><code>from rdetoolkit.interfaces.filechecker import ICompressedFileStructParser\nfrom pathlib import Path\nfrom typing import Dict, List, Any\nimport zipfile\nimport tarfile\n\nclass CustomCompressedFileStructParser(ICompressedFileStructParser):\n    \"\"\"\u30ab\u30b9\u30bf\u30e0\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u69cb\u9020\u30d1\u30fc\u30b5\u30fc\u306e\u5b9f\u88c5\"\"\"\n\n    def read(self, archive_path: Path) -&gt; Dict[str, Any]:\n        \"\"\"\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u9020\u8aad\u307f\u8fbc\u307f\"\"\"\n\n        result = {\n            \"archive_path\": str(archive_path),\n            \"archive_type\": self._detect_archive_type(archive_path),\n            \"file_count\": 0,\n            \"directory_count\": 0,\n            \"total_size\": 0,\n            \"files\": [],\n            \"directories\": [],\n            \"structure\": {},\n            \"errors\": []\n        }\n\n        try:\n            if result[\"archive_type\"] == \"zip\":\n                result.update(self._read_zip_structure(archive_path))\n            elif result[\"archive_type\"] == \"tar\":\n                result.update(self._read_tar_structure(archive_path))\n            else:\n                result[\"errors\"].append(f\"\u672a\u5bfe\u5fdc\u306e\u5727\u7e2e\u5f62\u5f0f: {result['archive_type']}\")\n\n        except Exception as e:\n            result[\"errors\"].append(f\"\u69cb\u9020\u8aad\u307f\u8fbc\u307f\u30a8\u30e9\u30fc: {e}\")\n\n        return result\n\n    def _detect_archive_type(self, archive_path: Path) -&gt; str:\n        \"\"\"\u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u30bf\u30a4\u30d7\u306e\u691c\u51fa\"\"\"\n        suffix = archive_path.suffix.lower()\n\n        if suffix == \".zip\":\n            return \"zip\"\n        elif suffix in [\".tar\", \".tar.gz\", \".tgz\", \".tar.bz2\"]:\n            return \"tar\"\n        else:\n            return \"unknown\"\n\n    def _read_zip_structure(self, archive_path: Path) -&gt; Dict:\n        \"\"\"ZIP \u30d5\u30a1\u30a4\u30eb\u69cb\u9020\u306e\u8aad\u307f\u8fbc\u307f\"\"\"\n        structure_data = {\n            \"files\": [],\n            \"directories\": [],\n            \"file_count\": 0,\n            \"directory_count\": 0,\n            \"total_size\": 0\n        }\n\n        with zipfile.ZipFile(archive_path, 'r') as zf:\n            for info in zf.infolist():\n                item_data = {\n                    \"name\": info.filename,\n                    \"size\": info.file_size,\n                    \"compressed_size\": info.compress_size,\n                    \"is_directory\": info.is_dir(),\n                    \"date_time\": info.date_time\n                }\n\n                if info.is_dir():\n                    structure_data[\"directories\"].append(item_data)\n                    structure_data[\"directory_count\"] += 1\n                else:\n                    structure_data[\"files\"].append(item_data)\n                    structure_data[\"file_count\"] += 1\n                    structure_data[\"total_size\"] += info.file_size\n\n        return structure_data\n\n    def _read_tar_structure(self, archive_path: Path) -&gt; Dict:\n        \"\"\"TAR \u30d5\u30a1\u30a4\u30eb\u69cb\u9020\u306e\u8aad\u307f\u8fbc\u307f\"\"\"\n        structure_data = {\n            \"files\": [],\n            \"directories\": [],\n            \"file_count\": 0,\n            \"directory_count\": 0,\n            \"total_size\": 0\n        }\n\n        with tarfile.open(archive_path, 'r') as tf:\n            for member in tf.getmembers():\n                item_data = {\n                    \"name\": member.name,\n                    \"size\": member.size,\n                    \"is_directory\": member.isdir(),\n                    \"mode\": member.mode,\n                    \"mtime\": member.mtime\n                }\n\n                if member.isdir():\n                    structure_data[\"directories\"].append(item_data)\n                    structure_data[\"directory_count\"] += 1\n                else:\n                    structure_data[\"files\"].append(item_data)\n                    structure_data[\"file_count\"] += 1\n                    structure_data[\"total_size\"] += member.size\n\n        return structure_data\n\n# \u4f7f\u7528\u4f8b\nparser = CustomCompressedFileStructParser()\n\narchive_files = [\n    Path(\"data/archives/experiment1.zip\"),\n    Path(\"data/archives/backup.tar.gz\"),\n    Path(\"data/archives/images.zip\")\n]\n\nprint(\"=== \u5727\u7e2e\u30d5\u30a1\u30a4\u30eb\u69cb\u9020\u89e3\u6790 ===\")\nfor archive_path in archive_files:\n    if archive_path.exists():\n        result = parser.read(archive_path)\n\n        print(f\"\\n--- {archive_path.name} ---\")\n        print(f\"\u30bf\u30a4\u30d7: {result['archive_type']}\")\n        print(f\"\u30d5\u30a1\u30a4\u30eb\u6570: {result['file_count']}\")\n        print(f\"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u6570: {result['directory_count']}\")\n        print(f\"\u7dcf\u30b5\u30a4\u30ba: {result['total_size']:,} bytes\")\n\n        if result[\"errors\"]:\n            print(f\"\u30a8\u30e9\u30fc: {', '.join(result['errors'])}\")\n\n        # \u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u306e\u8868\u793a\uff08\u6700\u521d\u306e5\u500b\u307e\u3067\uff09\n        if result[\"files\"]:\n            print(\"\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\uff08\u6700\u521d\u306e5\u500b\uff09:\")\n            for file_info in result[\"files\"][:5]:\n                print(f\"  - {file_info['name']} ({file_info['size']} bytes)\")\n    else:\n        print(f\"\u2717 \u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u307e\u305b\u3093: {archive_path}\")\n</code></pre>"},{"location":"rdetoolkit/models/config/","title":"Config Models API","text":""},{"location":"rdetoolkit/models/config/#purpose","title":"Purpose","text":"<p>This module defines configuration data structures for RDEToolKit. It provides configuration models that control the behavior of the entire application, including system settings and MultiDataTile settings.</p>"},{"location":"rdetoolkit/models/config/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/models/config/#configuration-data-models","title":"Configuration Data Models","text":"<ul> <li>System-wide configuration management</li> <li>Detailed settings for MultiDataTile mode</li> <li>Type-safe configuration value management</li> </ul>"},{"location":"rdetoolkit/models/config/#data-validation","title":"Data Validation","text":"<ul> <li>Pydantic-based type safety</li> <li>Configuration value validity verification</li> <li>Automatic application of default values</li> </ul>"},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.Config","title":"<code>src.rdetoolkit.models.config.Config</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The configuration class used in RDEToolKit.</p> <p>Attributes:</p> Name Type Description <code>system</code> <code>SystemSettings</code> <p>System related settings.</p> <code>multidata_tile</code> <code>MultiDataTileSettings | None</code> <p>MultiDataTile related settings.</p> <code>smarttable</code> <code>SmartTableSettings | None</code> <p>SmartTable related settings.</p> <code>excel_invoice</code> <code>ExcelInvoiceSettings | None</code> <p>ExcelInvoice related settings.</p>"},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.Config.multidata_tile","title":"<code>multidata_tile: MultiDataTileSettings | None = Field(default_factory=MultiDataTileSettings, description='MultiDataTile related settings')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.Config.smarttable","title":"<code>smarttable: SmartTableSettings | None = Field(default=None, description='SmartTable related settings')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.Config.system","title":"<code>system: SystemSettings = Field(default_factory=SystemSettings, description='System related settings')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.SystemSettings","title":"<code>src.rdetoolkit.models.config.SystemSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>SystemSettings is a configuration model for the RDEtoolkit system settings.</p> <p>Attributes:</p> Name Type Description <code>extended_mode</code> <code>str | None</code> <p>The mode to run the RDEtoolkit in. Options include 'rdeformat' and 'MultiDataTile'. Default is None.</p> <code>save_raw</code> <code>bool</code> <p>Indicates whether to automatically save raw data to the raw directory. Default is False.</p> <code>save_nonshared_raw</code> <code>bool</code> <p>Indicates whether to save nonshared raw data. If True, non-shared raw data will be saved. Default is True.</p> <code>save_thumbnail_image</code> <code>bool</code> <p>Indicates whether to automatically save the main image to the thumbnail directory. Default is False.</p> <code>magic_variable</code> <code>bool</code> <p>A feature where specifying '${filename}' as the data name results in the filename being transcribed as the data name. Default is False.</p>"},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.SystemSettings.extended_mode","title":"<code>extended_mode: str | None = Field(default=None, description='The mode to run the RDEtoolkit in. select: rdeformat, MultiDataTile')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.SystemSettings.magic_variable","title":"<code>magic_variable: bool = Field(default=False, description=\"The feature where specifying '${filename}' as the data name results in the filename being transcribed as the data name.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.SystemSettings.save_nonshared_raw","title":"<code>save_nonshared_raw: bool = Field(default=True, description='Specifies whether to save nonshared raw data. If True, non-shared raw data will be saved.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.SystemSettings.save_raw","title":"<code>save_raw: bool = Field(default=False, description='Auto Save raw data to the raw directory')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.SystemSettings.save_thumbnail_image","title":"<code>save_thumbnail_image: bool = Field(default=False, description='Auto Save main image to the thumbnail directory')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.SystemSettings.validate_extended_mode","title":"<code>validate_extended_mode(v)</code>  <code>classmethod</code>","text":"<p>Validate extended_mode to only allow exact matches for 'rdeformat' and 'MultiDataTile'.</p>"},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.MultiDataTileSettings","title":"<code>src.rdetoolkit.models.config.MultiDataTileSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"rdetoolkit/models/config/#src.rdetoolkit.models.config.MultiDataTileSettings.ignore_errors","title":"<code>ignore_errors: bool = Field(default=False, description='If true, errors encountered during processing will be ignored, and the process will continue without stopping.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/config/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/models/config/#basic-configuration-creation","title":"Basic Configuration Creation","text":"basic_config.py<pre><code>from rdetoolkit.models.config import Config, SystemSettings, MultiDataTileSettings\n\n# Create system settings\nsystem_settings = SystemSettings(\n    save_raw=True,\n    save_thumbnail_image=True,\n    extended_mode=\"MultiDataTile\"\n)\n\n# Create MultiDataTile settings\nmultidatatile_settings = MultiDataTileSettings(\n    tile_size=256,\n    overlap_ratio=0.1,\n    compression_level=6\n)\n\n# Create integrated configuration\nconfig = Config(\n    system=system_settings,\n    multidatatile=multidatatile_settings\n)\n\nprint(f\"Configuration created: {config}\")\n</code></pre>"},{"location":"rdetoolkit/models/config/#loading-from-configuration-file","title":"Loading from Configuration File","text":"config_from_file.py<pre><code>from rdetoolkit.models.config import Config\nfrom rdetoolkit.config import parse_config_file\nimport json\n\n# Load from configuration file\nconfig = parse_config_file()\n\n# Reference configuration values\nprint(f\"Save raw data: {config.system.save_raw}\")\nprint(f\"Save thumbnail: {config.system.save_thumbnail_image}\")\nprint(f\"Extended mode: {config.system.extended_mode}\")\n\n# Reference MultiDataTile settings\nif hasattr(config, 'multidatatile') and config.multidatatile:\n    print(f\"Tile size: {config.multidatatile.tile_size}\")\n    print(f\"Overlap ratio: {config.multidatatile.overlap_ratio}\")\n\n# Update configuration\nconfig.system.save_raw = False\nif config.multidatatile:\n    config.multidatatile.tile_size = 512\n\n# Save updated configuration\nconfig_dict = config.dict()\nwith open(\"config/updated_config.json\", \"w\") as f:\n    json.dump(config_dict, f, indent=2)\n</code></pre>"},{"location":"rdetoolkit/models/config/#creating-custom-configuration","title":"Creating Custom Configuration","text":"custom_config.py<pre><code>from rdetoolkit.models.config import Config, SystemSettings, MultiDataTileSettings\nfrom pathlib import Path\n\n# Custom system settings\ncustom_system = SystemSettings(\n    save_raw=True,\n    save_thumbnail_image=False,\n    extended_mode=\"MultiDataTile\",\n    output_dir=Path(\"custom_output\"),\n    temp_dir=Path(\"custom_temp\")\n)\n\n# Custom MultiDataTile settings\ncustom_multidatatile = MultiDataTileSettings(\n    tile_size=1024,\n    overlap_ratio=0.2,\n    compression_level=9,\n    enable_caching=True,\n    max_memory_usage=\"2GB\"\n)\n\n# Integrated configuration\ncustom_config = Config(\n    system=custom_system,\n    multidatatile=custom_multidatatile\n)\n\n# Configuration validation\ntry:\n    validated_config = Config.parse_obj(custom_config.dict())\n    print(\"Configuration validation successful\")\n\n    # Display configuration values\n    print(f\"System settings: {validated_config.system}\")\n    print(f\"MultiDataTile settings: {validated_config.multidatatile}\")\n\nexcept Exception as e:\n    print(f\"Configuration validation error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/models/config/#dynamic-configuration-management","title":"Dynamic Configuration Management","text":"dynamic_config.py<pre><code>from rdetoolkit.models.config import Config, SystemSettings, MultiDataTileSettings\nimport os\n\ndef create_environment_based_config():\n    \"\"\"Create dynamic configuration based on environment\"\"\"\n\n    # Get configuration values from environment variables\n    save_raw = os.getenv(\"RDE_SAVE_RAW\", \"true\").lower() == \"true\"\n    extended_mode = os.getenv(\"RDE_EXTENDED_MODE\", \"MultiDataTile\")\n    tile_size = int(os.getenv(\"RDE_TILE_SIZE\", \"256\"))\n\n    # System settings\n    system_settings = SystemSettings(\n        save_raw=save_raw,\n        save_thumbnail_image=True,\n        extended_mode=extended_mode\n    )\n\n    # MultiDataTile settings (only if extended mode is MultiDataTile)\n    multidatatile_settings = None\n    if extended_mode == \"MultiDataTile\":\n        multidatatile_settings = MultiDataTileSettings(\n            tile_size=tile_size,\n            overlap_ratio=float(os.getenv(\"RDE_OVERLAP_RATIO\", \"0.1\")),\n            compression_level=int(os.getenv(\"RDE_COMPRESSION\", \"6\"))\n        )\n\n    # Create configuration\n    config = Config(\n        system=system_settings,\n        multidatatile=multidatatile_settings\n    )\n\n    return config\n\n# Usage example\nenv_config = create_environment_based_config()\nprint(f\"Environment-based configuration: {env_config}\")\n\n# Configuration validity check\nif env_config.system.extended_mode == \"MultiDataTile\":\n    if env_config.multidatatile:\n        print(f\"MultiDataTile mode enabled: tile_size={env_config.multidatatile.tile_size}\")\n    else:\n        print(\"Warning: MultiDataTile mode but configuration not found\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice/","title":"Invoice Models API","text":""},{"location":"rdetoolkit/models/invoice/#purpose","title":"Purpose","text":"<p>This module defines data models for invoices and Excel invoices in RDEToolKit. It provides functionality for invoice structuring, validation, and registry management.</p>"},{"location":"rdetoolkit/models/invoice/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/models/invoice/#data-models","title":"Data Models","text":"<ul> <li>Excel invoice header structure definition</li> <li>Template configuration management</li> <li>Multilingual support through term registry</li> </ul>"},{"location":"rdetoolkit/models/invoice/#configuration-management","title":"Configuration Management","text":"<ul> <li>Fixed header management</li> <li>General and specific attribute configuration</li> <li>Term search and mapping</li> </ul>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.FixedHeaders","title":"<code>src.rdetoolkit.models.invoice.FixedHeaders</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Data class to hold the fixed header rows data of ExcelInvoice.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.FixedHeaders.row1","title":"<code>row1: HeaderRow1 = HeaderRow1()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.FixedHeaders.row2","title":"<code>row2: HeaderRow2 = HeaderRow2()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.FixedHeaders.row3","title":"<code>row3: HeaderRow3 = HeaderRow3()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.FixedHeaders.row4","title":"<code>row4: HeaderRow4 = HeaderRow4()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.FixedHeaders.to_template_dataframe","title":"<code>to_template_dataframe()</code>","text":"<p>Converts the invoice data to a Polars DataFrame formatted for a template.</p> <p>This method organizes the invoice data into a DataFrame with specific padding and column structure suitable for template processing.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pl.DataFrame: A Polars DataFrame containing the formatted invoice data.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow1","title":"<code>src.rdetoolkit.models.invoice.HeaderRow1</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Data class to hold the first header row data of ExcelInvoice.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow1.A1","title":"<code>A1: str = 'invoiceList_format_id'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow2","title":"<code>src.rdetoolkit.models.invoice.HeaderRow2</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Data class to hold the second header row data of ExcelInvoice.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow2.A2","title":"<code>A2: str = 'data_file_names'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow2.D2_G2","title":"<code>D2_G2: list[str] = Field(default_factory=lambda: ['basic'] * 4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow2.H2_M2","title":"<code>H2_M2: list[str] = Field(default_factory=lambda: ['sample'] * 6)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3","title":"<code>src.rdetoolkit.models.invoice.HeaderRow3</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Data class to hold the third header row data of ExcelInvoice.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.A3","title":"<code>A3: str = 'name'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.B3","title":"<code>B3: str = 'dataset_title'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.C3","title":"<code>C3: str = 'dataOwner'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.D3","title":"<code>D3: str = 'dataOwnerId'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.E3","title":"<code>E3: str = 'dataName'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.F3","title":"<code>F3: str = 'experimentId'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.G3","title":"<code>G3: str = 'description'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.H3","title":"<code>H3: str = 'names'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.I3","title":"<code>I3: str = 'sampleId'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.J3","title":"<code>J3: str = 'ownerId'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.K3","title":"<code>K3: str = 'composition'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.L3","title":"<code>L3: str = 'referenceUrl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow3.M3","title":"<code>M3: str = 'description'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4","title":"<code>src.rdetoolkit.models.invoice.HeaderRow4</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Data class to hold the fourth header row data of ExcelInvoice.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.A4","title":"<code>A4: str = '\u30d5\u30a1\u30a4\u30eb\u540d\\n(\u62e1\u5f35\u5b50\u3082\u542b\u3081\u5165\u529b)\\n(\u5165\u529b\u4f8b:\u25cb\u25cb.txt)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.B4","title":"<code>B4: str = '\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u540d\\n(\u5fc5\u9808)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.C4","title":"<code>C4: str = '\u30c7\u30fc\u30bf\u6240\u6709\u8005\\n(NIMS User ID)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.D4","title":"<code>D4: str = 'NIMS user UUID\\n(\u5fc5\u9808)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.E4","title":"<code>E4: str = '\u30c7\u30fc\u30bf\u540d\\n(\u5fc5\u9808)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.F4","title":"<code>F4: str = '\u5b9f\u9a13ID'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.G4","title":"<code>G4: str = '\u8aac\u660e'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.H4","title":"<code>H4: str = '\u8a66\u6599\u540d\\n(\u30ed\u30fc\u30ab\u30ebID)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.I4","title":"<code>I4: str = '\u8a66\u6599UUID\\n(\u5fc5\u9808)'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.J4","title":"<code>J4: str = '\u8a66\u6599\u7ba1\u7406\u8005UUID'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.K4","title":"<code>K4: str = '\u5316\u5b66\u5f0f\u30fb\u7d44\u6210\u5f0f\u30fb\u5206\u5b50\u5f0f\u306a\u3069'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.L4","title":"<code>L4: str = '\u53c2\u8003URL'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.HeaderRow4.M4","title":"<code>M4: str = '\u8a66\u6599\u306e\u8aac\u660e'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.TemplateConfig","title":"<code>src.rdetoolkit.models.invoice.TemplateConfig(schema_path, general_term_path, specific_term_path, inputfile_mode=...)</code>  <code>dataclass</code>","text":"<p>Data class to hold configuration settings for generating ExcelInvoice template files.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.TemplateConfig.general_term_path","title":"<code>general_term_path: str | Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.TemplateConfig.inputfile_mode","title":"<code>inputfile_mode: Literal['file', 'folder'] = 'file'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.TemplateConfig.schema_path","title":"<code>schema_path: str | Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.TemplateConfig.specific_term_path","title":"<code>specific_term_path: str | Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.BaseTermRegistry","title":"<code>src.rdetoolkit.models.invoice.BaseTermRegistry</code>","text":"<p>Base class for term registries.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.BaseTermRegistry.base_schema","title":"<code>base_schema: Incomplete = {'term_id': pl.Utf8, 'key_name': pl.Utf8, 'ja': pl.Utf8, 'en': pl.Utf8}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralTermRegistry","title":"<code>src.rdetoolkit.models.invoice.GeneralTermRegistry(csv_path)</code>","text":"<p>               Bases: <code>BaseTermRegistry</code></p> <p>Class for managing general terms.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralTermRegistry.df","title":"<code>df: Incomplete = pl.read_csv(csv_path, schema_overrides=self.base_schema)</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralTermRegistry.by_en","title":"<code>by_en(en_text)</code>","text":"<p>Search for terms in English text.</p> <p>Parameters:</p> Name Type Description Default <code>en_text</code> <code>str</code> <p>The English text to search for.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: A list of dictionaries containing the search results with keys \"term_id\", \"key_name\", and \"term_description\".</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralTermRegistry.by_ja","title":"<code>by_ja(ja_text)</code>","text":"<p>Search for records with Japanese text.</p> <p>Parameters:</p> Name Type Description Default <code>ja_text</code> <code>str</code> <p>The Japanese text to search for.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: A list of dictionaries containing the search results with keys \"term_id\", \"key_name\", and \"term_description\".</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralTermRegistry.by_term_id","title":"<code>by_term_id(term_id)</code>","text":"<p>Retrieve a list of dictionaries containing invoice details filtered by term ID.</p> <p>Parameters:</p> Name Type Description Default <code>term_id</code> <code>str</code> <p>The term ID to filter invoices by.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: A list of dictionaries, each containing the keys</p> <code>list[dict[str, Any]]</code> <p>\"term_id\", \"key_name\", and \"term_description\" with their corresponding values.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralTermRegistry.search","title":"<code>search(column, value, out_cols)</code>","text":"<p>Search for rows in the DataFrame where the specified column matches the given value and return selected columns.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>str</code> <p>The name of the column to search.</p> required <code>value</code> <code>str</code> <p>The value to search for in the specified column.</p> required <code>out_cols</code> <code>list[str]</code> <p>A list of column names to include in the output.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: A list of dictionaries representing the rows that match the search criteria, with only the specified columns included.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificTermRegistry","title":"<code>src.rdetoolkit.models.invoice.SpecificTermRegistry(csv_path)</code>","text":"<p>               Bases: <code>BaseTermRegistry</code></p> <p>Class for managing specific terms.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificTermRegistry.df","title":"<code>df: Incomplete = pl.read_csv(csv_path, schema_overrides=schema)</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificTermRegistry.by_en","title":"<code>by_en(en_text)</code>","text":"<p>Search for records in the database using the provided English text.</p> <p>Parameters:</p> Name Type Description Default <code>en_text</code> <code>list[str]</code> <p>The English text to search for.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: A list of dictionaries containing the search results.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificTermRegistry.by_ja","title":"<code>by_ja(ja_text)</code>","text":"<p>Search for records by Japanese text.</p> <p>Parameters:</p> Name Type Description Default <code>ja_text</code> <code>list[str]</code> <p>The Japanese text to search for.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: A list of dictionaries containing the search results.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificTermRegistry.by_key_name","title":"<code>by_key_name(key_name)</code>","text":"<p>Retrieve a list of dictionaries containing specific fields for entries matching the given key name.</p> <p>Parameters:</p> Name Type Description Default <code>key_name</code> <code>list[str]</code> <p>The key name to search for.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: A list of dictionaries, each containing the fields \"sample_class_id\", \"term_id\", \"key_name\", \"ja\", and \"en\" for entries that match the key name.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificTermRegistry.by_term_and_class_id","title":"<code>by_term_and_class_id(term_id, sample_class_id)</code>","text":"<p>Retrieve a list of dictionaries containing specific fields for entries matching the given term and sample class IDs.</p> <p>Parameters:</p> Name Type Description Default <code>term_id</code> <code>str</code> <p>The term ID to search for.</p> required <code>sample_class_id</code> <code>str</code> <p>The sample class ID to search for.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: A list of dictionaries, each containing the fields \"sample_class_id\", \"term_id\", \"key_name\", \"ja\", and \"en\" for entries that match the term and sample class IDs.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificTermRegistry.search","title":"<code>search(columns, values, out_cols)</code>","text":"<p>Search for rows in the DataFrame where the specified column matches the given value and return the selected columns.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>list[str]</code> <p>The name of the column to search.</p> required <code>values</code> <code>list[str]</code> <p>The value to search for in the specified column.</p> required <code>out_cols</code> <code>list[str]</code> <p>A list of column names to include in the output.</p> required <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: A list of dictionaries representing the rows that match the search criteria, with only the specified columns included.</p>"},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralAttributeConfig","title":"<code>src.rdetoolkit.models.invoice.GeneralAttributeConfig(type, registry, prefix, attributes, requires_class_id)</code>  <code>dataclass</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralAttributeConfig.attributes","title":"<code>attributes: GeneralAttribute | None</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralAttributeConfig.prefix","title":"<code>prefix: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralAttributeConfig.registry","title":"<code>registry: GeneralTermRegistry</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralAttributeConfig.requires_class_id","title":"<code>requires_class_id: Literal[False]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.GeneralAttributeConfig.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificAttributeConfig","title":"<code>src.rdetoolkit.models.invoice.SpecificAttributeConfig(type, registry, prefix, attributes, requires_class_id)</code>  <code>dataclass</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificAttributeConfig.attributes","title":"<code>attributes: SpecificAttribute | None</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificAttributeConfig.prefix","title":"<code>prefix: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificAttributeConfig.registry","title":"<code>registry: SpecificTermRegistry</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificAttributeConfig.requires_class_id","title":"<code>requires_class_id: Literal[True]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#src.rdetoolkit.models.invoice.SpecificAttributeConfig.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/models/invoice/#fixed-header-management","title":"Fixed Header Management","text":"fixed_headers.py<pre><code>from rdetoolkit.models.invoice import FixedHeaders\nimport pandas as pd\n\n# Create fixed headers\nheaders = FixedHeaders()\n\n# Generate template DataFrame\ntemplate_df = headers.to_template_dataframe()\nprint(f\"Template columns: {len(template_df.columns)}\")\nprint(f\"Template rows: {len(template_df)}\")\n\n# Display header information\nprint(\"Header structure:\")\nfor i, column in enumerate(template_df.columns):\n    print(f\"  Column {i+1}: {column}\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice/#using-term-registry","title":"Using Term Registry","text":"term_registry.py<pre><code>from rdetoolkit.models.invoice import GeneralTermRegistry, SpecificTermRegistry\n\n# Use general term registry\ngeneral_registry = GeneralTermRegistry()\n\n# Term search\nsearch_results = general_registry.search(\"temperature\")\nprint(f\"Search results: {search_results}\")\n\n# Search by term ID\nterm_by_id = general_registry.by_term_id(\"TEMP001\")\nif term_by_id:\n    print(f\"Term ID TEMP001: {term_by_id}\")\n\n# Search by Japanese\nterm_by_ja = general_registry.by_ja(\"\u6e29\u5ea6\")\nif term_by_ja:\n    print(f\"Japanese '\u6e29\u5ea6': {term_by_ja}\")\n\n# Search by English\nterm_by_en = general_registry.by_en(\"temperature\")\nif term_by_en:\n    print(f\"English 'temperature': {term_by_en}\")\n\n# Use specific term registry\nspecific_registry = SpecificTermRegistry()\n\n# Search by term and class ID\nspecific_term = specific_registry.by_term_and_class_id(\"material\", \"MAT001\")\nif specific_term:\n    print(f\"Specific term: {specific_term}\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice/#attribute-configuration-management","title":"Attribute Configuration Management","text":"attribute_config.py<pre><code>from rdetoolkit.models.invoice import GeneralAttributeConfig, SpecificAttributeConfig\n\n# General attribute configuration\ngeneral_config = GeneralAttributeConfig(\n    term_id=\"TEMP001\",\n    name_ja=\"\u6e29\u5ea6\",\n    name_en=\"Temperature\",\n    unit=\"\u2103\",\n    data_type=\"float\",\n    required=True\n)\n\nprint(f\"General attribute: {general_config.name_ja} ({general_config.name_en})\")\nprint(f\"Unit: {general_config.unit}\")\nprint(f\"Data type: {general_config.data_type}\")\nprint(f\"Required: {general_config.required}\")\n\n# Specific attribute configuration\nspecific_config = SpecificAttributeConfig(\n    class_id=\"MAT001\",\n    term_id=\"DENSITY001\",\n    name_ja=\"\u5bc6\u5ea6\",\n    name_en=\"Density\",\n    unit=\"g/cm\u00b3\",\n    data_type=\"float\",\n    required=False,\n    default_value=1.0\n)\n\nprint(f\"Specific attribute: {specific_config.name_ja} ({specific_config.name_en})\")\nprint(f\"Class ID: {specific_config.class_id}\")\nprint(f\"Default value: {specific_config.default_value}\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice/#utilizing-template-configuration","title":"Utilizing Template Configuration","text":"template_config.py<pre><code>from rdetoolkit.models.invoice import TemplateConfig\n\n# Create template configuration\ntemplate_config = TemplateConfig(\n    name=\"Experimental Data Template\",\n    version=\"1.0\",\n    description=\"Template for temperature measurement experiments\",\n    author=\"John Doe\",\n    created_date=\"2024-01-01\"\n)\n\nprint(f\"Template name: {template_config.name}\")\nprint(f\"Version: {template_config.version}\")\nprint(f\"Description: {template_config.description}\")\nprint(f\"Author: {template_config.author}\")\nprint(f\"Created date: {template_config.created_date}\")\n\n# Template configuration validation\nif template_config.validate():\n    print(\"\u2713 Template configuration is valid\")\nelse:\n    print(\"\u2717 Template configuration has issues\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/","title":"Invoice Schema Models API","text":""},{"location":"rdetoolkit/models/invoice_schema/#purpose","title":"Purpose","text":"<p>This module defines validator models used in RDEToolKit's invoice schema (invoice.schema.json). It provides functionality for invoice data structure validation and schema compliance verification.</p>"},{"location":"rdetoolkit/models/invoice_schema/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/models/invoice_schema/#schema-models","title":"Schema Models","text":"<ul> <li>Schema definition for entire invoice</li> <li>Schema validation for basic information</li> <li>Schema validation for sample information</li> <li>Custom field management</li> </ul>"},{"location":"rdetoolkit/models/invoice_schema/#data-validation","title":"Data Validation","text":"<ul> <li>JSONSchema-based validation</li> <li>Type safety assurance</li> <li>Multilingual label management</li> </ul>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson","title":"<code>src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Invoice schema class.</p> Example <p>To generate invoice.schema.json from the model, do as follows: <pre><code>obj = InvoiceSchemaJson(\n    version=\"https://json-schema.org/draft/2020-12/schema\",\n    schema_id=\"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n    description=\"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\",\n    type=\"object\",\n    properties=Properties()\n)\nprint(obj.model_dump_json())\n</code></pre></p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.description","title":"<code>description: str | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.model_config","title":"<code>model_config: Incomplete = ConfigDict(populate_by_name=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.properties","title":"<code>properties: Properties</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.required","title":"<code>required: list[Literal['custom', 'sample']] | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.schema_id","title":"<code>schema_id: str = Field(default='https://rde.nims.go.jp/rde/dataset-templates/', validation_alias='$id', serialization_alias='$id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.value_type","title":"<code>value_type: Literal['object'] = Field(default='object', alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.version","title":"<code>version: str = Field(default='https://json-schema.org/draft/2020-12/schema', validation_alias='$schema', serialization_alias='$schema')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.__check_custom_fields","title":"<code>__check_custom_fields()</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.__check_required_fields","title":"<code>__check_required_fields()</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson.__check_smaple_field","title":"<code>__check_smaple_field()</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Properties","title":"<code>src.rdetoolkit.models.invoice_schema.Properties</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the properties of an invoice.</p> <p><code>properties</code> is an instance of this class.</p> <p>Attributes:</p> Name Type Description <code>custom</code> <code>Optional[CustomField]</code> <p>The custom field of the invoice.</p> <code>sample</code> <code>Optional[str]</code> <p>A sample field of the invoice.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Properties.custom","title":"<code>custom: CustomField | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Properties.sample","title":"<code>sample: SampleField | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.DatasetId","title":"<code>src.rdetoolkit.models.invoice_schema.DatasetId</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the dataset ID for an invoice.</p> <p><code>properties.datasetId</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.DatasetId.value_type","title":"<code>value_type: str = Field(default='string', alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItems","title":"<code>src.rdetoolkit.models.invoice_schema.BasicItems</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the basic items of an invoice.</p> <p><code>properties.basic</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItems.dataOwnerId","title":"<code>dataOwnerId: BasicItemsValue = Field(default=BasicItemsValue(type='string', pattern='^([0-9a-zA-Z]{56})$'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItems.dateName","title":"<code>dateName: BasicItemsValue = Field(default=BasicItemsValue(type='string', pattern='^([0-9a-zA-Z]{56})$'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItems.dateSubmitted","title":"<code>dateSubmitted: BasicItemsValue = Field(default=BasicItemsValue(type='string', format='date'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItems.description","title":"<code>description: BasicItemsValue | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItems.experimentId","title":"<code>experimentId: BasicItemsValue | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItems.instrumentId","title":"<code>instrumentId: BasicItemsValue | None = Field(default=BasicItemsValue(type='string', pattern='^$|^([0-9a-zA-Z]{8}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{12})$'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItemsValue","title":"<code>src.rdetoolkit.models.invoice_schema.BasicItemsValue</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItemsValue.description","title":"<code>description: str | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItemsValue.format","title":"<code>format: Literal['date'] | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItemsValue.pattern","title":"<code>pattern: str | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItemsValue.value_type","title":"<code>value_type: str | list | None = Field(default=None, alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleField","title":"<code>src.rdetoolkit.models.invoice_schema.SampleField</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a sample field in the invoice schema.</p> <p><code>properties.sample</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleField.label","title":"<code>label: LangLabels</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleField.obj_type","title":"<code>obj_type: Literal['object'] = Field(..., alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleField.properties","title":"<code>properties: SampleProperties</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleField.required","title":"<code>required: list[Literal['names', 'sampleId']] = Field(default=['names', 'sampleId'])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleProperties","title":"<code>src.rdetoolkit.models.invoice_schema.SampleProperties</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the properties of a sample.</p> <p><code>properties.sample.properties</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleProperties.generalAttributes","title":"<code>generalAttributes: GeneralAttribute | None = Field(default=None, alias='generalAttributes')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleProperties.specificAttributes","title":"<code>specificAttributes: SpecificAttribute | None = Field(default=None, alias='specificAttributes')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding","title":"<code>src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the properties of a sample.</p> <p><code>properties.sample.properties</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding.composition","title":"<code>composition: str | None = Field(default=None, alias='composition')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding.description","title":"<code>description: str | None = Field(default=None, alias='description')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding.generalAttributes","title":"<code>generalAttributes: GeneralAttribute | None = Field(default=None, alias='generalAttributes')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding.ownerId","title":"<code>ownerId: str = Field(pattern='^([0-9a-zA-Z]{56})$', description='sample ownere id', alias='ownerId')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding.referenceUrl","title":"<code>referenceUrl: str | None = Field(default=None, alias='referenceUrl')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding.sample_id","title":"<code>sample_id: str | None = Field(default=None, alias='sampleId')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding.specificAttributes","title":"<code>specificAttributes: SpecificAttribute | None = Field(default=None, alias='specificAttributes')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificAttribute","title":"<code>src.rdetoolkit.models.invoice_schema.SpecificAttribute</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a specific attribute in the invoice schema.</p> <p><code>properties.sample.properties.specificAttribute</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificAttribute.items","title":"<code>items: SampleSpecificItems</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificAttribute.obj_type","title":"<code>obj_type: Literal['array'] = Field(..., alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleSpecificItems","title":"<code>src.rdetoolkit.models.invoice_schema.SampleSpecificItems</code>","text":"<p>               Bases: <code>RootModel</code></p> <p>Represents a specificAttirbutes child property.</p> <p><code>properties.sample.properties.specificAttributes.itemss</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleSpecificItems.root","title":"<code>root: list[SpecificProperty]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificProperty","title":"<code>src.rdetoolkit.models.invoice_schema.SpecificProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a specificAttirbutes child property.</p> <p><code>properties.sample.properties.specificAttributes.itemss</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificProperty.object_type","title":"<code>object_type: Literal['object'] = Field(..., alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificProperty.properties","title":"<code>properties: SpecificChildProperty</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificProperty.required","title":"<code>required: list[Literal['classId', 'termId', 'value']]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificChildProperty","title":"<code>src.rdetoolkit.models.invoice_schema.SpecificChildProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a specificAttirbutes child property.</p> <p><code>properties.sample.properties.specificAttributes.items.properties</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificChildProperty.class_id","title":"<code>class_id: ClassId = Field(..., alias='classId')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificChildProperty.term_id","title":"<code>term_id: TermId = Field(..., alias='termId')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralAttribute","title":"<code>src.rdetoolkit.models.invoice_schema.GeneralAttribute</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a general attribute in the invoice schema.</p> <p><code>properties.sample.properties.generalAttribute</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralAttribute.items","title":"<code>items: SampleGeneralItems</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralAttribute.obj_type","title":"<code>obj_type: Literal['array'] = Field(..., alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleGeneralItems","title":"<code>src.rdetoolkit.models.invoice_schema.SampleGeneralItems</code>","text":"<p>               Bases: <code>RootModel</code></p> <p>Represents a sample general item.</p> <p>This class is used as the instance for <code>properties.sample.properties.generalAtttirbutes.items</code>.</p> <p>Attributes:</p> Name Type Description <code>root</code> <code>Optional[list[GeneralProperty]]</code> <p>The list of general properties. Defaults to None.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleGeneralItems.root","title":"<code>root: list[GeneralProperty] | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralProperty","title":"<code>src.rdetoolkit.models.invoice_schema.GeneralProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a general property in the invoice schema.</p> <p><code>properties.sample.properties.generalAtttirbutes.items</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralProperty.object_type","title":"<code>object_type: Literal['object'] = Field(..., alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralProperty.properties","title":"<code>properties: GeneralChildProperty</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralProperty.required","title":"<code>required: list[Literal['termId', 'value']]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralChildProperty","title":"<code>src.rdetoolkit.models.invoice_schema.GeneralChildProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a general child property.</p> <p><code>properties.sample.properties.generalAtttirbutes.items.properties</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralChildProperty.term_id","title":"<code>term_id: TermId = Field(..., alias='termId')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.ClassId","title":"<code>src.rdetoolkit.models.invoice_schema.ClassId</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the ClassId for an invoice.</p> <p><code>properties.sample.properties.specificAttributes.items.properties.classId</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.ClassId.const","title":"<code>const: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.TermId","title":"<code>src.rdetoolkit.models.invoice_schema.TermId</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a term identifier.</p> <p><code>properties.sample.properties.generalAtttirbutes.items.properties.termId</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.TermId.const","title":"<code>const: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomField","title":"<code>src.rdetoolkit.models.invoice_schema.CustomField</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a custom field in an invoice schema.</p> <p><code>properties.custom.</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomField.label","title":"<code>label: LangLabels</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomField.obj_type","title":"<code>obj_type: Literal['object'] = Field(..., alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomField.properties","title":"<code>properties: CustomItems</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomField.required","title":"<code>required: list[str]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomItems","title":"<code>src.rdetoolkit.models.invoice_schema.CustomItems</code>","text":"<p>               Bases: <code>RootModel</code></p> <p>A class representing custom items in an invoice schema.</p> <p><code>properties.custom.properties.&lt;custom key&gt;</code> is an instance of this class.</p> <p>Attributes:</p> Name Type Description <code>root</code> <code>dict[str, MetaProperty]</code> <p>A dictionary containing the custom items.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomItems.root","title":"<code>root: dict[str, MetaProperty]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomItems.__getitem__","title":"<code>__getitem__(item)</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomItems.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty","title":"<code>src.rdetoolkit.models.invoice_schema.MetaProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a meta property in the invoice schema.</p> <p>Attributes:</p> Name Type Description <code>label</code> <code>LangLabels</code> <p>The label of the meta property.</p> <code>value_type</code> <code>Literal['boolean', 'integer', 'number', 'string']</code> <p>The type of the value for the meta property.</p> <code>description</code> <code>Optional[str]</code> <p>The description of the meta property.</p> <code>examples</code> <code>Optional[str]</code> <p>Examples of the meta property.</p> <code>default</code> <code>Optional[Union[bool, int, float, str]]</code> <p>The default value for the meta property.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.const","title":"<code>const: bool | int | float | str | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.default","title":"<code>default: bool | int | float | str | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.description","title":"<code>description: str | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.enum","title":"<code>enum: list[bool | int | float | str] | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.examples","title":"<code>examples: list[bool | int | float | str] | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.exclusiveMaximum","title":"<code>exclusiveMaximum: int | None = Field(default=None, description='Declare that the number is less than the specified value. Only applicable when the type is a numeric type (integer, number).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.exclusiveMinimum","title":"<code>exclusiveMinimum: int | None = Field(default=None, description='Declare that the number is greater than the specified value. Only applicable when the type is a numeric type (integer, number).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.format","title":"<code>format: Literal['date', 'time', 'uri', 'uuid', 'markdown'] | None = Field(default=None, description='Specify the format of the string. Refer to date, time, uri, uuid, markdown for possible values.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.label","title":"<code>label: LangLabels</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.maxLength","title":"<code>maxLength: int | None = Field(default=None, description='Specify the maximum length of the string.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.maximum","title":"<code>maximum: int | None = Field(default=None, description='Declare that the number is less than or equal to the specified value. Only applicable when the type is a numeric type (integer, number).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.minLength","title":"<code>minLength: int | None = Field(default=None, description='Specify the minimum length of the string. Must be 0 or more.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.minimum","title":"<code>minimum: int | None = Field(default=None, description='Declare that the number is greater than or equal to the specified value. Only applicable when the type is a numeric type (integer, number).')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.model_config","title":"<code>model_config: Incomplete = ConfigDict(extra='allow')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.pattern","title":"<code>pattern: str | None = Field(default=None, description='Declare that it has a pattern specified by a regular expression.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.value_type","title":"<code>value_type: Literal['boolean', 'integer', 'number', 'string'] = Field(..., alias='type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.__check_const_type","title":"<code>__check_const_type()</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.__check_numeric_type","title":"<code>__check_numeric_type()</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty.__check_string_type","title":"<code>__check_string_type()</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Options","title":"<code>src.rdetoolkit.models.invoice_schema.Options</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the options for a widget in the invoice schema.</p> <p><code>properties.custom.properties.&lt;custom key&gt;.options</code> is an instance of this class.</p> <p>Attributes:</p> Name Type Description <code>widget</code> <code>Optional[Literal['textarea']]</code> <p>The type of widget. Defaults to None.</p> <code>rows</code> <code>Optional[int]</code> <p>The number of rows for a textarea widget. Defaults to None.</p> <code>unit</code> <code>Optional[str]</code> <p>The unit of measurement for the widget. Defaults to None.</p> <code>placeholder</code> <code>Optional[Placeholder]</code> <p>The placeholder text for the widget. Defaults to None.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Options.placeholder","title":"<code>placeholder: Placeholder | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Options.rows","title":"<code>rows: int | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Options.unit","title":"<code>unit: str | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Options.widget","title":"<code>widget: Literal['textarea'] | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Options.__check_row_for_widget_textarea","title":"<code>__check_row_for_widget_textarea()</code>","text":"<p>Validates that the 'row' field is set when the 'widget' field is set to 'textarea'.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the widget is set to 'textarea' and the 'row' is not set (None or not provided).</p> <p>Returns:</p> Name Type Description <code>Options</code> <code>Options</code> <p>The validated value of the 'row' field. Returns the input value (v) if there are no issues.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Placeholder","title":"<code>src.rdetoolkit.models.invoice_schema.Placeholder</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class representing placeholders in different languages.</p> <p>This class inherits from <code>BaseModel</code>, and the <code>ja</code> and <code>en</code> attributes hold the placeholders in Japanese and English, respectively.</p> <p><code>properties.custom.properties.&lt;custom key&gt;.options.placeholder</code> is an instance of this class.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Placeholder.en","title":"<code>en: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Placeholder.ja","title":"<code>ja: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.LangLabels","title":"<code>src.rdetoolkit.models.invoice_schema.LangLabels</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class representing labels in different languages.</p>"},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.LangLabels.en","title":"<code>en: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.LangLabels.ja","title":"<code>ja: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/invoice_schema/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/models/invoice_schema/#basic-schema-validation","title":"Basic Schema Validation","text":"basic_schema_validation.py<pre><code>from rdetoolkit.models.invoice_schema import InvoiceSchemaJson, BasicItems\n\n# Create basic items\nbasic_items = BasicItems(\n    dataName=\"Experimental Data 001\",\n    description=\"Temperature measurement experiment\",\n    tags=[\"temperature\", \"measurement\"]\n)\n\nprint(f\"Data name: {basic_items.dataName}\")\nprint(f\"Description: {basic_items.description}\")\nprint(f\"Tags: {basic_items.tags}\")\n\n# Invoice schema validation\nschema_data = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"basic\": {\"$ref\": \"#/definitions/BasicItems\"},\n        \"sample\": {\"$ref\": \"#/definitions/SampleField\"}\n    },\n    \"required\": [\"basic\"]\n}\n\ninvoice_schema = InvoiceSchemaJson(**schema_data)\nprint(f\"\u2713 Invoice schema created successfully\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#custom-field-management","title":"Custom Field Management","text":"custom_fields.py<pre><code>from rdetoolkit.models.invoice_schema import CustomField, CustomItems, LangLabels\n\n# Create multilingual labels\nlang_labels = LangLabels(\n    ja=\"\u30ab\u30b9\u30bf\u30e0\u6e29\u5ea6\",\n    en=\"Custom Temperature\"\n)\n\n# Create custom field\ncustom_field = CustomField(\n    field_id=\"custom_temp_001\",\n    field_type=\"number\",\n    labels=lang_labels,\n    required=True,\n    default_value=25.0,\n    unit=\"\u2103\"\n)\n\nprint(f\"Custom field ID: {custom_field.field_id}\")\nprint(f\"Japanese label: {custom_field.labels.ja}\")\nprint(f\"English label: {custom_field.labels.en}\")\nprint(f\"Default value: {custom_field.default_value}\")\n\n# Manage custom items\ncustom_items = CustomItems(\n    fields=[custom_field],\n    category=\"measurement\",\n    description=\"Custom fields related to measurement\"\n)\n\nprint(f\"Number of custom items: {len(custom_items.fields)}\")\nprint(f\"Category: {custom_items.category}\")\n</code></pre>"},{"location":"rdetoolkit/models/invoice_schema/#attribute-and-property-management","title":"Attribute and Property Management","text":"attributes_properties.py<pre><code>from rdetoolkit.models.invoice_schema import (\n    GeneralAttribute, SpecificAttribute, \n    GeneralProperty, SpecificProperty\n)\n\n# Create general attribute\ngeneral_attr = GeneralAttribute(\n    term_id=\"TEMP001\",\n    name=\"temperature\",\n    data_type=\"number\",\n    unit=\"\u2103\",\n    required=True\n)\n\n# Create general property\ngeneral_prop = GeneralProperty(\n    attribute=general_attr,\n    validation_rules={\n        \"minimum\": -273.15,\n        \"maximum\": 1000.0\n    },\n    display_order=1\n)\n\nprint(f\"General attribute: {general_attr.name}\")\nprint(f\"Data type: {general_attr.data_type}\")\nprint(f\"Validation rules: {general_prop.validation_rules}\")\n\n# Create specific attribute\nspecific_attr = SpecificAttribute(\n    class_id=\"MAT001\",\n    term_id=\"DENSITY001\",\n    name=\"density\",\n    data_type=\"number\",\n    unit=\"g/cm\u00b3\",\n    required=False\n)\n\n# Create specific property\nspecific_prop = SpecificProperty(\n    attribute=specific_attr,\n    class_specific_rules={\n        \"material_type\": \"solid\",\n        \"measurement_method\": \"displacement\"\n    },\n    display_order=2\n)\n\nprint(f\"Specific attribute: {specific_attr.name}\")\nprint(f\"Class ID: {specific_attr.class_id}\")\nprint(f\"Class-specific rules: {specific_prop.class_specific_rules}\")\n</code></pre>"},{"location":"rdetoolkit/models/metadata/","title":"Metadata Models API","text":""},{"location":"rdetoolkit/models/metadata/#purpose","title":"Purpose","text":"<p>This module defines validation models for metadata (metadata.json) used in RDEToolKit. It provides functionality for metadata structure validation, type safety assurance, and data integrity verification.</p>"},{"location":"rdetoolkit/models/metadata/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/models/metadata/#metadata-models","title":"Metadata Models","text":"<ul> <li>Structure definition of metadata items</li> <li>Management of validatable items</li> <li>Processing of meta values and variables</li> </ul>"},{"location":"rdetoolkit/models/metadata/#data-validation","title":"Data Validation","text":"<ul> <li>Pydantic-based type safety</li> <li>Metadata validity verification</li> <li>Detailed error messages</li> </ul>"},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetadataItem","title":"<code>src.rdetoolkit.models.metadata.MetadataItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>metadata-def.json class.</p> <p>Stores metadata extracted by the data structuring process.</p> <p>Attributes:</p> Name Type Description <code>constant</code> <code>dict[str, MetaValue]</code> <p>A set of metadata common to all measurements.</p> <code>variable</code> <code>ValidableItems</code> <p>An array of metadata sets that vary with each measurement.</p>"},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetadataItem.constant","title":"<code>constant: dict[str, MetaValue]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetadataItem.variable","title":"<code>variable: ValidableItems</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.ValidableItems","title":"<code>src.rdetoolkit.models.metadata.ValidableItems</code>","text":"<p>               Bases: <code>RootModel</code></p> <p>A class representing validatable items of metadata.</p> <p>This class inherits from <code>RootModel</code>, and the <code>root</code> attribute holds a list of dictionaries, where each dictionary has a string as a key and a <code>MetaValue</code> as a value.</p> <p>Attributes:</p> Name Type Description <code>root</code> <code>list[dict[str, MetaValue]]</code> <p>A list of validatable items of metadata.</p>"},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.ValidableItems.root","title":"<code>root: list[dict[str, MetaValue]]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetaValue","title":"<code>src.rdetoolkit.models.metadata.MetaValue</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata class for the 'value' and 'unit' attributes.</p>"},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetaValue.unit","title":"<code>unit: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetaValue.value","title":"<code>value: Any</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetaValue.check_value_size","title":"<code>check_value_size(v)</code>  <code>classmethod</code>","text":"<p>Validator that verifies that the size of the 'value' does not exceed 1024 bytes if it is a string.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>dict[str, Any]</code> <p>Value of the metadata</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Exception error if the value of the metadata is more than 1024 bytes</p>"},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.Variable","title":"<code>src.rdetoolkit.models.metadata.Variable</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata class for the 'variable' attribute.</p>"},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.Variable.variable","title":"<code>variable: dict[str, Any]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.Variable.check_value_size","title":"<code>check_value_size(v)</code>  <code>classmethod</code>","text":"<p>Validator that verifies that the size of the 'variable' type metadata value does not exceed 1024 bytes.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>dict[str, Any]</code> <p>Metadata of 'variable'</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Exception error if the value of the metadata is more than 1024 bytes</p>"},{"location":"rdetoolkit/models/metadata/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/models/metadata/#basic-metadata-item","title":"Basic Metadata Item","text":"basic_metadata_item.py<pre><code>from rdetoolkit.models.metadata import MetadataItem, MetaValue\n\n# Create meta value\nmeta_value = MetaValue(\n    value=25.0,\n    unit=\"\u2103\",\n    uncertainty=0.1,\n    description=\"Measurement at room temperature\"\n)\n\n# Create metadata item\nmetadata_item = MetadataItem(\n    name=\"temperature\",\n    meta_value=meta_value,\n    required=True,\n    category=\"measurement\"\n)\n\nprint(f\"Metadata item: {metadata_item.name}\")\nprint(f\"Value: {metadata_item.meta_value.value} {metadata_item.meta_value.unit}\")\nprint(f\"Uncertainty: \u00b1{metadata_item.meta_value.uncertainty}\")\nprint(f\"Required: {metadata_item.required}\")\n</code></pre>"},{"location":"rdetoolkit/models/metadata/#managing-validatable-items","title":"Managing Validatable Items","text":"validable_items.py<pre><code>from rdetoolkit.models.metadata import ValidableItems, MetadataItem\n\n# Create multiple metadata items\ntemperature_item = MetadataItem(\n    name=\"temperature\",\n    meta_value={\"value\": 25.0, \"unit\": \"\u2103\"},\n    required=True\n)\n\npressure_item = MetadataItem(\n    name=\"pressure\",\n    meta_value={\"value\": 1013.25, \"unit\": \"hPa\"},\n    required=True\n)\n\nhumidity_item = MetadataItem(\n    name=\"humidity\",\n    meta_value={\"value\": 60, \"unit\": \"%\"},\n    required=False\n)\n\n# Manage as validatable items\nvalidable_items = ValidableItems(\n    items=[temperature_item, pressure_item, humidity_item],\n    validation_rules={\n        \"temperature\": {\"min\": -50, \"max\": 100},\n        \"pressure\": {\"min\": 800, \"max\": 1200},\n        \"humidity\": {\"min\": 0, \"max\": 100}\n    }\n)\n\nprint(f\"Number of validatable items: {len(validable_items.items)}\")\nprint(f\"Validation rules: {validable_items.validation_rules}\")\n\n# Validate each item\nfor item in validable_items.items:\n    print(f\"Item {item.name}: {item.meta_value}\")\n</code></pre>"},{"location":"rdetoolkit/models/metadata/#variable-processing","title":"Variable Processing","text":"variable_processing.py<pre><code>from rdetoolkit.models.metadata import Variable\n\n# Create variables\ntemperature_var = Variable(\n    name=\"T\",\n    full_name=\"Temperature\",\n    data_type=\"float\",\n    unit=\"\u2103\",\n    description=\"Measured temperature\",\n    default_value=25.0\n)\n\npressure_var = Variable(\n    name=\"P\",\n    full_name=\"Pressure\",\n    data_type=\"float\",\n    unit=\"hPa\",\n    description=\"Atmospheric pressure\",\n    default_value=1013.25\n)\n\nprint(f\"Variable {temperature_var.name}: {temperature_var.full_name}\")\nprint(f\"Data type: {temperature_var.data_type}\")\nprint(f\"Unit: {temperature_var.unit}\")\nprint(f\"Default value: {temperature_var.default_value}\")\n\nprint(f\"Variable {pressure_var.name}: {pressure_var.full_name}\")\nprint(f\"Data type: {pressure_var.data_type}\")\nprint(f\"Unit: {pressure_var.unit}\")\nprint(f\"Default value: {pressure_var.default_value}\")\n</code></pre>"},{"location":"rdetoolkit/models/metadata/#metadata-validation-system","title":"Metadata Validation System","text":"metadata_validation_system.py<pre><code>from rdetoolkit.models.metadata import MetadataItem, ValidableItems, Variable\nfrom typing import List, Dict\n\nclass MetadataValidator:\n    \"\"\"Metadata validation system\"\"\"\n\n    def __init__(self):\n        self.variables: List[Variable] = []\n        self.validation_results: Dict[str, bool] = {}\n\n    def add_variable(self, variable: Variable):\n        \"\"\"Add variable\"\"\"\n        self.variables.append(variable)\n        print(f\"Added variable '{variable.name}'\")\n\n    def validate_metadata_items(self, items: ValidableItems) -&gt; Dict[str, bool]:\n        \"\"\"Validate metadata items\"\"\"\n        results = {}\n\n        for item in items.items:\n            try:\n                # Basic validation\n                if item.required and not item.meta_value:\n                    results[item.name] = False\n                    print(f\"\u2717 {item.name}: Required item not set\")\n                    continue\n\n                # Value range validation\n                if item.name in items.validation_rules:\n                    rules = items.validation_rules[item.name]\n                    value = item.meta_value.get(\"value\") if isinstance(item.meta_value, dict) else item.meta_value.value\n\n                    if \"min\" in rules and value &lt; rules[\"min\"]:\n                        results[item.name] = False\n                        print(f\"\u2717 {item.name}: Value below minimum ({value} &lt; {rules['min']})\")\n                        continue\n\n                    if \"max\" in rules and value &gt; rules[\"max\"]:\n                        results[item.name] = False\n                        print(f\"\u2717 {item.name}: Value exceeds maximum ({value} &gt; {rules['max']})\")\n                        continue\n\n                results[item.name] = True\n                print(f\"\u2713 {item.name}: Validation successful\")\n\n            except Exception as e:\n                results[item.name] = False\n                print(f\"\u2717 {item.name}: Validation error - {e}\")\n\n        self.validation_results = results\n        return results\n\n    def get_validation_summary(self) -&gt; Dict[str, int]:\n        \"\"\"Validation results summary\"\"\"\n        total = len(self.validation_results)\n        passed = sum(1 for result in self.validation_results.values() if result)\n        failed = total - passed\n\n        return {\n            \"total\": total,\n            \"passed\": passed,\n            \"failed\": failed,\n            \"success_rate\": passed / total if total &gt; 0 else 0\n        }\n\n# Usage example\nvalidator = MetadataValidator()\n\n# Add variables\ntemp_var = Variable(name=\"T\", full_name=\"Temperature\", data_type=\"float\", unit=\"\u2103\")\npress_var = Variable(name=\"P\", full_name=\"Pressure\", data_type=\"float\", unit=\"hPa\")\n\nvalidator.add_variable(temp_var)\nvalidator.add_variable(press_var)\n\n# Create metadata items\nitems = ValidableItems(\n    items=[\n        MetadataItem(name=\"temperature\", meta_value={\"value\": 25.0}, required=True),\n        MetadataItem(name=\"pressure\", meta_value={\"value\": 1013.25}, required=True),\n        MetadataItem(name=\"humidity\", meta_value={\"value\": 150}, required=False)  # Invalid value\n    ],\n    validation_rules={\n        \"temperature\": {\"min\": -50, \"max\": 100},\n        \"pressure\": {\"min\": 800, \"max\": 1200},\n        \"humidity\": {\"min\": 0, \"max\": 100}\n    }\n)\n\n# Execute validation\nvalidation_results = validator.validate_metadata_items(items)\n\n# Display summary\nsummary = validator.get_validation_summary()\nprint(f\"\\n=== Validation Summary ===\")\nprint(f\"Total items: {summary['total']}\")\nprint(f\"Passed: {summary['passed']}\")\nprint(f\"Failed: {summary['failed']}\")\nprint(f\"Success rate: {summary['success_rate']:.2%}\")\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/","title":"RDE2Types API","text":""},{"location":"rdetoolkit/models/rde2types/#purpose","title":"Purpose","text":"<p>This module defines various data classes and custom types used in RDEToolKit. It provides type-safe data structures used in structured processing, including input paths, output resource paths, and data classes.</p>"},{"location":"rdetoolkit/models/rde2types/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/models/rde2types/#path-management","title":"Path Management","text":"<ul> <li>Structuring of input directory paths</li> <li>Management of output resource paths</li> <li>Type safety for file paths</li> </ul>"},{"location":"rdetoolkit/models/rde2types/#data-structures","title":"Data Structures","text":"<ul> <li>Data classes for RDE processing</li> <li>Format flags and metadata definitions</li> <li>Value and unit pair management</li> </ul>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeFormatFlags","title":"<code>src.rdetoolkit.models.rde2types.RdeFormatFlags()</code>  <code>dataclass</code>","text":"<p>Class for managing flags used in RDE.</p> <p>This class has two private attributes: _is_rdeformat_enabled and _is_multifile_enabled. These attributes are set in the post_init method, depending on the existence of certain files. Additionally, properties and setters are used to get and modify the values of these attributes. However, it is not allowed for both attributes to be True simultaneously.</p> Warning <p>Currently, this class is not used because the <code>data/tasksupport/rdeformat.txt</code> and <code>data/tasksupport/multifile.txt</code> files are not used. It is scheduled to be deleted in the next update.</p> <p>Attributes:</p> Name Type Description <code>_is_rdeformat_enabled</code> <code>bool</code> <p>Flag indicating whether RDE format is enabled</p> <code>_is_multifile_enabled</code> <code>bool</code> <p>Flag indicating whether multi-file support is enabled</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeFormatFlags.is_multifile_enabled","title":"<code>is_multifile_enabled: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Property returning whether multi-file support is enabled.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Whether multi-file support is enabled</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeFormatFlags.is_rdeformat_enabled","title":"<code>is_rdeformat_enabled: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Property returning whether the RDE format is enabled.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Whether the RDE format is enabled</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeFormatFlags.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Method called after object initialization.</p> <p>This method checks for the existence of files named rdeformat.txt and multifile.txt in the data/tasksupport directory, and sets the values of _is_rdeformat_enabled and _is_multifile_enabled accordingly.</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeInputDirPaths","title":"<code>src.rdetoolkit.models.rde2types.RdeInputDirPaths(inputdata, invoice, tasksupport, config=...)</code>  <code>dataclass</code>","text":"<p>A data class that holds folder paths used for input in the RDE.</p> <p>It manages the folder paths for input data necessary for the RDE.</p> <p>Attributes:</p> Name Type Description <code>inputdata</code> <code>Path</code> <p>Path to the folder where input data is stored.</p> <code>invoice</code> <code>Path</code> <p>Path to the folder where invoice.json is stored.</p> <code>tasksupport</code> <code>Path</code> <p>Path to the folder where task support data is stored.</p> <code>config</code> <code>Config</code> <p>The configuration object.</p> Properties <p>default_csv (Path): Provides the path to the <code>default_value.csv</code> file. If <code>tasksupport</code> is specified, it uses the path under it; otherwise, it uses the default path under <code>data/tasksupport</code>.</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeInputDirPaths.config","title":"<code>config: Config = field(default_factory=create_default_config)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeInputDirPaths.default_csv","title":"<code>default_csv: Path</code>  <code>property</code>","text":"<p>Returns the path to the 'default_value.csv' file.</p> <p>If <code>tasksupport</code> is set, this path is used. If not set, the default path under 'data/tasksupport' is used.</p> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path to the 'default_value.csv' file.</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeInputDirPaths.inputdata","title":"<code>inputdata: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeInputDirPaths.invoice","title":"<code>invoice: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeInputDirPaths.tasksupport","title":"<code>tasksupport: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath","title":"<code>src.rdetoolkit.models.rde2types.RdeOutputResourcePath(raw, nonshared_raw, rawfiles, struct, main_image, other_image, meta, thumbnail, logs, invoice, invoice_schema_json, invoice_org, temp=..., invoice_patch=..., attachment=...)</code>  <code>dataclass</code>","text":"<p>A data class that holds folder paths used as output destinations for RDE.</p> <p>It maintains the paths for various files used in the structuring process.</p> <p>Attributes:</p> Name Type Description <code>raw</code> <code>Path</code> <p>Path where raw data is stored.</p> <code>nonshared_raw</code> <code>Path</code> <p>Path where nonshared raw data is stored.</p> <code>rawfiles</code> <code>tuple[Path, ...]</code> <p>Holds a tuple of input file paths, such as those unzipped, for a single tile of data.</p> <code>struct</code> <code>Path</code> <p>Path for storing structured data.</p> <code>main_image</code> <code>Path</code> <p>Path for storing the main image file.</p> <code>other_image</code> <code>Path</code> <p>Path for storing other image files.</p> <code>meta</code> <code>Path</code> <p>Path for storing metadata files.</p> <code>thumbnail</code> <code>Path</code> <p>Path for storing thumbnail image files.</p> <code>logs</code> <code>Path</code> <p>Path for storing log files.</p> <code>invoice</code> <code>Path</code> <p>Path for storing invoice files.</p> <code>invoice_schema_json</code> <code>Path</code> <p>Path for the invoice.schema.json file.</p> <code>invoice_org</code> <code>Path</code> <p>Path for storing the backup of invoice.json.</p> <code>temp</code> <code>Optional[Path]</code> <p>Path for storing temporary files.</p> <code>invoice_patch</code> <code>Optional[Path]</code> <p>Path for storing modified invoice files.</p> <code>attachment</code> <code>Optional[Path]</code> <p>Path for storing attachment files.</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.attachment","title":"<code>attachment: Path | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.invoice","title":"<code>invoice: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.invoice_org","title":"<code>invoice_org: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.invoice_patch","title":"<code>invoice_patch: Path | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.invoice_schema_json","title":"<code>invoice_schema_json: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.logs","title":"<code>logs: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.main_image","title":"<code>main_image: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.meta","title":"<code>meta: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.nonshared_raw","title":"<code>nonshared_raw: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.other_image","title":"<code>other_image: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.raw","title":"<code>raw: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.rawfiles","title":"<code>rawfiles: tuple[Path, ...]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.struct","title":"<code>struct: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.temp","title":"<code>temp: Path | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath.thumbnail","title":"<code>thumbnail: Path</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.Name","title":"<code>src.rdetoolkit.models.rde2types.Name</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a name structure as a Typed Dictionary.</p> <p>This class is designed to hold names in different languages, specifically Japanese and English.</p> <p>Attributes:</p> Name Type Description <code>ja</code> <code>str</code> <p>The name in Japanese.</p> <code>en</code> <code>str</code> <p>The name in English.</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.Name.en","title":"<code>en: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.Name.ja","title":"<code>ja: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.Schema","title":"<code>src.rdetoolkit.models.rde2types.Schema</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a schema definition as a Typed Dictionary.</p> <p>This class is used to define the structure of a schema with optional keys. It extends TypedDict with <code>total=False</code> to allow partial dictionaries.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>The type of the schema.</p> <code>format</code> <code>str</code> <p>The format of the schema.</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.Schema.format","title":"<code>format: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.Schema.type","title":"<code>type: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson","title":"<code>src.rdetoolkit.models.rde2types.MetadataDefJson</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Defines the metadata structure for a JSON object as a Typed Dictionary.</p> <p>This class specifies the required structure of metadata, including various fields that describe characteristics and properties of the data.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>Name</code> <p>The name associated with the metadata.</p> <code>schema</code> <code>Schema</code> <p>The schema of the metadata.</p> <code>unit</code> <code>str</code> <p>The unit of measurement.</p> <code>description</code> <code>str</code> <p>A description of the metadata.</p> <code>uri</code> <code>str</code> <p>The URI associated with the metadata.</p> <code>originalName</code> <code>str</code> <p>The original name of the metadata.</p> <code>originalType</code> <code>str</code> <p>The original type of the metadata.</p> <code>mode</code> <code>str</code> <p>The mode associated with the metadata.</p> <code>order</code> <code>str</code> <p>The order of the metadata.</p> <code>valiable</code> <code>int</code> <p>A variable associated with the metadata.</p> <code>_feature</code> <code>bool</code> <p>A private attribute indicating a feature.</p> <code>action</code> <code>str</code> <p>An action associated with the metadata.</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.action","title":"<code>action: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.description","title":"<code>description: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.mode","title":"<code>mode: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.name","title":"<code>name: Name</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.order","title":"<code>order: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.originalName","title":"<code>originalName: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.originalType","title":"<code>originalType: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.schema","title":"<code>schema: Schema</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.unit","title":"<code>unit: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.uri","title":"<code>uri: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson.valiable","title":"<code>valiable: int</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.ValueUnitPair","title":"<code>src.rdetoolkit.models.rde2types.ValueUnitPair(value, unit)</code>  <code>dataclass</code>","text":"<p>Dataclass representing a pair of value and unit.</p> <p>This class is used to store and manage a value along with its associated unit. It uses the features of dataclass for simplified data handling.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str</code> <p>The value part of the pair.</p> <code>unit</code> <code>str</code> <p>The unit associated with the value.</p>"},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.ValueUnitPair.unit","title":"<code>unit: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.ValueUnitPair.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/rde2types/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/models/rde2types/#input-path-configuration","title":"Input Path Configuration","text":"input_paths.py<pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths\nfrom pathlib import Path\n\n# Create input directory paths\ninput_paths = RdeInputDirPaths(\n    inputdata=Path(\"data/input\"),\n    invoice=Path(\"data/invoice\"),\n    tasksupport=Path(\"data/tasksupport\")\n)\n\nprint(f\"Input data: {input_paths.inputdata}\")\nprint(f\"Invoice: {input_paths.invoice}\")\nprint(f\"Task support: {input_paths.tasksupport}\")\n\n# Check path existence\nfor path_name, path_value in input_paths.__dict__.items():\n    if path_value.exists():\n        print(f\"\u2713 {path_name}: {path_value} (exists)\")\n    else:\n        print(f\"\u2717 {path_name}: {path_value} (does not exist)\")\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/#output-resource-path-management","title":"Output Resource Path Management","text":"output_paths.py<pre><code>from rdetoolkit.models.rde2types import RdeOutputResourcePath\nfrom pathlib import Path\n\n# Create output resource paths\noutput_paths = RdeOutputResourcePath(\n    rawfiles=Path(\"output/rawfiles\"),\n    thumbnail=Path(\"output/thumbnail\"),\n    meta=Path(\"output/meta\"),\n    invoice=Path(\"output/invoice\")\n)\n\nprint(f\"Raw data: {output_paths.rawfiles}\")\nprint(f\"Thumbnail: {output_paths.thumbnail}\")\nprint(f\"Metadata: {output_paths.meta}\")\nprint(f\"Invoice: {output_paths.invoice}\")\n\n# Create directories\nfor path_name, path_value in output_paths.__dict__.items():\n    path_value.mkdir(parents=True, exist_ok=True)\n    print(f\"\u2713 Directory created: {path_value}\")\n</code></pre>"},{"location":"rdetoolkit/models/rde2types/#value-and-unit-pair-management","title":"Value and Unit Pair Management","text":"value_unit_pairs.py<pre><code>from rdetoolkit.models.rde2types import ValueUnitPair\n\n# Create value and unit pairs\ntemperature = ValueUnitPair(value=25.0, unit=\"\u2103\")\npressure = ValueUnitPair(value=1013.25, unit=\"hPa\")\nhumidity = ValueUnitPair(value=60, unit=\"%\")\n\nprint(f\"Temperature: {temperature.value} {temperature.unit}\")\nprint(f\"Pressure: {pressure.value} {pressure.unit}\")\nprint(f\"Humidity: {humidity.value} {humidity.unit}\")\n\n# Manage measurement data\nmeasurements = [\n    ValueUnitPair(value=25.0, unit=\"\u2103\"),\n    ValueUnitPair(value=1013.25, unit=\"hPa\"),\n    ValueUnitPair(value=60, unit=\"%\")\n]\n\nfor measurement in measurements:\n    print(f\"Measurement: {measurement.value} {measurement.unit}\")\n</code></pre>"},{"location":"rdetoolkit/models/report/","title":"Reports Module","text":"<p>The <code>rdetoolkit.models.reports</code> module provides Pydantic models for generating and managing security scan reports and code analysis results. This module implements structured data models for documenting security vulnerabilities, external request activities, and code quality assessments in RDE systems.</p>"},{"location":"rdetoolkit/models/report/#overview","title":"Overview","text":"<p>The reports module implements a comprehensive reporting system with the following capabilities:</p> <ul> <li>Security Scan Reports: Structured reporting of code security vulnerabilities</li> <li>External Request Tracking: Documentation of external API calls and network requests</li> <li>Code Quality Analysis: Integration with code scanning and analysis tools</li> <li>Standardized Documentation: Consistent format for audit trails and compliance reporting</li> <li>Flexible Description Fields: Optional detailed descriptions for findings</li> </ul>"},{"location":"rdetoolkit/models/report/#core-classes","title":"Core Classes","text":""},{"location":"rdetoolkit/models/report/#codesnippet","title":"CodeSnippet","text":"<p>Model for representing code snippets found during security or quality scans.</p>"},{"location":"rdetoolkit/models/report/#codesnippet-constructor","title":"CodeSnippet Constructor","text":"<pre><code>CodeSnippet(\n    file_path: str,\n    snippet: str,\n    description: str | None = None\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>file_path</code> (str): Path to the file containing the code snippet</li> <li><code>snippet</code> (str): The actual code snippet that was identified</li> <li><code>description</code> (str | None): Optional description explaining the significance of the snippet</li> </ul>"},{"location":"rdetoolkit/models/report/#codesnippet-example","title":"CodeSnippet Example","text":"<pre><code>from rdetoolkit.models.reports import CodeSnippet\n\n# Security vulnerability example\nsecurity_issue = CodeSnippet(\n    file_path=\"src/auth/login.py\",\n    snippet=\"password = request.form['password']  # Plain text password\",\n    description=\"Password handled in plain text without encryption\"\n)\n\n# External request example\nexternal_call = CodeSnippet(\n    file_path=\"src/api/data_fetcher.py\",\n    snippet=\"response = requests.get('https://api.external.com/data')\",\n    description=\"External API call to third-party service\"\n)\n\n# Code quality issue\nquality_issue = CodeSnippet(\n    file_path=\"src/utils/helpers.py\",\n    snippet=\"def calculate(x, y): return x/y\",\n    description=\"Division by zero not handled\"\n)\n\nprint(security_issue.file_path)    # src/auth/login.py\nprint(external_call.snippet)      # response = requests.get('https://api.external.com/data')\nprint(quality_issue.description)  # Division by zero not handled\n</code></pre>"},{"location":"rdetoolkit/models/report/#reportitem","title":"ReportItem","text":"<p>Comprehensive model for security and code analysis reports.</p>"},{"location":"rdetoolkit/models/report/#constructor","title":"Constructor","text":"<pre><code>ReportItem(\n    exec_date: str,\n    dockerfile_path: str,\n    requirements_path: str,\n    include_dirs: list[str],\n    code_security_scan_results: list[CodeSnippet],\n    code_ext_requests_scan_results: list[CodeSnippet]\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>exec_date</code> (str): Date when the scan was executed (ISO format recommended)</li> <li><code>dockerfile_path</code> (str): Path to the Dockerfile used for the environment</li> <li><code>requirements_path</code> (str): Path to the requirements file (e.g., requirements.txt)</li> <li><code>include_dirs</code> (list[str]): List of directories included in the scan</li> <li><code>code_security_scan_results</code> (list[CodeSnippet]): Security vulnerability findings</li> <li><code>code_ext_requests_scan_results</code> (list[CodeSnippet]): External request findings</li> </ul>"},{"location":"rdetoolkit/models/report/#example","title":"Example","text":"<pre><code>from rdetoolkit.models.reports import ReportItem, CodeSnippet\nfrom datetime import datetime\n\n# Create security findings\nsecurity_findings = [\n    CodeSnippet(\n        file_path=\"src/auth/session.py\",\n        snippet=\"session['user_id'] = user.id\",\n        description=\"Session data stored without encryption\"\n    ),\n    CodeSnippet(\n        file_path=\"src/database/connection.py\",\n        snippet=\"cursor.execute(f'SELECT * FROM users WHERE id = {user_id}')\",\n        description=\"SQL injection vulnerability - unparameterized query\"\n    )\n]\n\n# Create external request findings\nexternal_requests = [\n    CodeSnippet(\n        file_path=\"src/services/weather.py\",\n        snippet=\"requests.get('http://api.openweathermap.org/data/2.5/weather')\",\n        description=\"External weather API call\"\n    ),\n    CodeSnippet(\n        file_path=\"src/integrations/analytics.py\",\n        snippet=\"requests.post('https://analytics.service.com/track')\",\n        description=\"Analytics tracking service call\"\n    )\n]\n\n# Create comprehensive report\nreport = ReportItem(\n    exec_date=\"2025-01-15T10:30:00Z\",\n    dockerfile_path=\"docker/Dockerfile.prod\",\n    requirements_path=\"requirements/production.txt\",\n    include_dirs=[\"src/\", \"tests/\", \"scripts/\"],\n    code_security_scan_results=security_findings,\n    code_ext_requests_scan_results=external_requests\n)\n\n# Access report data\nprint(f\"Scan executed on: {report.exec_date}\")\nprint(f\"Found {len(report.code_security_scan_results)} security issues\")\nprint(f\"Found {len(report.code_ext_requests_scan_results)} external requests\")\nprint(f\"Scanned directories: {', '.join(report.include_dirs)}\")\n</code></pre>"},{"location":"rdetoolkit/models/report/#complete-usage-examples","title":"Complete Usage Examples","text":""},{"location":"rdetoolkit/models/report/#security-scan-report-generation","title":"Security Scan Report Generation","text":"<pre><code>from rdetoolkit.models.reports import ReportItem, CodeSnippet\nfrom datetime import datetime\nfrom pathlib import Path\nimport json\n\nclass SecurityScanner:\n    \"\"\"Example security scanner that generates reports.\"\"\"\n\n    def __init__(self, project_root: Path):\n        self.project_root = project_root\n        self.security_patterns = [\n            (\"password\", \"Potential password in plain text\"),\n            (\"SECRET\", \"Hardcoded secret detected\"),\n            (\"eval(\", \"Dangerous eval() usage\"),\n            (\"exec(\", \"Dangerous exec() usage\"),\n            (\"subprocess.call\", \"Subprocess call - review for command injection\")\n        ]\n        self.external_patterns = [\n            (\"requests.get\", \"HTTP GET request\"),\n            (\"requests.post\", \"HTTP POST request\"),\n            (\"urllib.request\", \"urllib request\"),\n            (\"httpx.\", \"HTTPX client request\"),\n            (\"aiohttp.\", \"Aiohttp request\")\n        ]\n\n    def scan_file(self, file_path: Path) -&gt; tuple[list[CodeSnippet], list[CodeSnippet]]:\n        \"\"\"Scan a single file for security issues and external requests.\"\"\"\n\n        security_findings = []\n        external_findings = []\n\n        try:\n            content = file_path.read_text(encoding='utf-8')\n            lines = content.splitlines()\n\n            for line_num, line in enumerate(lines, 1):\n                line_stripped = line.strip()\n\n                # Check for security patterns\n                for pattern, description in self.security_patterns:\n                    if pattern in line_stripped:\n                        security_findings.append(CodeSnippet(\n                            file_path=str(file_path.relative_to(self.project_root)),\n                            snippet=f\"Line {line_num}: {line_stripped}\",\n                            description=f\"{description} (Line {line_num})\"\n                        ))\n\n                # Check for external request patterns\n                for pattern, description in self.external_patterns:\n                    if pattern in line_stripped:\n                        external_findings.append(CodeSnippet(\n                            file_path=str(file_path.relative_to(self.project_root)),\n                            snippet=f\"Line {line_num}: {line_stripped}\",\n                            description=f\"{description} (Line {line_num})\"\n                        ))\n\n        except Exception as e:\n            # Handle encoding or other errors\n            print(f\"Error scanning {file_path}: {e}\")\n\n        return security_findings, external_findings\n\n    def scan_directory(self, scan_dirs: list[str]) -&gt; ReportItem:\n        \"\"\"Scan multiple directories and generate a report.\"\"\"\n\n        all_security_findings = []\n        all_external_findings = []\n\n        for scan_dir in scan_dirs:\n            dir_path = self.project_root / scan_dir\n            if not dir_path.exists():\n                continue\n\n            # Scan Python files\n            for py_file in dir_path.rglob(\"*.py\"):\n                security, external = self.scan_file(py_file)\n                all_security_findings.extend(security)\n                all_external_findings.extend(external)\n\n        # Create report\n        report = ReportItem(\n            exec_date=datetime.now().isoformat(),\n            dockerfile_path=\"Dockerfile\",\n            requirements_path=\"requirements.txt\",\n            include_dirs=scan_dirs,\n            code_security_scan_results=all_security_findings,\n            code_ext_requests_scan_results=all_external_findings\n        )\n\n        return report\n\n# Usage example\nscanner = SecurityScanner(Path(\"project_root\"))\nreport = scanner.scan_directory([\"src/\", \"tests/\", \"scripts/\"])\n\nprint(f\"Security scan completed at {report.exec_date}\")\nprint(f\"Scanned directories: {report.include_dirs}\")\nprint(f\"Security issues found: {len(report.code_security_scan_results)}\")\nprint(f\"External requests found: {len(report.code_ext_requests_scan_results)}\")\n</code></pre>"},{"location":"rdetoolkit/models/report/#report-serialization-and-storage","title":"Report Serialization and Storage","text":"<pre><code>from rdetoolkit.models.reports import ReportItem, CodeSnippet\nimport json\nfrom pathlib import Path\nfrom datetime import datetime\n\ndef save_report_to_json(report: ReportItem, output_path: Path) -&gt; None:\n    \"\"\"Save a report to a JSON file.\"\"\"\n\n    # Serialize to dictionary\n    report_dict = report.model_dump()\n\n    # Save to file\n    with open(output_path, 'w', encoding='utf-8') as f:\n        json.dump(report_dict, f, indent=2, ensure_ascii=False)\n\n    print(f\"Report saved to {output_path}\")\n\ndef load_report_from_json(file_path: Path) -&gt; ReportItem:\n    \"\"\"Load a report from a JSON file.\"\"\"\n\n    with open(file_path, 'r', encoding='utf-8') as f:\n        report_dict = json.load(f)\n\n    # Reconstruct the report\n    return ReportItem(**report_dict)\n\ndef generate_html_report(report: ReportItem, output_path: Path) -&gt; None:\n    \"\"\"Generate an HTML report from a ReportItem.\"\"\"\n\n    html_template = \"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Security Scan Report&lt;/title&gt;\n        &lt;style&gt;\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .header { background-color: #f0f0f0; padding: 10px; border-radius: 5px; }\n            .section { margin: 20px 0; }\n            .finding { background-color: #fff3cd; padding: 10px; margin: 5px 0; border-left: 4px solid #ffc107; }\n            .external { background-color: #d1ecf1; padding: 10px; margin: 5px 0; border-left: 4px solid #17a2b8; }\n            .code { background-color: #f8f9fa; padding: 5px; font-family: monospace; border-radius: 3px; }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"header\"&gt;\n            &lt;h1&gt;Security Scan Report&lt;/h1&gt;\n            &lt;p&gt;&lt;strong&gt;Execution Date:&lt;/strong&gt; {exec_date}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Dockerfile:&lt;/strong&gt; {dockerfile_path}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; {requirements_path}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Scanned Directories:&lt;/strong&gt; {include_dirs}&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"section\"&gt;\n            &lt;h2&gt;Security Issues ({security_count})&lt;/h2&gt;\n            {security_findings}\n        &lt;/div&gt;\n\n        &lt;div class=\"section\"&gt;\n            &lt;h2&gt;External Requests ({external_count})&lt;/h2&gt;\n            {external_findings}\n        &lt;/div&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n\n    # Generate security findings HTML\n    security_html = \"\"\n    for finding in report.code_security_scan_results:\n        security_html += f\"\"\"\n        &lt;div class=\"finding\"&gt;\n            &lt;strong&gt;File:&lt;/strong&gt; {finding.file_path}&lt;br&gt;\n            &lt;strong&gt;Code:&lt;/strong&gt; &lt;code class=\"code\"&gt;{finding.snippet}&lt;/code&gt;&lt;br&gt;\n            &lt;strong&gt;Description:&lt;/strong&gt; {finding.description or 'No description'}\n        &lt;/div&gt;\n        \"\"\"\n\n    # Generate external request findings HTML\n    external_html = \"\"\n    for finding in report.code_ext_requests_scan_results:\n        external_html += f\"\"\"\n        &lt;div class=\"external\"&gt;\n            &lt;strong&gt;File:&lt;/strong&gt; {finding.file_path}&lt;br&gt;\n            &lt;strong&gt;Code:&lt;/strong&gt; &lt;code class=\"code\"&gt;{finding.snippet}&lt;/code&gt;&lt;br&gt;\n            &lt;strong&gt;Description:&lt;/strong&gt; {finding.description or 'No description'}\n        &lt;/div&gt;\n        \"\"\"\n\n    # Fill template\n    html_content = html_template.format(\n        exec_date=report.exec_date,\n        dockerfile_path=report.dockerfile_path,\n        requirements_path=report.requirements_path,\n        include_dirs=\", \".join(report.include_dirs),\n        security_count=len(report.code_security_scan_results),\n        external_count=len(report.code_ext_requests_scan_results),\n        security_findings=security_html,\n        external_findings=external_html\n    )\n\n    # Save HTML file\n    with open(output_path, 'w', encoding='utf-8') as f:\n        f.write(html_content)\n\n    print(f\"HTML report saved to {output_path}\")\n\n# Example usage\nreport = ReportItem(\n    exec_date=\"2025-01-15T14:30:00Z\",\n    dockerfile_path=\"docker/Dockerfile.prod\",\n    requirements_path=\"requirements/production.txt\",\n    include_dirs=[\"src/\", \"tests/\"],\n    code_security_scan_results=[\n        CodeSnippet(\n            file_path=\"src/auth.py\",\n            snippet=\"password = 'hardcoded_secret'\",\n            description=\"Hardcoded password detected\"\n        )\n    ],\n    code_ext_requests_scan_results=[\n        CodeSnippet(\n            file_path=\"src/api.py\",\n            snippet=\"requests.get('https://api.example.com')\",\n            description=\"External API call\"\n        )\n    ]\n)\n\n# Save in different formats\nsave_report_to_json(report, Path(\"security_report.json\"))\ngenerate_html_report(report, Path(\"security_report.html\"))\n\n# Load and verify\nloaded_report = load_report_from_json(Path(\"security_report.json\"))\nassert loaded_report.exec_date == report.exec_date\nprint(\"Report successfully saved and loaded!\")\n</code></pre>"},{"location":"rdetoolkit/models/report/#integration-with-cicd-pipeline","title":"Integration with CI/CD Pipeline","text":"<pre><code>from rdetoolkit.models.reports import ReportItem, CodeSnippet\nimport subprocess\nimport json\nfrom pathlib import Path\nfrom datetime import datetime\n\nclass CICDSecurityIntegration:\n    \"\"\"Integration class for CI/CD security scanning.\"\"\"\n\n    def __init__(self, project_root: Path):\n        self.project_root = project_root\n        self.report_dir = project_root / \"security_reports\"\n        self.report_dir.mkdir(exist_ok=True)\n\n    def run_bandit_scan(self, scan_dirs: list[str]) -&gt; list[CodeSnippet]:\n        \"\"\"Run Bandit security scanner and parse results.\"\"\"\n\n        findings = []\n\n        try:\n            # Run bandit with JSON output\n            cmd = [\"bandit\", \"-r\", \"-f\", \"json\"] + scan_dirs\n            result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)\n\n            if result.returncode == 0 or result.stdout:\n                bandit_data = json.loads(result.stdout)\n\n                for issue in bandit_data.get(\"results\", []):\n                    findings.append(CodeSnippet(\n                        file_path=issue[\"filename\"],\n                        snippet=issue[\"code\"],\n                        description=f\"{issue['test_name']}: {issue['issue_text']}\"\n                    ))\n\n        except Exception as e:\n            print(f\"Error running Bandit: {e}\")\n\n        return findings\n\n    def scan_for_external_requests(self, scan_dirs: list[str]) -&gt; list[CodeSnippet]:\n        \"\"\"Scan for external HTTP requests in code.\"\"\"\n\n        findings = []\n        request_patterns = [\n            \"requests.\",\n            \"urllib.request\",\n            \"httpx.\",\n            \"aiohttp.\",\n            \"fetch(\",\n            \"axios.\"\n        ]\n\n        for scan_dir in scan_dirs:\n            dir_path = self.project_root / scan_dir\n            if not dir_path.exists():\n                continue\n\n            for file_path in dir_path.rglob(\"*\"):\n                if file_path.suffix in [\".py\", \".js\", \".ts\"]:\n                    try:\n                        content = file_path.read_text(encoding='utf-8')\n                        lines = content.splitlines()\n\n                        for line_num, line in enumerate(lines, 1):\n                            for pattern in request_patterns:\n                                if pattern in line:\n                                    findings.append(CodeSnippet(\n                                        file_path=str(file_path.relative_to(self.project_root)),\n                                        snippet=line.strip(),\n                                        description=f\"External request detected at line {line_num}\"\n                                    ))\n                    except Exception as e:\n                        print(f\"Error scanning {file_path}: {e}\")\n\n        return findings\n\n    def generate_comprehensive_report(self, scan_dirs: list[str]) -&gt; ReportItem:\n        \"\"\"Generate comprehensive security and external request report.\"\"\"\n\n        # Run security scan\n        security_findings = self.run_bandit_scan(scan_dirs)\n\n        # Scan for external requests\n        external_findings = self.scan_for_external_requests(scan_dirs)\n\n        # Create report\n        report = ReportItem(\n            exec_date=datetime.now().isoformat(),\n            dockerfile_path=str(self.project_root / \"Dockerfile\"),\n            requirements_path=str(self.project_root / \"requirements.txt\"),\n            include_dirs=scan_dirs,\n            code_security_scan_results=security_findings,\n            code_ext_requests_scan_results=external_findings\n        )\n\n        return report\n\n    def save_report_with_timestamp(self, report: ReportItem) -&gt; Path:\n        \"\"\"Save report with timestamp in filename.\"\"\"\n\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        report_path = self.report_dir / f\"security_report_{timestamp}.json\"\n\n        with open(report_path, 'w', encoding='utf-8') as f:\n            f.write(report.model_dump_json(indent=2))\n\n        return report_path\n\n    def check_security_thresholds(self, report: ReportItem) -&gt; bool:\n        \"\"\"Check if security findings exceed acceptable thresholds.\"\"\"\n\n        # Define thresholds\n        max_high_severity = 0\n        max_medium_severity = 5\n        max_total_findings = 10\n\n        # Count severity levels (simplified - in real scenario, parse from descriptions)\n        high_severity = sum(1 for finding in report.code_security_scan_results\n                          if \"high\" in finding.description.lower())\n        medium_severity = sum(1 for finding in report.code_security_scan_results\n                            if \"medium\" in finding.description.lower())\n        total_findings = len(report.code_security_scan_results)\n\n        # Check thresholds\n        if high_severity &gt; max_high_severity:\n            print(f\"\u274c High severity issues: {high_severity} (max: {max_high_severity})\")\n            return False\n\n        if medium_severity &gt; max_medium_severity:\n            print(f\"\u274c Medium severity issues: {medium_severity} (max: {max_medium_severity})\")\n            return False\n\n        if total_findings &gt; max_total_findings:\n            print(f\"\u274c Total security issues: {total_findings} (max: {max_total_findings})\")\n            return False\n\n        print(\"\u2705 Security scan passed all thresholds\")\n        return True\n\n# Usage in CI/CD\ndef ci_security_check():\n    \"\"\"Main function for CI/CD security checking.\"\"\"\n\n    scanner = CICDSecurityIntegration(Path(\".\"))\n\n    # Generate report\n    report = scanner.generate_comprehensive_report([\"src/\", \"tests/\"])\n\n    # Save report\n    report_path = scanner.save_report_with_timestamp(report)\n    print(f\"Report saved: {report_path}\")\n\n    # Check thresholds\n    passed = scanner.check_security_thresholds(report)\n\n    # Print summary\n    print(f\"\"\"\nSecurity Scan Summary:\n- Execution Date: {report.exec_date}\n- Security Issues: {len(report.code_security_scan_results)}\n- External Requests: {len(report.code_ext_requests_scan_results)}\n- Directories Scanned: {', '.join(report.include_dirs)}\n- Threshold Check: {'PASSED' if passed else 'FAILED'}\n    \"\"\")\n\n    # Exit with appropriate code for CI/CD\n    return 0 if passed else 1\n\n# Example usage\nif __name__ == \"__main__\":\n    exit_code = ci_security_check()\n    exit(exit_code)\n</code></pre>"},{"location":"rdetoolkit/models/report/#report-analysis-and-aggregation","title":"Report Analysis and Aggregation","text":"<pre><code>from rdetoolkit.models.reports import ReportItem, CodeSnippet\nfrom pathlib import Path\nimport json\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\nclass ReportAnalyzer:\n    \"\"\"Analyzer for aggregating and analyzing multiple security reports.\"\"\"\n\n    def __init__(self, reports_dir: Path):\n        self.reports_dir = reports_dir\n\n    def load_all_reports(self, days_back: int = 30) -&gt; list[ReportItem]:\n        \"\"\"Load all reports from the last N days.\"\"\"\n\n        cutoff_date = datetime.now() - timedelta(days=days_back)\n        reports = []\n\n        for report_file in self.reports_dir.glob(\"*.json\"):\n            try:\n                with open(report_file, 'r', encoding='utf-8') as f:\n                    report_data = json.load(f)\n\n                report = ReportItem(**report_data)\n                report_date = datetime.fromisoformat(report.exec_date.replace('Z', '+00:00'))\n\n                if report_date &gt;= cutoff_date:\n                    reports.append(report)\n\n            except Exception as e:\n                print(f\"Error loading report {report_file}: {e}\")\n\n        return reports\n\n    def analyze_security_trends(self, reports: list[ReportItem]) -&gt; dict:\n        \"\"\"Analyze security vulnerability trends over time.\"\"\"\n\n        trends = {\n            \"total_scans\": len(reports),\n            \"average_security_issues\": 0,\n            \"average_external_requests\": 0,\n            \"most_common_security_patterns\": defaultdict(int),\n            \"most_affected_files\": defaultdict(int),\n            \"severity_distribution\": defaultdict(int)\n        }\n\n        if not reports:\n            return trends\n\n        total_security = 0\n        total_external = 0\n\n        for report in reports:\n            total_security += len(report.code_security_scan_results)\n            total_external += len(report.code_ext_requests_scan_results)\n\n            # Analyze security patterns\n            for finding in report.code_security_scan_results:\n                if finding.description:\n                    # Extract pattern (simplified)\n                    pattern = finding.description.split(':')[0] if ':' in finding.description else finding.description\n                    trends[\"most_common_security_patterns\"][pattern] += 1\n\n                # Track affected files\n                trends[\"most_affected_files\"][finding.file_path] += 1\n\n                # Analyze severity (simplified)\n                if finding.description:\n                    desc_lower = finding.description.lower()\n                    if \"high\" in desc_lower:\n                        trends[\"severity_distribution\"][\"high\"] += 1\n                    elif \"medium\" in desc_lower:\n                        trends[\"severity_distribution\"][\"medium\"] += 1\n                    elif \"low\" in desc_lower:\n                        trends[\"severity_distribution\"][\"low\"] += 1\n                    else:\n                        trends[\"severity_distribution\"][\"unknown\"] += 1\n\n        trends[\"average_security_issues\"] = total_security / len(reports)\n        trends[\"average_external_requests\"] = total_external / len(reports)\n\n        return trends\n\n    def generate_executive_summary(self, trends: dict) -&gt; str:\n        \"\"\"Generate executive summary from trends analysis.\"\"\"\n\n        summary = f\"\"\"\nSECURITY ANALYSIS EXECUTIVE SUMMARY\nGenerated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\nOVERVIEW:\n- Total scans analyzed: {trends['total_scans']}\n- Average security issues per scan: {trends['average_security_issues']:.1f}\n- Average external requests per scan: {trends['average_external_requests']:.1f}\n\nSEVERITY DISTRIBUTION:\n\"\"\"\n\n        for severity, count in trends['severity_distribution'].items():\n            summary += f\"- {severity.title()}: {count} issues\\n\"\n\n        summary += \"\\nMOST COMMON SECURITY PATTERNS:\\n\"\n        for pattern, count in sorted(trends['most_common_security_patterns'].items(),\n                                   key=lambda x: x[1], reverse=True)[:5]:\n            summary += f\"- {pattern}: {count} occurrences\\n\"\n\n        summary += \"\\nMOST AFFECTED FILES:\\n\"\n        for file_path, count in sorted(trends['most_affected_files'].items(),\n                                     key=lambda x: x[1], reverse=True)[:5]:\n            summary += f\"- {file_path}: {count} issues\\n\"\n\n        return summary\n\n# Usage example\nanalyzer = ReportAnalyzer(Path(\"security_reports\"))\nreports = analyzer.load_all_reports(days_back=30)\ntrends = analyzer.analyze_security_trends(reports)\nsummary = analyzer.generate_executive_summary(trends)\n\nprint(summary)\n\n# Save summary to file\nwith open(\"security_summary.txt\", \"w\") as f:\n    f.write(summary)\n</code></pre>"},{"location":"rdetoolkit/models/report/#error-handling-and-validation","title":"Error Handling and Validation","text":""},{"location":"rdetoolkit/models/report/#input-validation","title":"Input Validation","text":"<pre><code>from rdetoolkit.models.reports import ReportItem, CodeSnippet\nfrom pydantic import ValidationError\nfrom datetime import datetime\n\ndef create_safe_code_snippet(file_path: str, snippet: str, description: str = None) -&gt; CodeSnippet | None:\n    \"\"\"Safely create a CodeSnippet with validation.\"\"\"\n\n    try:\n        return CodeSnippet(\n            file_path=file_path,\n            snippet=snippet,\n            description=description\n        )\n    except ValidationError as e:\n        print(f\"Invalid CodeSnippet data: {e}\")\n        return None\n\ndef create_safe_report(\n    exec_date: str,\n    dockerfile_path: str,\n    requirements_path: str,\n    include_dirs: list[str],\n    security_findings: list[CodeSnippet],\n    external_findings: list[CodeSnippet]\n) -&gt; ReportItem | None:\n    \"\"\"Safely create a ReportItem with validation.\"\"\"\n\n    try:\n        return ReportItem(\n            exec_date=exec_date,\n            dockerfile_path=dockerfile_path,\n            requirements_path=requirements_path,\n            include_dirs=include_dirs,\n            code_security_scan_results=security_findings,\n            code_ext_requests_scan_results=external_findings\n        )\n    except ValidationError as e:\n        print(f\"Invalid ReportItem data: {e}\")\n        return None\n\n# Example with validation\nvalid_snippet = create_safe_code_snippet(\n    \"src/main.py\",\n    \"print('Hello World')\",\n    \"Simple print statement\"\n)\n\ninvalid_snippet = create_safe_code_snippet(\n    None,  # Invalid: missing file_path\n    \"code\",\n    \"description\"\n)\n\nprint(f\"Valid snippet created: {valid_snippet is not None}\")    # True\nprint(f\"Invalid snippet created: {invalid_snippet is not None}\") # False\n</code></pre>"},{"location":"rdetoolkit/models/report/#best-practices","title":"Best Practices","text":"<ol> <li>Use ISO Date Formats: Always use ISO 8601 format for dates:</li> </ol> <pre><code>exec_date = datetime.now().isoformat()  # \"2025-01-15T10:30:00.123456\"\n</code></pre> <ol> <li>Provide Meaningful Descriptions: Include context in code snippet descriptions:</li> </ol> <pre><code>CodeSnippet(\n    file_path=\"auth.py\",\n    snippet=\"password = input('Enter password: ')\",\n    description=\"Password input without encryption - Line 45\"\n)\n</code></pre> <ol> <li>Use Relative Paths: Store relative paths for portability:</li> </ol> <pre><code># Good\nfile_path = str(Path(absolute_path).relative_to(project_root))\n\n# Avoi\nfile_path = \"/home/user/project/src/file.py\"\n</code></pre> <ol> <li>Validate Input Data: Always validate data before creating reports:</li> </ol> <pre><code>if not Path(dockerfile_path).exists():\n    dockerfile_path = \"Dockerfile.default\"\n</code></pre> <ol> <li>Handle Encoding Issues: Use proper encoding when reading files:</li> </ol> <pre><code>try:\n    content = file_path.read_text(encoding='utf-8')\nexcept UnicodeDecodeError:\n    content = file_path.read_text(encoding='latin-1')\n</code></pre>"},{"location":"rdetoolkit/models/report/#integration-examples","title":"Integration Examples","text":""},{"location":"rdetoolkit/models/report/#integration-with-popular-security-tools","title":"Integration with Popular Security Tools","text":"<pre><code># Integration with different security scanners\ndef integrate_with_semgrep(project_path: Path) -&gt; list[CodeSnippet]:\n    \"\"\"Integrate with Semgrep security scanner.\"\"\"\n\n    cmd = [\"semgrep\", \"--config=auto\", \"--json\", str(project_path)]\n    result = subprocess.run(cmd, capture_output=True, text=True)\n\n    findings = []\n    if result.returncode == 0:\n        data = json.loads(result.stdout)\n        for finding in data.get(\"results\", []):\n            findings.append(CodeSnippet(\n                file_path=finding[\"path\"],\n                snippet=finding[\"extra\"][\"lines\"],\n                description=f\"{finding['check_id']}: {finding['message']}\"\n            ))\n\n    return findings\n\ndef integrate_with_safety(requirements_path: Path) -&gt; list[CodeSnippet]:\n    \"\"\"Integrate with Safety package vulnerability scanner.\"\"\"\n\n    cmd = [\"safety\", \"check\", \"--json\", \"-r\", str(requirements_path)]\n    result = subprocess.run(cmd, capture_output=True, text=True)\n\n    findings = []\n    if result.stdout:\n        try:\n            data = json.loads(result.stdout)\n            for vuln in data:\n                findings.append(CodeSnippet(\n                    file_path=str(requirements_path),\n                    snippet=f\"{vuln['package']}=={vuln['installed_version']}\",\n                    description=f\"Vulnerability: {vuln['vulnerability_id']} - {vuln['advisory']}\"\n                ))\n        except json.JSONDecodeError:\n            pass\n\n    return findings\n</code></pre>"},{"location":"rdetoolkit/models/report/#see-also","title":"See Also","text":"<ul> <li>Pydantic Documentation - For model validation and serialization</li> <li>Security Scanning Tools - For integration with security scanners</li> <li>CI/CD Integration - For automated security scanning in pipelines</li> <li>JSON Schema - For report format validation</li> </ul>"},{"location":"rdetoolkit/models/result/","title":"Result Models API","text":""},{"location":"rdetoolkit/models/result/#purpose","title":"Purpose","text":"<p>This module defines data models for managing workflow execution results in RDEToolKit. It provides structured result data including execution status, result information, and error details.</p>"},{"location":"rdetoolkit/models/result/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/models/result/#execution-result-management","title":"Execution Result Management","text":"<ul> <li>Tracking workflow execution status</li> <li>Structuring execution results</li> <li>Integrated management through result manager</li> </ul>"},{"location":"rdetoolkit/models/result/#data-structures","title":"Data Structures","text":"<ul> <li>Type-safe result data</li> <li>Recording execution time</li> <li>Managing processing statistics</li> </ul>"},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus","title":"<code>src.rdetoolkit.models.result.WorkflowExecutionStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.error_code","title":"<code>error_code: int | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.error_message","title":"<code>error_message: str | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.exception_object","title":"<code>exception_object: Exception | None = Field(default=None, exclude=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.mode","title":"<code>mode: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.run_id","title":"<code>run_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.stacktrace","title":"<code>stacktrace: str | None = Field(default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.status","title":"<code>status: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.target","title":"<code>target: str | None</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus.format_run_id","title":"<code>format_run_id(v)</code>  <code>classmethod</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionResults","title":"<code>src.rdetoolkit.models.result.WorkflowExecutionResults</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionResults.statuses","title":"<code>statuses: list[WorkflowExecutionStatus]</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager","title":"<code>src.rdetoolkit.models.result.WorkflowResultManager()</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.statuses","title":"<code>statuses: Incomplete = WorkflowExecutionResults(statuses=[])</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.__getitem__","title":"<code>__getitem__(index)</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.__iter__","title":"<code>__iter__()</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.__len__","title":"<code>__len__()</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.__repr__","title":"<code>__repr__()</code>","text":""},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.add","title":"<code>add(run_id, title, status, mode, error_code=None, error_message=None, target=None, stacktrace=None, exception_object=None)</code>","text":"<p>Adds a new workflow execution status to the statuses list.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>int</code> <p>The unique identifier for the run.</p> required <code>title</code> <code>str</code> <p>The title of the workflow execution.</p> required <code>status</code> <code>str</code> <p>The current status of the workflow execution.</p> required <code>mode</code> <code>str</code> <p>Process Mode.</p> required <code>error_code</code> <code>int</code> <p>The error code associated with the workflow execution, if any. Defaults to None.</p> <code>None</code> <code>error_message</code> <code>str</code> <p>The error message associated with the workflow execution, if any. Defaults to None.</p> <code>None</code> <code>target</code> <code>str</code> <p>target directory path, if any. Defaults to None.</p> <code>None</code> <code>stacktrace</code> <code>str</code> <p>The stack trace of the error, if any. Defaults to None.</p> <code>None</code> <code>exception_object</code> <code>Exception</code> <p>The original exception object, if any. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.add_status","title":"<code>add_status(status)</code>","text":"<p>Adds an existing WorkflowExecutionStatus object to the statuses list.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>WorkflowExecutionStatus</code> <p>The WorkflowExecutionStatus object to add.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager.to_json","title":"<code>to_json()</code>","text":"<p>Return the JSON representation of the workflow execution results.</p>"},{"location":"rdetoolkit/models/result/#_1","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9","text":""},{"location":"rdetoolkit/models/result/#_2","title":"\u57fa\u672c\u7684\u306a\u5b9f\u884c\u7d50\u679c\u7ba1\u7406","text":"basic_result_management.py<pre><code>from rdetoolkit.models.result import WorkflowExecutionStatus, WorkflowExecutionResults\nfrom datetime import datetime\n\n# \u5b9f\u884c\u30b9\u30c6\u30fc\u30bf\u30b9\u306e\u4f5c\u6210\nstatus = WorkflowExecutionStatus(\n    status=\"success\",\n    message=\"\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u304c\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u307e\u3057\u305f\",\n    timestamp=datetime.now(),\n    execution_time=120.5\n)\n\nprint(f\"\u5b9f\u884c\u30b9\u30c6\u30fc\u30bf\u30b9: {status.status}\")\nprint(f\"\u30e1\u30c3\u30bb\u30fc\u30b8: {status.message}\")\nprint(f\"\u5b9f\u884c\u6642\u9593: {status.execution_time}\u79d2\")\n\n# \u5b9f\u884c\u7d50\u679c\u306e\u4f5c\u6210\nresults = WorkflowExecutionResults(\n    run_id=\"workflow_001\",\n    status=status,\n    input_files_count=5,\n    output_files_count=8,\n    processed_data_size=1024000,\n    metadata={\"experiment_id\": \"EXP001\", \"researcher\": \"John Doe\"}\n)\n\nprint(f\"Execution ID: {results.run_id}\")\nprint(f\"Input files count: {results.input_files_count}\")\nprint(f\"Output files count: {results.output_files_count}\")\nprint(f\"Processed data size: {results.processed_data_size} bytes\")\n</code></pre>"},{"location":"rdetoolkit/models/result/#workflow-result-manager","title":"Workflow Result Manager","text":"workflow_result_manager.py<pre><code>from rdetoolkit.models.result import WorkflowResultManager, WorkflowExecutionStatus\nfrom datetime import datetime\nimport json\n\n# Create result manager\nmanager = WorkflowResultManager()\n\n# Add multiple execution results\nfor i in range(3):\n    run_id = f\"workflow_{i+1:03d}\"\n\n    if i == 2:  # Last execution is error\n        status = WorkflowExecutionStatus(\n            status=\"error\",\n            message=\"Error occurred during file processing\",\n            timestamp=datetime.now(),\n            execution_time=45.2\n        )\n    else:\n        status = WorkflowExecutionStatus(\n            status=\"success\",\n            message=\"Completed successfully\",\n            timestamp=datetime.now(),\n            execution_time=120.5 + i * 10\n        )\n\n    # Add result\n    manager.add(run_id, status, input_files=5+i, output_files=8+i*2)\n    print(f\"Added execution result {run_id}\")\n\n# Add status only\nmanager.add_status(\"workflow_004\", \"running\", \"Running...\")\n\n# Output in JSON format\nresults_json = manager.to_json()\nprint(f\"\\nOutput results in JSON format:\")\nprint(json.dumps(json.loads(results_json), indent=2, ensure_ascii=False))\n</code></pre>"},{"location":"rdetoolkit/models/result/#error-result-management","title":"Error Result Management","text":"error_result_management.py<pre><code>from rdetoolkit.models.result import WorkflowExecutionStatus, WorkflowExecutionResults\nfrom datetime import datetime\n\n# Create error status\nerror_status = WorkflowExecutionStatus(\n    status=\"error\",\n    message=\"Error occurred during file processing\",\n    timestamp=datetime.now(),\n    execution_time=45.2,\n    error_code=\"FILE_PROCESSING_ERROR\",\n    error_details={\n        \"error_type\": \"FileNotFoundError\",\n        \"missing_file\": \"data/input/missing.csv\",\n        \"stack_trace\": \"Traceback (most recent call last)...\"\n    }\n)\n\n# Create error results\nerror_results = WorkflowExecutionResults(\n    run_id=\"workflow_error_001\",\n    status=error_status,\n    input_files_count=3,\n    output_files_count=0,\n    processed_data_size=0,\n    metadata={\"experiment_id\": \"EXP002\", \"error_occurred\": True}\n)\n\nprint(f\"Error execution ID: {error_results.run_id}\")\nprint(f\"Error code: {error_results.status.error_code}\")\nprint(f\"Error details: {error_results.status.error_details}\")\n</code></pre>"},{"location":"rdetoolkit/models/result/#execution-result-statistical-analysis","title":"Execution Result Statistical Analysis","text":"result_statistics.py<pre><code>from rdetoolkit.models.result import WorkflowResultManager, WorkflowExecutionStatus\nfrom datetime import datetime, timedelta\nimport json\n\ndef analyze_workflow_results(manager: WorkflowResultManager) -&gt; dict:\n    \"\"\"Statistical analysis of workflow execution results\"\"\"\n\n    # Get results in JSON format\n    results_json = manager.to_json()\n    results_data = json.loads(results_json)\n\n    total_runs = len(results_data)\n    successful_runs = sum(1 for r in results_data if r.get(\"status\", {}).get(\"status\") == \"success\")\n    failed_runs = total_runs - successful_runs\n\n    total_execution_time = sum(r.get(\"status\", {}).get(\"execution_time\", 0) for r in results_data)\n    avg_execution_time = total_execution_time / total_runs if total_runs &gt; 0 else 0\n\n    total_input_files = sum(r.get(\"input_files_count\", 0) for r in results_data)\n    total_output_files = sum(r.get(\"output_files_count\", 0) for r in results_data)\n    total_data_size = sum(r.get(\"processed_data_size\", 0) for r in results_data)\n\n    return {\n        \"total_runs\": total_runs,\n        \"successful_runs\": successful_runs,\n        \"failed_runs\": failed_runs,\n        \"success_rate\": successful_runs / total_runs if total_runs &gt; 0 else 0,\n        \"total_execution_time\": total_execution_time,\n        \"average_execution_time\": avg_execution_time,\n        \"total_input_files\": total_input_files,\n        \"total_output_files\": total_output_files,\n        \"total_data_processed\": total_data_size\n    }\n\n# Create sample execution results\nmanager = WorkflowResultManager()\n\n# Success examples\nfor i in range(5):\n    status = WorkflowExecutionStatus(\n        status=\"success\",\n        message=\"Success\",\n        timestamp=datetime.now() - timedelta(hours=i),\n        execution_time=120.5 + i * 10\n    )\n    manager.add(f\"run_{i+1:03d}\", status, input_files=3+i, output_files=6+i*2, processed_data_size=512000*(i+1))\n\n# Error example\nerror_status = WorkflowExecutionStatus(\n    status=\"error\",\n    message=\"Error\",\n    timestamp=datetime.now(),\n    execution_time=30.1,\n    error_code=\"VALIDATION_ERROR\"\n)\nmanager.add(\"run_006\", error_status, input_files=2, output_files=0, processed_data_size=0)\n\n# Execute statistical analysis\nstats = analyze_workflow_results(manager)\n\nprint(\"=== Workflow Execution Statistics ===\")\nprint(f\"Total executions: {stats['total_runs']}\")\nprint(f\"Successful executions: {stats['successful_runs']}\")\nprint(f\"Failed executions: {stats['failed_runs']}\")\nprint(f\"Success rate: {stats['success_rate']:.2%}\")\nprint(f\"Average execution time: {stats['average_execution_time']:.1f} seconds\")\nprint(f\"Total processed data size: {stats['total_data_processed']:,} bytes\")\n</code></pre>"},{"location":"rdetoolkit/processing/","title":"Processing Module","text":"<p>The <code>rdetoolkit.processing</code> module provides a modern, pipeline-based architecture for data processing operations in the RDE toolkit. This module replaces the traditional mode-based processing approach with a more flexible and extensible pipeline system.</p>"},{"location":"rdetoolkit/processing/#overview","title":"Overview","text":"<p>The processing module introduces a clean separation of concerns through:</p> <ul> <li>Pipeline Architecture: Sequential execution of processing steps</li> <li>Processor Components: Individual, reusable processing units</li> <li>Context Management: Centralized state and resource management</li> <li>Factory Pattern: Automated pipeline construction for different modes</li> <li>Extensibility: Easy addition of new processors and pipelines</li> </ul>"},{"location":"rdetoolkit/processing/#architecture-components","title":"Architecture Components","text":""},{"location":"rdetoolkit/processing/#core-classes","title":"Core Classes","text":"<ul> <li>Pipeline: Orchestrates the execution of multiple processors</li> <li>Processor: Abstract base class for all processing operations</li> <li>ProcessingContext: Encapsulates all processing state and resources</li> <li>PipelineFactory: Creates pre-configured pipelines for different modes</li> </ul>"},{"location":"rdetoolkit/processing/#supported-processing-modes","title":"Supported Processing Modes","text":"<ol> <li>RDEFormat Mode: Processes RDE format files with structured data</li> <li>MultiDataTile Mode: Handles multiple data files in flat structure</li> <li>ExcelInvoice Mode: Processes Excel-based invoice data</li> <li>Invoice Mode: Standard invoice processing</li> <li>SmartTableInvoice Mode: Processes SmartTable-generated data</li> </ol>"},{"location":"rdetoolkit/processing/#quick-start","title":"Quick Start","text":""},{"location":"rdetoolkit/processing/#basic-usage","title":"Basic Usage","text":"<pre><code>from rdetoolkit.processing import PipelineFactory, ProcessingContext\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\n# Create processing context\ncontext = ProcessingContext(\n    index=\"0\",\n    srcpaths=input_paths,\n    resource_paths=output_paths,\n    datasets_function=None,\n    mode_name=\"Invoice\"\n)\n\n# Create and execute pipeline\npipeline = PipelineFactory.create_pipeline(\"invoice\")\nresult = pipeline.execute(context)\n</code></pre>"},{"location":"rdetoolkit/processing/#custom-pipeline-creation","title":"Custom Pipeline Creation","text":"<pre><code>from rdetoolkit.processing import Pipeline\nfrom rdetoolkit.processing.processors import FileCopier, DatasetRunner, ThumbnailGenerator\n\n# Build custom pipeline\npipeline = (Pipeline()\n    .add(FileCopier())\n    .add(DatasetRunner())\n    .add(ThumbnailGenerator()))\n\n# Execute pipeline\nresult = pipeline.execute(context)\n</code></pre>"},{"location":"rdetoolkit/processing/#module-structure","title":"Module Structure","text":"<pre><code>processing/\n\u251c\u2500\u2500 __init__.py          # Main module exports\n\u251c\u2500\u2500 context.py           # Processing context management\n\u251c\u2500\u2500 factories.py         # Pipeline factory and builders\n\u251c\u2500\u2500 pipeline.py          # Core pipeline and processor classes\n\u2514\u2500\u2500 processors/          # Individual processor implementations\n    \u251c\u2500\u2500 __init__.py      # Processor exports\n    \u251c\u2500\u2500 datasets.py      # Custom dataset processing\n    \u251c\u2500\u2500 descriptions.py  # Description updates\n    \u251c\u2500\u2500 files.py         # File operations\n    \u251c\u2500\u2500 invoice.py       # Invoice initialization\n    \u251c\u2500\u2500 thumbnails.py    # Thumbnail generation\n    \u251c\u2500\u2500 validation.py    # Data validation\n    \u2514\u2500\u2500 variables.py     # Variable replacement\n</code></pre>"},{"location":"rdetoolkit/processing/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/processing/#pipeline-execution","title":"Pipeline Execution","text":"<ul> <li>Sequential Processing: Processors execute in order</li> <li>Context Sharing: All processors share the same context</li> <li>Error Handling: Comprehensive error handling and logging</li> <li>Status Reporting: Detailed execution status and results</li> </ul>"},{"location":"rdetoolkit/processing/#processor-design","title":"Processor Design","text":"<ul> <li>Stateless: Processors maintain no internal state</li> <li>Idempotent: Can be safely re-executed</li> <li>Configurable: Behavior controlled by context configuration</li> <li>Extensible: Easy to add new processing capabilities</li> </ul>"},{"location":"rdetoolkit/processing/#factory-pattern","title":"Factory Pattern","text":"<ul> <li>Mode-based Creation: Automatic pipeline setup for different modes</li> <li>Backward Compatibility: Support for legacy mode names</li> <li>Extensible: Easy addition of new processing modes</li> </ul>"},{"location":"rdetoolkit/processing/#error-handling","title":"Error Handling","text":"<p>The processing module provides comprehensive error handling:</p> <pre><code>try:\n    result = pipeline.execute(context)\n    if result.status == \"success\":\n        print(\"Processing completed successfully\")\n    else:\n        print(f\"Processing failed: {result.error_message}\")\nexcept Exception as e:\n    print(f\"Pipeline execution failed: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Memory Efficient: Streaming processing where possible</li> <li>Parallel Processing: Processor design supports parallel execution</li> <li>Resource Management: Proper cleanup and resource management</li> <li>Logging: Comprehensive logging for debugging and monitoring</li> </ul>"},{"location":"rdetoolkit/processing/#migration-from-legacy-code","title":"Migration from Legacy Code","text":"<p>The processing module is designed to be backward compatible with existing mode-based processing:</p> <pre><code># Legacy approach\nfrom rdetoolkit.modeproc import invoice_mode_process\n\n# New approach\nfrom rdetoolkit.processing import PipelineFactory\n\npipeline = PipelineFactory.create_pipeline(\"invoice\")\nresult = pipeline.execute(context)\n</code></pre>"},{"location":"rdetoolkit/processing/#see-also","title":"See Also","text":"<ul> <li>Context Management - Processing context and state management</li> <li>Pipeline Architecture - Core pipeline and processor classes</li> <li>Factory Pattern - Pipeline creation and builders</li> <li>Processors - Individual processor implementations</li> </ul>"},{"location":"rdetoolkit/processing/context/","title":"Processing Context","text":"<p>The <code>rdetoolkit.processing.context</code> module provides the <code>ProcessingContext</code> class, which encapsulates all the information needed for processing operations across different modes.</p>"},{"location":"rdetoolkit/processing/context/#overview","title":"Overview","text":"<p>The <code>ProcessingContext</code> serves as a centralized container for all processing-related data, configuration, and resources. It provides a consistent interface for processors to access input paths, output resources, and mode-specific information.</p>"},{"location":"rdetoolkit/processing/context/#classes","title":"Classes","text":""},{"location":"rdetoolkit/processing/context/#processingcontext","title":"ProcessingContext","text":"<p>A dataclass that encapsulates all information needed for processing operations in different modes (RDEFormat, MultiFile, ExcelInvoice, etc.).</p>"},{"location":"rdetoolkit/processing/context/#constructor","title":"Constructor","text":"<pre><code>@dataclass\nclass ProcessingContext:\n    index: str\n    srcpaths: RdeInputDirPaths\n    resource_paths: RdeOutputResourcePath\n    datasets_function: _CallbackType | None\n    mode_name: str\n    excel_file: Path | None = None\n    excel_index: int | None = None\n    smarttable_file: Path | None = None\n</code></pre> <p>Parameters: - <code>index</code> (str): Processing index identifier - <code>srcpaths</code> (RdeInputDirPaths): Input directory paths configuration - <code>resource_paths</code> (RdeOutputResourcePath): Output resource paths - <code>datasets_function</code> (Optional[_CallbackType]): Custom dataset processing function - <code>mode_name</code> (str): Processing mode name - <code>excel_file</code> (Optional[Path]): Excel invoice file path (for Excel mode) - <code>excel_index</code> (Optional[int]): Excel processing index (for Excel mode) - <code>smarttable_file</code> (Optional[Path]): SmartTable file path (for SmartTable mode)</p>"},{"location":"rdetoolkit/processing/context/#properties","title":"Properties","text":""},{"location":"rdetoolkit/processing/context/#basedir","title":"basedir","text":"<p>Get the base directory for the processing operation.</p> <pre><code>@property\ndef basedir(self) -&gt; str\n</code></pre> <p>Returns: - <code>str</code>: Base directory path from the first raw file, or empty string if no raw files</p> <p>Example: <pre><code>context = ProcessingContext(...)\nprint(f\"Base directory: {context.basedir}\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/context/#invoice_dst_filepath","title":"invoice_dst_filepath","text":"<p>Get the destination invoice file path.</p> <pre><code>@property\ndef invoice_dst_filepath(self) -&gt; Path\n</code></pre> <p>Returns: - <code>Path</code>: Path to the output invoice.json file</p> <p>Example: <pre><code>invoice_path = context.invoice_dst_filepath\n# Returns: Path(\"data/divided/0001/invoice/invoice.json\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/context/#schema_path","title":"schema_path","text":"<p>Get the invoice schema file path.</p> <pre><code>@property\ndef schema_path(self) -&gt; Path\n</code></pre> <p>Returns: - <code>Path</code>: Path to the invoice.schema.json file in tasksupport directory</p> <p>Example: <pre><code>schema_path = context.schema_path\n# Returns: Path(\"data/tasksupport/invoice.schema.json\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/context/#metadata_def_path","title":"metadata_def_path","text":"<p>Get the metadata definition file path.</p> <pre><code>@property\ndef metadata_def_path(self) -&gt; Path\n</code></pre> <p>Returns: - <code>Path</code>: Path to the metadata-def.json file in tasksupport directory</p> <p>Example: <pre><code>metadata_def = context.metadata_def_path\n# Returns: Path(\"data/tasksupport/metadata-def.json\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/context/#metadata_path","title":"metadata_path","text":"<p>Get the metadata.json file path.</p> <pre><code>@property\ndef metadata_path(self) -&gt; Path\n</code></pre> <p>Returns: - <code>Path</code>: Path to the output metadata.json file</p> <p>Example: <pre><code>metadata_path = context.metadata_path\n# Returns: Path(\"data/divided/0001/meta/metadata.json\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/context/#is_excel_mode","title":"is_excel_mode","text":"<p>Check if this is Excel invoice processing mode.</p> <pre><code>@property\ndef is_excel_mode(self) -&gt; bool\n</code></pre> <p>Returns: - <code>bool</code>: True if both excel_file and excel_index are set</p> <p>Example: <pre><code>if context.is_excel_mode:\n    print(\"Processing in Excel invoice mode\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/context/#excel_invoice_file","title":"excel_invoice_file","text":"<p>Get the Excel invoice file path (for Excel mode only).</p> <pre><code>@property\ndef excel_invoice_file(self) -&gt; Path\n</code></pre> <p>Returns: - <code>Path</code>: Path to the Excel invoice file</p> <p>Raises: - <code>ValueError</code>: If excel_file is not set for this context</p> <p>Example: <pre><code>if context.is_excel_mode:\n    excel_file = context.excel_invoice_file\n    print(f\"Excel file: {excel_file}\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/context/#is_smarttable_mode","title":"is_smarttable_mode","text":"<p>Check if this is SmartTable processing mode.</p> <pre><code>@property\ndef is_smarttable_mode(self) -&gt; bool\n</code></pre> <p>Returns: - <code>bool</code>: True if smarttable_file is set</p> <p>Example: <pre><code>if context.is_smarttable_mode:\n    print(\"Processing in SmartTable mode\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/context/#smarttable_invoice_file","title":"smarttable_invoice_file","text":"<p>Get the SmartTable file path (for SmartTable mode only).</p> <pre><code>@property\ndef smarttable_invoice_file(self) -&gt; Path\n</code></pre> <p>Returns: - <code>Path</code>: Path to the SmartTable file</p> <p>Raises: - <code>ValueError</code>: If smarttable_file is not set for this context</p> <p>Example: <pre><code>if context.is_smarttable_mode:\n    smarttable_file = context.smarttable_invoice_file\n    print(f\"SmartTable file: {smarttable_file}\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/context/#usage-examples","title":"Usage Examples","text":""},{"location":"rdetoolkit/processing/context/#basic-context-creation","title":"Basic Context Creation","text":"<pre><code>from rdetoolkit.processing.context import ProcessingContext\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\nfrom pathlib import Path\n\n# Create input and output paths\nsrcpaths = RdeInputDirPaths(\n    inputdata=Path(\"data/inputdata\"),\n    invoice=Path(\"data/invoice\"),\n    tasksupport=Path(\"data/tasksupport\")\n)\n\nresource_paths = RdeOutputResourcePath(\n    raw=Path(\"data/divided/0001/raw\"),\n    rawfiles=(Path(\"data/temp/sample.txt\"),),\n    struct=Path(\"data/divided/0001/structured\"),\n    main_image=Path(\"data/divided/0001/main_image\"),\n    # ... other paths\n)\n\n# Create processing context\ncontext = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=None,\n    mode_name=\"Invoice\"\n)\n</code></pre>"},{"location":"rdetoolkit/processing/context/#excel-mode-context","title":"Excel Mode Context","text":"<pre><code># Create context for Excel invoice processing\nexcel_context = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=None,\n    mode_name=\"ExcelInvoice\",\n    excel_file=Path(\"data/inputdata/dataset_excel_invoice.xlsx\"),\n    excel_index=1\n)\n\n# Check mode and access Excel-specific properties\nif excel_context.is_excel_mode:\n    excel_file = excel_context.excel_invoice_file\n    print(f\"Processing Excel file: {excel_file}\")\n</code></pre>"},{"location":"rdetoolkit/processing/context/#smarttable-mode-context","title":"SmartTable Mode Context","text":"<pre><code># Create context for SmartTable processing\nsmarttable_context = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=None,\n    mode_name=\"SmartTableInvoice\",\n    smarttable_file=Path(\"data/inputdata/smarttable_data.csv\")\n)\n\n# Check mode and access SmartTable-specific properties\nif smarttable_context.is_smarttable_mode:\n    smarttable_file = smarttable_context.smarttable_invoice_file\n    print(f\"Processing SmartTable file: {smarttable_file}\")\n</code></pre>"},{"location":"rdetoolkit/processing/context/#using-context-in-processors","title":"Using Context in Processors","text":"<pre><code>from rdetoolkit.processing.pipeline import Processor\n\nclass CustomProcessor(Processor):\n    def process(self, context: ProcessingContext) -&gt; None:\n        # Access input configuration\n        config = context.srcpaths.config\n\n        # Get output paths\n        raw_dir = context.resource_paths.raw\n        structured_dir = context.resource_paths.struct\n\n        # Check processing mode\n        if context.is_excel_mode:\n            excel_file = context.excel_invoice_file\n            # Process Excel-specific logic\n        elif context.is_smarttable_mode:\n            smarttable_file = context.smarttable_invoice_file\n            # Process SmartTable-specific logic\n        else:\n            # Standard processing logic\n            pass\n\n        # Access common paths\n        invoice_dst = context.invoice_dst_filepath\n        metadata_path = context.metadata_path\n</code></pre>"},{"location":"rdetoolkit/processing/context/#context-with-custom-dataset-function","title":"Context with Custom Dataset Function","text":"<pre><code>def custom_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n    \"\"\"Custom processing function.\"\"\"\n    print(f\"Processing {len(resource_paths.rawfiles)} files\")\n    # Custom processing logic here\n\n# Create context with custom function\ncontext = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=custom_dataset_function,\n    mode_name=\"MultiDataTile\"\n)\n</code></pre>"},{"location":"rdetoolkit/processing/context/#error-handling","title":"Error Handling","text":""},{"location":"rdetoolkit/processing/context/#safe-property-access","title":"Safe Property Access","text":"<pre><code># Safe access to mode-specific properties\ntry:\n    if context.is_excel_mode:\n        excel_file = context.excel_invoice_file\n        print(f\"Excel file: {excel_file}\")\nexcept ValueError as e:\n    print(f\"Excel file not available: {e}\")\n\ntry:\n    if context.is_smarttable_mode:\n        smarttable_file = context.smarttable_invoice_file\n        print(f\"SmartTable file: {smarttable_file}\")\nexcept ValueError as e:\n    print(f\"SmartTable file not available: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/context/#path-validation","title":"Path Validation","text":"<pre><code># Validate paths before processing\nif not context.schema_path.exists():\n    raise FileNotFoundError(f\"Schema file not found: {context.schema_path}\")\n\nif not context.metadata_def_path.exists():\n    print(f\"Warning: Metadata definition not found: {context.metadata_def_path}\")\n</code></pre>"},{"location":"rdetoolkit/processing/context/#best-practices","title":"Best Practices","text":"<ol> <li>Immutable Context: Treat the context as immutable during processing</li> <li>Path Validation: Always validate paths before using them</li> <li>Mode Checking: Use mode properties to conditionally access mode-specific data</li> <li>Error Handling: Handle ValueError exceptions when accessing mode-specific properties</li> <li>Resource Management: Use context paths consistently across processors</li> </ol>"},{"location":"rdetoolkit/processing/context/#see-also","title":"See Also","text":"<ul> <li>Pipeline Architecture - Core pipeline and processor classes</li> <li>Processors - Individual processor implementations</li> <li>Models - Data type definitions</li> </ul>"},{"location":"rdetoolkit/processing/factories/","title":"Pipeline Factory","text":"<p>The <code>rdetoolkit.processing.factories</code> module provides factory classes and builders for creating predefined processing pipelines. It implements the Factory and Builder design patterns to automate pipeline construction for different processing modes.</p>"},{"location":"rdetoolkit/processing/factories/#overview","title":"Overview","text":"<p>The factory module provides:</p> <ul> <li>Automated Pipeline Creation: Pre-configured pipelines for different modes</li> <li>Builder Pattern: Flexible pipeline construction</li> <li>Mode Enumeration: Standardized processing mode definitions</li> <li>Backward Compatibility: Support for legacy method names</li> <li>Extensibility: Easy addition of new modes and pipelines</li> </ul>"},{"location":"rdetoolkit/processing/factories/#classes-and-enums","title":"Classes and Enums","text":""},{"location":"rdetoolkit/processing/factories/#processingmode","title":"ProcessingMode","text":"<p>Enumeration of supported processing modes.</p> <pre><code>class ProcessingMode(Enum):\n    \"\"\"Enumeration of supported processing modes.\"\"\"\n    RDEFORMAT = \"rdeformat\"\n    MULTIDATATILE = \"multidatatile\"\n    EXCELINVOICE = \"excelinvoice\"\n    INVOICE = \"invoice\"\n    SMARTTABLEINVOICE = \"smarttableinvoice\"\n</code></pre> <p>Supported Modes: - RDEFORMAT: Processes RDE format files with structured data - MULTIDATATILE: Handles multiple data files in flat structure - EXCELINVOICE: Processes Excel-based invoice data - INVOICE: Standard invoice processing - SMARTTABLEINVOICE: Processes SmartTable-generated data</p>"},{"location":"rdetoolkit/processing/factories/#pipelinebuilder","title":"PipelineBuilder","text":"<p>Abstract base class for pipeline builders.</p> <pre><code>class PipelineBuilder(ABC):\n    \"\"\"Abstract base class for pipeline builders.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#methods","title":"Methods","text":""},{"location":"rdetoolkit/processing/factories/#build","title":"build","text":"<p>Build and return a configured pipeline.</p> <pre><code>@abstractmethod\ndef build(self) -&gt; Pipeline\n</code></pre> <p>Returns: - <code>Pipeline</code>: Configured pipeline for the specific mode</p>"},{"location":"rdetoolkit/processing/factories/#concrete-builder-classes","title":"Concrete Builder Classes","text":""},{"location":"rdetoolkit/processing/factories/#rdeformatpipelinebuilder","title":"RDEFormatPipelineBuilder","text":"<p>Builder for RDEFormat mode pipelines.</p> <pre><code>def build(self) -&gt; Pipeline\n</code></pre> <p>Pipeline Configuration: 1. <code>StandardInvoiceInitializer</code> - Initialize invoice from original 2. <code>RDEFormatFileCopier</code> - Copy files by directory structure 3. <code>DatasetRunner</code> - Execute custom dataset processing 4. <code>ThumbnailGenerator</code> - Generate thumbnail images 5. <code>DescriptionUpdater</code> - Update descriptions with features 6. <code>MetadataValidator</code> - Validate metadata files 7. <code>InvoiceValidator</code> - Validate invoice files</p>"},{"location":"rdetoolkit/processing/factories/#multifilepipelinebuilder","title":"MultiFilePipelineBuilder","text":"<p>Builder for MultiFile mode pipelines.</p> <pre><code>def build(self) -&gt; Pipeline\n</code></pre> <p>Pipeline Configuration: 1. <code>StandardInvoiceInitializer</code> - Initialize invoice from original 2. <code>FileCopier</code> - Copy raw files to output directories 3. <code>DatasetRunner</code> - Execute custom dataset processing 4. <code>VariableApplier</code> - Apply magic variables to invoice 5. <code>ThumbnailGenerator</code> - Generate thumbnail images 6. <code>DescriptionUpdater</code> - Update descriptions with features 7. <code>MetadataValidator</code> - Validate metadata files 8. <code>InvoiceValidator</code> - Validate invoice files</p>"},{"location":"rdetoolkit/processing/factories/#excelinvoicepipelinebuilder","title":"ExcelInvoicePipelineBuilder","text":"<p>Builder for ExcelInvoice mode pipelines.</p> <pre><code>def build(self) -&gt; Pipeline\n</code></pre> <p>Pipeline Configuration: 1. <code>ExcelInvoiceInitializer</code> - Initialize invoice from Excel data 2. <code>FileCopier</code> - Copy raw files to output directories 3. <code>DatasetRunner</code> - Execute custom dataset processing 4. <code>VariableApplier</code> - Apply magic variables to invoice 5. <code>ThumbnailGenerator</code> - Generate thumbnail images 6. <code>DescriptionUpdater</code> - Update descriptions with features 7. <code>MetadataValidator</code> - Validate metadata files 8. <code>InvoiceValidator</code> - Validate invoice files</p>"},{"location":"rdetoolkit/processing/factories/#invoicepipelinebuilder","title":"InvoicePipelineBuilder","text":"<p>Builder for Invoice mode pipelines.</p> <pre><code>def build(self) -&gt; Pipeline\n</code></pre> <p>Pipeline Configuration: 1. <code>FileCopier</code> - Copy raw files to output directories 2. <code>DatasetRunner</code> - Execute custom dataset processing 3. <code>ThumbnailGenerator</code> - Generate thumbnail images 4. <code>VariableApplier</code> - Apply magic variables to invoice 5. <code>DescriptionUpdater</code> - Update descriptions with features 6. <code>MetadataValidator</code> - Validate metadata files 7. <code>InvoiceValidator</code> - Validate invoice files</p>"},{"location":"rdetoolkit/processing/factories/#smarttableinvoicepipelinebuilder","title":"SmartTableInvoicePipelineBuilder","text":"<p>Builder for SmartTableInvoice mode pipelines.</p> <pre><code>def build(self) -&gt; Pipeline\n</code></pre> <p>Pipeline Configuration: 1. <code>SmartTableInvoiceInitializer</code> - Initialize invoice from SmartTable data 2. <code>SmartTableFileCopier</code> - Copy files excluding SmartTable CSVs 3. <code>DatasetRunner</code> - Execute custom dataset processing 4. <code>ThumbnailGenerator</code> - Generate thumbnail images 5. <code>VariableApplier</code> - Apply magic variables to invoice 6. <code>DescriptionUpdater</code> - Update descriptions with features 7. <code>MetadataValidator</code> - Validate metadata files 8. <code>InvoiceValidator</code> - Validate invoice files</p>"},{"location":"rdetoolkit/processing/factories/#pipelinefactory","title":"PipelineFactory","text":"<p>Factory for creating predefined processing pipelines with Pythonic design.</p> <pre><code>class PipelineFactory:\n    \"\"\"Factory for creating predefined processing pipelines.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#class-methods","title":"Class Methods","text":""},{"location":"rdetoolkit/processing/factories/#create_pipeline","title":"create_pipeline","text":"<p>Create a pipeline for the specified mode.</p> <pre><code>@classmethod\ndef create_pipeline(cls, mode: str | ProcessingMode) -&gt; Pipeline\n</code></pre> <p>Parameters: - <code>mode</code> (str | ProcessingMode): Processing mode (string or ProcessingMode enum)</p> <p>Returns: - <code>Pipeline</code>: Pipeline configured for the specified mode</p> <p>Raises: - <code>ValueError</code>: If mode is not supported</p> <p>Example: <pre><code>from rdetoolkit.processing.factories import PipelineFactory\n\n# Using string mode\npipeline = PipelineFactory.create_pipeline(\"invoice\")\n\n# Using enum mode\nfrom rdetoolkit.processing.factories import ProcessingMode\npipeline = PipelineFactory.create_pipeline(ProcessingMode.INVOICE)\n</code></pre></p>"},{"location":"rdetoolkit/processing/factories/#get_supported_modes","title":"get_supported_modes","text":"<p>Get list of supported mode names.</p> <pre><code>@classmethod\ndef get_supported_modes(cls) -&gt; list[str]\n</code></pre> <p>Returns: - <code>list[str]</code>: List of supported mode strings</p> <p>Example: <pre><code>modes = PipelineFactory.get_supported_modes()\nprint(f\"Supported modes: {', '.join(modes)}\")\n# Output: Supported modes: rdeformat, multidatatile, excelinvoice, invoice, smarttableinvoice\n</code></pre></p>"},{"location":"rdetoolkit/processing/factories/#static-methods-backward-compatibility","title":"Static Methods (Backward Compatibility)","text":""},{"location":"rdetoolkit/processing/factories/#create_rdeformat_pipeline","title":"create_rdeformat_pipeline","text":"<p>Create a pipeline for RDEFormat mode processing.</p> <pre><code>@staticmethod\ndef create_rdeformat_pipeline() -&gt; Pipeline\n</code></pre> <p>Returns: - <code>Pipeline</code>: Pipeline configured for RDEFormat mode</p>"},{"location":"rdetoolkit/processing/factories/#create_multifile_pipeline","title":"create_multifile_pipeline","text":"<p>Create a pipeline for MultiFile mode processing.</p> <pre><code>@staticmethod\ndef create_multifile_pipeline() -&gt; Pipeline\n</code></pre> <p>Returns: - <code>Pipeline</code>: Pipeline configured for MultiFile mode</p>"},{"location":"rdetoolkit/processing/factories/#create_excel_pipeline","title":"create_excel_pipeline","text":"<p>Create a pipeline for ExcelInvoice mode processing.</p> <pre><code>@staticmethod\ndef create_excel_pipeline() -&gt; Pipeline\n</code></pre> <p>Returns: - <code>Pipeline</code>: Pipeline configured for ExcelInvoice mode</p>"},{"location":"rdetoolkit/processing/factories/#create_invoice_pipeline","title":"create_invoice_pipeline","text":"<p>Create a pipeline for Invoice mode processing.</p> <pre><code>@staticmethod\ndef create_invoice_pipeline() -&gt; Pipeline\n</code></pre> <p>Returns: - <code>Pipeline</code>: Pipeline configured for Invoice mode</p>"},{"location":"rdetoolkit/processing/factories/#create_smarttable_invoice_pipeline","title":"create_smarttable_invoice_pipeline","text":"<p>Create a pipeline for SmartTableInvoice mode processing.</p> <pre><code>@staticmethod\ndef create_smarttable_invoice_pipeline() -&gt; Pipeline\n</code></pre> <p>Returns: - <code>Pipeline</code>: Pipeline configured for SmartTableInvoice mode</p>"},{"location":"rdetoolkit/processing/factories/#usage-examples","title":"Usage Examples","text":""},{"location":"rdetoolkit/processing/factories/#basic-pipeline-creation","title":"Basic Pipeline Creation","text":"<pre><code>from rdetoolkit.processing.factories import PipelineFactory\n\n# Create pipelines for different modes\ninvoice_pipeline = PipelineFactory.create_pipeline(\"invoice\")\nexcel_pipeline = PipelineFactory.create_pipeline(\"excelinvoice\")\nsmarttable_pipeline = PipelineFactory.create_pipeline(\"smarttableinvoice\")\n\n# Execute pipeline\nresult = invoice_pipeline.execute(context)\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#dynamic-mode-selection","title":"Dynamic Mode Selection","text":"<pre><code>from rdetoolkit.processing.factories import PipelineFactory\n\ndef create_pipeline_for_mode(mode_name: str):\n    \"\"\"Create pipeline based on mode name with validation.\"\"\"\n\n    supported_modes = PipelineFactory.get_supported_modes()\n\n    if mode_name.lower() not in supported_modes:\n        raise ValueError(f\"Unsupported mode: {mode_name}. Supported: {supported_modes}\")\n\n    return PipelineFactory.create_pipeline(mode_name.lower())\n\n# Usage\ntry:\n    pipeline = create_pipeline_for_mode(\"Invoice\")\n    print(f\"Created pipeline with {pipeline.get_processor_count()} processors\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#mode-based-processing","title":"Mode-Based Processing","text":"<pre><code>from rdetoolkit.processing.factories import PipelineFactory, ProcessingMode\n\ndef process_data_by_mode(context, mode_name: str):\n    \"\"\"Process data using the appropriate pipeline for the mode.\"\"\"\n\n    # Convert string to enum for validation\n    try:\n        mode = ProcessingMode(mode_name.lower())\n    except ValueError:\n        supported = [m.value for m in ProcessingMode]\n        raise ValueError(f\"Unsupported mode: {mode_name}. Supported: {supported}\")\n\n    # Create and execute pipeline\n    pipeline = PipelineFactory.create_pipeline(mode)\n\n    print(f\"Processing in {mode.value} mode\")\n    print(f\"Pipeline processors: {pipeline.get_processor_names()}\")\n\n    result = pipeline.execute(context)\n    return result\n\n# Usage\nresult = process_data_by_mode(context, \"invoice\")\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#custom-builder-implementation","title":"Custom Builder Implementation","text":"<pre><code>from rdetoolkit.processing.factories import PipelineBuilder\nfrom rdetoolkit.processing import Pipeline\nfrom rdetoolkit.processing.processors import *\n\nclass CustomPipelineBuilder(PipelineBuilder):\n    \"\"\"Custom builder for specialized processing.\"\"\"\n\n    def build(self) -&gt; Pipeline:\n        \"\"\"Build custom pipeline with specific processors.\"\"\"\n        return (self._create_base_pipeline()\n                .add(FileCopier())\n                .add(CustomDataProcessor())  # Custom processor\n                .add(DatasetRunner())\n                .add(ThumbnailGenerator())\n                .add(InvoiceValidator()))\n\n# Use custom builder\nbuilder = CustomPipelineBuilder()\ncustom_pipeline = builder.build()\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#pipeline-inspection","title":"Pipeline Inspection","text":"<pre><code>from rdetoolkit.processing.factories import PipelineFactory\n\ndef inspect_pipeline(mode: str):\n    \"\"\"Inspect pipeline configuration for a given mode.\"\"\"\n\n    pipeline = PipelineFactory.create_pipeline(mode)\n\n    print(f\"Pipeline for {mode} mode:\")\n    print(f\"  Processor count: {pipeline.get_processor_count()}\")\n    print(f\"  Processors:\")\n\n    for i, name in enumerate(pipeline.get_processor_names(), 1):\n        print(f\"    {i}. {name}\")\n\n# Inspect all supported modes\nfor mode in PipelineFactory.get_supported_modes():\n    inspect_pipeline(mode)\n    print()\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#backward-compatibility-usage","title":"Backward Compatibility Usage","text":"<pre><code>from rdetoolkit.processing.factories import PipelineFactory\n\n# Legacy method calls (backward compatibility)\nrde_pipeline = PipelineFactory.create_rdeformat_pipeline()\nmulti_pipeline = PipelineFactory.create_multifile_pipeline()\nexcel_pipeline = PipelineFactory.create_excel_pipeline()\ninvoice_pipeline = PipelineFactory.create_invoice_pipeline()\nsmarttable_pipeline = PipelineFactory.create_smarttable_invoice_pipeline()\n\n# Modern method calls (recommended)\nrde_pipeline = PipelineFactory.create_pipeline(\"rdeformat\")\nmulti_pipeline = PipelineFactory.create_pipeline(\"multidatatile\")\nexcel_pipeline = PipelineFactory.create_pipeline(\"excelinvoice\")\ninvoice_pipeline = PipelineFactory.create_pipeline(\"invoice\")\nsmarttable_pipeline = PipelineFactory.create_pipeline(\"smarttableinvoice\")\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#error-handling","title":"Error Handling","text":"<pre><code>from rdetoolkit.processing.factories import PipelineFactory\n\ndef safe_pipeline_creation(mode: str):\n    \"\"\"Safely create pipeline with comprehensive error handling.\"\"\"\n\n    try:\n        # Validate mode\n        supported_modes = PipelineFactory.get_supported_modes()\n        if mode.lower() not in supported_modes:\n            print(f\"Error: '{mode}' is not supported\")\n            print(f\"Supported modes: {', '.join(supported_modes)}\")\n            return None\n\n        # Create pipeline\n        pipeline = PipelineFactory.create_pipeline(mode)\n\n        print(f\"\u2713 Successfully created {mode} pipeline\")\n        print(f\"  Processors: {', '.join(pipeline.get_processor_names())}\")\n\n        return pipeline\n\n    except ValueError as e:\n        print(f\"\u2717 Value error: {e}\")\n        return None\n    except Exception as e:\n        print(f\"\u2717 Unexpected error: {e}\")\n        return None\n\n# Usage\npipeline = safe_pipeline_creation(\"invoice\")\nif pipeline:\n    result = pipeline.execute(context)\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#extending-the-factory","title":"Extending the Factory","text":""},{"location":"rdetoolkit/processing/factories/#adding-new-modes","title":"Adding New Modes","text":"<pre><code>from rdetoolkit.processing.factories import PipelineBuilder, PipelineFactory\nfrom rdetoolkit.processing import Pipeline\nfrom enum import Enum\n\n# 1. Extend ProcessingMode enum\nclass ExtendedProcessingMode(Enum):\n    RDEFORMAT = \"rdeformat\"\n    MULTIDATATILE = \"multidatatile\"\n    EXCELINVOICE = \"excelinvoice\"\n    INVOICE = \"invoice\"\n    SMARTTABLEINVOICE = \"smarttableinvoice\"\n    CUSTOM_MODE = \"custommode\"  # New mode\n\n# 2. Create custom builder\nclass CustomModePipelineBuilder(PipelineBuilder):\n    def build(self) -&gt; Pipeline:\n        return (self._create_base_pipeline()\n                .add(CustomProcessor())\n                .add(DatasetRunner())\n                .add(InvoiceValidator()))\n\n# 3. Extend factory (would require modifying the original class)\n# This is an example of how you might extend the factory\nclass ExtendedPipelineFactory(PipelineFactory):\n    _builders = {\n        **PipelineFactory._builders,\n        ExtendedProcessingMode.CUSTOM_MODE: CustomModePipelineBuilder,\n    }\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#custom-factory-pattern","title":"Custom Factory Pattern","text":"<pre><code>from typing import Dict, Type\nfrom rdetoolkit.processing.factories import PipelineBuilder\nfrom rdetoolkit.processing import Pipeline\n\nclass CustomPipelineFactory:\n    \"\"\"Custom factory for application-specific pipelines.\"\"\"\n\n    def __init__(self):\n        self._builders: Dict[str, Type[PipelineBuilder]] = {}\n\n    def register_builder(self, mode: str, builder_class: Type[PipelineBuilder]):\n        \"\"\"Register a new builder for a mode.\"\"\"\n        self._builders[mode.lower()] = builder_class\n\n    def create_pipeline(self, mode: str) -&gt; Pipeline:\n        \"\"\"Create pipeline for the specified mode.\"\"\"\n        builder_class = self._builders.get(mode.lower())\n        if not builder_class:\n            raise ValueError(f\"No builder registered for mode: {mode}\")\n\n        builder = builder_class()\n        return builder.build()\n\n    def get_supported_modes(self) -&gt; list[str]:\n        \"\"\"Get list of supported modes.\"\"\"\n        return list(self._builders.keys())\n\n# Usage\nfactory = CustomPipelineFactory()\nfactory.register_builder(\"custom\", CustomModePipelineBuilder)\npipeline = factory.create_pipeline(\"custom\")\n</code></pre>"},{"location":"rdetoolkit/processing/factories/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Lazy Instantiation: Builders create processors only when needed</li> <li>Memory Efficiency: Pipelines are lightweight objects</li> <li>Caching: Consider caching pipelines for repeated use</li> <li>Thread Safety: Factory methods are thread-safe</li> </ul>"},{"location":"rdetoolkit/processing/factories/#see-also","title":"See Also","text":"<ul> <li>Pipeline Architecture - Core pipeline and processor classes</li> <li>Processing Context - Context management and state</li> <li>Processors - Individual processor implementations</li> <li>Processing Module - Main processing module overview</li> </ul>"},{"location":"rdetoolkit/processing/pipeline/","title":"Pipeline Architecture","text":"<p>The <code>rdetoolkit.processing.pipeline</code> module provides the core pipeline architecture for sequential processing operations. It defines the base classes and interfaces for building modular, extensible processing workflows.</p>"},{"location":"rdetoolkit/processing/pipeline/#overview","title":"Overview","text":"<p>The pipeline architecture enables:</p> <ul> <li>Sequential Execution: Processors execute in defined order</li> <li>Shared Context: All processors share the same processing context</li> <li>Error Handling: Comprehensive error handling and logging</li> <li>Extensibility: Easy addition of new processing steps</li> <li>Status Reporting: Detailed execution results and error reporting</li> </ul>"},{"location":"rdetoolkit/processing/pipeline/#classes","title":"Classes","text":""},{"location":"rdetoolkit/processing/pipeline/#processor","title":"Processor","text":"<p>Abstract base class for all processing operations. Each processor represents a single step in the processing pipeline.</p> <pre><code>class Processor(ABC):\n    \"\"\"Abstract base class for processing operations.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#methods","title":"Methods","text":""},{"location":"rdetoolkit/processing/pipeline/#process","title":"process","text":"<p>Execute the processing operation.</p> <pre><code>@abstractmethod\ndef process(self, context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): The processing context containing all necessary information</p> <p>Raises: - Any exceptions that occur during processing should be allowed to propagate unless the processor is designed to handle specific error conditions</p> <p>Example: <pre><code>class CustomProcessor(Processor):\n    def process(self, context: ProcessingContext) -&gt; None:\n        # Access resources from context\n        raw_files = context.resource_paths.rawfiles\n        output_dir = context.resource_paths.struct\n\n        # Perform processing operations\n        for file in raw_files:\n            process_file(file, output_dir)\n</code></pre></p>"},{"location":"rdetoolkit/processing/pipeline/#get_name","title":"get_name","text":"<p>Get the name of this processor for logging purposes.</p> <pre><code>def get_name(self) -&gt; str\n</code></pre> <p>Returns: - <code>str</code>: The class name of the processor</p> <p>Example: <pre><code>processor = CustomProcessor()\nprint(processor.get_name())  # \"CustomProcessor\"\n</code></pre></p>"},{"location":"rdetoolkit/processing/pipeline/#pipeline","title":"Pipeline","text":"<p>Pipeline for executing a sequence of processing operations. The pipeline executes processors in the order they were added, passing the same context to each processor.</p> <pre><code>class Pipeline:\n    \"\"\"Pipeline for executing a sequence of processing operations.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#constructor","title":"Constructor","text":"<pre><code>def __init__(self) -&gt; None\n</code></pre> <p>Initialize an empty pipeline.</p> <p>Example: <pre><code>pipeline = Pipeline()\n</code></pre></p>"},{"location":"rdetoolkit/processing/pipeline/#methods_1","title":"Methods","text":""},{"location":"rdetoolkit/processing/pipeline/#add","title":"add","text":"<p>Add a processor to the pipeline.</p> <pre><code>def add(self, processor: Processor) -&gt; Pipeline\n</code></pre> <p>Parameters: - <code>processor</code> (Processor): The processor to add</p> <p>Returns: - <code>Pipeline</code>: Self for method chaining</p> <p>Example: <pre><code>from rdetoolkit.processing.processors import FileCopier, DatasetRunner\n\npipeline = (Pipeline()\n    .add(FileCopier())\n    .add(DatasetRunner()))\n</code></pre></p>"},{"location":"rdetoolkit/processing/pipeline/#execute","title":"execute","text":"<p>Execute all processors in the pipeline.</p> <pre><code>def execute(self, context: ProcessingContext) -&gt; WorkflowExecutionStatus\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): The processing context</p> <p>Returns: - <code>WorkflowExecutionStatus</code>: Status indicating success or failure</p> <p>Raises: - Any exceptions from processors will propagate unless handled</p> <p>Example: <pre><code>try:\n    result = pipeline.execute(context)\n    if result.status == \"success\":\n        print(f\"Pipeline completed: {result.title}\")\n    else:\n        print(f\"Pipeline failed: {result.error_message}\")\nexcept Exception as e:\n    print(f\"Pipeline execution error: {e}\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/pipeline/#get_processor_count","title":"get_processor_count","text":"<p>Get the number of processors in this pipeline.</p> <pre><code>def get_processor_count(self) -&gt; int\n</code></pre> <p>Returns: - <code>int</code>: Number of processors in the pipeline</p> <p>Example: <pre><code>count = pipeline.get_processor_count()\nprint(f\"Pipeline has {count} processors\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/pipeline/#get_processor_names","title":"get_processor_names","text":"<p>Get the names of all processors in this pipeline.</p> <pre><code>def get_processor_names(self) -&gt; list[str]\n</code></pre> <p>Returns: - <code>list[str]</code>: List of processor names</p> <p>Example: <pre><code>names = pipeline.get_processor_names()\nprint(f\"Processors: {', '.join(names)}\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/pipeline/#usage-examples","title":"Usage Examples","text":""},{"location":"rdetoolkit/processing/pipeline/#creating-a-custom-processor","title":"Creating a Custom Processor","text":"<pre><code>from rdetoolkit.processing.pipeline import Processor\nfrom rdetoolkit.processing.context import ProcessingContext\nimport shutil\n\nclass FileBackupProcessor(Processor):\n    \"\"\"Processor that creates backups of raw files.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        backup_dir = context.resource_paths.raw.parent / \"backup\"\n        backup_dir.mkdir(exist_ok=True)\n\n        for raw_file in context.resource_paths.rawfiles:\n            backup_path = backup_dir / raw_file.name\n            shutil.copy2(raw_file, backup_path)\n\n        print(f\"Backed up {len(context.resource_paths.rawfiles)} files\")\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#building-a-custom-pipeline","title":"Building a Custom Pipeline","text":"<pre><code>from rdetoolkit.processing import Pipeline\nfrom rdetoolkit.processing.processors import (\n    FileCopier, DatasetRunner, ThumbnailGenerator, InvoiceValidator\n)\n\n# Create custom pipeline\npipeline = (Pipeline()\n    .add(FileBackupProcessor())  # Custom processor\n    .add(FileCopier())           # Standard processor\n    .add(DatasetRunner())        # Standard processor\n    .add(ThumbnailGenerator())   # Standard processor\n    .add(InvoiceValidator()))    # Standard processor\n\nprint(f\"Pipeline has {pipeline.get_processor_count()} processors\")\nprint(f\"Processors: {pipeline.get_processor_names()}\")\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#conditional-processing","title":"Conditional Processing","text":"<pre><code>class ConditionalProcessor(Processor):\n    \"\"\"Processor that performs different operations based on context.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        config = context.srcpaths.config\n\n        if context.is_excel_mode:\n            self._process_excel_mode(context)\n        elif context.is_smarttable_mode:\n            self._process_smarttable_mode(context)\n        else:\n            self._process_standard_mode(context)\n\n    def _process_excel_mode(self, context: ProcessingContext) -&gt; None:\n        excel_file = context.excel_invoice_file\n        print(f\"Processing Excel file: {excel_file}\")\n        # Excel-specific processing\n\n    def _process_smarttable_mode(self, context: ProcessingContext) -&gt; None:\n        smarttable_file = context.smarttable_invoice_file\n        print(f\"Processing SmartTable file: {smarttable_file}\")\n        # SmartTable-specific processing\n\n    def _process_standard_mode(self, context: ProcessingContext) -&gt; None:\n        print(\"Processing in standard mode\")\n        # Standard processing\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#error-handling-in-processors","title":"Error Handling in Processors","text":"<pre><code>class RobustProcessor(Processor):\n    \"\"\"Processor with comprehensive error handling.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        try:\n            self._do_processing(context)\n        except FileNotFoundError as e:\n            # Handle specific errors gracefully\n            print(f\"Warning: File not found, skipping: {e}\")\n        except Exception as e:\n            # Log error and re-raise for pipeline to handle\n            print(f\"Error in {self.get_name()}: {e}\")\n            raise\n\n    def _do_processing(self, context: ProcessingContext) -&gt; None:\n        # Actual processing logic\n        pass\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#pipeline-execution-with-status-handling","title":"Pipeline Execution with Status Handling","text":"<pre><code>def execute_pipeline_with_monitoring(pipeline: Pipeline, context: ProcessingContext):\n    \"\"\"Execute pipeline with detailed status monitoring.\"\"\"\n\n    print(f\"Starting pipeline with {pipeline.get_processor_count()} processors\")\n    print(f\"Processors: {', '.join(pipeline.get_processor_names())}\")\n\n    try:\n        result = pipeline.execute(context)\n\n        if result.status == \"success\":\n            print(f\"\u2713 Pipeline completed successfully\")\n            print(f\"  Title: {result.title}\")\n            print(f\"  Mode: {result.mode}\")\n            print(f\"  Target: {result.target}\")\n        else:\n            print(f\"\u2717 Pipeline failed\")\n            print(f\"  Error Code: {result.error_code}\")\n            print(f\"  Error Message: {result.error_message}\")\n            if result.stacktrace:\n                print(f\"  Stack Trace: {result.stacktrace}\")\n\n        return result\n\n    except Exception as e:\n        print(f\"\u2717 Pipeline execution failed with exception: {e}\")\n        raise\n\n# Usage\npipeline = Pipeline().add(FileCopier()).add(DatasetRunner())\nresult = execute_pipeline_with_monitoring(pipeline, context)\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#parallel-processing-design","title":"Parallel Processing Design","text":"<pre><code>class ParallelFileProcessor(Processor):\n    \"\"\"Processor designed for parallel execution.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        import concurrent.futures\n\n        raw_files = context.resource_paths.rawfiles\n        output_dir = context.resource_paths.struct\n\n        # Process files in parallel\n        with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n            futures = [\n                executor.submit(self._process_single_file, file, output_dir)\n                for file in raw_files\n            ]\n\n            # Wait for all tasks to complete\n            for future in concurrent.futures.as_completed(futures):\n                try:\n                    future.result()\n                except Exception as e:\n                    print(f\"Error processing file: {e}\")\n                    raise\n\n    def _process_single_file(self, file_path, output_dir):\n        \"\"\"Process a single file (thread-safe).\"\"\"\n        # File processing logic here\n        pass\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#design-patterns","title":"Design Patterns","text":""},{"location":"rdetoolkit/processing/pipeline/#template-method-pattern","title":"Template Method Pattern","text":"<pre><code>class TemplateProcessor(Processor):\n    \"\"\"Template processor with customizable steps.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        self._pre_process(context)\n        self._main_process(context)\n        self._post_process(context)\n\n    def _pre_process(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Override in subclasses for pre-processing.\"\"\"\n        pass\n\n    def _main_process(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Override in subclasses for main processing.\"\"\"\n        raise NotImplementedError\n\n    def _post_process(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Override in subclasses for post-processing.\"\"\"\n        pass\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#strategy-pattern","title":"Strategy Pattern","text":"<pre><code>class StrategyProcessor(Processor):\n    \"\"\"Processor using strategy pattern for different operations.\"\"\"\n\n    def __init__(self, strategy_name: str):\n        self._strategy_name = strategy_name\n        self._strategies = {\n            \"compress\": self._compress_strategy,\n            \"encrypt\": self._encrypt_strategy,\n            \"archive\": self._archive_strategy,\n        }\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        strategy = self._strategies.get(self._strategy_name)\n        if not strategy:\n            raise ValueError(f\"Unknown strategy: {self._strategy_name}\")\n\n        strategy(context)\n\n    def _compress_strategy(self, context: ProcessingContext) -&gt; None:\n        # Compression logic\n        pass\n\n    def _encrypt_strategy(self, context: ProcessingContext) -&gt; None:\n        # Encryption logic\n        pass\n\n    def _archive_strategy(self, context: ProcessingContext) -&gt; None:\n        # Archiving logic\n        pass\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#error-handling","title":"Error Handling","text":""},{"location":"rdetoolkit/processing/pipeline/#pipeline-error-handling","title":"Pipeline Error Handling","text":"<p>The pipeline provides comprehensive error handling:</p> <ol> <li>Processor Errors: Caught and converted to StructuredError</li> <li>Status Creation: Automatic creation of success/failure status</li> <li>Logging: Detailed logging of all operations</li> <li>Exception Propagation: Controlled exception handling</li> </ol>"},{"location":"rdetoolkit/processing/pipeline/#custom-error-handling","title":"Custom Error Handling","text":"<pre><code>class ErrorHandlingProcessor(Processor):\n    \"\"\"Processor with custom error handling strategies.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        try:\n            self._risky_operation(context)\n        except FileNotFoundError:\n            # Graceful degradation\n            self._fallback_operation(context)\n        except PermissionError as e:\n            # Critical error - re-raise\n            raise StructuredError(\n                emsg=f\"Permission denied: {e}\",\n                ecode=403,\n                eobj=e\n            )\n        except Exception as e:\n            # Log and re-raise\n            logger.error(f\"Unexpected error in {self.get_name()}: {e}\")\n            raise\n</code></pre>"},{"location":"rdetoolkit/processing/pipeline/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Stateless Design: Processors should be stateless for thread safety</li> <li>Resource Management: Proper cleanup of resources in processors</li> <li>Memory Usage: Avoid loading large files entirely into memory</li> <li>I/O Operations: Use async operations for I/O-heavy processors</li> <li>Caching: Cache expensive operations where appropriate</li> </ul>"},{"location":"rdetoolkit/processing/pipeline/#see-also","title":"See Also","text":"<ul> <li>Processing Context - Context management and state</li> <li>Pipeline Factory - Automated pipeline creation</li> <li>Processors - Individual processor implementations</li> <li>Models - Status and result data structures</li> </ul>"},{"location":"rdetoolkit/processing/processors/","title":"Processors","text":"<p>The <code>rdetoolkit.processing.processors</code> module provides individual processor implementations for the processing pipeline. Each processor handles a specific aspect of the data processing workflow.</p>"},{"location":"rdetoolkit/processing/processors/#overview","title":"Overview","text":"<p>The processors module contains specialized processing components:</p> <ul> <li>File Operations: File copying and management</li> <li>Invoice Processing: Invoice initialization and validation</li> <li>Data Processing: Custom dataset execution and variable application</li> <li>Image Processing: Thumbnail generation</li> <li>Validation: Metadata and invoice validation</li> <li>Content Updates: Description and feature updates</li> </ul>"},{"location":"rdetoolkit/processing/processors/#processor-classes","title":"Processor Classes","text":""},{"location":"rdetoolkit/processing/processors/#file-processing","title":"File Processing","text":"<ul> <li>FileCopier: Standard file copying for raw files</li> <li>RDEFormatFileCopier: Specialized copying for RDEFormat mode</li> <li>SmartTableFileCopier: Specialized copying for SmartTable mode</li> </ul>"},{"location":"rdetoolkit/processing/processors/#invoice-processing","title":"Invoice Processing","text":"<ul> <li>StandardInvoiceInitializer: Standard invoice initialization</li> <li>ExcelInvoiceInitializer: Excel-based invoice initialization</li> <li>SmartTableInvoiceInitializer: SmartTable-based invoice initialization</li> <li>InvoiceInitializerFactory: Factory for creating appropriate initializers</li> </ul>"},{"location":"rdetoolkit/processing/processors/#data-processing","title":"Data Processing","text":"<ul> <li>DatasetRunner: Executes custom dataset processing functions</li> <li>VariableApplier: Applies magic variable replacement</li> </ul>"},{"location":"rdetoolkit/processing/processors/#content-processing","title":"Content Processing","text":"<ul> <li>DescriptionUpdater: Updates descriptions with feature information</li> <li>ThumbnailGenerator: Generates thumbnail images</li> </ul>"},{"location":"rdetoolkit/processing/processors/#validation","title":"Validation","text":"<ul> <li>InvoiceValidator: Validates invoice files against schema</li> <li>MetadataValidator: Validates metadata files against schema</li> </ul>"},{"location":"rdetoolkit/processing/processors/#common-patterns","title":"Common Patterns","text":"<p>All processors follow these design patterns:</p>"},{"location":"rdetoolkit/processing/processors/#base-processor-interface","title":"Base Processor Interface","text":"<pre><code>from rdetoolkit.processing.pipeline import Processor\nfrom rdetoolkit.processing.context import ProcessingContext\n\nclass ExampleProcessor(Processor):\n    def process(self, context: ProcessingContext) -&gt; None:\n        # Processing logic here\n        pass\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#configuration-based-processing","title":"Configuration-Based Processing","text":"<pre><code>def process(self, context: ProcessingContext) -&gt; None:\n    config = context.srcpaths.config\n\n    if not config.some_feature_enabled:\n        return  # Skip processing if disabled\n\n    # Perform processing\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#error-handling","title":"Error Handling","text":"<pre><code>def process(self, context: ProcessingContext) -&gt; None:\n    try:\n        # Main processing logic\n        self._do_processing(context)\n    except SpecificError:\n        # Handle specific errors gracefully\n        logger.warning(\"Specific error occurred, continuing...\")\n    except Exception as e:\n        # Critical errors should propagate\n        logger.error(f\"Critical error in {self.get_name()}: {e}\")\n        raise\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#resource-management","title":"Resource Management","text":"<pre><code>def process(self, context: ProcessingContext) -&gt; None:\n    # Access resources from context\n    input_files = context.resource_paths.rawfiles\n    output_dir = context.resource_paths.struct\n\n    # Create output directory if needed\n    output_dir.mkdir(parents=True, exist_ok=True)\n\n    # Process files\n    for file in input_files:\n        self._process_file(file, output_dir)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#usage-examples","title":"Usage Examples","text":""},{"location":"rdetoolkit/processing/processors/#basic-processor-usage","title":"Basic Processor Usage","text":"<pre><code>from rdetoolkit.processing.processors import FileCopier, DatasetRunner\n\n# Create processors\nfile_copier = FileCopier()\ndataset_runner = DatasetRunner()\n\n# Execute processors with context\nfile_copier.process(context)\ndataset_runner.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#pipeline-integration","title":"Pipeline Integration","text":"<pre><code>from rdetoolkit.processing import Pipeline\nfrom rdetoolkit.processing.processors import (\n    FileCopier, DatasetRunner, ThumbnailGenerator, InvoiceValidator\n)\n\n# Build pipeline with processors\npipeline = (Pipeline()\n    .add(FileCopier())\n    .add(DatasetRunner())\n    .add(ThumbnailGenerator())\n    .add(InvoiceValidator()))\n\n# Execute pipeline\nresult = pipeline.execute(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#custom-processor-implementation","title":"Custom Processor Implementation","text":"<pre><code>from rdetoolkit.processing.pipeline import Processor\nfrom rdetoolkit.processing.context import ProcessingContext\nimport json\n\nclass MetadataProcessor(Processor):\n    \"\"\"Custom processor that creates metadata files.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        metadata = {\n            \"processing_mode\": context.mode_name,\n            \"file_count\": len(context.resource_paths.rawfiles),\n            \"timestamp\": self._get_timestamp(),\n        }\n\n        metadata_file = context.metadata_path\n        metadata_file.parent.mkdir(parents=True, exist_ok=True)\n\n        with open(metadata_file, 'w') as f:\n            json.dump(metadata, f, indent=2)\n\n    def _get_timestamp(self) -&gt; str:\n        from datetime import datetime\n        return datetime.now().isoformat()\n\n# Use custom processor\ncustom_processor = MetadataProcessor()\ncustom_processor.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#conditional-processing","title":"Conditional Processing","text":"<pre><code>from rdetoolkit.processing.processors import ThumbnailGenerator\n\nclass ConditionalThumbnailGenerator(ThumbnailGenerator):\n    \"\"\"Thumbnail generator with additional conditions.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        config = context.srcpaths.config\n\n        # Check if thumbnails are enabled\n        if not config.save_thumbnail_image:\n            return\n\n        # Check if we have image files\n        image_files = [f for f in context.resource_paths.rawfiles\n                      if f.suffix.lower() in ['.jpg', '.png', '.tiff']]\n\n        if not image_files:\n            return  # No images to process\n\n        # Call parent implementation\n        super().process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#processor-factory-pattern","title":"Processor Factory Pattern","text":"<pre><code>from typing import Dict, Type\nfrom rdetoolkit.processing.pipeline import Processor\n\nclass ProcessorFactory:\n    \"\"\"Factory for creating processors based on configuration.\"\"\"\n\n    _processors: Dict[str, Type[Processor]] = {\n        'files': FileCopier,\n        'datasets': DatasetRunner,\n        'thumbnails': ThumbnailGenerator,\n        'validation': InvoiceValidator,\n    }\n\n    @classmethod\n    def create_processor(cls, processor_type: str) -&gt; Processor:\n        processor_class = cls._processors.get(processor_type)\n        if not processor_class:\n            raise ValueError(f\"Unknown processor type: {processor_type}\")\n        return processor_class()\n\n    @classmethod\n    def create_processors(cls, processor_types: list[str]) -&gt; list[Processor]:\n        return [cls.create_processor(ptype) for ptype in processor_types]\n\n# Usage\nprocessors = ProcessorFactory.create_processors(['files', 'datasets', 'validation'])\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#performance-considerations","title":"Performance Considerations","text":""},{"location":"rdetoolkit/processing/processors/#memory-efficiency","title":"Memory Efficiency","text":"<pre><code>def process(self, context: ProcessingContext) -&gt; None:\n    # Process files one at a time instead of loading all into memory\n    for raw_file in context.resource_paths.rawfiles:\n        self._process_single_file(raw_file, context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#io-optimization","title":"I/O Optimization","text":"<pre><code>def process(self, context: ProcessingContext) -&gt; None:\n    # Batch I/O operations\n    operations = self._prepare_operations(context)\n    self._execute_batch_operations(operations)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#error-recovery","title":"Error Recovery","text":"<pre><code>def process(self, context: ProcessingContext) -&gt; None:\n    failed_files = []\n\n    for raw_file in context.resource_paths.rawfiles:\n        try:\n            self._process_file(raw_file, context)\n        except Exception as e:\n            failed_files.append((raw_file, str(e)))\n            logger.warning(f\"Failed to process {raw_file}: {e}\")\n\n    if failed_files:\n        # Report failed files but don't stop processing\n        logger.info(f\"Completed with {len(failed_files)} failures\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#testing-processors","title":"Testing Processors","text":""},{"location":"rdetoolkit/processing/processors/#unit-testing","title":"Unit Testing","text":"<pre><code>import unittest\nfrom unittest.mock import Mock, patch\nfrom rdetoolkit.processing.processors import FileCopier\n\nclass TestFileCopier(unittest.TestCase):\n    def setUp(self):\n        self.processor = FileCopier()\n        self.context = Mock()\n        # Setup mock context attributes\n\n    def test_process_success(self):\n        # Test successful processing\n        self.processor.process(self.context)\n        # Assert expected behavior\n\n    def test_process_error_handling(self):\n        # Test error handling\n        with self.assertRaises(SpecificError):\n            self.processor.process(self.context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#integration-testing","title":"Integration Testing","text":"<pre><code>from rdetoolkit.processing import Pipeline\nfrom rdetoolkit.processing.processors import FileCopier, DatasetRunner\n\ndef test_processor_integration():\n    # Create test context\n    context = create_test_context()\n\n    # Create pipeline with processors\n    pipeline = Pipeline().add(FileCopier()).add(DatasetRunner())\n\n    # Execute and verify results\n    result = pipeline.execute(context)\n    assert result.status == \"success\"\n</code></pre>"},{"location":"rdetoolkit/processing/processors/#see-also","title":"See Also","text":"<ul> <li>File Processors - File copying and management</li> <li>Invoice Processors - Invoice initialization and handling</li> <li>Dataset Processors - Custom dataset processing</li> <li>Validation Processors - Data validation</li> <li>Other Processors - Variable application and content updates</li> </ul>"},{"location":"rdetoolkit/processing/processors/datasets/","title":"Dataset Processor","text":"<p>The dataset processor executes custom dataset processing functions as part of the processing pipeline.</p>"},{"location":"rdetoolkit/processing/processors/datasets/#classes","title":"Classes","text":""},{"location":"rdetoolkit/processing/processors/datasets/#datasetrunner","title":"DatasetRunner","text":"<p>Executes user-provided custom dataset processing functions with comprehensive error handling and logging.</p> <pre><code>class DatasetRunner(Processor):\n    \"\"\"Executes custom dataset processing functions.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/processors/datasets/#methods","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/datasets/#process","title":"process","text":"<p>Execute custom dataset processing function if provided.</p> <pre><code>def process(self, context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context containing dataset function and resources</p> <p>Behavior: - Checks if a custom dataset function is provided in the context - Executes the function with input and output path parameters - Handles function execution errors gracefully with logging - Skips processing if no custom function is provided</p> <p>Custom Function Signature: The custom dataset function should accept two parameters: - <code>srcpaths</code> (RdeInputDirPaths): Input directory paths and configuration - <code>resource_paths</code> (RdeOutputResourcePath): Output resource paths</p> <p>Example: <pre><code>from rdetoolkit.processing.processors import DatasetRunner\n\n# Create and execute dataset runner\ndataset_runner = DatasetRunner()\ndataset_runner.process(context)\n</code></pre></p>"},{"location":"rdetoolkit/processing/processors/datasets/#usage-examples","title":"Usage Examples","text":""},{"location":"rdetoolkit/processing/processors/datasets/#basic-dataset-function","title":"Basic Dataset Function","text":"<pre><code>from rdetoolkit.processing.processors import DatasetRunner\nfrom rdetoolkit.processing.context import ProcessingContext\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef simple_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n    \"\"\"Simple dataset processing function.\"\"\"\n    print(f\"Processing {len(resource_paths.rawfiles)} files\")\n\n    # Process each raw file\n    for raw_file in resource_paths.rawfiles:\n        print(f\"Processing file: {raw_file.name}\")\n\n        # Copy file to structured directory (example processing)\n        structured_file = resource_paths.struct / raw_file.name\n        resource_paths.struct.mkdir(parents=True, exist_ok=True)\n\n        import shutil\n        shutil.copy2(raw_file, structured_file)\n        print(f\"Copied to structured: {structured_file}\")\n\n# Create context with custom function\ncontext = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=simple_dataset_function,\n    mode_name=\"Invoice\"\n)\n\n# Execute dataset processing\ndataset_runner = DatasetRunner()\ndataset_runner.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/datasets/#advanced-dataset-processing","title":"Advanced Dataset Processing","text":"<pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\nimport json\nimport pandas as pd\nfrom pathlib import Path\n\ndef advanced_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n    \"\"\"Advanced dataset processing with multiple file types.\"\"\"\n\n    config = srcpaths.config\n    print(f\"Processing in {config.system.extended_mode or 'standard'} mode\")\n\n    # Process different file types\n    csv_files = [f for f in resource_paths.rawfiles if f.suffix == '.csv']\n    image_files = [f for f in resource_paths.rawfiles if f.suffix.lower() in ['.jpg', '.png', '.tiff']]\n    other_files = [f for f in resource_paths.rawfiles if f not in csv_files + image_files]\n\n    # Process CSV files\n    if csv_files:\n        process_csv_files(csv_files, resource_paths)\n\n    # Process image files\n    if image_files:\n        process_image_files(image_files, resource_paths, config)\n\n    # Process other files\n    if other_files:\n        process_other_files(other_files, resource_paths)\n\n    # Generate processing summary\n    generate_processing_summary(resource_paths, len(csv_files), len(image_files), len(other_files))\n\ndef process_csv_files(csv_files: list[Path], resource_paths: RdeOutputResourcePath):\n    \"\"\"Process CSV files and create combined dataset.\"\"\"\n    combined_data = []\n\n    for csv_file in csv_files:\n        try:\n            df = pd.read_csv(csv_file)\n            df['source_file'] = csv_file.name\n            combined_data.append(df)\n            print(f\"Processed CSV: {csv_file.name} ({len(df)} rows)\")\n        except Exception as e:\n            print(f\"Error processing CSV {csv_file.name}: {e}\")\n\n    if combined_data:\n        # Combine all CSV data\n        combined_df = pd.concat(combined_data, ignore_index=True)\n\n        # Save combined dataset\n        output_file = resource_paths.struct / \"combined_dataset.csv\"\n        resource_paths.struct.mkdir(parents=True, exist_ok=True)\n        combined_df.to_csv(output_file, index=False)\n        print(f\"Created combined dataset: {output_file} ({len(combined_df)} rows)\")\n\ndef process_image_files(image_files: list[Path], resource_paths: RdeOutputResourcePath, config):\n    \"\"\"Process image files with optional resizing.\"\"\"\n    from PIL import Image\n\n    # Create image processing directories\n    resource_paths.main_image.mkdir(parents=True, exist_ok=True)\n    if config.save_thumbnail_image:\n        resource_paths.thumbnail.mkdir(parents=True, exist_ok=True)\n\n    for image_file in image_files:\n        try:\n            with Image.open(image_file) as img:\n                # Save main image (potentially resized)\n                main_image_path = resource_paths.main_image / image_file.name\n                if img.size[0] &gt; 1920 or img.size[1] &gt; 1080:\n                    img.thumbnail((1920, 1080), Image.Resampling.LANCZOS)\n                img.save(main_image_path)\n\n                # Create thumbnail if enabled\n                if config.save_thumbnail_image:\n                    thumbnail_path = resource_paths.thumbnail / f\"thumb_{image_file.name}\"\n                    img.thumbnail((200, 200), Image.Resampling.LANCZOS)\n                    img.save(thumbnail_path)\n\n                print(f\"Processed image: {image_file.name}\")\n\n        except Exception as e:\n            print(f\"Error processing image {image_file.name}: {e}\")\n\ndef process_other_files(other_files: list[Path], resource_paths: RdeOutputResourcePath):\n    \"\"\"Process other file types.\"\"\"\n    import shutil\n\n    resource_paths.struct.mkdir(parents=True, exist_ok=True)\n\n    for file in other_files:\n        try:\n            output_file = resource_paths.struct / file.name\n            shutil.copy2(file, output_file)\n            print(f\"Copied file: {file.name}\")\n        except Exception as e:\n            print(f\"Error copying file {file.name}: {e}\")\n\ndef generate_processing_summary(resource_paths: RdeOutputResourcePath, csv_count: int, image_count: int, other_count: int):\n    \"\"\"Generate processing summary.\"\"\"\n    summary = {\n        \"processing_summary\": {\n            \"total_files\": csv_count + image_count + other_count,\n            \"csv_files\": csv_count,\n            \"image_files\": image_count,\n            \"other_files\": other_count,\n            \"output_directories\": {\n                \"structured\": str(resource_paths.struct),\n                \"main_image\": str(resource_paths.main_image),\n                \"thumbnail\": str(resource_paths.thumbnail),\n                \"meta\": str(resource_paths.meta)\n            }\n        }\n    }\n\n    # Save summary\n    summary_file = resource_paths.meta / \"processing_summary.json\"\n    resource_paths.meta.mkdir(parents=True, exist_ok=True)\n\n    with open(summary_file, 'w') as f:\n        json.dump(summary, f, indent=2)\n\n    print(f\"Generated processing summary: {summary_file}\")\n\n# Usage\ncontext_with_advanced_function = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=advanced_dataset_function,\n    mode_name=\"MultiDataTile\"\n)\n\ndataset_runner = DatasetRunner()\ndataset_runner.process(context_with_advanced_function)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/datasets/#conditional-dataset-processing","title":"Conditional Dataset Processing","text":"<pre><code>def conditional_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n    \"\"\"Dataset function with conditional processing based on configuration.\"\"\"\n\n    config = srcpaths.config\n\n    # Check processing mode\n    if hasattr(config.system, 'extended_mode') and config.system.extended_mode:\n        mode = config.system.extended_mode.lower()\n        print(f\"Processing in extended mode: {mode}\")\n\n        if mode == \"rdeformat\":\n            process_rde_format_data(resource_paths)\n        elif mode == \"multidatatile\":\n            process_multi_data_tile(resource_paths, config)\n        else:\n            process_standard_data(resource_paths)\n    else:\n        process_standard_data(resource_paths)\n\n    # Always generate metadata\n    generate_metadata(resource_paths, config)\n\ndef process_rde_format_data(resource_paths: RdeOutputResourcePath):\n    \"\"\"Process data in RDE format mode.\"\"\"\n    print(\"Processing RDE format data...\")\n\n    # RDE format specific processing\n    for raw_file in resource_paths.rawfiles:\n        if raw_file.suffix == '.zip':\n            extract_and_process_zip(raw_file, resource_paths)\n        else:\n            copy_file_to_structured(raw_file, resource_paths)\n\ndef process_multi_data_tile(resource_paths: RdeOutputResourcePath, config):\n    \"\"\"Process data in multi-data tile mode.\"\"\"\n    print(\"Processing multi-data tile...\")\n\n    # Group files by type for tile processing\n    file_groups = group_files_by_type(resource_paths.rawfiles)\n\n    for file_type, files in file_groups.items():\n        process_file_group(file_type, files, resource_paths, config)\n\ndef process_standard_data(resource_paths: RdeOutputResourcePath):\n    \"\"\"Standard data processing.\"\"\"\n    print(\"Processing standard data...\")\n\n    import shutil\n    resource_paths.struct.mkdir(parents=True, exist_ok=True)\n\n    for raw_file in resource_paths.rawfiles:\n        output_file = resource_paths.struct / raw_file.name\n        shutil.copy2(raw_file, output_file)\n\ndef generate_metadata(resource_paths: RdeOutputResourcePath, config):\n    \"\"\"Generate metadata for processed data.\"\"\"\n    metadata = {\n        \"files_processed\": len(resource_paths.rawfiles),\n        \"configuration\": {\n            \"save_raw\": config.save_raw,\n            \"save_thumbnail_image\": config.save_thumbnail_image,\n            \"magic_variable\": config.magic_variable\n        },\n        \"processing_timestamp\": pd.Timestamp.now().isoformat()\n    }\n\n    # Save metadata\n    metadata_file = resource_paths.meta / \"dataset_metadata.json\"\n    resource_paths.meta.mkdir(parents=True, exist_ok=True)\n\n    with open(metadata_file, 'w') as f:\n        json.dump(metadata, f, indent=2)\n\n# Additional helper functions\ndef extract_and_process_zip(zip_file: Path, resource_paths: RdeOutputResourcePath):\n    \"\"\"Extract and process ZIP files.\"\"\"\n    import zipfile\n\n    extract_dir = resource_paths.temp / f\"extracted_{zip_file.stem}\"\n    extract_dir.mkdir(parents=True, exist_ok=True)\n\n    with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n        zip_ref.extractall(extract_dir)\n\n    # Process extracted files\n    for extracted_file in extract_dir.rglob('*'):\n        if extracted_file.is_file():\n            copy_file_to_structured(extracted_file, resource_paths)\n\ndef copy_file_to_structured(file: Path, resource_paths: RdeOutputResourcePath):\n    \"\"\"Copy file to structured directory.\"\"\"\n    import shutil\n\n    resource_paths.struct.mkdir(parents=True, exist_ok=True)\n    output_file = resource_paths.struct / file.name\n    shutil.copy2(file, output_file)\n\ndef group_files_by_type(files: tuple[Path, ...]) -&gt; dict[str, list[Path]]:\n    \"\"\"Group files by their extension.\"\"\"\n    groups = {}\n\n    for file in files:\n        ext = file.suffix.lower()\n        if ext not in groups:\n            groups[ext] = []\n        groups[ext].append(file)\n\n    return groups\n\ndef process_file_group(file_type: str, files: list[Path], resource_paths: RdeOutputResourcePath, config):\n    \"\"\"Process a group of files of the same type.\"\"\"\n    print(f\"Processing {len(files)} {file_type} files\")\n\n    if file_type in ['.jpg', '.png', '.tiff'] and config.save_thumbnail_image:\n        # Special handling for images\n        process_image_files(files, resource_paths, config)\n    else:\n        # Standard file copying\n        for file in files:\n            copy_file_to_structured(file, resource_paths)\n\n# Usage with conditional processing\ncontext_conditional = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=conditional_dataset_function,\n    mode_name=\"MultiDataTile\"\n)\n\ndataset_runner = DatasetRunner()\ndataset_runner.process(context_conditional)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/datasets/#error-resilient-dataset-processing","title":"Error-Resilient Dataset Processing","text":"<pre><code>def resilient_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n    \"\"\"Dataset function with comprehensive error handling.\"\"\"\n\n    processing_log = []\n    successful_files = 0\n    failed_files = 0\n\n    try:\n        print(f\"Starting processing of {len(resource_paths.rawfiles)} files\")\n\n        for i, raw_file in enumerate(resource_paths.rawfiles):\n            file_log = {\n                \"file\": str(raw_file),\n                \"index\": i,\n                \"status\": \"pending\"\n            }\n\n            try:\n                # Process individual file\n                process_single_file(raw_file, resource_paths, srcpaths.config)\n\n                file_log[\"status\"] = \"success\"\n                successful_files += 1\n                print(f\"\u2713 Processed {raw_file.name}\")\n\n            except Exception as e:\n                file_log[\"status\"] = \"failed\"\n                file_log[\"error\"] = str(e)\n                failed_files += 1\n                print(f\"\u2717 Failed to process {raw_file.name}: {e}\")\n\n            processing_log.append(file_log)\n\n    except Exception as e:\n        print(f\"Critical error in dataset processing: {e}\")\n        raise\n\n    finally:\n        # Always save processing log\n        save_processing_log(processing_log, resource_paths, successful_files, failed_files)\n\ndef process_single_file(raw_file: Path, resource_paths: RdeOutputResourcePath, config) -&gt; None:\n    \"\"\"Process a single file with error handling.\"\"\"\n\n    # Validate file exists and is readable\n    if not raw_file.exists():\n        raise FileNotFoundError(f\"File not found: {raw_file}\")\n\n    if not raw_file.is_file():\n        raise ValueError(f\"Path is not a file: {raw_file}\")\n\n    # Process based on file type\n    file_ext = raw_file.suffix.lower()\n\n    if file_ext == '.csv':\n        process_csv_file(raw_file, resource_paths)\n    elif file_ext in ['.jpg', '.png', '.tiff']:\n        process_image_file(raw_file, resource_paths, config)\n    elif file_ext == '.json':\n        process_json_file(raw_file, resource_paths)\n    else:\n        process_generic_file(raw_file, resource_paths)\n\ndef process_csv_file(csv_file: Path, resource_paths: RdeOutputResourcePath):\n    \"\"\"Process CSV file with validation.\"\"\"\n    try:\n        df = pd.read_csv(csv_file)\n\n        if len(df) == 0:\n            raise ValueError(\"CSV file is empty\")\n\n        # Save processed CSV\n        output_file = resource_paths.struct / csv_file.name\n        resource_paths.struct.mkdir(parents=True, exist_ok=True)\n        df.to_csv(output_file, index=False)\n\n    except pd.errors.EmptyDataError:\n        raise ValueError(\"CSV file contains no data\")\n    except pd.errors.ParserError as e:\n        raise ValueError(f\"CSV parsing error: {e}\")\n\ndef process_image_file(image_file: Path, resource_paths: RdeOutputResourcePath, config):\n    \"\"\"Process image file with validation.\"\"\"\n    from PIL import Image, UnidentifiedImageError\n\n    try:\n        with Image.open(image_file) as img:\n            # Validate image\n            img.verify()\n\n        # Process image (reopen after verify)\n        with Image.open(image_file) as img:\n            output_file = resource_paths.main_image / image_file.name\n            resource_paths.main_image.mkdir(parents=True, exist_ok=True)\n\n            # Resize if too large\n            if img.size[0] &gt; 2000 or img.size[1] &gt; 2000:\n                img.thumbnail((2000, 2000), Image.Resampling.LANCZOS)\n\n            img.save(output_file)\n\n    except UnidentifiedImageError:\n        raise ValueError(\"File is not a valid image\")\n    except Exception as e:\n        raise ValueError(f\"Image processing error: {e}\")\n\ndef process_json_file(json_file: Path, resource_paths: RdeOutputResourcePath):\n    \"\"\"Process JSON file with validation.\"\"\"\n    try:\n        with open(json_file, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n\n        # Validate JSON structure (example validation)\n        if not isinstance(data, dict):\n            raise ValueError(\"JSON must be an object\")\n\n        # Save processed JSON\n        output_file = resource_paths.struct / json_file.name\n        resource_paths.struct.mkdir(parents=True, exist_ok=True)\n\n        with open(output_file, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=2, ensure_ascii=False)\n\n    except json.JSONDecodeError as e:\n        raise ValueError(f\"Invalid JSON format: {e}\")\n\ndef process_generic_file(file: Path, resource_paths: RdeOutputResourcePath):\n    \"\"\"Process generic file by copying.\"\"\"\n    import shutil\n\n    output_file = resource_paths.struct / file.name\n    resource_paths.struct.mkdir(parents=True, exist_ok=True)\n    shutil.copy2(file, output_file)\n\ndef save_processing_log(processing_log: list, resource_paths: RdeOutputResourcePath, successful: int, failed: int):\n    \"\"\"Save processing log with summary.\"\"\"\n\n    log_data = {\n        \"summary\": {\n            \"total_files\": len(processing_log),\n            \"successful\": successful,\n            \"failed\": failed,\n            \"success_rate\": successful / len(processing_log) if processing_log else 0\n        },\n        \"files\": processing_log,\n        \"timestamp\": pd.Timestamp.now().isoformat()\n    }\n\n    # Save log\n    log_file = resource_paths.logs / \"dataset_processing.log\"\n    resource_paths.logs.mkdir(parents=True, exist_ok=True)\n\n    with open(log_file, 'w', encoding='utf-8') as f:\n        json.dump(log_data, f, indent=2, ensure_ascii=False)\n\n    print(f\"Processing complete: {successful}/{len(processing_log)} files successful\")\n    print(f\"Processing log saved: {log_file}\")\n\n# Usage with error-resilient processing\ncontext_resilient = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=resilient_dataset_function,\n    mode_name=\"Invoice\"\n)\n\ndataset_runner = DatasetRunner()\ndataset_runner.process(context_resilient)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/datasets/#no-custom-function-handling","title":"No Custom Function Handling","text":"<pre><code>def test_without_custom_function():\n    \"\"\"Test DatasetRunner when no custom function is provided.\"\"\"\n\n    # Context without custom function\n    context_no_function = ProcessingContext(\n        index=\"1\",\n        srcpaths=srcpaths,\n        resource_paths=resource_paths,\n        datasets_function=None,  # No custom function\n        mode_name=\"Invoice\"\n    )\n\n    dataset_runner = DatasetRunner()\n    dataset_runner.process(context_no_function)  # Should skip processing gracefully\n\n    print(\"DatasetRunner completed (no custom function provided)\")\n\n# Test\ntest_without_custom_function()\n</code></pre>"},{"location":"rdetoolkit/processing/processors/datasets/#error-handling","title":"Error Handling","text":""},{"location":"rdetoolkit/processing/processors/datasets/#function-execution-errors","title":"Function Execution Errors","text":"<p>The DatasetRunner handles errors in custom dataset functions gracefully:</p> <pre><code>def error_prone_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n    \"\"\"Function that may raise errors.\"\"\"\n\n    # This will raise an error\n    raise ValueError(\"Something went wrong in custom processing\")\n\n# Create context with error-prone function\ncontext_with_error = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=error_prone_function,\n    mode_name=\"Invoice\"\n)\n\n# DatasetRunner will catch and log the error\ndataset_runner = DatasetRunner()\ntry:\n    dataset_runner.process(context_with_error)\nexcept Exception as e:\n    print(f\"Custom function error was handled: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/datasets/#validation-and-safety","title":"Validation and Safety","text":"<pre><code>def safe_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath) -&gt; None:\n    \"\"\"Dataset function with safety checks.\"\"\"\n\n    # Validate input parameters\n    if not resource_paths.rawfiles:\n        print(\"Warning: No raw files to process\")\n        return\n\n    # Validate output directories can be created\n    required_dirs = [resource_paths.struct, resource_paths.meta]\n    for dir_path in required_dirs:\n        try:\n            dir_path.mkdir(parents=True, exist_ok=True)\n        except Exception as e:\n            raise PermissionError(f\"Cannot create directory {dir_path}: {e}\")\n\n    # Safe file processing\n    for raw_file in resource_paths.rawfiles:\n        if raw_file.exists() and raw_file.is_file():\n            try:\n                # Process file safely\n                process_file_safely(raw_file, resource_paths)\n            except Exception as e:\n                print(f\"Warning: Failed to process {raw_file.name}: {e}\")\n                # Continue with other files\n        else:\n            print(f\"Warning: Skipping invalid file: {raw_file}\")\n\ndef process_file_safely(file: Path, resource_paths: RdeOutputResourcePath):\n    \"\"\"Process file with safety checks.\"\"\"\n    import shutil\n\n    # Check file size (avoid processing extremely large files)\n    file_size = file.stat().st_size\n    max_size = 100 * 1024 * 1024  # 100MB limit\n\n    if file_size &gt; max_size:\n        raise ValueError(f\"File too large: {file_size} bytes\")\n\n    # Copy file safely\n    output_file = resource_paths.struct / file.name\n    shutil.copy2(file, output_file)\n\n# Usage with safe function\ncontext_safe = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=safe_dataset_function,\n    mode_name=\"Invoice\"\n)\n\ndataset_runner = DatasetRunner()\ndataset_runner.process(context_safe)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/datasets/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Memory Usage: Avoid loading large files entirely into memory</li> <li>I/O Operations: Minimize disk I/O through efficient file handling</li> <li>Error Recovery: Implement graceful error handling for partial failures</li> <li>Progress Tracking: Provide feedback for long-running operations</li> <li>Resource Cleanup: Ensure proper cleanup of temporary resources</li> </ul>"},{"location":"rdetoolkit/processing/processors/datasets/#see-also","title":"See Also","text":"<ul> <li>Processing Context - Context management and configuration</li> <li>Pipeline Architecture - Core pipeline classes</li> <li>File Processors - File copying and management</li> <li>Validation Processors - Data validation</li> </ul>"},{"location":"rdetoolkit/processing/processors/descriptions/","title":"Description Processor","text":"<p>The <code>rdetoolkit.processing.processors.descriptions</code> module provides processing functionality for updating descriptions with feature information. This module contains processors specifically designed to enhance invoice descriptions with extracted features while maintaining robust error handling.</p>"},{"location":"rdetoolkit/processing/processors/descriptions/#overview","title":"Overview","text":"<p>The descriptions processor module focuses on:</p> <ul> <li>Description Enhancement: Updates invoice descriptions with feature information</li> <li>Robust Error Handling: Suppresses errors to ensure processing pipeline continuity</li> <li>Feature Integration: Integrates extracted features into invoice metadata</li> <li>Pipeline Compatibility: Implements the standard processor interface for pipeline integration</li> </ul>"},{"location":"rdetoolkit/processing/processors/descriptions/#classes","title":"Classes","text":""},{"location":"rdetoolkit/processing/processors/descriptions/#descriptionupdater","title":"DescriptionUpdater","text":"<p>A processor that updates descriptions with feature information, providing robust error handling to prevent pipeline failures.</p>"},{"location":"rdetoolkit/processing/processors/descriptions/#constructor","title":"Constructor","text":"<pre><code>DescriptionUpdater()\n</code></pre> <p>The <code>DescriptionUpdater</code> class inherits from the base <code>Processor</code> class and requires no additional parameters for initialization.</p>"},{"location":"rdetoolkit/processing/processors/descriptions/#methods","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/descriptions/#processcontext","title":"process(context)","text":"<p>Update descriptions with features, ignoring any errors to ensure pipeline continuity.</p> <pre><code>def process(context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters:</p> <ul> <li><code>context</code> (ProcessingContext): Processing context containing resource paths and configuration</li> </ul> <p>Returns:</p> <ul> <li><code>None</code>: This method does not return a value</li> </ul> <p>Error Handling:</p> <ul> <li>Uses <code>contextlib.suppress(Exception)</code> to ignore any exceptions during processing</li> <li>Logs warnings for any unexpected errors</li> <li>Ensures pipeline continuation even if description updates fail</li> </ul> <p>Processing Flow:</p> <ol> <li>Logs the start of description update process</li> <li>Calls <code>update_description_with_features()</code> with context information</li> <li>Suppresses any exceptions that occur during processing</li> <li>Logs completion status</li> </ol> <p>Example:</p> <pre><code>from rdetoolkit.processing.processors.descriptions import DescriptionUpdater\nfrom rdetoolkit.processing.context import ProcessingContext\n\n# Initialize the processor\nprocessor = DescriptionUpdater()\n\n# Process within a pipeline context\n# (context is typically provided by the pipeline framework)\nprocessor.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/descriptions/#base-class-integration","title":"Base Class Integration","text":"<p>The <code>DescriptionUpdater</code> class inherits from <code>Processor</code>, providing:</p> <ul> <li>Pipeline Compatibility: Standard interface for use in processing pipelines</li> <li>Context Management: Access to processing context and resource paths</li> <li>Error Handling: Built-in error handling patterns</li> <li>Logging Integration: Consistent logging behavior across processors</li> </ul>"},{"location":"rdetoolkit/processing/processors/descriptions/#processing-context-requirements","title":"Processing Context Requirements","text":"<p>The <code>DescriptionUpdater</code> requires the following context attributes:</p> <ul> <li><code>resource_paths</code>: Output resource paths for the current processing tile</li> <li><code>invoice_dst_filepath</code>: Destination path for the invoice file</li> <li><code>metadata_def_path</code>: Path to metadata definition file</li> </ul>"},{"location":"rdetoolkit/processing/processors/descriptions/#integration-with-invoice-system","title":"Integration with Invoice System","text":"<p>The description processor integrates with the invoice system through:</p>"},{"location":"rdetoolkit/processing/processors/descriptions/#update_description_with_features","title":"update_description_with_features()","text":"<p>The processor delegates to <code>rdetoolkit.invoicefile.update_description_with_features()</code>:</p> <pre><code>update_description_with_features(\n    resource_paths,      # RdeOutputResourcePath\n    invoice_dst_filepath, # Path to invoice destination\n    metadata_def_path    # Path to metadata definitions\n)\n</code></pre> <p>This function:</p> <ul> <li>Reads existing invoice data</li> <li>Extracts features from processed data</li> <li>Updates description fields with feature information</li> <li>Saves the enhanced invoice data</li> </ul>"},{"location":"rdetoolkit/processing/processors/descriptions/#usage-in-processing-pipelines","title":"Usage in Processing Pipelines","text":""},{"location":"rdetoolkit/processing/processors/descriptions/#basic-pipeline-integration","title":"Basic Pipeline Integration","text":"<pre><code>from rdetoolkit.processing.pipeline import Pipeline\nfrom rdetoolkit.processing.processors.descriptions import DescriptionUpdater\n\n# Create pipeline with description processor\npipeline = Pipeline([\n    # ... other processors ...\n    DescriptionUpdater(),\n    # ... additional processors ...\n])\n\n# Execute pipeline\npipeline.execute(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/descriptions/#custom-pipeline-configuration","title":"Custom Pipeline Configuration","text":"<pre><code>from rdetoolkit.processing.factories import ProcessorFactory\nfrom rdetoolkit.processing.processors.descriptions import DescriptionUpdater\n\n# Register description processor in factory\nfactory = ProcessorFactory()\nfactory.register(\"description_updater\", DescriptionUpdater)\n\n# Create processor through factory\nprocessor = factory.create(\"description_updater\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/descriptions/#conditional-processing","title":"Conditional Processing","text":"<pre><code>from rdetoolkit.processing.processors.descriptions import DescriptionUpdater\nfrom rdetoolkit.processing.context import ProcessingContext\n\nclass ConditionalDescriptionProcessor(DescriptionUpdater):\n    \"\"\"Description processor with conditional execution.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Process only if features are available.\"\"\"\n\n        # Check if feature extraction was successful\n        if self._has_features(context):\n            super().process(context)\n        else:\n            logger.info(\"Skipping description update - no features available\")\n\n    def _has_features(self, context: ProcessingContext) -&gt; bool:\n        \"\"\"Check if features are available for processing.\"\"\"\n        # Implementation to check feature availability\n        feature_file = context.resource_paths.meta / \"features.json\"\n        return feature_file.exists()\n</code></pre>"},{"location":"rdetoolkit/processing/processors/descriptions/#error-handling-and-resilience","title":"Error Handling and Resilience","text":""},{"location":"rdetoolkit/processing/processors/descriptions/#exception-suppression","title":"Exception Suppression","text":"<p>The processor uses <code>contextlib.suppress(Exception)</code> to handle errors gracefully:</p> <pre><code>with contextlib.suppress(Exception):\n    update_description_with_features(\n        context.resource_paths,\n        context.invoice_dst_filepath,\n        context.metadata_def_path,\n    )\n</code></pre> <p>Benefits:</p> <ul> <li>Prevents pipeline failures due to description update issues</li> <li>Maintains processing continuity for other pipeline stages</li> <li>Allows partial success in multi-stage processing</li> </ul>"},{"location":"rdetoolkit/processing/processors/descriptions/#logging-strategy","title":"Logging Strategy","text":"<p>The processor implements comprehensive logging:</p> <pre><code>logger.debug(\"Updating descriptions with features\")\n# ... processing ...\nlogger.debug(\"Description update completed (errors suppressed)\")\n</code></pre> <p>Log Levels:</p> <ul> <li><code>DEBUG</code>: Normal processing flow information</li> <li><code>WARNING</code>: Unexpected errors that are handled gracefully</li> <li><code>INFO</code>: Significant processing milestones</li> </ul>"},{"location":"rdetoolkit/processing/processors/descriptions/#error-recovery-patterns","title":"Error Recovery Patterns","text":"<pre><code>class RobustDescriptionUpdater(DescriptionUpdater):\n    \"\"\"Enhanced description processor with error recovery.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Process with multiple error recovery strategies.\"\"\"\n\n        try:\n            # Attempt primary processing\n            super().process(context)\n\n        except MemoryError:\n            # Handle memory-specific issues\n            logger.warning(\"Memory error during description update\")\n            self._cleanup_memory(context)\n\n        except FileNotFoundError:\n            # Handle missing file issues\n            logger.warning(\"Required files missing for description update\")\n            self._create_default_description(context)\n\n    def _cleanup_memory(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Clean up memory and retry with reduced processing.\"\"\"\n        # Implementation for memory cleanup\n        pass\n\n    def _create_default_description(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Create default description when features are unavailable.\"\"\"\n        # Implementation for default description creation\n        pass\n</code></pre>"},{"location":"rdetoolkit/processing/processors/descriptions/#complete-usage-examples","title":"Complete Usage Examples","text":""},{"location":"rdetoolkit/processing/processors/descriptions/#basic-description-processing","title":"Basic Description Processing","text":"<pre><code>from rdetoolkit.processing.processors.descriptions import DescriptionUpdater\nfrom rdetoolkit.processing.context import ProcessingContext\nfrom rdetoolkit.models.rde2types import RdeOutputResourcePath\nfrom pathlib import Path\n\n# Setup processing context\nresource_paths = RdeOutputResourcePath(\n    raw=Path(\"data/divided/0001/raw\"),\n    struct=Path(\"data/divided/0001/structured\"),\n    meta=Path(\"data/divided/0001/meta\"),\n    invoice=Path(\"data/divided/0001/invoice\"),\n    # ... other paths ...\n)\n\ncontext = ProcessingContext(\n    resource_paths=resource_paths,\n    invoice_dst_filepath=Path(\"data/divided/0001/invoice/invoice.json\"),\n    metadata_def_path=Path(\"data/tasksupport/metadata_def.json\")\n)\n\n# Process descriptions\nprocessor = DescriptionUpdater()\nprocessor.process(context)\nprint(\"Description processing completed\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/descriptions/#pipeline-integration-with-multiple-processors","title":"Pipeline Integration with Multiple Processors","text":"<pre><code>from rdetoolkit.processing.pipeline import Pipeline\nfrom rdetoolkit.processing.processors.descriptions import DescriptionUpdater\nfrom rdetoolkit.processing.processors.files import FileProcessor\nfrom rdetoolkit.processing.processors.validation import ValidationProcessor\n\n# Create comprehensive processing pipeline\npipeline = Pipeline([\n    FileProcessor(),           # Process raw files\n    DescriptionUpdater(),      # Update descriptions\n    ValidationProcessor(),     # Validate results\n])\n\n# Execute complete pipeline\ntry:\n    pipeline.execute(context)\n    print(\"Pipeline execution completed successfully\")\nexcept Exception as e:\n    print(f\"Pipeline execution failed: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/descriptions/#custom-description-enhancement","title":"Custom Description Enhancement","text":"<pre><code>from rdetoolkit.processing.processors.descriptions import DescriptionUpdater\nfrom rdetoolkit.processing.context import ProcessingContext\nimport json\n\nclass EnhancedDescriptionUpdater(DescriptionUpdater):\n    \"\"\"Enhanced description processor with additional features.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Enhanced processing with custom feature extraction.\"\"\"\n\n        # Pre-processing: extract custom features\n        self._extract_custom_features(context)\n\n        # Standard description processing\n        super().process(context)\n\n        # Post-processing: add metadata\n        self._add_processing_metadata(context)\n\n    def _extract_custom_features(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Extract custom features before description update.\"\"\"\n\n        custom_features = {\n            \"processing_timestamp\": \"2024-01-01T12:00:00Z\",\n            \"feature_version\": \"1.0.0\",\n            \"custom_tags\": [\"enhanced\", \"processed\"]\n        }\n\n        # Save custom features\n        feature_file = context.resource_paths.meta / \"custom_features.json\"\n        with feature_file.open(\"w\") as f:\n            json.dump(custom_features, f, indent=2)\n\n    def _add_processing_metadata(self, context: ProcessingContext) -&gt; None:\n        \"\"\"Add processing metadata after description update.\"\"\"\n\n        metadata = {\n            \"description_updated\": True,\n            \"processor_version\": \"2.0.0\",\n            \"processing_notes\": \"Enhanced description processing completed\"\n        }\n\n        # Save processing metadata\n        metadata_file = context.resource_paths.meta / \"processing_metadata.json\"\n        with metadata_file.open(\"w\") as f:\n            json.dump(metadata, f, indent=2)\n\n# Usage\nenhanced_processor = EnhancedDescriptionUpdater()\nenhanced_processor.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/descriptions/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Error Suppression: Minimal performance impact from exception handling</li> <li>Memory Usage: Low memory footprint for description processing</li> <li>I/O Operations: Optimized file operations for invoice updates</li> <li>Pipeline Integration: Efficient integration with other processors</li> </ul>"},{"location":"rdetoolkit/processing/processors/descriptions/#best-practices","title":"Best Practices","text":"<ol> <li>Always Use in Pipelines: Integrate with other processors for complete workflows</li> <li>Monitor Logs: Check debug logs for processing status and any suppressed errors</li> <li>Validate Context: Ensure required context attributes are available</li> <li>Handle Dependencies: Ensure prerequisite processors have executed successfully</li> </ol>"},{"location":"rdetoolkit/processing/processors/descriptions/#see-also","title":"See Also","text":"<ul> <li>Processing Pipeline - For pipeline framework documentation</li> <li>Processing Context - For context management details</li> <li>Invoice Module - For invoice processing functions</li> <li>Processor Base Class - For base processor interface</li> </ul>"},{"location":"rdetoolkit/processing/processors/files/","title":"File Processors","text":"<p>The file processors handle file operations including copying raw files to designated directories with support for different processing modes.</p>"},{"location":"rdetoolkit/processing/processors/files/#classes","title":"Classes","text":""},{"location":"rdetoolkit/processing/processors/files/#filecopier","title":"FileCopier","text":"<p>Standard file copier for raw files. Handles copying files based on configuration settings to appropriate output directories.</p> <pre><code>class FileCopier(Processor):\n    \"\"\"Standard file copier for raw files.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#methods","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/files/#process","title":"process","text":"<p>Execute file copying operations based on configuration.</p> <pre><code>def process(self, context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context containing configuration and file paths</p> <p>Configuration Dependencies: - <code>config.save_raw</code>: If True, copies files to raw directory - <code>config.save_nonshared_raw</code>: If True, copies files to nonshared_raw directory</p> <p>Example: <pre><code>from rdetoolkit.processing.processors import FileCopier\n\nfile_copier = FileCopier()\nfile_copier.process(context)\n</code></pre></p> <p>Behavior: - Copies files to <code>raw</code> directory if <code>save_raw</code> is enabled - Copies files to <code>nonshared_raw</code> directory if <code>save_nonshared_raw</code> is enabled - Creates target directories if they don't exist - Handles file copying errors gracefully with logging</p>"},{"location":"rdetoolkit/processing/processors/files/#rdeformatfilecopier","title":"RDEFormatFileCopier","text":"<p>Specialized file copier for RDEFormat mode. Copies files by matching directory structure patterns.</p> <pre><code>class RDEFormatFileCopier(Processor):\n    \"\"\"Specialized copier for RDEFormat mode.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#methods_1","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/files/#process_1","title":"process","text":"<p>Execute RDEFormat-specific file copying operations.</p> <pre><code>def process(self, context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context containing configuration and file paths</p> <p>Configuration Dependencies: - <code>config.save_raw</code>: Controls whether files are copied to raw directory</p> <p>Example: <pre><code>from rdetoolkit.processing.processors import RDEFormatFileCopier\n\nrde_copier = RDEFormatFileCopier()\nrde_copier.process(context)\n</code></pre></p> <p>Behavior: - Copies files by directory structure matching - Preserves original directory organization - Only operates when <code>save_raw</code> is enabled - Designed for RDEFormat mode processing</p>"},{"location":"rdetoolkit/processing/processors/files/#smarttablefilecopier","title":"SmartTableFileCopier","text":"<p>Specialized file copier for SmartTable mode. Copies files while excluding SmartTable-generated CSV files.</p> <pre><code>class SmartTableFileCopier(Processor):\n    \"\"\"Specialized copier for SmartTable mode.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#methods_2","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/files/#process_2","title":"process","text":"<p>Execute SmartTable-specific file copying operations.</p> <pre><code>def process(self, context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context containing configuration and file paths</p> <p>Configuration Dependencies: - <code>config.save_raw</code>: If True, copies filtered files to raw directory - <code>config.save_nonshared_raw</code>: If True, copies filtered files to nonshared_raw directory</p> <p>Example: <pre><code>from rdetoolkit.processing.processors import SmartTableFileCopier\n\nsmarttable_copier = SmartTableFileCopier()\nsmarttable_copier.process(context)\n</code></pre></p> <p>Behavior: - Filters out SmartTable-generated CSV files before copying - Identifies SmartTable CSVs by naming pattern (contains <code>_smarttable_</code>) - Copies remaining files to appropriate directories based on configuration - Maintains file organization while excluding auto-generated content</p>"},{"location":"rdetoolkit/processing/processors/files/#usage-examples","title":"Usage Examples","text":""},{"location":"rdetoolkit/processing/processors/files/#basic-file-copying","title":"Basic File Copying","text":"<pre><code>from rdetoolkit.processing.processors import FileCopier\nfrom rdetoolkit.processing.context import ProcessingContext\n\n# Standard file copying\nfile_copier = FileCopier()\nfile_copier.process(context)\n\n# Check what was copied\nif context.srcpaths.config.save_raw:\n    print(f\"Files copied to: {context.resource_paths.raw}\")\nif context.srcpaths.config.save_nonshared_raw:\n    print(f\"Files copied to: {context.resource_paths.nonshared_raw}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#mode-specific-file-copying","title":"Mode-Specific File Copying","text":"<pre><code>from rdetoolkit.processing.processors import (\n    FileCopier, RDEFormatFileCopier, SmartTableFileCopier\n)\n\ndef copy_files_by_mode(context: ProcessingContext):\n    \"\"\"Copy files using appropriate copier for the mode.\"\"\"\n\n    if context.mode_name.lower() == \"rdeformat\":\n        copier = RDEFormatFileCopier()\n    elif context.mode_name.lower() == \"smarttableinvoice\":\n        copier = SmartTableFileCopier()\n    else:\n        copier = FileCopier()\n\n    print(f\"Using {copier.get_name()} for {context.mode_name} mode\")\n    copier.process(context)\n\n# Usage\ncopy_files_by_mode(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#custom-file-filtering","title":"Custom File Filtering","text":"<pre><code>from rdetoolkit.processing.processors import FileCopier\nfrom pathlib import Path\n\nclass FilteredFileCopier(FileCopier):\n    \"\"\"File copier with custom filtering logic.\"\"\"\n\n    def __init__(self, allowed_extensions=None):\n        self.allowed_extensions = allowed_extensions or ['.txt', '.pdf', '.jpg', '.png']\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        # Filter files before copying\n        original_files = context.resource_paths.rawfiles\n        filtered_files = [\n            f for f in original_files\n            if f.suffix.lower() in self.allowed_extensions\n        ]\n\n        # Temporarily replace rawfiles for copying\n        context.resource_paths = context.resource_paths._replace(\n            rawfiles=tuple(filtered_files)\n        )\n\n        # Perform copying\n        super().process(context)\n\n        # Restore original file list\n        context.resource_paths = context.resource_paths._replace(\n            rawfiles=original_files\n        )\n\n        print(f\"Copied {len(filtered_files)} of {len(original_files)} files\")\n\n# Usage\nfiltered_copier = FilteredFileCopier(['.pdf', '.txt'])\nfiltered_copier.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#parallel-file-copying","title":"Parallel File Copying","text":"<pre><code>from rdetoolkit.processing.processors import FileCopier\nimport concurrent.futures\nimport shutil\n\nclass ParallelFileCopier(FileCopier):\n    \"\"\"File copier with parallel processing support.\"\"\"\n\n    def __init__(self, max_workers=4):\n        self.max_workers = max_workers\n\n    def _copy_files(self, source_files, target_dir):\n        \"\"\"Copy files in parallel.\"\"\"\n        target_dir.mkdir(parents=True, exist_ok=True)\n\n        def copy_single_file(source_file):\n            target_file = target_dir / source_file.name\n            shutil.copy2(source_file, target_file)\n            return source_file, target_file\n\n        with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:\n            futures = [executor.submit(copy_single_file, f) for f in source_files]\n\n            results = []\n            for future in concurrent.futures.as_completed(futures):\n                try:\n                    source, target = future.result()\n                    results.append((source, target))\n                except Exception as e:\n                    print(f\"Error copying file: {e}\")\n\n            return results\n\n# Usage\nparallel_copier = ParallelFileCopier(max_workers=8)\nparallel_copier.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#file-copy-verification","title":"File Copy Verification","text":"<pre><code>from rdetoolkit.processing.processors import FileCopier\nimport hashlib\n\nclass VerifiedFileCopier(FileCopier):\n    \"\"\"File copier with integrity verification.\"\"\"\n\n    def _copy_files(self, source_files, target_dir):\n        \"\"\"Copy files with verification.\"\"\"\n        target_dir.mkdir(parents=True, exist_ok=True)\n\n        verified_copies = []\n        failed_copies = []\n\n        for source_file in source_files:\n            target_file = target_dir / source_file.name\n\n            try:\n                # Copy file\n                shutil.copy2(source_file, target_file)\n\n                # Verify integrity\n                if self._verify_file_integrity(source_file, target_file):\n                    verified_copies.append((source_file, target_file))\n                else:\n                    failed_copies.append(source_file)\n                    target_file.unlink()  # Remove corrupted copy\n\n            except Exception as e:\n                print(f\"Error copying {source_file}: {e}\")\n                failed_copies.append(source_file)\n\n        if failed_copies:\n            print(f\"Warning: {len(failed_copies)} files failed verification\")\n\n        return verified_copies\n\n    def _verify_file_integrity(self, source_file, target_file):\n        \"\"\"Verify file integrity using SHA-256.\"\"\"\n        def get_file_hash(file_path):\n            hash_sha256 = hashlib.sha256()\n            with open(file_path, \"rb\") as f:\n                for chunk in iter(lambda: f.read(4096), b\"\"):\n                    hash_sha256.update(chunk)\n            return hash_sha256.hexdigest()\n\n        return get_file_hash(source_file) == get_file_hash(target_file)\n\n# Usage\nverified_copier = VerifiedFileCopier()\nverified_copier.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#error-handling","title":"Error Handling","text":""},{"location":"rdetoolkit/processing/processors/files/#file-operation-errors","title":"File Operation Errors","text":"<pre><code>from rdetoolkit.processing.processors import FileCopier\nimport shutil\n\nclass RobustFileCopier(FileCopier):\n    \"\"\"File copier with comprehensive error handling.\"\"\"\n\n    def _copy_files(self, source_files, target_dir):\n        \"\"\"Copy files with detailed error handling.\"\"\"\n        target_dir.mkdir(parents=True, exist_ok=True)\n\n        successful_copies = []\n        failed_copies = []\n\n        for source_file in source_files:\n            target_file = target_dir / source_file.name\n\n            try:\n                # Check source file exists and is readable\n                if not source_file.exists():\n                    raise FileNotFoundError(f\"Source file not found: {source_file}\")\n\n                if not source_file.is_file():\n                    raise ValueError(f\"Source is not a file: {source_file}\")\n\n                # Check target directory is writable\n                if not target_dir.exists():\n                    target_dir.mkdir(parents=True, exist_ok=True)\n\n                # Perform copy with error handling\n                shutil.copy2(source_file, target_file)\n                successful_copies.append((source_file, target_file))\n\n            except PermissionError as e:\n                print(f\"Permission denied copying {source_file}: {e}\")\n                failed_copies.append(source_file)\n            except FileNotFoundError as e:\n                print(f\"File not found: {e}\")\n                failed_copies.append(source_file)\n            except OSError as e:\n                print(f\"OS error copying {source_file}: {e}\")\n                failed_copies.append(source_file)\n            except Exception as e:\n                print(f\"Unexpected error copying {source_file}: {e}\")\n                failed_copies.append(source_file)\n\n        print(f\"File copy results: {len(successful_copies)} successful, {len(failed_copies)} failed\")\n        return successful_copies\n\n# Usage\nrobust_copier = RobustFileCopier()\nrobust_copier.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#configuration-validation","title":"Configuration Validation","text":"<pre><code>from rdetoolkit.processing.processors import FileCopier\n\nclass ValidatedFileCopier(FileCopier):\n    \"\"\"File copier with configuration validation.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        # Validate configuration\n        config = context.srcpaths.config\n\n        if not config.save_raw and not config.save_nonshared_raw:\n            print(\"Warning: No file copying enabled (save_raw and save_nonshared_raw both False)\")\n            return\n\n        # Validate source files exist\n        missing_files = [f for f in context.resource_paths.rawfiles if not f.exists()]\n        if missing_files:\n            print(f\"Warning: {len(missing_files)} source files not found\")\n            for f in missing_files:\n                print(f\"  Missing: {f}\")\n\n        # Validate output directories are accessible\n        if config.save_raw:\n            self._validate_output_directory(context.resource_paths.raw)\n        if config.save_nonshared_raw:\n            self._validate_output_directory(context.resource_paths.nonshared_raw)\n\n        # Perform copying\n        super().process(context)\n\n    def _validate_output_directory(self, directory: Path):\n        \"\"\"Validate output directory is accessible.\"\"\"\n        try:\n            directory.mkdir(parents=True, exist_ok=True)\n            # Test write access\n            test_file = directory / \".write_test\"\n            test_file.touch()\n            test_file.unlink()\n        except Exception as e:\n            raise PermissionError(f\"Cannot write to directory {directory}: {e}\")\n\n# Usage\nvalidated_copier = ValidatedFileCopier()\nvalidated_copier.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/files/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Large Files: Use streaming operations for large file copying</li> <li>Many Files: Consider parallel processing for multiple files</li> <li>Network Storage: Handle network timeout and retry logic</li> <li>Disk Space: Check available space before copying</li> <li>Memory Usage: Avoid loading entire files into memory</li> </ul>"},{"location":"rdetoolkit/processing/processors/files/#see-also","title":"See Also","text":"<ul> <li>Processing Context - Context management and configuration</li> <li>Pipeline Architecture - Core pipeline classes</li> <li>Invoice Processors - Invoice initialization processors</li> <li>Validation Processors - File validation processors</li> </ul>"},{"location":"rdetoolkit/processing/processors/invoice/","title":"Invoice Processors","text":"<p>The invoice processors handle invoice initialization for different processing modes including standard, Excel-based, and SmartTable-based invoice creation.</p>"},{"location":"rdetoolkit/processing/processors/invoice/#classes","title":"Classes","text":""},{"location":"rdetoolkit/processing/processors/invoice/#standardinvoiceinitializer","title":"StandardInvoiceInitializer","text":"<p>Handles invoice initialization for RDEFormat, MultiFile, and Invoice modes by copying the original invoice to the destination.</p> <pre><code>class StandardInvoiceInitializer(Processor):\n    \"\"\"Standard invoice initializer for RDEFormat, MultiFile, and Invoice modes.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#methods","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/invoice/#process","title":"process","text":"<p>Execute standard invoice initialization by copying the original invoice.</p> <pre><code>def process(self, context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context containing invoice paths</p> <p>Behavior: - Copies invoice from <code>invoice_org</code> to destination <code>invoice.json</code> - Creates destination directory if it doesn't exist - Handles file copying errors gracefully</p> <p>Example: <pre><code>from rdetoolkit.processing.processors import StandardInvoiceInitializer\n\ninitializer = StandardInvoiceInitializer()\ninitializer.process(context)\n</code></pre></p>"},{"location":"rdetoolkit/processing/processors/invoice/#excelinvoiceinitializer","title":"ExcelInvoiceInitializer","text":"<p>Handles invoice initialization for ExcelInvoice mode by creating invoice from Excel file data.</p> <pre><code>class ExcelInvoiceInitializer(Processor):\n    \"\"\"Invoice initializer for ExcelInvoice mode.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#methods_1","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/invoice/#process_1","title":"process","text":"<p>Execute Excel invoice initialization by parsing Excel data and creating invoice.</p> <pre><code>def process(self, context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context with Excel file information</p> <p>Raises: - <code>ValueError</code>: If context is not configured for Excel mode or if Excel index is invalid</p> <p>Behavior: - Validates context is in Excel mode - Parses Excel index from context - Creates invoice using Excel invoice processing functions - Handles Excel processing errors</p> <p>Example: <pre><code>from rdetoolkit.processing.processors import ExcelInvoiceInitializer\n\n# Context must be configured for Excel mode\nexcel_initializer = ExcelInvoiceInitializer()\nexcel_initializer.process(context)  # context.is_excel_mode must be True\n</code></pre></p>"},{"location":"rdetoolkit/processing/processors/invoice/#smarttableinvoiceinitializer","title":"SmartTableInvoiceInitializer","text":"<p>Handles invoice initialization for SmartTable mode by generating invoice from CSV data with complex field mapping.</p> <pre><code>class SmartTableInvoiceInitializer(Processor):\n    \"\"\"Invoice initializer for SmartTable mode.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#methods_2","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/invoice/#process_2","title":"process","text":"<p>Execute SmartTable invoice initialization by parsing CSV data and creating invoice.</p> <pre><code>def process(self, context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context with SmartTable file information</p> <p>Raises: - <code>ValueError</code>: If context is not configured for SmartTable mode - <code>FileNotFoundError</code>: If SmartTable CSV file is not found - <code>Exception</code>: If CSV parsing or invoice creation fails</p> <p>Behavior: - Validates context is in SmartTable mode - Reads and parses SmartTable CSV file - Maps CSV columns to invoice structure using complex field mapping - Processes general and specific attributes - Ensures required invoice fields are present - Creates final invoice JSON file</p> <p>Field Mapping: - Supports nested field mapping (e.g., <code>\"basic.dataName\"</code>) - Handles array fields and complex data structures - Provides fallback values for missing fields</p> <p>Example: <pre><code>from rdetoolkit.processing.processors import SmartTableInvoiceInitializer\n\n# Context must be configured for SmartTable mode\nsmarttable_initializer = SmartTableInvoiceInitializer()\nsmarttable_initializer.process(context)  # context.is_smarttable_mode must be True\n</code></pre></p>"},{"location":"rdetoolkit/processing/processors/invoice/#invoiceinitializerfactory","title":"InvoiceInitializerFactory","text":"<p>Factory class for creating appropriate invoice initializers based on processing mode.</p> <pre><code>class InvoiceInitializerFactory:\n    \"\"\"Factory for creating invoice initializers based on mode.\"\"\"\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#class-methods","title":"Class Methods","text":""},{"location":"rdetoolkit/processing/processors/invoice/#create","title":"create","text":"<p>Create an appropriate invoice initializer for the specified mode.</p> <pre><code>@classmethod\ndef create(cls, mode: str) -&gt; Processor\n</code></pre> <p>Parameters: - <code>mode</code> (str): Processing mode name</p> <p>Returns: - <code>Processor</code>: Appropriate invoice initializer for the mode</p> <p>Raises: - <code>ValueError</code>: If mode is not supported</p> <p>Supported Modes: - <code>\"rdeformat\"</code>: Returns <code>StandardInvoiceInitializer</code> - <code>\"multidatatile\"</code>: Returns <code>StandardInvoiceInitializer</code> - <code>\"invoice\"</code>: Returns <code>StandardInvoiceInitializer</code> - <code>\"excelinvoice\"</code>: Returns <code>ExcelInvoiceInitializer</code> - <code>\"smarttableinvoice\"</code>: Returns <code>SmartTableInvoiceInitializer</code></p> <p>Example: <pre><code>from rdetoolkit.processing.processors import InvoiceInitializerFactory\n\n# Create initializer for specific mode\ninitializer = InvoiceInitializerFactory.create(\"excelinvoice\")\ninitializer.process(context)\n\n# Dynamic mode selection\nmode = context.mode_name.lower()\ninitializer = InvoiceInitializerFactory.create(mode)\ninitializer.process(context)\n</code></pre></p>"},{"location":"rdetoolkit/processing/processors/invoice/#get_supported_modes","title":"get_supported_modes","text":"<p>Get list of supported processing modes.</p> <pre><code>@classmethod\ndef get_supported_modes(cls) -&gt; list[str]\n</code></pre> <p>Returns: - <code>list[str]</code>: List of supported mode names</p> <p>Example: <pre><code>modes = InvoiceInitializerFactory.get_supported_modes()\nprint(f\"Supported modes: {', '.join(modes)}\")\n</code></pre></p>"},{"location":"rdetoolkit/processing/processors/invoice/#usage-examples","title":"Usage Examples","text":""},{"location":"rdetoolkit/processing/processors/invoice/#basic-invoice-initialization","title":"Basic Invoice Initialization","text":"<pre><code>from rdetoolkit.processing.processors import StandardInvoiceInitializer\n\n# Standard invoice processing\nstandard_init = StandardInvoiceInitializer()\nstandard_init.process(context)\n\n# Check if invoice was created\nif context.invoice_dst_filepath.exists():\n    print(f\"Invoice created at: {context.invoice_dst_filepath}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#mode-based-invoice-initialization","title":"Mode-Based Invoice Initialization","text":"<pre><code>from rdetoolkit.processing.processors import InvoiceInitializerFactory\n\ndef initialize_invoice_by_mode(context: ProcessingContext):\n    \"\"\"Initialize invoice using appropriate initializer for the mode.\"\"\"\n\n    try:\n        # Create appropriate initializer\n        initializer = InvoiceInitializerFactory.create(context.mode_name.lower())\n\n        print(f\"Using {initializer.get_name()} for {context.mode_name} mode\")\n\n        # Execute initialization\n        initializer.process(context)\n\n        print(f\"Invoice initialized successfully\")\n\n    except ValueError as e:\n        print(f\"Unsupported mode: {e}\")\n    except Exception as e:\n        print(f\"Invoice initialization failed: {e}\")\n        raise\n\n# Usage\ninitialize_invoice_by_mode(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#excel-invoice-processing","title":"Excel Invoice Processing","text":"<pre><code>from rdetoolkit.processing.processors import ExcelInvoiceInitializer\nfrom rdetoolkit.processing.context import ProcessingContext\n\ndef process_excel_invoice(context: ProcessingContext):\n    \"\"\"Process Excel invoice with validation.\"\"\"\n\n    # Validate context for Excel processing\n    if not context.is_excel_mode:\n        raise ValueError(\"Context not configured for Excel mode\")\n\n    # Check Excel file exists\n    excel_file = context.excel_invoice_file\n    if not excel_file.exists():\n        raise FileNotFoundError(f\"Excel file not found: {excel_file}\")\n\n    # Initialize Excel invoice\n    excel_init = ExcelInvoiceInitializer()\n    excel_init.process(context)\n\n    print(f\"Excel invoice processed from: {excel_file}\")\n\n# Usage with Excel context\nexcel_context = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=None,\n    mode_name=\"ExcelInvoice\",\n    excel_file=Path(\"data/inputdata/dataset_excel_invoice.xlsx\"),\n    excel_index=1\n)\n\nprocess_excel_invoice(excel_context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#smarttable-invoice-processing","title":"SmartTable Invoice Processing","text":"<pre><code>from rdetoolkit.processing.processors import SmartTableInvoiceInitializer\nfrom rdetoolkit.processing.context import ProcessingContext\n\ndef process_smarttable_invoice(context: ProcessingContext):\n    \"\"\"Process SmartTable invoice with validation.\"\"\"\n\n    # Validate context for SmartTable processing\n    if not context.is_smarttable_mode:\n        raise ValueError(\"Context not configured for SmartTable mode\")\n\n    # Check SmartTable file exists\n    smarttable_file = context.smarttable_invoice_file\n    if not smarttable_file.exists():\n        raise FileNotFoundError(f\"SmartTable file not found: {smarttable_file}\")\n\n    # Initialize SmartTable invoice\n    smarttable_init = SmartTableInvoiceInitializer()\n    smarttable_init.process(context)\n\n    print(f\"SmartTable invoice processed from: {smarttable_file}\")\n\n# Usage with SmartTable context\nsmarttable_context = ProcessingContext(\n    index=\"1\",\n    srcpaths=srcpaths,\n    resource_paths=resource_paths,\n    datasets_function=None,\n    mode_name=\"SmartTableInvoice\",\n    smarttable_file=Path(\"data/inputdata/smarttable_data.csv\")\n)\n\nprocess_smarttable_invoice(smarttable_context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#custom-invoice-initializer","title":"Custom Invoice Initializer","text":"<pre><code>from rdetoolkit.processing.processors import StandardInvoiceInitializer\nimport json\nfrom datetime import datetime\n\nclass TimestampedInvoiceInitializer(StandardInvoiceInitializer):\n    \"\"\"Invoice initializer that adds timestamp to invoice data.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        # First, copy the original invoice\n        super().process(context)\n\n        # Then add timestamp\n        self._add_timestamp(context)\n\n    def _add_timestamp(self, context: ProcessingContext):\n        \"\"\"Add processing timestamp to invoice.\"\"\"\n        invoice_file = context.invoice_dst_filepath\n\n        if not invoice_file.exists():\n            return\n\n        try:\n            # Read existing invoice\n            with open(invoice_file, 'r', encoding='utf-8') as f:\n                invoice_data = json.load(f)\n\n            # Add timestamp\n            if 'processing' not in invoice_data:\n                invoice_data['processing'] = {}\n\n            invoice_data['processing']['timestamp'] = datetime.now().isoformat()\n            invoice_data['processing']['mode'] = context.mode_name\n\n            # Write back\n            with open(invoice_file, 'w', encoding='utf-8') as f:\n                json.dump(invoice_data, f, indent=2, ensure_ascii=False)\n\n            print(f\"Added timestamp to invoice: {invoice_file}\")\n\n        except Exception as e:\n            print(f\"Warning: Could not add timestamp to invoice: {e}\")\n\n# Usage\ntimestamped_init = TimestampedInvoiceInitializer()\ntimestamped_init.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#parallel-invoice-processing","title":"Parallel Invoice Processing","text":"<pre><code>from rdetoolkit.processing.processors import InvoiceInitializerFactory\nimport concurrent.futures\n\ndef process_multiple_invoices(contexts: list[ProcessingContext]):\n    \"\"\"Process multiple invoices in parallel.\"\"\"\n\n    def process_single_invoice(context):\n        try:\n            initializer = InvoiceInitializerFactory.create(context.mode_name.lower())\n            initializer.process(context)\n            return context.index, \"success\", None\n        except Exception as e:\n            return context.index, \"failed\", str(e)\n\n    # Process invoices in parallel\n    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n        futures = [executor.submit(process_single_invoice, ctx) for ctx in contexts]\n\n        results = []\n        for future in concurrent.futures.as_completed(futures):\n            index, status, error = future.result()\n            results.append((index, status, error))\n\n            if status == \"success\":\n                print(f\"\u2713 Invoice {index} processed successfully\")\n            else:\n                print(f\"\u2717 Invoice {index} failed: {error}\")\n\n    # Summary\n    successful = sum(1 for _, status, _ in results if status == \"success\")\n    failed = len(results) - successful\n    print(f\"Processing complete: {successful} successful, {failed} failed\")\n\n    return results\n\n# Usage\ncontexts = [context1, context2, context3]  # List of processing contexts\nresults = process_multiple_invoices(contexts)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#error-handling","title":"Error Handling","text":""},{"location":"rdetoolkit/processing/processors/invoice/#mode-validation","title":"Mode Validation","text":"<pre><code>from rdetoolkit.processing.processors import InvoiceInitializerFactory\n\ndef safe_invoice_initialization(context: ProcessingContext):\n    \"\"\"Safely initialize invoice with comprehensive error handling.\"\"\"\n\n    try:\n        # Validate mode\n        supported_modes = InvoiceInitializerFactory.get_supported_modes()\n        mode = context.mode_name.lower()\n\n        if mode not in supported_modes:\n            raise ValueError(f\"Unsupported mode: {mode}. Supported: {supported_modes}\")\n\n        # Validate context configuration\n        if mode == \"excelinvoice\" and not context.is_excel_mode:\n            raise ValueError(\"Context not properly configured for Excel mode\")\n\n        if mode == \"smarttableinvoice\" and not context.is_smarttable_mode:\n            raise ValueError(\"Context not properly configured for SmartTable mode\")\n\n        # Create and execute initializer\n        initializer = InvoiceInitializerFactory.create(mode)\n        initializer.process(context)\n\n        # Validate result\n        if not context.invoice_dst_filepath.exists():\n            raise RuntimeError(\"Invoice file was not created\")\n\n        print(f\"\u2713 Invoice initialization successful for {mode} mode\")\n        return True\n\n    except ValueError as e:\n        print(f\"\u2717 Configuration error: {e}\")\n        return False\n    except FileNotFoundError as e:\n        print(f\"\u2717 File not found: {e}\")\n        return False\n    except RuntimeError as e:\n        print(f\"\u2717 Processing error: {e}\")\n        return False\n    except Exception as e:\n        print(f\"\u2717 Unexpected error: {e}\")\n        return False\n\n# Usage\nsuccess = safe_invoice_initialization(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#excel-processing-errors","title":"Excel Processing Errors","text":"<pre><code>from rdetoolkit.processing.processors import ExcelInvoiceInitializer\n\nclass RobustExcelInvoiceInitializer(ExcelInvoiceInitializer):\n    \"\"\"Excel invoice initializer with enhanced error handling.\"\"\"\n\n    def process(self, context: ProcessingContext) -&gt; None:\n        try:\n            # Validate Excel context\n            self._validate_excel_context(context)\n\n            # Validate Excel file\n            self._validate_excel_file(context)\n\n            # Process Excel invoice\n            super().process(context)\n\n        except ValueError as e:\n            print(f\"Excel validation error: {e}\")\n            raise\n        except FileNotFoundError as e:\n            print(f\"Excel file error: {e}\")\n            raise\n        except Exception as e:\n            print(f\"Excel processing error: {e}\")\n            # Try to create a minimal invoice as fallback\n            self._create_fallback_invoice(context)\n\n    def _validate_excel_context(self, context: ProcessingContext):\n        \"\"\"Validate context for Excel processing.\"\"\"\n        if not context.is_excel_mode:\n            raise ValueError(\"Context not configured for Excel mode\")\n\n        if context.excel_index is None:\n            raise ValueError(\"Excel index not set\")\n\n    def _validate_excel_file(self, context: ProcessingContext):\n        \"\"\"Validate Excel file exists and is readable.\"\"\"\n        excel_file = context.excel_invoice_file\n\n        if not excel_file.exists():\n            raise FileNotFoundError(f\"Excel file not found: {excel_file}\")\n\n        if not excel_file.is_file():\n            raise ValueError(f\"Excel path is not a file: {excel_file}\")\n\n        # Check file extension\n        if excel_file.suffix.lower() not in ['.xlsx', '.xls']:\n            raise ValueError(f\"Invalid Excel file extension: {excel_file.suffix}\")\n\n    def _create_fallback_invoice(self, context: ProcessingContext):\n        \"\"\"Create minimal invoice as fallback.\"\"\"\n        fallback_data = {\n            \"basic\": {\n                \"dataName\": f\"Fallback Invoice {context.index}\",\n                \"experimentDate\": datetime.now().strftime(\"%Y-%m-%d\"),\n            },\n            \"custom\": {},\n            \"processing\": {\n                \"mode\": \"excelinvoice_fallback\",\n                \"error\": \"Failed to process Excel file, using fallback\"\n            }\n        }\n\n        # Write fallback invoice\n        invoice_file = context.invoice_dst_filepath\n        invoice_file.parent.mkdir(parents=True, exist_ok=True)\n\n        with open(invoice_file, 'w', encoding='utf-8') as f:\n            json.dump(fallback_data, f, indent=2, ensure_ascii=False)\n\n        print(f\"Created fallback invoice: {invoice_file}\")\n\n# Usage\nrobust_excel_init = RobustExcelInvoiceInitializer()\nrobust_excel_init.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#smarttable-field-mapping","title":"SmartTable Field Mapping","text":""},{"location":"rdetoolkit/processing/processors/invoice/#custom-field-mapping","title":"Custom Field Mapping","text":"<pre><code>from rdetoolkit.processing.processors import SmartTableInvoiceInitializer\nimport json\n\nclass CustomSmartTableInitializer(SmartTableInvoiceInitializer):\n    \"\"\"SmartTable initializer with custom field mapping.\"\"\"\n\n    def __init__(self, custom_mapping=None):\n        self.custom_mapping = custom_mapping or {}\n\n    def _process_mapping_key(self, row_data, mapping_key, invoice_data):\n        \"\"\"Process mapping with custom rules.\"\"\"\n\n        # Check for custom mapping first\n        if mapping_key in self.custom_mapping:\n            custom_processor = self.custom_mapping[mapping_key]\n            return custom_processor(row_data, invoice_data)\n\n        # Fall back to default processing\n        return super()._process_mapping_key(row_data, mapping_key, invoice_data)\n\n# Define custom field processors\ndef process_temperature_field(row_data, invoice_data):\n    \"\"\"Custom processor for temperature fields.\"\"\"\n    temp_celsius = row_data.get('temperature_c')\n    if temp_celsius:\n        # Convert to Kelvin and store both\n        temp_kelvin = float(temp_celsius) + 273.15\n        return {\n            'temperature': {\n                'celsius': float(temp_celsius),\n                'kelvin': temp_kelvin,\n                'unit': 'C'\n            }\n        }\n    return {}\n\ndef process_sample_info(row_data, invoice_data):\n    \"\"\"Custom processor for sample information.\"\"\"\n    return {\n        'sample': {\n            'id': row_data.get('sample_id', ''),\n            'name': row_data.get('sample_name', ''),\n            'batch': row_data.get('batch_number', ''),\n            'prepared_date': row_data.get('prep_date', '')\n        }\n    }\n\n# Usage with custom mapping\ncustom_mapping = {\n    'temperature': process_temperature_field,\n    'sample_info': process_sample_info,\n}\n\ncustom_init = CustomSmartTableInitializer(custom_mapping)\ncustom_init.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/invoice/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Large Excel Files: Consider memory usage when processing large Excel files</li> <li>CSV Parsing: Use efficient CSV parsing for large SmartTable files</li> <li>File I/O: Minimize file read/write operations</li> <li>Error Recovery: Implement fallback strategies for critical processing</li> <li>Validation: Validate data early to prevent downstream errors</li> </ul>"},{"location":"rdetoolkit/processing/processors/invoice/#see-also","title":"See Also","text":"<ul> <li>Processing Context - Context management and mode configuration</li> <li>Pipeline Architecture - Core pipeline classes</li> <li>File Processors - File copying and management</li> <li>Validation Processors - Invoice and metadata validation</li> </ul>"},{"location":"rdetoolkit/processing/processors/thumbnails/","title":"Thumbnail Processing Processor","text":"<p>The <code>rdetoolkit.processing.processors.thumbnails</code> module provides a processor for generating thumbnail images from source images. This processor creates optimized thumbnail versions of images for quick preview and display purposes.</p>"},{"location":"rdetoolkit/processing/processors/thumbnails/#overview","title":"Overview","text":"<p>The thumbnail processor provides:</p> <ul> <li>Automatic Thumbnail Generation: Create thumbnails from main image files</li> <li>Conditional Processing: Generate thumbnails only when enabled in configuration</li> <li>Error Tolerance: Non-critical processing that continues on errors</li> <li>Image Optimization: Efficient thumbnail creation with appropriate sizing</li> <li>Batch Processing: Handle multiple images in a single processing run</li> </ul>"},{"location":"rdetoolkit/processing/processors/thumbnails/#classes","title":"Classes","text":""},{"location":"rdetoolkit/processing/processors/thumbnails/#thumbnailgenerator","title":"ThumbnailGenerator","text":"<p>Generates thumbnail images from source images in the main_image directory.</p>"},{"location":"rdetoolkit/processing/processors/thumbnails/#constructor","title":"Constructor","text":"<pre><code>ThumbnailGenerator()\n</code></pre> <p>No parameters required. Inherits from <code>Processor</code> base class.</p>"},{"location":"rdetoolkit/processing/processors/thumbnails/#methods","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/thumbnails/#processcontext","title":"process(context)","text":"<p>Generate thumbnails if enabled in configuration.</p> <pre><code>def process(context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context containing configuration and resource paths</p> <p>Returns: - <code>None</code></p> <p>Raises: - Does not raise exceptions for thumbnail generation failures (logs warnings instead)</p> <p>Example: <pre><code>from rdetoolkit.processing.processors.thumbnails import ThumbnailGenerator\n\ngenerator = ThumbnailGenerator()\ngenerator.process(context)  # Generates thumbnails if enabled\n</code></pre></p> <p>Required Context Attributes: - <code>context.srcpaths.config.system.save_thumbnail_image</code>: Boolean flag to enable/disable thumbnail generation - <code>context.resource_paths.thumbnail</code>: Path to thumbnail output directory - <code>context.resource_paths.main_image</code>: Path to main image source directory</p> <p>Processing Logic: 1. Check if thumbnail generation is enabled in configuration 2. Verify main image directory contains image files 3. Generate thumbnails for all supported image formats 4. Save thumbnails to designated thumbnail directory 5. Handle errors gracefully without interrupting the processing pipeline</p>"},{"location":"rdetoolkit/processing/processors/thumbnails/#image-processing-details","title":"Image Processing Details","text":""},{"location":"rdetoolkit/processing/processors/thumbnails/#supported-image-formats","title":"Supported Image Formats","text":"<p>The thumbnail generator supports common image formats: - JPEG (.jpg, .jpeg) - PNG (.png) - TIFF (.tiff, .tif) - BMP (.bmp) - GIF (.gif)</p>"},{"location":"rdetoolkit/processing/processors/thumbnails/#thumbnail-specifications","title":"Thumbnail Specifications","text":"<ul> <li>Default Size: Optimized for quick loading and display</li> <li>Aspect Ratio: Preserved from original images</li> <li>Quality: Balanced between file size and visual quality</li> <li>Format: Output format matches input format where possible</li> </ul>"},{"location":"rdetoolkit/processing/processors/thumbnails/#generation-process","title":"Generation Process","text":"<ol> <li>Source Detection: Scan main_image directory for supported image files</li> <li>Size Calculation: Calculate optimal thumbnail dimensions</li> <li>Image Processing: Resize images while preserving aspect ratio</li> <li>Format Conversion: Convert to appropriate thumbnail format</li> <li>Output: Save thumbnails with consistent naming convention</li> </ol>"},{"location":"rdetoolkit/processing/processors/thumbnails/#complete-usage-examples","title":"Complete Usage Examples","text":""},{"location":"rdetoolkit/processing/processors/thumbnails/#basic-thumbnail-generation","title":"Basic Thumbnail Generation","text":"<pre><code>from rdetoolkit.processing.processors.thumbnails import ThumbnailGenerator\nfrom rdetoolkit.processing.context import ProcessingContext\nfrom pathlib import Path\n\n# Create thumbnail generator\ngenerator = ThumbnailGenerator()\n\n# Create processing context with thumbnail generation enabled\ncontext = ProcessingContext(\n    srcpaths=srcpaths,  # srcpaths.config.system.save_thumbnail_image = True\n    resource_paths=resource_paths,  # Contains thumbnail and main_image paths\n    # ... other parameters\n)\n\n# Generate thumbnails\ngenerator.process(context)\nprint(\"Thumbnail generation completed\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#conditional-thumbnail-processing","title":"Conditional Thumbnail Processing","text":"<pre><code>from rdetoolkit.processing.processors.thumbnails import ThumbnailGenerator\n\ndef process_thumbnails_conditionally(context):\n    \"\"\"Generate thumbnails with configuration check.\"\"\"\n\n    # Check if thumbnail generation is enabled\n    if not context.srcpaths.config.system.save_thumbnail_image:\n        print(\"Thumbnail generation disabled, skipping\")\n        return\n\n    # Check if main images exist\n    main_image_path = context.resource_paths.main_image\n    if not main_image_path.exists() or not any(main_image_path.iterdir()):\n        print(\"No main images found for thumbnail generation\")\n        return\n\n    # Generate thumbnails\n    generator = ThumbnailGenerator()\n    generator.process(context)\n    print(\"Thumbnails generated successfully\")\n\n# Usage\nprocess_thumbnails_conditionally(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#thumbnail-generation-with-monitoring","title":"Thumbnail Generation with Monitoring","text":"<pre><code>from rdetoolkit.processing.processors.thumbnails import ThumbnailGenerator\nfrom pathlib import Path\nimport logging\n\ndef generate_thumbnails_with_monitoring(context):\n    \"\"\"Generate thumbnails with detailed monitoring.\"\"\"\n\n    logger = logging.getLogger(__name__)\n\n    # Pre-processing checks\n    main_image_dir = context.resource_paths.main_image\n    thumbnail_dir = context.resource_paths.thumbnail\n\n    if not main_image_dir.exists():\n        logger.warning(f\"Main image directory not found: {main_image_dir}\")\n        return\n\n    # Count source images\n    image_extensions = {'.jpg', '.jpeg', '.png', '.tiff', '.tif', '.bmp', '.gif'}\n    source_images = [\n        f for f in main_image_dir.iterdir()\n        if f.is_file() and f.suffix.lower() in image_extensions\n    ]\n\n    logger.info(f\"Found {len(source_images)} source images for thumbnail generation\")\n\n    # Generate thumbnails\n    generator = ThumbnailGenerator()\n    generator.process(context)\n\n    # Post-processing verification\n    if thumbnail_dir.exists():\n        thumbnail_files = list(thumbnail_dir.glob('*'))\n        logger.info(f\"Generated {len(thumbnail_files)} thumbnail files\")\n\n        # Log thumbnail details\n        for thumb_file in thumbnail_files:\n            size = thumb_file.stat().st_size\n            logger.debug(f\"Thumbnail: {thumb_file.name} ({size} bytes)\")\n    else:\n        logger.warning(\"Thumbnail directory not created\")\n\n# Usage\ngenerate_thumbnails_with_monitoring(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#batch-thumbnail-processing","title":"Batch Thumbnail Processing","text":"<pre><code>from rdetoolkit.processing.processors.thumbnails import ThumbnailGenerator\nfrom pathlib import Path\n\ndef batch_thumbnail_processing(contexts):\n    \"\"\"Process thumbnails for multiple datasets.\"\"\"\n\n    generator = ThumbnailGenerator()\n    results = []\n\n    for i, context in enumerate(contexts):\n        print(f\"Processing thumbnails for dataset {i+1}/{len(contexts)}\")\n\n        try:\n            # Check configuration\n            if context.srcpaths.config.system.save_thumbnail_image:\n                generator.process(context)\n                results.append({\n                    \"dataset\": i,\n                    \"status\": \"completed\",\n                    \"thumbnail_dir\": str(context.resource_paths.thumbnail)\n                })\n            else:\n                results.append({\n                    \"dataset\": i,\n                    \"status\": \"skipped\",\n                    \"reason\": \"thumbnail generation disabled\"\n                })\n\n        except Exception as e:\n            # This should rarely happen as ThumbnailGenerator handles errors internally\n            results.append({\n                \"dataset\": i,\n                \"status\": \"error\",\n                \"error\": str(e)\n            })\n\n    return results\n\n# Create multiple contexts for batch processing\ncontexts = [\n    ProcessingContext(\n        resource_paths=ResourcePaths(\n            main_image=Path(f\"dataset_{i}/main_image\"),\n            thumbnail=Path(f\"dataset_{i}/thumbnail\")\n        ),\n        srcpaths=srcpaths\n    )\n    for i in range(5)\n]\n\n# Process batch\nresults = batch_thumbnail_processing(contexts)\ncompleted = len([r for r in results if r['status'] == 'completed'])\nprint(f\"Processed thumbnails for {completed} datasets\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#custom-thumbnail-workflow","title":"Custom Thumbnail Workflow","text":"<pre><code>from rdetoolkit.processing.processors.thumbnails import ThumbnailGenerator\nfrom pathlib import Path\nimport shutil\n\nclass ThumbnailWorkflow:\n    \"\"\"Custom workflow for thumbnail processing with additional features.\"\"\"\n\n    def __init__(self, backup_enabled=False):\n        self.backup_enabled = backup_enabled\n        self.processing_stats = {\n            \"processed\": 0,\n            \"skipped\": 0,\n            \"errors\": 0\n        }\n\n    def process_with_backup(self, context):\n        \"\"\"Process thumbnails with optional backup.\"\"\"\n\n        thumbnail_dir = context.resource_paths.thumbnail\n\n        # Create backup if enabled\n        backup_dir = None\n        if self.backup_enabled and thumbnail_dir.exists():\n            backup_dir = self._create_backup(thumbnail_dir)\n\n        try:\n            # Generate thumbnails\n            generator = ThumbnailGenerator()\n            generator.process(context)\n\n            self.processing_stats[\"processed\"] += 1\n            return True\n\n        except Exception as e:\n            self.processing_stats[\"errors\"] += 1\n\n            # Restore backup if generation failed\n            if backup_dir:\n                self._restore_backup(backup_dir, thumbnail_dir)\n\n            print(f\"Thumbnail processing failed: {e}\")\n            return False\n\n    def _create_backup(self, thumbnail_dir: Path) -&gt; Path:\n        \"\"\"Create backup of existing thumbnails.\"\"\"\n        backup_dir = thumbnail_dir.parent / f\"{thumbnail_dir.name}_backup\"\n        if backup_dir.exists():\n            shutil.rmtree(backup_dir)\n        shutil.copytree(thumbnail_dir, backup_dir)\n        return backup_dir\n\n    def _restore_backup(self, backup_dir: Path, thumbnail_dir: Path):\n        \"\"\"Restore thumbnails from backup.\"\"\"\n        if thumbnail_dir.exists():\n            shutil.rmtree(thumbnail_dir)\n        shutil.copytree(backup_dir, thumbnail_dir)\n        shutil.rmtree(backup_dir)  # Clean up backup\n\n    def get_statistics(self):\n        \"\"\"Get processing statistics.\"\"\"\n        return self.processing_stats.copy()\n\n# Usage\nworkflow = ThumbnailWorkflow(backup_enabled=True)\nsuccess = workflow.process_with_backup(context)\nstats = workflow.get_statistics()\nprint(f\"Processing stats: {stats}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#thumbnail-quality-verification","title":"Thumbnail Quality Verification","text":"<pre><code>from rdetoolkit.processing.processors.thumbnails import ThumbnailGenerator\nfrom pathlib import Path\nfrom PIL import Image\nimport logging\n\ndef verify_thumbnail_quality(context):\n    \"\"\"Generate thumbnails and verify quality.\"\"\"\n\n    logger = logging.getLogger(__name__)\n\n    # Generate thumbnails\n    generator = ThumbnailGenerator()\n    generator.process(context)\n\n    # Verify generated thumbnails\n    thumbnail_dir = context.resource_paths.thumbnail\n    main_image_dir = context.resource_paths.main_image\n\n    if not thumbnail_dir.exists():\n        logger.warning(\"No thumbnail directory created\")\n        return\n\n    # Check each thumbnail\n    verification_results = []\n\n    for thumb_file in thumbnail_dir.iterdir():\n        if thumb_file.is_file():\n            try:\n                # Open and verify thumbnail\n                with Image.open(thumb_file) as img:\n                    width, height = img.size\n                    format_name = img.format\n\n                    # Find corresponding source image\n                    source_file = find_source_image(thumb_file.stem, main_image_dir)\n\n                    verification_results.append({\n                        \"thumbnail\": thumb_file.name,\n                        \"size\": f\"{width}x{height}\",\n                        \"format\": format_name,\n                        \"source_found\": source_file is not None,\n                        \"file_size\": thumb_file.stat().st_size\n                    })\n\n            except Exception as e:\n                logger.error(f\"Failed to verify thumbnail {thumb_file}: {e}\")\n                verification_results.append({\n                    \"thumbnail\": thumb_file.name,\n                    \"error\": str(e)\n                })\n\n    # Log verification results\n    valid_thumbnails = [r for r in verification_results if \"error\" not in r]\n    logger.info(f\"Verified {len(valid_thumbnails)} valid thumbnails\")\n\n    return verification_results\n\ndef find_source_image(thumb_stem: str, main_image_dir: Path) -&gt; Path:\n    \"\"\"Find source image for thumbnail.\"\"\"\n    extensions = ['.jpg', '.jpeg', '.png', '.tiff', '.tif', '.bmp', '.gif']\n\n    for ext in extensions:\n        source_file = main_image_dir / f\"{thumb_stem}{ext}\"\n        if source_file.exists():\n            return source_file\n\n    return None\n\n# Usage\nresults = verify_thumbnail_quality(context)\nprint(f\"Verification completed for {len(results)} thumbnails\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#integration-with-processing-pipeline","title":"Integration with Processing Pipeline","text":""},{"location":"rdetoolkit/processing/processors/thumbnails/#pipeline-integration","title":"Pipeline Integration","text":"<pre><code>from rdetoolkit.processing.pipeline import ProcessingPipeline\nfrom rdetoolkit.processing.processors.thumbnails import ThumbnailGenerator\n\n# Create processing pipeline\npipeline = ProcessingPipeline()\n\n# Add processors in logical order\n# pipeline.add_processor(FileProcessor())  # Copy images to main_image\n# pipeline.add_processor(ImageProcessor())  # Process main images\n\n# Add thumbnail generator after image processing\npipeline.add_processor(ThumbnailGenerator())\n\n# Add final processors\n# pipeline.add_processor(ValidationProcessor())\n\n# Execute pipeline\npipeline.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#conditional-pipeline-processing","title":"Conditional Pipeline Processing","text":"<pre><code>def create_image_processing_pipeline(config):\n    \"\"\"Create pipeline with conditional thumbnail generation.\"\"\"\n\n    pipeline = ProcessingPipeline()\n\n    # Add standard image processors\n    pipeline.add_processor(ImageFileProcessor())\n    pipeline.add_processor(ImageResizer())\n\n    # Add thumbnail generator only if enabled\n    if config.system.save_thumbnail_image:\n        pipeline.add_processor(ThumbnailGenerator())\n\n    return pipeline\n\n# Usage\npipeline = create_image_processing_pipeline(config)\npipeline.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#error-handling","title":"Error Handling","text":""},{"location":"rdetoolkit/processing/processors/thumbnails/#error-tolerance","title":"Error Tolerance","text":"<p>The ThumbnailGenerator is designed to be error-tolerant:</p> <pre><code># Internal error handling (from the processor implementation)\ntry:\n    img2thumb.copy_images_to_thumbnail(\n        context.resource_paths.thumbnail,\n        context.resource_paths.main_image,\n    )\n    logger.debug(\"Thumbnail generation completed successfully\")\nexcept Exception as e:\n    logger.warning(f\"Thumbnail generation failed: {str(e)}\")\n    # Don't raise the exception as thumbnail generation is not critical\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always check configuration before processing:    <pre><code>if context.srcpaths.config.system.save_thumbnail_image:\n    generator.process(context)\nelse:\n    logger.debug(\"Thumbnail generation disabled\")\n</code></pre></p> </li> <li> <p>Verify source images exist:    <pre><code>main_image_dir = context.resource_paths.main_image\nif main_image_dir.exists() and any(main_image_dir.iterdir()):\n    generator.process(context)\nelse:\n    logger.info(\"No source images found for thumbnail generation\")\n</code></pre></p> </li> <li> <p>Handle thumbnail generation as optional:    <pre><code>try:\n    generator.process(context)\nexcept Exception as e:\n    # Thumbnail generation failures should not stop processing\n    logger.warning(f\"Thumbnail generation failed, continuing: {e}\")\n</code></pre></p> </li> <li> <p>Monitor disk space for thumbnail storage:    <pre><code>import shutil\n\n# Check available space\ntotal, used, free = shutil.disk_usage(context.resource_paths.thumbnail.parent)\nif free &lt; estimated_thumbnail_size:\n    logger.warning(\"Low disk space, thumbnail generation may fail\")\n</code></pre></p> </li> </ol>"},{"location":"rdetoolkit/processing/processors/thumbnails/#configuration-dependencies","title":"Configuration Dependencies","text":""},{"location":"rdetoolkit/processing/processors/thumbnails/#system-configuration","title":"System Configuration","text":"<p>Thumbnail processing depends on system configuration:</p> <pre><code>system:\n  save_thumbnail_image: true  # Enable thumbnail generation\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#directory-structure","title":"Directory Structure","text":"<p>Thumbnail processing requires: - Main Image Directory: <code>context.resource_paths.main_image</code> containing source images - Thumbnail Directory: <code>context.resource_paths.thumbnail</code> for output thumbnails</p>"},{"location":"rdetoolkit/processing/processors/thumbnails/#image-processing-dependencies","title":"Image Processing Dependencies","text":"<ul> <li>img2thumb module: Core image processing functionality</li> <li>PIL/Pillow: Image processing library (dependency of img2thumb)</li> <li>Supported formats: Depends on PIL/Pillow installation</li> </ul>"},{"location":"rdetoolkit/processing/processors/thumbnails/#performance-notes","title":"Performance Notes","text":"<ul> <li>Thumbnail generation is CPU-intensive for large images</li> <li>Processing is optimized for batch operations on multiple images</li> <li>Memory usage is managed efficiently during image processing</li> <li>Error handling is designed to not interrupt the processing pipeline</li> <li>Thumbnail generation is performed in parallel where possible</li> </ul>"},{"location":"rdetoolkit/processing/processors/thumbnails/#use-cases","title":"Use Cases","text":""},{"location":"rdetoolkit/processing/processors/thumbnails/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Web Display: Generate thumbnails for web-based image galleries</li> <li>Quick Preview: Create small images for rapid preview in applications</li> <li>Index Generation: Generate image indexes with thumbnail previews</li> <li>Bandwidth Optimization: Reduce bandwidth usage for image previews</li> <li>Mobile Applications: Provide optimized images for mobile displays</li> </ol>"},{"location":"rdetoolkit/processing/processors/thumbnails/#example-directory-structure","title":"Example Directory Structure","text":"<pre><code>project/\n\u251c\u2500\u2500 main_image/           # Source images\n\u2502   \u251c\u2500\u2500 image001.jpg\n\u2502   \u251c\u2500\u2500 image002.png\n\u2502   \u2514\u2500\u2500 image003.tiff\n\u2514\u2500\u2500 thumbnail/            # Generated thumbnails\n    \u251c\u2500\u2500 image001.jpg      # Thumbnail version\n    \u251c\u2500\u2500 image002.png      # Thumbnail version\n    \u2514\u2500\u2500 image003.jpg      # Converted thumbnail\n</code></pre>"},{"location":"rdetoolkit/processing/processors/thumbnails/#see-also","title":"See Also","text":"<ul> <li>Processing Context - For understanding processing context structure</li> <li>Pipeline Documentation - For processor pipeline integration</li> <li>Image Processing - For core image processing utilities</li> <li>Configuration Guide - For system configuration options</li> </ul>"},{"location":"rdetoolkit/processing/processors/validation/","title":"Validation Processors","text":"<p>The <code>rdetoolkit.processing.processors.validation</code> module provides validation processors that ensure data integrity and compliance with schemas. These processors validate invoice files and metadata against predefined schemas and validation rules.</p>"},{"location":"rdetoolkit/processing/processors/validation/#overview","title":"Overview","text":"<p>The validation processors provide:</p> <ul> <li>Invoice Validation: Validate invoice.json files against JSON schemas</li> <li>Metadata Validation: Validate metadata.json files for completeness and format</li> <li>Schema Compliance: Ensure data structure compliance with RDE standards</li> <li>Error Reporting: Comprehensive error reporting for validation failures</li> <li>Optional Validation: Graceful handling when files don't exist</li> </ul>"},{"location":"rdetoolkit/processing/processors/validation/#classes","title":"Classes","text":""},{"location":"rdetoolkit/processing/processors/validation/#invoicevalidator","title":"InvoiceValidator","text":"<p>Validates invoice files against JSON schema specifications.</p>"},{"location":"rdetoolkit/processing/processors/validation/#constructor","title":"Constructor","text":"<pre><code>InvoiceValidator()\n</code></pre> <p>No parameters required. Inherits from <code>Processor</code> base class.</p>"},{"location":"rdetoolkit/processing/processors/validation/#methods","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/validation/#processcontext","title":"process(context)","text":"<p>Validate invoice.json against schema.</p> <pre><code>def process(context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context containing invoice and schema paths</p> <p>Returns: - <code>None</code></p> <p>Raises: - <code>Exception</code>: If invoice validation fails</p> <p>Example: <pre><code>from rdetoolkit.processing.processors.validation import InvoiceValidator\n\nvalidator = InvoiceValidator()\nvalidator.process(context)  # Validates invoice against schema\n</code></pre></p> <p>Required Context Attributes: - <code>context.invoice_dst_filepath</code>: Path to invoice.json file to validate - <code>context.schema_path</code>: Path to JSON schema file for validation</p> <p>Validation Process: 1. Loads invoice.json file 2. Loads JSON schema file 3. Performs schema validation using jsonschema library 4. Reports any validation errors with detailed messages</p>"},{"location":"rdetoolkit/processing/processors/validation/#metadatavalidator","title":"MetadataValidator","text":"<p>Validates metadata.json files for completeness and format compliance.</p>"},{"location":"rdetoolkit/processing/processors/validation/#constructor_1","title":"Constructor","text":"<pre><code>MetadataValidator()\n</code></pre> <p>No parameters required. Inherits from <code>Processor</code> base class.</p>"},{"location":"rdetoolkit/processing/processors/validation/#methods_1","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/validation/#processcontext_1","title":"process(context)","text":"<p>Validate metadata.json if it exists.</p> <pre><code>def process(context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context containing metadata path</p> <p>Returns: - <code>None</code></p> <p>Raises: - <code>Exception</code>: If metadata validation fails</p> <p>Example: <pre><code>from rdetoolkit.processing.processors.validation import MetadataValidator\n\nvalidator = MetadataValidator()\nvalidator.process(context)  # Validates metadata if present\n</code></pre></p> <p>Required Context Attributes: - <code>context.metadata_path</code>: Path to metadata.json file</p> <p>Validation Behavior: - If metadata.json doesn't exist, validation is skipped gracefully - If metadata.json exists, it's validated for format and completeness - Validation errors are logged and raised for pipeline handling</p>"},{"location":"rdetoolkit/processing/processors/validation/#complete-usage-examples","title":"Complete Usage Examples","text":""},{"location":"rdetoolkit/processing/processors/validation/#basic-invoice-validation","title":"Basic Invoice Validation","text":"<pre><code>from rdetoolkit.processing.processors.validation import InvoiceValidator\nfrom rdetoolkit.processing.context import ProcessingContext\nfrom pathlib import Path\n\n# Create invoice validator\nvalidator = InvoiceValidator()\n\n# Create processing context with paths\ncontext = ProcessingContext(\n    invoice_dst_filepath=Path(\"output/invoice.json\"),\n    schema_path=Path(\"schemas/invoice_schema.json\"),\n    # ... other parameters\n)\n\n# Validate invoice\ntry:\n    validator.process(context)\n    print(\"Invoice validation passed\")\nexcept Exception as e:\n    print(f\"Invoice validation failed: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#basic-metadata-validation","title":"Basic Metadata Validation","text":"<pre><code>from rdetoolkit.processing.processors.validation import MetadataValidator\nfrom pathlib import Path\n\n# Create metadata validator\nvalidator = MetadataValidator()\n\n# Create processing context\ncontext = ProcessingContext(\n    metadata_path=Path(\"output/metadata.json\"),\n    # ... other parameters\n)\n\n# Validate metadata\ntry:\n    validator.process(context)\n    print(\"Metadata validation passed\")\nexcept Exception as e:\n    print(f\"Metadata validation failed: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#combined-validation-pipeline","title":"Combined Validation Pipeline","text":"<pre><code>from rdetoolkit.processing.processors.validation import InvoiceValidator, MetadataValidator\nfrom rdetoolkit.processing.pipeline import ProcessingPipeline\n\n# Create validation pipeline\npipeline = ProcessingPipeline()\n\n# Add validation processors\npipeline.add_processor(InvoiceValidator())\npipeline.add_processor(MetadataValidator())\n\n# Execute validation pipeline\ntry:\n    pipeline.process(context)\n    print(\"All validation checks passed\")\nexcept Exception as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#validation-with-error-handling","title":"Validation with Error Handling","text":"<pre><code>from rdetoolkit.processing.processors.validation import InvoiceValidator, MetadataValidator\nimport logging\n\n# Setup logging\nlogger = logging.getLogger(__name__)\n\ndef validate_with_detailed_logging(context):\n    \"\"\"Validate with detailed error logging.\"\"\"\n\n    # Invoice validation\n    invoice_validator = InvoiceValidator()\n    try:\n        invoice_validator.process(context)\n        logger.info(\"Invoice validation: PASSED\")\n    except Exception as e:\n        logger.error(f\"Invoice validation: FAILED - {e}\")\n        raise\n\n    # Metadata validation\n    metadata_validator = MetadataValidator()\n    try:\n        metadata_validator.process(context)\n        logger.info(\"Metadata validation: PASSED\")\n    except Exception as e:\n        logger.error(f\"Metadata validation: FAILED - {e}\")\n        raise\n\n    logger.info(\"All validation checks completed successfully\")\n\n# Execute validation\ntry:\n    validate_with_detailed_logging(context)\nexcept Exception as e:\n    logger.error(f\"Validation pipeline failed: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#conditional-validation","title":"Conditional Validation","text":"<pre><code>from rdetoolkit.processing.processors.validation import InvoiceValidator, MetadataValidator\nfrom pathlib import Path\n\ndef conditional_validation(context):\n    \"\"\"Perform validation based on file existence.\"\"\"\n\n    validation_results = {\n        \"invoice_validated\": False,\n        \"metadata_validated\": False,\n        \"errors\": []\n    }\n\n    # Check if invoice exists before validation\n    if context.invoice_dst_filepath.exists():\n        try:\n            invoice_validator = InvoiceValidator()\n            invoice_validator.process(context)\n            validation_results[\"invoice_validated\"] = True\n        except Exception as e:\n            validation_results[\"errors\"].append(f\"Invoice validation: {e}\")\n    else:\n        validation_results[\"errors\"].append(\"Invoice file not found\")\n\n    # Check if metadata exists before validation\n    if context.metadata_path.exists():\n        try:\n            metadata_validator = MetadataValidator()\n            metadata_validator.process(context)\n            validation_results[\"metadata_validated\"] = True\n        except Exception as e:\n            validation_results[\"errors\"].append(f\"Metadata validation: {e}\")\n    else:\n        print(\"Metadata file not found - skipping validation\")\n\n    return validation_results\n\n# Execute conditional validation\nresults = conditional_validation(context)\nprint(f\"Validation results: {results}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#custom-validation-workflow","title":"Custom Validation Workflow","text":"<pre><code>from rdetoolkit.processing.processors.validation import InvoiceValidator, MetadataValidator\nimport json\nfrom pathlib import Path\n\nclass ValidationWorkflow:\n    \"\"\"Custom validation workflow with reporting.\"\"\"\n\n    def __init__(self, output_dir: Path):\n        self.output_dir = output_dir\n        self.validation_report = {\n            \"timestamp\": None,\n            \"invoice_validation\": {\"status\": \"pending\", \"errors\": []},\n            \"metadata_validation\": {\"status\": \"pending\", \"errors\": []},\n            \"overall_status\": \"pending\"\n        }\n\n    def run_validation(self, context):\n        \"\"\"Run complete validation workflow.\"\"\"\n        import datetime\n\n        self.validation_report[\"timestamp\"] = datetime.datetime.now().isoformat()\n\n        # Invoice validation\n        self._validate_invoice(context)\n\n        # Metadata validation\n        self._validate_metadata(context)\n\n        # Determine overall status\n        self._determine_overall_status()\n\n        # Save validation report\n        self._save_report()\n\n        return self.validation_report\n\n    def _validate_invoice(self, context):\n        \"\"\"Validate invoice with error capture.\"\"\"\n        try:\n            validator = InvoiceValidator()\n            validator.process(context)\n            self.validation_report[\"invoice_validation\"][\"status\"] = \"passed\"\n        except Exception as e:\n            self.validation_report[\"invoice_validation\"][\"status\"] = \"failed\"\n            self.validation_report[\"invoice_validation\"][\"errors\"].append(str(e))\n\n    def _validate_metadata(self, context):\n        \"\"\"Validate metadata with error capture.\"\"\"\n        try:\n            validator = MetadataValidator()\n            validator.process(context)\n            self.validation_report[\"metadata_validation\"][\"status\"] = \"passed\"\n        except Exception as e:\n            self.validation_report[\"metadata_validation\"][\"status\"] = \"failed\"\n            self.validation_report[\"metadata_validation\"][\"errors\"].append(str(e))\n\n    def _determine_overall_status(self):\n        \"\"\"Determine overall validation status.\"\"\"\n        invoice_passed = self.validation_report[\"invoice_validation\"][\"status\"] == \"passed\"\n        metadata_passed = self.validation_report[\"metadata_validation\"][\"status\"] == \"passed\"\n\n        if invoice_passed and metadata_passed:\n            self.validation_report[\"overall_status\"] = \"passed\"\n        else:\n            self.validation_report[\"overall_status\"] = \"failed\"\n\n    def _save_report(self):\n        \"\"\"Save validation report to file.\"\"\"\n        report_path = self.output_dir / \"validation_report.json\"\n        with open(report_path, 'w') as f:\n            json.dump(self.validation_report, f, indent=2)\n\n# Usage\nworkflow = ValidationWorkflow(Path(\"output\"))\nreport = workflow.run_validation(context)\nprint(f\"Validation completed. Overall status: {report['overall_status']}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#schema-validation-details","title":"Schema Validation Details","text":""},{"location":"rdetoolkit/processing/processors/validation/#invoice-schema-validation","title":"Invoice Schema Validation","text":"<p>The invoice validation process follows these steps:</p> <ol> <li>Schema Loading: Load JSON schema from <code>context.schema_path</code></li> <li>Invoice Loading: Load invoice data from <code>context.invoice_dst_filepath</code></li> <li>Validation: Use jsonschema library to validate structure</li> <li>Error Reporting: Provide detailed error messages for failures</li> </ol> <p>Common Invoice Validation Errors: <pre><code># Missing required fields\n{\n    \"error\": \"ValidationError\",\n    \"message\": \"'dataName' is a required property\",\n    \"path\": \"$.basic\"\n}\n\n# Invalid data types\n{\n    \"error\": \"ValidationError\",\n    \"message\": \"'25.5' is not of type 'number'\",\n    \"path\": \"$.sample.generalAttributes[0].value\"\n}\n\n# Invalid enum values\n{\n    \"error\": \"ValidationError\",\n    \"message\": \"'invalid_status' is not one of ['active', 'inactive', 'pending']\",\n    \"path\": \"$.basic.status\"\n}\n</code></pre></p>"},{"location":"rdetoolkit/processing/processors/validation/#metadata-validation","title":"Metadata Validation","text":"<p>Metadata validation checks for:</p> <ul> <li>File Format: Valid JSON structure</li> <li>Required Fields: Presence of mandatory metadata fields</li> <li>Data Types: Correct data types for all fields</li> <li>Value Constraints: Valid values within acceptable ranges</li> </ul> <p>Example Metadata Structure: <pre><code>{\n    \"version\": \"1.0\",\n    \"created\": \"2024-01-01T00:00:00Z\",\n    \"modified\": \"2024-01-01T00:00:00Z\",\n    \"description\": \"Sample metadata\",\n    \"keywords\": [\"research\", \"data\"],\n    \"contributors\": [\n        {\n            \"name\": \"John Doe\",\n            \"role\": \"researcher\"\n        }\n    ]\n}\n</code></pre></p>"},{"location":"rdetoolkit/processing/processors/validation/#error-handling","title":"Error Handling","text":""},{"location":"rdetoolkit/processing/processors/validation/#validation-error-types","title":"Validation Error Types","text":""},{"location":"rdetoolkit/processing/processors/validation/#schema-validation-errors","title":"Schema Validation Errors","text":"<pre><code>try:\n    validator.process(context)\nexcept jsonschema.ValidationError as e:\n    print(f\"Schema validation failed: {e.message}\")\n    print(f\"Failed at path: {e.absolute_path}\")\n    print(f\"Invalid value: {e.instance}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#file-not-found-errors","title":"File Not Found Errors","text":"<pre><code>try:\n    validator.process(context)\nexcept FileNotFoundError as e:\n    print(f\"Validation file not found: {e}\")\n    # Handle missing schema or data files\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#json-parse-errors","title":"JSON Parse Errors","text":"<pre><code>try:\n    validator.process(context)\nexcept json.JSONDecodeError as e:\n    print(f\"Invalid JSON format: {e}\")\n    print(f\"Error at line {e.lineno}, column {e.colno}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always handle validation errors gracefully:    <pre><code>try:\n    validator.process(context)\nexcept Exception as e:\n    logger.error(f\"Validation failed: {e}\")\n    # Decide whether to continue or abort processing\n</code></pre></p> </li> <li> <p>Verify file existence before validation:    <pre><code>if context.invoice_dst_filepath.exists():\n    validator.process(context)\nelse:\n    logger.warning(\"Invoice file not found for validation\")\n</code></pre></p> </li> <li> <p>Use appropriate logging levels:    <pre><code>logger.debug(\"Starting validation process\")\ntry:\n    validator.process(context)\n    logger.info(\"Validation completed successfully\")\nexcept Exception as e:\n    logger.error(f\"Validation failed: {e}\")\n</code></pre></p> </li> <li> <p>Validate schema files themselves:    <pre><code>if not context.schema_path.exists():\n    raise FileNotFoundError(f\"Schema file not found: {context.schema_path}\")\n\n# Optionally validate schema format\ntry:\n    with open(context.schema_path) as f:\n        json.load(f)\nexcept json.JSONDecodeError as e:\n    raise ValueError(f\"Invalid schema file format: {e}\")\n</code></pre></p> </li> </ol>"},{"location":"rdetoolkit/processing/processors/validation/#integration-with-processing-pipeline","title":"Integration with Processing Pipeline","text":""},{"location":"rdetoolkit/processing/processors/validation/#pipeline-integration","title":"Pipeline Integration","text":"<pre><code>from rdetoolkit.processing.pipeline import ProcessingPipeline\nfrom rdetoolkit.processing.processors.validation import InvoiceValidator, MetadataValidator\n\n# Create processing pipeline\npipeline = ProcessingPipeline()\n\n# Add other processors first\n# pipeline.add_processor(InvoiceInitializer())\n# pipeline.add_processor(FileProcessor())\n\n# Add validation processors at the end\npipeline.add_processor(InvoiceValidator())\npipeline.add_processor(MetadataValidator())\n\n# Execute pipeline with validation\npipeline.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#validation-first-approach","title":"Validation-First Approach","text":"<pre><code># Validate before processing\ndef validate_inputs(context):\n    \"\"\"Validate inputs before main processing.\"\"\"\n    if context.metadata_path.exists():\n        metadata_validator = MetadataValidator()\n        metadata_validator.process(context)\n\n# Validate after processing\ndef validate_outputs(context):\n    \"\"\"Validate outputs after main processing.\"\"\"\n    invoice_validator = InvoiceValidator()\n    invoice_validator.process(context)\n\n# Main processing workflow\nvalidate_inputs(context)\n# ... main processing ...\nvalidate_outputs(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/validation/#performance-notes","title":"Performance Notes","text":"<ul> <li>Validation processors are lightweight with minimal overhead</li> <li>JSON schema validation performance depends on schema complexity</li> <li>File I/O operations are optimized for typical file sizes</li> <li>Validation errors include detailed path information for debugging</li> <li>Logging is optimized to minimize performance impact</li> </ul>"},{"location":"rdetoolkit/processing/processors/validation/#see-also","title":"See Also","text":"<ul> <li>Processing Context - For understanding processing context structure</li> <li>Pipeline Documentation - For processor pipeline integration</li> <li>Invoice Processors - For invoice creation and initialization</li> <li>Validation Module - For core validation functions</li> </ul>"},{"location":"rdetoolkit/processing/processors/variables/","title":"Variable Processing Processor","text":"<p>The <code>rdetoolkit.processing.processors.variables</code> module provides a processor for applying magic variables to invoice files. This processor enables dynamic variable substitution in invoice files using data from raw files.</p>"},{"location":"rdetoolkit/processing/processors/variables/#overview","title":"Overview","text":"<p>The variable processor provides:</p> <ul> <li>Magic Variable Substitution: Replace placeholder variables in invoice files with actual values</li> <li>Dynamic Content: Generate dynamic content based on raw file data</li> <li>Conditional Processing: Apply variables only when enabled in configuration</li> <li>File-Based Variables: Extract variable values from raw files</li> <li>Error Handling: Comprehensive error handling for variable processing</li> </ul>"},{"location":"rdetoolkit/processing/processors/variables/#classes","title":"Classes","text":""},{"location":"rdetoolkit/processing/processors/variables/#variableapplier","title":"VariableApplier","text":"<p>Applies magic variables to invoice files using data from raw files.</p>"},{"location":"rdetoolkit/processing/processors/variables/#constructor","title":"Constructor","text":"<pre><code>VariableApplier()\n</code></pre> <p>No parameters required. Inherits from <code>Processor</code> base class.</p>"},{"location":"rdetoolkit/processing/processors/variables/#methods","title":"Methods","text":""},{"location":"rdetoolkit/processing/processors/variables/#processcontext","title":"process(context)","text":"<p>Apply magic variables if enabled in configuration.</p> <pre><code>def process(context: ProcessingContext) -&gt; None\n</code></pre> <p>Parameters: - <code>context</code> (ProcessingContext): Processing context containing configuration and file paths</p> <p>Returns: - <code>None</code></p> <p>Raises: - <code>Exception</code>: If magic variable processing fails</p> <p>Example: <pre><code>from rdetoolkit.processing.processors.variables import VariableApplier\n\napplier = VariableApplier()\napplier.process(context)  # Applies magic variables if enabled\n</code></pre></p> <p>Required Context Attributes: - <code>context.srcpaths.config.system.magic_variable</code>: Boolean flag to enable/disable magic variables - <code>context.invoice_dst_filepath</code>: Path to invoice file to process - <code>context.resource_paths.rawfiles</code>: Tuple of raw file paths for variable extraction</p> <p>Processing Logic: 1. Check if magic variables are enabled in configuration 2. Verify raw files are available for variable extraction 3. Apply magic variable replacement using the first raw file 4. Save updated invoice file with substituted variables</p>"},{"location":"rdetoolkit/processing/processors/variables/#magic-variable-system","title":"Magic Variable System","text":""},{"location":"rdetoolkit/processing/processors/variables/#variable-format","title":"Variable Format","text":"<p>Magic variables in invoice files use the format: <pre><code>${variable_name}\n</code></pre></p>"},{"location":"rdetoolkit/processing/processors/variables/#common-magic-variables","title":"Common Magic Variables","text":"<ul> <li><code>${filename}</code>: Original filename without extension</li> <li><code>${filepath}</code>: Full path to the file</li> <li><code>${filesize}</code>: File size in bytes</li> <li><code>${timestamp}</code>: File modification timestamp</li> <li><code>${index}</code>: Processing index</li> <li><code>${date}</code>: Current date</li> <li><code>${time}</code>: Current time</li> </ul>"},{"location":"rdetoolkit/processing/processors/variables/#variable-substitution-process","title":"Variable Substitution Process","text":"<ol> <li>Invoice Loading: Load invoice.json file</li> <li>Variable Detection: Scan for magic variable patterns</li> <li>Value Extraction: Extract values from raw files</li> <li>Substitution: Replace variables with actual values</li> <li>Save: Write updated invoice back to file</li> </ol>"},{"location":"rdetoolkit/processing/processors/variables/#complete-usage-examples","title":"Complete Usage Examples","text":""},{"location":"rdetoolkit/processing/processors/variables/#basic-magic-variable-processing","title":"Basic Magic Variable Processing","text":"<pre><code>from rdetoolkit.processing.processors.variables import VariableApplier\nfrom rdetoolkit.processing.context import ProcessingContext\nfrom pathlib import Path\n\n# Create variable applier\napplier = VariableApplier()\n\n# Create processing context with magic variables enabled\ncontext = ProcessingContext(\n    srcpaths=srcpaths,  # srcpaths.config.system.magic_variable = True\n    invoice_dst_filepath=Path(\"output/invoice.json\"),\n    resource_paths=resource_paths,  # Contains rawfiles\n    # ... other parameters\n)\n\n# Apply magic variables\ntry:\n    applier.process(context)\n    print(\"Magic variables applied successfully\")\nexcept Exception as e:\n    print(f\"Magic variable processing failed: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#invoice-template-with-magic-variables","title":"Invoice Template with Magic Variables","text":"<pre><code># Example invoice.json template with magic variables\ninvoice_template = {\n    \"basic\": {\n        \"dataName\": \"${filename}\",\n        \"description\": \"Data file: ${filepath}\",\n        \"fileSize\": \"${filesize}\",\n        \"createdDate\": \"${date}\",\n        \"processedTime\": \"${time}\"\n    },\n    \"custom\": {\n        \"originalFilename\": \"${filename}\",\n        \"processingIndex\": \"${index}\",\n        \"lastModified\": \"${timestamp}\"\n    },\n    \"sample\": {\n        \"names\": [\"Sample from ${filename}\"],\n        \"generalAttributes\": [\n            {\n                \"termId\": \"sourceFile\",\n                \"value\": \"${filepath}\"\n            },\n            {\n                \"termId\": \"fileSize\",\n                \"value\": \"${filesize}\"\n            }\n        ]\n    }\n}\n\n# After processing, variables would be replaced with actual values:\nprocessed_invoice = {\n    \"basic\": {\n        \"dataName\": \"experiment_data\",\n        \"description\": \"Data file: /data/raw/experiment_data.csv\",\n        \"fileSize\": \"1024\",\n        \"createdDate\": \"2024-01-01\",\n        \"processedTime\": \"12:00:00\"\n    },\n    \"custom\": {\n        \"originalFilename\": \"experiment_data\",\n        \"processingIndex\": \"001\",\n        \"lastModified\": \"2024-01-01T10:30:00\"\n    },\n    \"sample\": {\n        \"names\": [\"Sample from experiment_data\"],\n        \"generalAttributes\": [\n            {\n                \"termId\": \"sourceFile\",\n                \"value\": \"/data/raw/experiment_data.csv\"\n            },\n            {\n                \"termId\": \"fileSize\",\n                \"value\": \"1024\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#conditional-magic-variable-processing","title":"Conditional Magic Variable Processing","text":"<pre><code>from rdetoolkit.processing.processors.variables import VariableApplier\n\ndef process_with_variable_check(context):\n    \"\"\"Process with magic variable configuration check.\"\"\"\n\n    # Check configuration\n    if not context.srcpaths.config.system.magic_variable:\n        print(\"Magic variables disabled, skipping processing\")\n        return\n\n    # Check for raw files\n    if not context.resource_paths.rawfiles:\n        print(\"No raw files available for variable extraction\")\n        return\n\n    # Apply magic variables\n    applier = VariableApplier()\n    try:\n        applier.process(context)\n        print(\"Magic variables processed successfully\")\n    except Exception as e:\n        print(f\"Magic variable processing failed: {e}\")\n\n# Usage\nprocess_with_variable_check(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#magic-variable-processing-with-multiple-files","title":"Magic Variable Processing with Multiple Files","text":"<pre><code>from rdetoolkit.processing.processors.variables import VariableApplier\nfrom pathlib import Path\n\ndef process_multiple_files(contexts):\n    \"\"\"Process magic variables for multiple files.\"\"\"\n\n    applier = VariableApplier()\n    results = []\n\n    for i, context in enumerate(contexts):\n        try:\n            print(f\"Processing file {i+1}/{len(contexts)}\")\n            applier.process(context)\n            results.append({\n                \"index\": i,\n                \"status\": \"success\",\n                \"file\": str(context.invoice_dst_filepath)\n            })\n        except Exception as e:\n            results.append({\n                \"index\": i,\n                \"status\": \"failed\",\n                \"file\": str(context.invoice_dst_filepath),\n                \"error\": str(e)\n            })\n\n    return results\n\n# Create multiple contexts\ncontexts = [\n    ProcessingContext(\n        invoice_dst_filepath=Path(f\"output/invoice_{i:03d}.json\"),\n        resource_paths=resource_paths,\n        srcpaths=srcpaths\n    )\n    for i in range(10)\n]\n\n# Process all files\nresults = process_multiple_files(contexts)\nprint(f\"Processed {len([r for r in results if r['status'] == 'success'])} files successfully\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#custom-magic-variable-workflow","title":"Custom Magic Variable Workflow","text":"<pre><code>from rdetoolkit.processing.processors.variables import VariableApplier\nimport json\nfrom pathlib import Path\n\nclass MagicVariableWorkflow:\n    \"\"\"Custom workflow for magic variable processing.\"\"\"\n\n    def __init__(self, backup_dir: Path):\n        self.backup_dir = backup_dir\n        self.backup_dir.mkdir(parents=True, exist_ok=True)\n\n    def process_with_backup(self, context):\n        \"\"\"Process magic variables with backup creation.\"\"\"\n\n        # Create backup of original invoice\n        backup_path = self._create_backup(context.invoice_dst_filepath)\n\n        try:\n            # Apply magic variables\n            applier = VariableApplier()\n            applier.process(context)\n\n            print(f\"Magic variables applied. Backup saved to: {backup_path}\")\n            return True\n\n        except Exception as e:\n            # Restore from backup on failure\n            self._restore_backup(backup_path, context.invoice_dst_filepath)\n            print(f\"Magic variable processing failed, restored from backup: {e}\")\n            return False\n\n    def _create_backup(self, invoice_path: Path) -&gt; Path:\n        \"\"\"Create backup of invoice file.\"\"\"\n        if invoice_path.exists():\n            backup_path = self.backup_dir / f\"{invoice_path.stem}_backup.json\"\n            shutil.copy2(invoice_path, backup_path)\n            return backup_path\n        return None\n\n    def _restore_backup(self, backup_path: Path, invoice_path: Path):\n        \"\"\"Restore invoice from backup.\"\"\"\n        if backup_path and backup_path.exists():\n            shutil.copy2(backup_path, invoice_path)\n\n# Usage\nworkflow = MagicVariableWorkflow(Path(\"backups\"))\nsuccess = workflow.process_with_backup(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#pre-processing-variable-validation","title":"Pre-Processing Variable Validation","text":"<pre><code>from rdetoolkit.processing.processors.variables import VariableApplier\nimport json\nimport re\n\ndef validate_magic_variables(invoice_path: Path, available_variables: set):\n    \"\"\"Validate magic variables in invoice before processing.\"\"\"\n\n    # Load invoice\n    with open(invoice_path) as f:\n        invoice_data = json.load(f)\n\n    # Convert to string for pattern matching\n    invoice_str = json.dumps(invoice_data)\n\n    # Find all magic variables\n    pattern = r'\\$\\{([^}]+)\\}'\n    found_variables = set(re.findall(pattern, invoice_str))\n\n    # Check for undefined variables\n    undefined_variables = found_variables - available_variables\n\n    if undefined_variables:\n        raise ValueError(f\"Undefined magic variables: {undefined_variables}\")\n\n    return found_variables\n\n# Define available variables\navailable_vars = {\n    'filename', 'filepath', 'filesize', 'timestamp',\n    'index', 'date', 'time'\n}\n\n# Validate before processing\ntry:\n    used_vars = validate_magic_variables(context.invoice_dst_filepath, available_vars)\n    print(f\"Found valid magic variables: {used_vars}\")\n\n    # Process magic variables\n    applier = VariableApplier()\n    applier.process(context)\n\nexcept ValueError as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#integration-with-processing-pipeline","title":"Integration with Processing Pipeline","text":""},{"location":"rdetoolkit/processing/processors/variables/#pipeline-integration","title":"Pipeline Integration","text":"<pre><code>from rdetoolkit.processing.pipeline import ProcessingPipeline\nfrom rdetoolkit.processing.processors.variables import VariableApplier\n\n# Create processing pipeline\npipeline = ProcessingPipeline()\n\n# Add processors in order\n# pipeline.add_processor(InvoiceInitializer())\n# pipeline.add_processor(FileProcessor())\n\n# Add variable applier after invoice creation\npipeline.add_processor(VariableApplier())\n\n# Add validation processors after variable processing\n# pipeline.add_processor(InvoiceValidator())\n\n# Execute pipeline\npipeline.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#conditional-pipeline-processing","title":"Conditional Pipeline Processing","text":"<pre><code>from rdetoolkit.processing.processors.variables import VariableApplier\n\ndef create_conditional_pipeline(config):\n    \"\"\"Create pipeline with conditional magic variable processing.\"\"\"\n\n    pipeline = ProcessingPipeline()\n\n    # Add standard processors\n    pipeline.add_processor(StandardProcessor())\n\n    # Add variable applier only if enabled\n    if config.system.magic_variable:\n        pipeline.add_processor(VariableApplier())\n\n    # Add validation\n    pipeline.add_processor(ValidationProcessor())\n\n    return pipeline\n\n# Usage\npipeline = create_conditional_pipeline(config)\npipeline.process(context)\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#error-handling","title":"Error Handling","text":""},{"location":"rdetoolkit/processing/processors/variables/#common-exceptions","title":"Common Exceptions","text":""},{"location":"rdetoolkit/processing/processors/variables/#configuration-errors","title":"Configuration Errors","text":"<pre><code>try:\n    applier.process(context)\nexcept AttributeError as e:\n    print(f\"Configuration error: {e}\")\n    # Handle missing configuration attributes\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#file-processing-errors","title":"File Processing Errors","text":"<pre><code>try:\n    applier.process(context)\nexcept FileNotFoundError as e:\n    print(f\"File not found: {e}\")\n    # Handle missing invoice or raw files\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#variable-processing-errors","title":"Variable Processing Errors","text":"<pre><code>try:\n    applier.process(context)\nexcept Exception as e:\n    print(f\"Variable processing error: {e}\")\n    # Handle variable substitution failures\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always check configuration before processing:    <pre><code>if context.srcpaths.config.system.magic_variable:\n    applier.process(context)\nelse:\n    logger.debug(\"Magic variables disabled\")\n</code></pre></p> </li> <li> <p>Verify raw files exist:    <pre><code>if context.resource_paths.rawfiles:\n    applier.process(context)\nelse:\n    logger.warning(\"No raw files available for variable extraction\")\n</code></pre></p> </li> <li> <p>Handle processing failures gracefully:    <pre><code>try:\n    applier.process(context)\nexcept Exception as e:\n    logger.error(f\"Magic variable processing failed: {e}\")\n    # Decide whether to continue or abort processing\n</code></pre></p> </li> <li> <p>Log variable processing results:    <pre><code>logger.debug(\"Starting magic variable processing\")\ntry:\n    result = apply_magic_variable(\n        context.invoice_dst_filepath,\n        context.resource_paths.rawfiles[0],\n        save_filepath=context.invoice_dst_filepath\n    )\n    if result:\n        logger.info(\"Magic variables applied successfully\")\n    else:\n        logger.info(\"No magic variables found for replacement\")\nexcept Exception as e:\n    logger.error(f\"Magic variable processing failed: {e}\")\n</code></pre></p> </li> </ol>"},{"location":"rdetoolkit/processing/processors/variables/#configuration-dependencies","title":"Configuration Dependencies","text":""},{"location":"rdetoolkit/processing/processors/variables/#system-configuration","title":"System Configuration","text":"<p>Magic variable processing depends on system configuration:</p> <pre><code>system:\n  magic_variable: true  # Enable magic variable processing\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#required-files","title":"Required Files","text":"<ul> <li>Invoice File: Must exist at <code>context.invoice_dst_filepath</code></li> <li>Raw Files: At least one file in <code>context.resource_paths.rawfiles</code></li> <li>Configuration: Valid system configuration with magic_variable setting</li> </ul>"},{"location":"rdetoolkit/processing/processors/variables/#performance-notes","title":"Performance Notes","text":"<ul> <li>Magic variable processing is performed in-memory for optimal performance</li> <li>File I/O operations are minimized by processing all variables in one pass</li> <li>Variable substitution uses efficient string replacement algorithms</li> <li>Logging is optimized to minimize performance impact on processing</li> <li>The processor gracefully skips processing when disabled, adding minimal overhead</li> </ul>"},{"location":"rdetoolkit/processing/processors/variables/#use-cases","title":"Use Cases","text":""},{"location":"rdetoolkit/processing/processors/variables/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Dynamic File Naming: Include original filenames in processed data</li> <li>Metadata Enrichment: Add file metadata to invoice data</li> <li>Audit Trails: Include processing timestamps and file information</li> <li>Data Lineage: Track source files in processed data</li> <li>Custom Identifiers: Generate unique identifiers based on file properties</li> </ol>"},{"location":"rdetoolkit/processing/processors/variables/#example-use-cases","title":"Example Use Cases","text":"<pre><code># Dynamic naming example\ninvoice_template = {\n    \"basic\": {\n        \"dataName\": \"processed_${filename}\",\n        \"description\": \"Processed data from ${filename} on ${date}\"\n    }\n}\n\n# Metadata enrichment example\ninvoice_template = {\n    \"custom\": {\n        \"sourceFile\": \"${filepath}\",\n        \"originalSize\": \"${filesize}\",\n        \"processedTimestamp\": \"${timestamp}\"\n    }\n}\n</code></pre>"},{"location":"rdetoolkit/processing/processors/variables/#see-also","title":"See Also","text":"<ul> <li>Processing Context - For understanding processing context structure</li> <li>Pipeline Documentation - For processor pipeline integration</li> <li>Invoice File Operations - For invoice file utilities</li> <li>Configuration Guide - For system configuration options</li> </ul>"},{"location":"rdetoolkit/storage/minio/","title":"MinIO Storage API","text":""},{"location":"rdetoolkit/storage/minio/#purpose","title":"Purpose","text":"<p>This module defines integration processing with MinIO object storage in RDEToolKit. It provides functionality for file upload, download, and object management.</p>"},{"location":"rdetoolkit/storage/minio/#key-features","title":"Key Features","text":""},{"location":"rdetoolkit/storage/minio/#object-storage-operations","title":"Object Storage Operations","text":"<ul> <li>File upload and download</li> <li>Object listing and deletion</li> <li>Bucket management and access control</li> </ul>"},{"location":"rdetoolkit/storage/minio/#data-management","title":"Data Management","text":"<ul> <li>Efficient transfer of large files</li> <li>Metadata management</li> <li>Version control and backup</li> </ul>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage","title":"<code>src.rdetoolkit.storage.minio.MinIOStorage(endpoint, access_key=None, secret_key=None, secure=True, region=None, http_client=None)</code>","text":"<p>Handles file operations on MinIO.</p> <p>Attributes:</p> Name Type Description <code>access_key</code> <code>str</code> <p>MinIO access key.</p> <code>secret_key</code> <code>str</code> <p>MinIO secret key.</p> <code>client</code> <code>Minio</code> <p>MinIO client instance.</p> <p>Initializes the MinIOStorage.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>MinIO endpoint.</p> required <code>access_key</code> <code>str | None</code> <p>Access key value. Defaults to environment variable.</p> <code>None</code> <code>secret_key</code> <code>str | None</code> <p>Secret key value. Defaults to environment variable.</p> <code>None</code> <code>secure</code> <code>bool</code> <p>Whether SSL is required.</p> <code>True</code> <code>region</code> <code>str | None</code> <p>Region of the bucket.</p> <code>None</code> <code>http_client</code> <code>PoolManager | None</code> <p>HTTP client for the Minio instance.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If access_key or secret_key is not provided.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.access_key","title":"<code>access_key: Incomplete = access_key if access_key else os.environ.get('MINIO_ACCESS_KEY')</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.client","title":"<code>client: Incomplete = Minio(endpoint=endpoint, access_key=access_key, secret_key=secret_key, secure=secure, region=region, http_client=http_client)</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.secret_key","title":"<code>secret_key: Incomplete = secret_key if secret_key else os.environ.get('MINIO_SECRET_KEY')</code>  <code>instance-attribute</code>","text":""},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.bucket_exists","title":"<code>bucket_exists(bucket_name)</code>","text":"<p>Checks if a bucket exists.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if bucket exists, else False.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.create_default_http_client","title":"<code>create_default_http_client()</code>  <code>staticmethod</code>","text":"<p>Creates a default HTTP client with optional proxy.</p> <p>Returns:</p> Type Description <code>ProxyManager | PoolManager</code> <p>ProxyManager | PoolManager: Configured proxy or pool manager.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.create_proxy_client","title":"<code>create_proxy_client(proxy_url, timeout=urllib3.Timeout.DEFAULT_TIMEOUT, cert_reqs='CERT_REQUIRED', ca_certs=None, retries=None)</code>  <code>staticmethod</code>","text":"<p>Creates a proxy client with specified settings.</p> <p>Parameters:</p> Name Type Description Default <code>proxy_url</code> <code>str</code> <p>The proxy URL.</p> required <code>timeout</code> <code>Any</code> <p>Timeout object or setting.</p> <code>DEFAULT_TIMEOUT</code> <code>cert_reqs</code> <code>str</code> <p>Certificate requirement level.</p> <code>'CERT_REQUIRED'</code> <code>ca_certs</code> <code>str | None</code> <p>Path to CA bundle file.</p> <code>None</code> <code>retries</code> <code>Any</code> <p>Retry settings.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ProxyManager</code> <p>A configured proxy manager instance.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.fget_object","title":"<code>fget_object(bucket_name, object_name, file_path, request_headers=None, ssec=None, version_id=None, extra_query_params=None, tmp_file_path=None)</code>","text":"<p>Downloads an object to a file.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>object_name</code> <code>str</code> <p>Object name in the bucket.</p> required <code>file_path</code> <code>str</code> <p>Destination path for the downloaded file.</p> required <code>request_headers</code> <code>dict[str, Any] | None</code> <p>Extra request headers.</p> <code>None</code> <code>ssec</code> <code>SseCustomerKey | None</code> <p>Encryption key.</p> <code>None</code> <code>version_id</code> <code>str | None</code> <p>Specific version of the object.</p> <code>None</code> <code>extra_query_params</code> <code>dict[str, Any] | None</code> <p>Extra query parameters.</p> <code>None</code> <code>tmp_file_path</code> <code>str | None</code> <p>Temporary file path.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>BaseHTTPResponse</code> <code>HTTPResponse</code> <p>The downloaded file response.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.fput_object","title":"<code>fput_object(bucket_name, object_name, file_path, content_type='application/octet-stream', metadata=None, sse=None, part_size=0, num_parallel_uploads=3, tags=None, retention=None, legal_hold=False)</code>","text":"<p>Uploads a file from local storage to a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>object_name</code> <code>str</code> <p>Object name in the bucket.</p> required <code>file_path</code> <code>str | Path</code> <p>Path to source file.</p> required <code>content_type</code> <code>str</code> <p>MIME type of the file.</p> <code>'application/octet-stream'</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>Additional metadata.</p> <code>None</code> <code>sse</code> <code>SseCustomerKey | None</code> <p>Server-side encryption.</p> <code>None</code> <code>part_size</code> <code>int</code> <p>Part size for multipart upload.</p> <code>0</code> <code>num_parallel_uploads</code> <code>int</code> <p>Number of parallel uploads.</p> <code>3</code> <code>tags</code> <code>Tags | None</code> <p>Key-value tags for the object.</p> <code>None</code> <code>retention</code> <code>Retention | None</code> <p>Retention configuration.</p> <code>None</code> <code>legal_hold</code> <code>bool</code> <p>Whether to enable legal hold.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Information about the upload result.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.get_object","title":"<code>get_object(bucket_name, object_name, offset=0, length=0, ssec=None, version_id=None, extra_query_params=None)</code>","text":"<p>Retrieves an object from a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>object_name</code> <code>str</code> <p>Object name in the bucket.</p> required <code>offset</code> <code>int</code> <p>Start byte of the requested range.</p> <code>0</code> <code>length</code> <code>int</code> <p>Number of bytes to read.</p> <code>0</code> <code>ssec</code> <code>SseCustomerKey | None</code> <p>Server-side encryption key.</p> <code>None</code> <code>version_id</code> <code>str | None</code> <p>Specific version of the object.</p> <code>None</code> <code>extra_query_params</code> <code>Any</code> <p>Extra query parameters.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>BaseHTTPResponse</code> <code>HTTPResponse</code> <p>The retrieved object data response.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.list_buckets","title":"<code>list_buckets()</code>","text":"<p>Lists all existing buckets.</p> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: List of bucket information.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.make_bucket","title":"<code>make_bucket(backet_name, location='us-east-1', object_lock=False)</code>","text":"<p>Creates a new bucket in MinIO.</p> <p>Parameters:</p> Name Type Description Default <code>backet_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>location</code> <code>str</code> <p>Region for the bucket.</p> <code>'us-east-1'</code> <code>object_lock</code> <code>bool</code> <p>Whether to enable object lock.</p> <code>False</code>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.presigned_get_object","title":"<code>presigned_get_object(bucket_name, object_name, expires=timedelta(days=7), response_headers=None, request_date=None, version_id=None, extra_query_params=None)</code>","text":"<p>Generates a presigned GET URL.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>object_name</code> <code>str</code> <p>Object name in the bucket.</p> required <code>expires</code> <code>timedelta</code> <p>URL expiration time.</p> <code>timedelta(days=7)</code> <code>response_headers</code> <code>dict[str, Any] | None</code> <p>Custom response headers.</p> <code>None</code> <code>request_date</code> <code>datetime | None</code> <p>A specific request date.</p> <code>None</code> <code>version_id</code> <code>str | None</code> <p>Specific version of the object.</p> <code>None</code> <code>extra_query_params</code> <code>dict[str, Any] | None</code> <p>Extra parameters.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The presigned URL.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.presigned_put_object","title":"<code>presigned_put_object(bucket_name, object_name, expires=timedelta(days=7))</code>","text":"<p>Generates a presigned PUT URL.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>object_name</code> <code>str</code> <p>Object name in the bucket.</p> required <code>expires</code> <code>timedelta</code> <p>URL expiration time.</p> <code>timedelta(days=7)</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The presigned URL.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.put_object","title":"<code>put_object(bucket_name, object_name, data, length, *, content_type='application/octet-stream', metadata=None)</code>","text":"<p>Uploads data as an object to a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>object_name</code> <code>str</code> <p>Object name in the bucket.</p> required <code>data</code> <code>bytes | str</code> <p>Data to upload.</p> required <code>length</code> <code>int</code> <p>Size of the data.</p> required <code>content_type</code> <code>str</code> <p>MIME type of the object.</p> <code>'application/octet-stream'</code> <code>metadata</code> <code>dict[str, Any] | None</code> <p>Additional metadata.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Information about the upload result.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.remove_bucket","title":"<code>remove_bucket(bucket_name)</code>","text":"<p>Removes an existing bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If bucket does not exist.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.remove_object","title":"<code>remove_object(bucket_name, object_name, version_id=None)</code>","text":"<p>Removes an object from a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>object_name</code> <code>str</code> <p>Object name in the bucket.</p> required <code>version_id</code> <code>str | None</code> <p>Specific version of the object.</p> <code>None</code>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.secure_get_object","title":"<code>secure_get_object(bucket_name, object_name, *, expires=timedelta(minutes=15), ssec=None, version_id=None, use_ssl=True)</code>","text":"<p>Recommended method for securely retrieving objects.</p> <p>Generates a short-lived presigned URL and accesses it with a dedicated client.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>object_name</code> <code>str</code> <p>Name of the object to retrieve.</p> required <code>expires</code> <code>timedelta</code> <p>Expiration time for the URL (default: 15 minutes).</p> <code>timedelta(minutes=15)</code> <code>ssec</code> <code>SseCustomerKey | None</code> <p>Server-side encryption key.</p> <code>None</code> <code>version_id</code> <code>str | None</code> <p>Specific version of the object.</p> <code>None</code> <code>use_ssl</code> <code>bool</code> <p>Whether to use SSL connection.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>BaseHTTPResponse</code> <code>HTTPResponse</code> <p>HTTP response containing object data.</p> Notes <p>This method is recommended over the traditional get_object method. The expiration time is intentionally short for improved security.</p>"},{"location":"rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage.stat_object","title":"<code>stat_object(bucket_name, object_name, ssec=None, version_id=None, extra_headers=None)</code>","text":"<p>Fetches metadata of an object in a bucket.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of the bucket.</p> required <code>object_name</code> <code>str</code> <p>Object name in the bucket.</p> required <code>ssec</code> <code>SseCustomerKey | None</code> <p>Encryption key.</p> <code>None</code> <code>version_id</code> <code>str | None</code> <p>Specific version of the object.</p> <code>None</code> <code>extra_headers</code> <code>dict[str, Any] | None</code> <p>Additional headers.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Metadata of the requested object.</p>"},{"location":"rdetoolkit/storage/minio/#practical-usage","title":"Practical Usage","text":""},{"location":"rdetoolkit/storage/minio/#basic-minio-operations","title":"Basic MinIO Operations","text":"basic_minio_operations.py<pre><code>from rdetoolkit.storage.minio import MinIOStorage\nfrom pathlib import Path\n\n# Create MinIO storage\nstorage = MinIOStorage(\n    endpoint=\"localhost:9000\",\n    access_key=\"minioadmin\",\n    secret_key=\"minioadmin\",\n    secure=False\n)\n\n# Bucket name\nbucket_name = \"rde-experiments\"\n\ntry:\n    # Create bucket\n    if not storage.bucket_exists(bucket_name):\n        storage.make_bucket(bucket_name)\n        print(f\"\u2713 Bucket created: {bucket_name}\")\n\n    # Upload file\n    local_file = Path(\"data/experiment_001.csv\")\n    object_name = \"experiments/2024/experiment_001.csv\"\n\n    if local_file.exists():\n        upload_result = storage.fput_object(\n            bucket_name=bucket_name,\n            object_name=object_name,\n            file_path=str(local_file)\n        )\n        print(f\"\u2713 Upload completed: {upload_result}\")\n\n    # Get object information\n    object_stat = storage.stat_object(bucket_name, object_name)\n    print(f\"Object information: {object_stat}\")\n\n    # Download file\n    download_path = Path(\"downloads/experiment_001.csv\")\n    download_path.parent.mkdir(parents=True, exist_ok=True)\n\n    storage.fget_object(\n        bucket_name=bucket_name,\n        object_name=object_name,\n        file_path=str(download_path)\n    )\n    print(f\"\u2713 Download completed: {download_path}\")\n\nexcept Exception as e:\n    print(f\"\u2717 MinIO operation error: {e}\")\n</code></pre>"},{"location":"rdetoolkit/storage/minio/#batch-experimental-data-management","title":"Batch Experimental Data Management","text":"experiment_data_management.py<pre><code>from rdetoolkit.storage.minio import MinIOStorage\nfrom pathlib import Path\nfrom typing import List, Dict\nimport json\nfrom datetime import datetime\n\nclass ExperimentDataManager:\n    \"\"\"Experimental data management system\"\"\"\n\n    def __init__(self, storage: MinIOStorage, bucket_name: str):\n        self.storage = storage\n        self.bucket_name = bucket_name\n\n        # Create bucket\n        if not self.storage.bucket_exists(bucket_name):\n            self.storage.make_bucket(bucket_name)\n\n    def upload_experiment(self, experiment_id: str, data_dir: Path) -&gt; Dict:\n        \"\"\"Batch upload of experimental data\"\"\"\n\n        if not data_dir.exists():\n            raise ValueError(f\"Data directory does not exist: {data_dir}\")\n\n        upload_results = {\n            \"experiment_id\": experiment_id,\n            \"upload_time\": datetime.now().isoformat(),\n            \"uploaded_files\": [],\n            \"failed_files\": [],\n            \"total_size\": 0\n        }\n\n        # Get all files in data directory\n        all_files = []\n        for pattern in [\"**/*.csv\", \"**/*.json\", \"**/*.xlsx\", \"**/*.jpg\", \"**/*.png\"]:\n            all_files.extend(data_dir.glob(pattern))\n\n        print(f\"Starting upload for experiment {experiment_id}: {len(all_files)} files\")\n\n        for file_path in all_files:\n            if file_path.is_file():\n                try:\n                    # Generate object name\n                    relative_path = file_path.relative_to(data_dir)\n                    object_name = f\"experiments/{experiment_id}/{relative_path}\"\n\n                    # Get file size\n                    file_size = file_path.stat().st_size\n\n                    # Execute upload\n                    result = self.storage.fput_object(\n                        bucket_name=self.bucket_name,\n                        object_name=object_name,\n                        file_path=str(file_path)\n                    )\n\n                    upload_results[\"uploaded_files\"].append({\n                        \"local_path\": str(file_path),\n                        \"object_name\": object_name,\n                        \"size\": file_size,\n                        \"etag\": result.etag if hasattr(result, 'etag') else None\n                    })\n\n                    upload_results[\"total_size\"] += file_size\n                    print(f\"\u2713 Uploaded: {relative_path}\")\n\n                except Exception as e:\n                    upload_results[\"failed_files\"].append({\n                        \"local_path\": str(file_path),\n                        \"error\": str(e)\n                    })\n                    print(f\"\u2717 Upload failed: {file_path} - {e}\")\n\n        return upload_results\n\n# Usage example\nstorage = MinIOStorage(\n    endpoint=\"localhost:9000\",\n    access_key=\"minioadmin\",\n    secret_key=\"minioadmin\"\n)\n\nmanager = ExperimentDataManager(storage, \"rde-experiments\")\nresult = manager.upload_experiment(\"EXP001\", Path(\"data/experiment_001\"))\nprint(f\"Upload result: {result}\")\n</code></pre>"},{"location":"usage/cli/","title":"\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u6a5f\u80fd\u306b\u3064\u3044\u3066","text":""},{"location":"usage/cli/#_2","title":"\u6982\u8981","text":"<p>RDEToolKit\u306f\u3001RDE\u69cb\u9020\u5316\u51e6\u7406\u306e\u958b\u767a\u3068\u5b9f\u884c\u3092\u652f\u63f4\u3059\u308b\u5305\u62ec\u7684\u306a\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\u304b\u3089\u3001Excel\u30a4\u30f3\u30dc\u30a4\u30b9\u306e\u751f\u6210\u3001\u30a2\u30fc\u30ab\u30a4\u30d6\u306e\u4f5c\u6210\u307e\u3067\u3001\u958b\u767a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u5168\u4f53\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002</p>"},{"location":"usage/cli/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>Python 3.9\u4ee5\u4e0a</li> <li>rdetoolkit\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</li> </ul>"},{"location":"usage/cli/#_4","title":"\u5229\u7528\u53ef\u80fd\u306a\u30b3\u30de\u30f3\u30c9","text":""},{"location":"usage/cli/#init","title":"init: \u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u306e\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit init\n</code></pre> <pre><code>py -m rdetoolkit init\n</code></pre> <p>\u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30d5\u30a1\u30a4\u30eb\u7fa4\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002</p> <pre><code>container\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport\n\u2502       \u251c\u2500\u2500 invoice.schema.json\n\u2502       \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 modules\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>\u5404\u30d5\u30a1\u30a4\u30eb\u306e\u8aac\u660e\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002</p> <ul> <li>requirements.txt: \u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u69cb\u7bc9\u3067\u4f7f\u7528\u3057\u305f\u3044Python\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066<code>pip install</code>\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>modules: \u69cb\u9020\u5316\u51e6\u7406\u3067\u4f7f\u7528\u3057\u305f\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u683c\u7d0d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>main.py: \u69cb\u9020\u5316\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8d77\u52d5\u51e6\u7406\u3092\u5b9a\u7fa9</li> <li>data/inputdata: \u69cb\u9020\u5316\u51e6\u7406\u5bfe\u8c61\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>data/invoice: \u30ed\u30fc\u30ab\u30eb\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u7a7a\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002</li> <li>data/tasksupport: \u69cb\u9020\u5316\u51e6\u7406\u306e\u88dc\u52a9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> <p>\u30d5\u30a1\u30a4\u30eb\u4e0a\u66f8\u304d\u306b\u3064\u3044\u3066</p> <p>\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306f\u4e0a\u66f8\u304d\u3084\u751f\u6210\u304c\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/cli/#make-excelinvoice-excelinvoice","title":"make-excelinvoice: ExcelInvoice\u306e\u751f\u6210","text":"<p><code>invoice.schema.json</code>\u304b\u3089Excel\u30a4\u30f3\u30dc\u30a4\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit make-excelinvoice &lt;invoice.schema.json path&gt; -o &lt;save file path&gt; -m &lt;file or folder&gt;\n</code></pre> <pre><code>py -m rdetoolkit make-excelinvoice &lt;invoice.schema.json path&gt; -o &lt;save file path&gt; -m &lt;file or folder&gt;\n</code></pre>"},{"location":"usage/cli/#_5","title":"\u30aa\u30d7\u30b7\u30e7\u30f3","text":"\u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e \u5fc5\u9808 -o(--output) \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3002\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u672b\u5c3e\u306f<code>_excel_invoice.xlsx</code>\u3092\u4ed8\u4e0e\u3059\u308b\u3053\u3068\u3002 \u25cb -m \u30e2\u30fc\u30c9\u306e\u9078\u629e\u3002\u767b\u9332\u30e2\u30fc\u30c9\u306e\u9078\u629e\u3002\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9<code>file</code>\u304b\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9<code>folder</code>\u3092\u9078\u629e\u53ef\u80fd\u3002 - <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u51fa\u529b</p> <p><code>-o</code>\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001<code>template_excel_invoice.xlsx</code>\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u3001\u5b9f\u884c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u306b\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/cli/#version","title":"version: \u30d0\u30fc\u30b8\u30e7\u30f3\u78ba\u8a8d","text":"<p>rdetoolkit\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit version\n</code></pre> <pre><code>py -m rdetoolkit version\n</code></pre>"},{"location":"usage/cli/#artifact-rde","title":"artifact: RDE\u63d0\u51fa\u7528\u30a2\u30fc\u30ab\u30a4\u30d6\u306e\u4f5c\u6210","text":"<p>RDE\u306b\u63d0\u51fa\u3059\u308b\u305f\u3081\u306e\u30a2\u30fc\u30ab\u30a4\u30d6\uff08.zip\uff09\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u6307\u5b9a\u3057\u305f\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5727\u7e2e\u3057\u3001\u9664\u5916\u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u9664\u5916\u3057\u307e\u3059\u3002</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit artifact --source-dir &lt;\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea&gt; --output-archive &lt;\u51fa\u529b\u30a2\u30fc\u30ab\u30a4\u30d6\u30d5\u30a1\u30a4\u30eb&gt; --exclude &lt;\u9664\u5916\u30d1\u30bf\u30fc\u30f3&gt;\n</code></pre> <pre><code>py -m rdetoolkit artifact --source-dir &lt;\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea&gt; --output-archive &lt;\u51fa\u529b\u30a2\u30fc\u30ab\u30a4\u30d6\u30d5\u30a1\u30a4\u30eb&gt; --exclude &lt;\u9664\u5916\u30d1\u30bf\u30fc\u30f3&gt;\n</code></pre>"},{"location":"usage/cli/#_6","title":"\u30aa\u30d7\u30b7\u30e7\u30f3","text":"\u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e \u5fc5\u9808 -s(--source-dir) \u5727\u7e2e\u30fb\u30b9\u30ad\u30e3\u30f3\u5bfe\u8c61\u306e\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea \u25cb -o(--output-archive) \u51fa\u529b\u30a2\u30fc\u30ab\u30a4\u30d6\u30d5\u30a1\u30a4\u30eb\uff08\u4f8b\uff1arde_template.zip\uff09 - -e(--exclude) \u9664\u5916\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f 'venv' \u3068 'site-packages' \u304c\u9664\u5916\u3055\u308c\u307e\u3059 -"},{"location":"usage/cli/#_7","title":"\u5b9f\u884c\u30ec\u30dd\u30fc\u30c8","text":"<p>\u30a2\u30fc\u30ab\u30a4\u30d6\u304c\u4f5c\u6210\u3055\u308c\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9f\u884c\u30ec\u30dd\u30fc\u30c8\u304c\u751f\u6210\u3055\u308c\u307e\u3059\uff1a</p> <ul> <li>Dockerfile\u3084requirements.txt\u306e\u5b58\u5728\u78ba\u8a8d</li> <li>\u542b\u307e\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30d5\u30a1\u30a4\u30eb\u306e\u30ea\u30b9\u30c8</li> <li>\u30b3\u30fc\u30c9\u30b9\u30ad\u30e3\u30f3\u7d50\u679c\uff08\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\u306e\u691c\u51fa\uff09</li> <li>\u5916\u90e8\u901a\u4fe1\u30c1\u30a7\u30c3\u30af\u7d50\u679c</li> </ul> <p>\u5b9f\u884c\u30ec\u30dd\u30fc\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\uff1a</p> <pre><code># Execution Report\n\n**Execution Date:** 2025-04-08 02:58:44\n\n- **Dockerfile:** [Exists]: \ud83d\udc33\u3000container/Dockerfile\n- **Requirements:** [Exists]: \ud83d\udc0d container/requirements.txt\n\n## Included Directories\n\n- container/requirements.txt\n- container/Dockerfile\n- container/vuln.py\n- container/external.py\n\n## Code Scan Results\n\n### container/vuln.py\n\n**Description**: Usage of eval() poses the risk of arbitrary code execution.\n\n```python\ndef insecure():\n    value = eval(\"1+2\")\n    print(value)\n</code></pre>"},{"location":"usage/cli/#external-communication-check-results","title":"External Communication Check Results","text":""},{"location":"usage/cli/#containerexternalpy","title":"container/external.py","text":"<pre><code>1:\n2: import requests\n3: def fetch():\n4:     response = requests.get(\"https://example.com\")\n5:     return response.text\n</code></pre> <p>\u30aa\u30d7\u30b7\u30e7\u30f3\u8a73\u7d30</p> <ul> <li><code>--output-archive</code>\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u30a2\u30fc\u30ab\u30a4\u30d6\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002</li> <li><code>--exclude</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8907\u6570\u56de\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff08\u4f8b\uff1a<code>--exclude venv --exclude .git</code>\uff09\u3002</li> </ul>"},{"location":"usage/cli/#_8","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b</li> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u65b9\u6cd5\u3092\u5b66\u3076</li> <li>API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u8a73\u7d30\u306a\u6a5f\u80fd\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/docker/","title":"Docker\u3067RDEToolKit\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5","text":""},{"location":"usage/docker/#_1","title":"\u6982\u8981","text":"<p>RDEToolKit\u3092\u4f7f\u3063\u305f\u69cb\u9020\u5316\u51e6\u7406\u3092Docker\u4e0a\u3067\u52d5\u4f5c\u3055\u305b\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002Docker\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u74b0\u5883\u306e\u4e00\u8cab\u6027\u3092\u4fdd\u3061\u3001\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u3092\u7c21\u7d20\u5316\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/docker/#_2","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>Docker Desktop \u307e\u305f\u306f Docker Engine \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068</li> <li>\u57fa\u672c\u7684\u306aDocker\u30b3\u30de\u30f3\u30c9\u306e\u77e5\u8b58</li> <li>RDEToolKit\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u57fa\u672c\u69cb\u9020\u306e\u7406\u89e3</li> </ul>"},{"location":"usage/docker/#_3","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u63a8\u5968\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\uff1a</p> <pre><code>(\u69cb\u9020\u5316\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea)\n\u251c\u2500\u2500 container\n\u2502   \u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 input1\n\u2502   \u2514\u2500\u2500 input2\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 template\n    \u251c\u2500\u2500 batch.yaml\n    \u251c\u2500\u2500 catalog.schema.json\n    \u251c\u2500\u2500 invoice.schema.json\n    \u251c\u2500\u2500 jobs.template.yaml\n    \u251c\u2500\u2500 metadata-def.json\n    \u2514\u2500\u2500 tasksupport\n</code></pre>"},{"location":"usage/docker/#dockerfile","title":"Dockerfile\u306e\u4f5c\u6210","text":"<p><code>container/Dockerfile</code>\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u57fa\u672c\u7684\u306aDockerfile\u306e\u4f8b\u3067\u3059\uff1a</p> container/Dockerfile<pre><code>FROM python:3.11.9\n\nWORKDIR /app\n\nCOPY requirements.txt .\n\nRUN pip install -r requirements.txt\n\nCOPY main.py /app\nCOPY modules/ /app/modules/\n</code></pre> <p>\u30ab\u30b9\u30bf\u30de\u30a4\u30ba</p> <p>\u4f7f\u7528\u3059\u308bDocker\u30a4\u30e1\u30fc\u30b8\u3084\u5404\u7a2e\u5b9f\u884c\u6587\u306f\u3001\u5404\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8981\u4ef6\u306b\u5fdc\u3058\u3066\u81ea\u7531\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>Docker Hub Container Image Library\u3067\u30d9\u30fc\u30b9\u30a4\u30e1\u30fc\u30b8\u3092\u63a2\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/docker/#_4","title":"\u30a4\u30e1\u30fc\u30b8\u306e\u30d3\u30eb\u30c9","text":""},{"location":"usage/docker/#_5","title":"\u57fa\u672c\u7684\u306a\u30d3\u30eb\u30c9","text":"<p><code>Dockerfile</code>\u304c\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u3001docker build\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> \u30a4\u30e1\u30fc\u30b8\u30d3\u30eb\u30c9<pre><code># \u57fa\u672c\u30b3\u30de\u30f3\u30c9\ndocker build -t \u30a4\u30e1\u30fc\u30b8\u540d:\u30bf\u30b0 \u30d1\u30b9\n\n# \u5b9f\u884c\u4f8b\ndocker build -t sample_tif:v1 .\n</code></pre>"},{"location":"usage/docker/#_6","title":"\u30aa\u30d7\u30b7\u30e7\u30f3\u8aac\u660e","text":"<ul> <li><code>-t</code>\u30aa\u30d7\u30b7\u30e7\u30f3: \u30a4\u30e1\u30fc\u30b8\u540d\u3068\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u540d\u306f\u4efb\u610f\u3067\u3059\u304c\u3001\u4e00\u610f\u3067\u3042\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002</li> <li>\u30d1\u30b9: <code>Dockerfile</code>\u304c\u5b58\u5728\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5834\u5408\u306f<code>.</code>\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"usage/docker/#_7","title":"\u30d7\u30ed\u30ad\u30b7\u74b0\u5883\u3067\u306e\u5bfe\u5fdc","text":"<p>\u30d7\u30ed\u30ad\u30b7\u74b0\u5883\u4e0b\u3067\u30d3\u30eb\u30c9\u3059\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> \u30d7\u30ed\u30ad\u30b7\u74b0\u5883\u3067\u306e\u30d3\u30eb\u30c9<pre><code>docker build -t sample_tif:v1 \\\n  --build-arg http_proxy=http://proxy.example.com:8080 \\\n  --build-arg https_proxy=http://proxy.example.com:8080 \\\n  .\n</code></pre>"},{"location":"usage/docker/#pip","title":"pip\u30b3\u30de\u30f3\u30c9\u30a8\u30e9\u30fc\u306e\u5bfe\u51e6\u6cd5","text":"<p>pip\u30b3\u30de\u30f3\u30c9\u3067SSL\u8a3c\u660e\u66f8\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u5834\u5408\u306e\u5bfe\u51e6\u6cd5\uff1a</p>"},{"location":"usage/docker/#pipconf","title":"pip.conf\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","text":"<p>Dockerfile\u3068\u540c\u3058\u968e\u5c64\u306b<code>pip.conf</code>\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> pip.conf<pre><code>[install]\ntrusted-host =\n    pypi.python.org\n    files.pythonhosted.org\n    pypi.org\n</code></pre>"},{"location":"usage/docker/#dockerfile_1","title":"Dockerfile\u306e\u4fee\u6b63","text":"<p>pip.conf\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306bDockerfile\u3092\u4fee\u6b63\u3057\u307e\u3059\uff1a</p> \u4fee\u6b63\u5f8c\u306eDockerfile<pre><code>FROM python:3.11\n\nWORKDIR /app\n\nCOPY requirements.txt .\nCOPY pip.conf /etc/pip.conf\n\nRUN pip install -r requirements.txt\n\nCOPY main.py /app\nCOPY modules/ /app/modules/\n</code></pre>"},{"location":"usage/docker/#docker","title":"Docker\u30b3\u30f3\u30c6\u30ca\u306e\u5b9f\u884c","text":""},{"location":"usage/docker/#_8","title":"\u57fa\u672c\u7684\u306a\u5b9f\u884c\u65b9\u6cd5","text":"<p>\u30d3\u30eb\u30c9\u3057\u305f\u30a4\u30e1\u30fc\u30b8\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\u3001<code>docker run</code>\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> \u30b3\u30f3\u30c6\u30ca\u5b9f\u884c<pre><code># \u57fa\u672c\u30b3\u30de\u30f3\u30c9\ndocker run [\u30aa\u30d7\u30b7\u30e7\u30f3] \u30a4\u30e1\u30fc\u30b8\u540d [\u30b3\u30de\u30f3\u30c9]\n\n# \u5b9f\u884c\u4f8b\ndocker run -it -v ${HOME}/sample_tif/container/data:/app2/data --name \"sample_tifv1\" sample_tif:v1 \"/bin/bash\"\n</code></pre>"},{"location":"usage/docker/#_9","title":"\u30aa\u30d7\u30b7\u30e7\u30f3\u8a73\u7d30","text":"\u30aa\u30d7\u30b7\u30e7\u30f3 \u8aac\u660e <code>-it</code> \u5bfe\u8a71\u7684\u306a\u30e2\u30fc\u30c9\u3067\u30b3\u30f3\u30c6\u30ca\u3092\u5b9f\u884c\u3002\u30bf\u30fc\u30df\u30ca\u30eb\u3084\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5229\u7528\u53ef\u80fd <code>-v \u30db\u30b9\u30c8\u30d1\u30b9:\u30b3\u30f3\u30c6\u30ca\u30d1\u30b9</code> \u30db\u30b9\u30c8\u3068\u30b3\u30f3\u30c6\u30ca\u9593\u3067\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30de\u30a6\u30f3\u30c8 <code>--name \"\u30b3\u30f3\u30c6\u30ca\u540d\"</code> \u30b3\u30f3\u30c6\u30ca\u306b\u540d\u524d\u3092\u4ed8\u3051\u308b <code>\u30a4\u30e1\u30fc\u30b8\u540d:\u30bf\u30b0</code> \u5b9f\u884c\u3059\u308bDocker\u30a4\u30e1\u30fc\u30b8\u306e\u540d\u524d\u3068\u30d0\u30fc\u30b8\u30e7\u30f3 <code>\"/bin/bash\"</code> \u30b3\u30f3\u30c6\u30ca\u5185\u3067\u5b9f\u884c\u3059\u308b\u30b3\u30de\u30f3\u30c9"},{"location":"usage/docker/#_10","title":"\u30c7\u30fc\u30bf\u30dc\u30ea\u30e5\u30fc\u30e0\u306e\u30de\u30a6\u30f3\u30c8","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u3001\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30de\u30a6\u30f3\u30c8\u3057\u307e\u3059\uff1a</p> \u30c7\u30fc\u30bf\u30de\u30a6\u30f3\u30c8\u4f8b<pre><code>docker run -it \\\n  -v ${HOME}/sample_tif/container/data:/app2/data \\\n  -v ${HOME}/sample_tif/inputdata:/app2/inputdata \\\n  --name \"sample_tifv1\" \\\n  sample_tif:v1 \\\n  \"/bin/bash\"\n</code></pre>"},{"location":"usage/docker/#_11","title":"\u30b3\u30f3\u30c6\u30ca\u5185\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c","text":"<p>\u30b3\u30f3\u30c6\u30ca\u304c\u8d77\u52d5\u3057\u305f\u3089\u3001\u958b\u767a\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c<pre><code># \u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\ncd /app2\n\n# \u69cb\u9020\u5316\u51e6\u7406\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\npython3 /app/main.py\n</code></pre> <p>\u30bf\u30fc\u30df\u30ca\u30eb\u306e\u5909\u5316</p> <p>\u5b9f\u884c\u3059\u308b\u3068\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u304c<code>root@(\u30b3\u30f3\u30c6\u30caID):</code>\u306e\u3088\u3046\u306b\u5909\u5316\u3057\u307e\u3059\u3002</p>"},{"location":"usage/docker/#_12","title":"\u30b3\u30f3\u30c6\u30ca\u306e\u7ba1\u7406","text":""},{"location":"usage/docker/#_13","title":"\u30b3\u30f3\u30c6\u30ca\u306e\u7d42\u4e86","text":"\u30b3\u30f3\u30c6\u30ca\u7d42\u4e86<pre><code>exit\n</code></pre>"},{"location":"usage/docker/#_14","title":"\u30b3\u30f3\u30c6\u30ca\u306e\u518d\u8d77\u52d5","text":"\u505c\u6b62\u3057\u305f\u30b3\u30f3\u30c6\u30ca\u306e\u518d\u8d77\u52d5<pre><code>docker start sample_tifv1\ndocker exec -it sample_tifv1 /bin/bash\n</code></pre>"},{"location":"usage/docker/#_15","title":"\u30b3\u30f3\u30c6\u30ca\u306e\u524a\u9664","text":"\u30b3\u30f3\u30c6\u30ca\u524a\u9664<pre><code>docker rm sample_tifv1\n</code></pre>"},{"location":"usage/docker/#_16","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"usage/docker/#_17","title":"\u30de\u30eb\u30c1\u30b9\u30c6\u30fc\u30b8\u30d3\u30eb\u30c9","text":"<p>\u672c\u756a\u74b0\u5883\u3067\u306f\u3001\u30de\u30eb\u30c1\u30b9\u30c6\u30fc\u30b8\u30d3\u30eb\u30c9\u3092\u4f7f\u7528\u3057\u3066\u30a4\u30e1\u30fc\u30b8\u30b5\u30a4\u30ba\u3092\u6700\u9069\u5316\u3067\u304d\u307e\u3059\uff1a</p> \u30de\u30eb\u30c1\u30b9\u30c6\u30fc\u30b8Dockerfile<pre><code># \u30d3\u30eb\u30c9\u30b9\u30c6\u30fc\u30b8\nFROM python:3.11 as builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --user -r requirements.txt\n\n# \u5b9f\u884c\u30b9\u30c6\u30fc\u30b8\nFROM python:3.11-slim\nWORKDIR /app\nCOPY --from=builder /root/.local /root/.local\nCOPY main.py /app\nCOPY modules/ /app/modules/\nENV PATH=/root/.local/bin:$PATH\n</code></pre>"},{"location":"usage/docker/#dockerignore","title":".dockerignore\u30d5\u30a1\u30a4\u30eb","text":"<p>\u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304b\u3089\u9664\u5916\u3057\u307e\u3059\uff1a</p> .dockerignore<pre><code>.git\n.gitignore\nREADME.md\nDockerfile\n.dockerignore\n__pycache__\n*.pyc\n*.pyo\n*.pyd\n.Python\nenv\npip-log.txt\npip-delete-this-directory.txt\n.tox\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.log\n.venv\n</code></pre>"},{"location":"usage/docker/#_18","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"usage/docker/#_19","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5","text":"<ol> <li>\u30dd\u30fc\u30c8\u7af6\u5408\u30a8\u30e9\u30fc</li> <li>\u65e2\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30dd\u30fc\u30c8\u3092\u907f\u3051\u308b</li> <li> <p><code>docker ps</code>\u3067\u5b9f\u884c\u4e2d\u306e\u30b3\u30f3\u30c6\u30ca\u3092\u78ba\u8a8d</p> </li> <li> <p>\u30dc\u30ea\u30e5\u30fc\u30e0\u30de\u30a6\u30f3\u30c8\u30a8\u30e9\u30fc</p> </li> <li>\u30d1\u30b9\u304c\u6b63\u3057\u3044\u304b\u78ba\u8a8d</li> <li> <p>\u6a29\u9650\u8a2d\u5b9a\u3092\u78ba\u8a8d</p> </li> <li> <p>\u30e1\u30e2\u30ea\u4e0d\u8db3\u30a8\u30e9\u30fc</p> </li> <li>Docker\u306e\u30e1\u30e2\u30ea\u5236\u9650\u3092\u78ba\u8a8d</li> <li>\u4e0d\u8981\u306a\u30b3\u30f3\u30c6\u30ca\u3092\u505c\u6b62</li> </ol>"},{"location":"usage/docker/#_20","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b</li> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067Docker\u74b0\u5883\u7528\u306e\u8a2d\u5b9a\u3092\u5b66\u3076</li> <li>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u6a5f\u80fd\u3067artifact\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u305f\u30a2\u30fc\u30ab\u30a4\u30d6\u4f5c\u6210\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/metadata_definition_file/","title":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb","text":""},{"location":"usage/metadata_definition_file/#_2","title":"\u6982\u8981","text":"<p>RDE\u3067\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u69cb\u9020\u3068\u691c\u8a3c\u30eb\u30fc\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u3001RDE\u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u884c\u6642\u306b\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3057\u3001\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u3068\u54c1\u8cea\u3092\u4fdd\u8a3c\u3057\u307e\u3059\u3002</p>"},{"location":"usage/metadata_definition_file/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>JSON Schema \u306e\u57fa\u672c\u7684\u306a\u7406\u89e3</li> <li>RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u69cb\u9020\u306e\u77e5\u8b58</li> <li>\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u307e\u305f\u306fJSON\u7de8\u96c6\u30c4\u30fc\u30eb</li> </ul>"},{"location":"usage/metadata_definition_file/#_4","title":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u7a2e\u985e","text":"<p>RDE\u3067\u6271\u3046\u4e3b\u8981\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\uff1a</p> <ul> <li>invoice.schema.json: \u9001\u308a\u72b6\u306e\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9</li> <li>invoice.json: \u9001\u308a\u72b6\u30c7\u30fc\u30bf\u306e\u5b9f\u4f53</li> <li>metadata-def.json: \u30e1\u30bf\u30c7\u30fc\u30bf\u5b9a\u7fa9</li> <li>metadata.json: \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u5b9f\u4f53</li> </ul>"},{"location":"usage/metadata_definition_file/#invoiceschemajson","title":"invoice.schema.json \u306b\u3064\u3044\u3066","text":""},{"location":"usage/metadata_definition_file/#_5","title":"\u6982\u8981","text":"<p>\u9001\u308a\u72b6\u306e\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002JSON Schema\u306e\u6a19\u6e96\u4ed5\u69d8\u306b\u6e96\u62e0\u3057\u3001\u9001\u308a\u72b6\u306e\u753b\u9762\u751f\u6210\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>Creating your first schema - json-schema.org</p>"},{"location":"usage/metadata_definition_file/#_6","title":"\u57fa\u672c\u69cb\u9020","text":"invoice.schema.json \u306e\u57fa\u672c\u69cb\u9020<pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n  \"description\": \"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30b5\u30f3\u30d7\u30eb\u56fa\u6709\u60c5\u5831invoice\",\n  \"type\": \"object\",\n  \"required\": [\"custom\", \"sample\"],\n  \"properties\": {\n    \"custom\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u56fa\u6709\u60c5\u5831\",\n        \"en\": \"Custom Information\"\n      },\n      \"required\": [\"sample1\", \"sample2\"],\n      \"properties\": {\n        \"sample1\": {\n          \"label\": {\n            \"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff11\",\n            \"en\": \"sample1\"\n          },\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"options\": {\n            \"unit\": \"A\"\n          }\n        },\n        \"sample2\": {\n          \"label\": {\n            \"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff12\",\n            \"en\": \"sample2\"\n          },\n          \"type\": \"number\",\n          \"options\": {\n            \"unit\": \"b\"\n          }\n        }\n      }\n    },\n    \"sample\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u8a66\u6599\u60c5\u5831\",\n        \"en\": \"Sample Information\"\n      },\n      \"properties\": {\n        \"generalAttributes\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"required\": [\"termId\"],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n                }\n              }\n            }\n          ]\n        },\n        \"specificAttributes\": {\n          \"type\": \"array\",\n          \"items\": []\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#_7","title":"\u30d5\u30a3\u30fc\u30eb\u30c9\u5b9a\u7fa9","text":"\u9805\u76ee\u540d (JSON\u30dd\u30a4\u30f3\u30bf) \u578b \u30d5\u30a9\u30fc\u30de\u30c3\u30c8 \u5fc5\u9808 \u56fa\u5b9a\u5024 \u8aac\u660e (\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30eb\u30fc\u30c8) object - \u25cb - JSON\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30eb\u30fc\u30c8 /$schema string uri \u25cb <code>https://json-schema.org/draft/2020-12/schema</code> \u30e1\u30bf\u30b9\u30ad\u30fc\u30de\u306eID /$id string uri \u25cb - \u3053\u306e\u30b9\u30ad\u30fc\u30de\u306e\u30e6\u30cb\u30fc\u30afID /description string - - - \u30b9\u30ad\u30fc\u30de\u306e\u8aac\u660e /type string - \u25cb \"object\" \u5024\u306f\u56fa\u5b9a /required array - \u25cb - \u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u914d\u5217 /properties object - \u25cb - \u30d7\u30ed\u30d1\u30c6\u30a3\u5b9a\u7fa9"},{"location":"usage/metadata_definition_file/#_8","title":"\u30ab\u30b9\u30bf\u30e0\u60c5\u5831\u306e\u5b9a\u7fa9","text":"<p>\u56fa\u6709\u60c5\u5831\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u8a73\u7d30\u69cb\u9020\uff1a</p> \u30ab\u30b9\u30bf\u30e0\u60c5\u5831\u306e\u4f8b<pre><code>\"custom\": {\n  \"type\": \"object\",\n  \"label\": {\n    \"ja\": \"\u56fa\u6709\u60c5\u5831\",\n    \"en\": \"Custom Information\"\n  },\n  \"required\": [\"sample1\"],\n  \"properties\": {\n    \"sample1\": {\n      \"label\": {\n        \"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff11\",\n        \"en\": \"sample1\"\n      },\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"options\": {\n        \"unit\": \"A\",\n        \"placeholder\": {\n          \"ja\": \"\u65e5\u4ed8\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n          \"en\": \"Please enter date\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#_9","title":"\u30c7\u30fc\u30bf\u578b\u3068\u30aa\u30d7\u30b7\u30e7\u30f3","text":""},{"location":"usage/metadata_definition_file/#_10","title":"\u5229\u7528\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u578b","text":"\u578b \u8aac\u660e \u4f8b <code>string</code> \u6587\u5b57\u5217 \"sample text\" <code>number</code> \u6570\u5024\uff08\u5c0f\u6570\u70b9\u542b\u3080\uff09 3.14 <code>integer</code> \u6574\u6570 42 <code>boolean</code> \u771f\u507d\u5024 true, false"},{"location":"usage/metadata_definition_file/#_11","title":"\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a","text":"\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a\u4f8b<pre><code>\"options\": {\n  \"widget\": \"textarea\",\n  \"rows\": 5,\n  \"unit\": \"mm\",\n  \"placeholder\": {\n    \"ja\": \"\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n    \"en\": \"Please enter value\"\n  }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#_12","title":"\u8a66\u6599\u60c5\u5831\u306e\u5b9a\u7fa9","text":"<p>\u8a66\u6599\u60c5\u5831\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u69cb\u9020\uff1a</p> \u8a66\u6599\u60c5\u5831\u306e\u4f8b<pre><code>\"sample\": {\n  \"type\": \"object\",\n  \"label\": {\n    \"ja\": \"\u8a66\u6599\u60c5\u5831\",\n    \"en\": \"Sample Information\"\n  },\n  \"properties\": {\n    \"generalAttributes\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"termId\"],\n          \"properties\": {\n            \"termId\": {\n              \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n            }\n          }\n        }\n      ]\n    },\n    \"specificAttributes\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"classId\", \"termId\"],\n          \"properties\": {\n            \"classId\": {\n              \"const\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\"\n            },\n            \"termId\": {\n              \"const\": \"3250c45d-0ed6-1438-43b5-eb679918604a\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#invoicejson","title":"invoice.json \u306b\u3064\u3044\u3066","text":""},{"location":"usage/metadata_definition_file/#_13","title":"\u6982\u8981","text":"<p>invoice.schema.json\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30b9\u30ad\u30fc\u30de\u306b\u57fa\u3065\u304f\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002</p>"},{"location":"usage/metadata_definition_file/#_14","title":"\u57fa\u672c\u69cb\u9020","text":"invoice.json \u306e\u4f8b<pre><code>{\n  \"datasetId\": \"1s1199df4-0d1v-41b0-1dea-23bf4dh09g12\",\n  \"basic\": {\n    \"dateSubmitted\": \"\",\n    \"dataOwnerId\": \"0c233ef274f28e611de4074638b4dc43e737ab993132343532343430\",\n    \"dataName\": \"test-dataset\",\n    \"instrumentId\": null,\n    \"experimentId\": null,\n    \"description\": null\n  },\n  \"custom\": {\n    \"sample1\": \"2023-01-01\",\n    \"sample2\": 1.0\n  },\n  \"sample\": {\n    \"sampleId\": \"\",\n    \"names\": [\"test\"],\n    \"composition\": null,\n    \"referenceUrl\": null,\n    \"description\": null,\n    \"generalAttributes\": [\n      {\n        \"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\",\n        \"value\": null\n      }\n    ],\n    \"specificAttributes\": [],\n    \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\"\n  }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#metadata-defjson","title":"metadata-def.json \u306b\u3064\u3044\u3066","text":""},{"location":"usage/metadata_definition_file/#_15","title":"\u6982\u8981","text":"<p>\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u3068\u5236\u7d04\u3092\u5b9a\u7fa9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u4ed8\u968f\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u3092\u898f\u5b9a\u3057\u307e\u3059\u3002</p>"},{"location":"usage/metadata_definition_file/#_16","title":"\u57fa\u672c\u69cb\u9020","text":"metadata-def.json \u306e\u4f8b<pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/metadata-def.json\",\n  \"description\": \"\u30e1\u30bf\u30c7\u30fc\u30bf\u5b9a\u7fa9\u30b9\u30ad\u30fc\u30de\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"measurement\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"temperature\": {\n          \"type\": \"number\",\n          \"unit\": \"K\",\n          \"description\": \"\u6e2c\u5b9a\u6e29\u5ea6\"\n        },\n        \"pressure\": {\n          \"type\": \"number\",\n          \"unit\": \"Pa\",\n          \"description\": \"\u6e2c\u5b9a\u5727\u529b\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#_17","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"usage/metadata_definition_file/#_18","title":"\u30b9\u30ad\u30fc\u30de\u8a2d\u8a08\u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3","text":"<ol> <li>\u4e00\u610f\u6027\u306e\u78ba\u4fdd</li> <li><code>$id</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u5fc5\u305a\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b</li> <li> <p>\u30ad\u30fc\u540d\u306f\u30d5\u30a1\u30a4\u30eb\u5168\u4f53\u3067\u30e6\u30cb\u30fc\u30af\u306b\u3059\u308b</p> </li> <li> <p>\u591a\u8a00\u8a9e\u5bfe\u5fdc</p> </li> <li><code>label</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u65e5\u672c\u8a9e\u3068\u82f1\u8a9e\u306e\u4e21\u65b9\u3092\u63d0\u4f9b</li> <li> <p><code>placeholder</code>\u3082\u591a\u8a00\u8a9e\u5bfe\u5fdc\u3059\u308b</p> </li> <li> <p>\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5f37\u5316</p> </li> <li>\u9069\u5207\u306a<code>required</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a</li> <li> <p>\u30c7\u30fc\u30bf\u578b\u5236\u7d04\u3092\u660e\u78ba\u306b\u5b9a\u7fa9</p> </li> <li> <p>\u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u5411\u4e0a</p> </li> <li>\u5206\u304b\u308a\u3084\u3059\u3044<code>description</code>\u3092\u8a18\u8ff0</li> <li>\u9069\u5207\u306a<code>placeholder</code>\u3092\u8a2d\u5b9a</li> </ol>"},{"location":"usage/metadata_definition_file/#_19","title":"\u4e00\u822c\u7684\u306a\u554f\u984c\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"usage/metadata_definition_file/#_20","title":"\u30b9\u30ad\u30fc\u30de\u30a8\u30e9\u30fc","text":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u4f8b<pre><code>{\n  \"required\": [\"custom\"], // sample\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3044\n  \"properties\": {\n    \"custom\": { /* ... */ },\n    \"sample\": { /* ... */ }\n  }\n}\n</code></pre> <p>\u4fee\u6b63\u65b9\u6cd5: \u4fee\u6b63\u5f8c<pre><code>{\n  \"required\": [\"custom\", \"sample\"], // \u4e21\u65b9\u3092\u542b\u3081\u308b\n  \"properties\": {\n    \"custom\": { /* ... */ },\n    \"sample\": { /* ... */ }\n  }\n}\n</code></pre></p>"},{"location":"usage/metadata_definition_file/#_21","title":"\u578b\u5b9a\u7fa9\u30a8\u30e9\u30fc","text":"\u30a8\u30e9\u30fc\u4f8b<pre><code>{\n  \"sample1\": {\n    \"type\": \"string\",\n    \"format\": \"date\",\n    \"default\": 123 // \u578b\u304c\u4e00\u81f4\u3057\u306a\u3044\n  }\n}\n</code></pre> <p>\u4fee\u6b63\u65b9\u6cd5: \u4fee\u6b63\u5f8c<pre><code>{\n  \"sample1\": {\n    \"type\": \"string\",\n    \"format\": \"date\",\n    \"default\": \"2023-01-01\" // \u6b63\u3057\u3044\u578b\n  }\n}\n</code></pre></p>"},{"location":"usage/metadata_definition_file/#_22","title":"\u5b9f\u8df5\u4f8b","text":""},{"location":"usage/metadata_definition_file/#_23","title":"\u5b8c\u5168\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u30bb\u30c3\u30c8","text":"<p>\u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u7528\u3059\u308b\u5b8c\u5168\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4f8b\uff1a</p> \u5b8c\u5168\u306a invoice.schema.json<pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/material_analysis/invoice.schema.json\",\n  \"description\": \"\u6750\u6599\u5206\u6790\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u7528\u9001\u308a\u72b6\u30b9\u30ad\u30fc\u30de\",\n  \"type\": \"object\",\n  \"required\": [\"custom\", \"sample\"],\n  \"properties\": {\n    \"custom\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u6e2c\u5b9a\u6761\u4ef6\",\n        \"en\": \"Measurement Conditions\"\n      },\n      \"required\": [\"temperature\", \"measurement_time\"],\n      \"properties\": {\n        \"temperature\": {\n          \"label\": {\n            \"ja\": \"\u6e2c\u5b9a\u6e29\u5ea6\",\n            \"en\": \"Measurement Temperature\"\n          },\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"maximum\": 1000,\n          \"options\": {\n            \"unit\": \"K\",\n            \"placeholder\": {\n              \"ja\": \"\u6e29\u5ea6\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n              \"en\": \"Enter temperature\"\n            }\n          }\n        },\n        \"measurement_time\": {\n          \"label\": {\n            \"ja\": \"\u6e2c\u5b9a\u6642\u9593\",\n            \"en\": \"Measurement Time\"\n          },\n          \"type\": \"integer\",\n          \"minimum\": 1,\n          \"options\": {\n            \"unit\": \"min\",\n            \"placeholder\": {\n              \"ja\": \"\u6e2c\u5b9a\u6642\u9593\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n              \"en\": \"Enter measurement time\"\n            }\n          }\n        },\n        \"notes\": {\n          \"label\": {\n            \"ja\": \"\u5099\u8003\",\n            \"en\": \"Notes\"\n          },\n          \"type\": \"string\",\n          \"options\": {\n            \"widget\": \"textarea\",\n            \"rows\": 3,\n            \"placeholder\": {\n              \"ja\": \"\u7279\u8a18\u4e8b\u9805\u304c\u3042\u308c\u3070\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n              \"en\": \"Enter any special notes\"\n            }\n          }\n        }\n      }\n    },\n    \"sample\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u8a66\u6599\u60c5\u5831\",\n        \"en\": \"Sample Information\"\n      },\n      \"properties\": {\n        \"generalAttributes\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"required\": [\"termId\"],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n                }\n              }\n            }\n          ]\n        },\n        \"specificAttributes\": {\n          \"type\": \"array\",\n          \"items\": []\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"usage/metadata_definition_file/#_24","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u691c\u8a3c\u65b9\u6cd5\u3092\u5b66\u3076</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u6d3b\u7528\u65b9\u6cd5\u3092\u7406\u89e3\u3059\u308b</li> <li>API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u8a73\u7d30\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/object_storage/","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8\uff08MinIO\uff09\u306e\u5229\u7528\u65b9\u6cd5","text":""},{"location":"usage/object_storage/#_1","title":"\u6982\u8981","text":"<p>MinIOStorage\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8\u30b5\u30fc\u30d3\u30b9\u3067\u3042\u308bMinIO\u3068\u306e\u9023\u643a\u3092\u7c21\u5358\u306b\u884c\u3046\u305f\u3081\u306ePython\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306a\u3069\u3001MinIO\u306e\u4e3b\u8981\u306a\u6a5f\u80fd\u3092\u7c21\u5358\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/object_storage/#_2","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>Python 3.9\u4ee5\u4e0a</li> <li>MinIO\u30b5\u30fc\u30d0\u30fc\u3078\u306e\u30a2\u30af\u30bb\u30b9\uff08\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8URL\u3001\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3001\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc\uff09</li> </ul>"},{"location":"usage/object_storage/#_3","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5","text":"<p>rdetoolkit\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e00\u90e8\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>pip install rdetoolkit[minio]\n</code></pre>"},{"location":"usage/object_storage/#_4","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":""},{"location":"usage/object_storage/#miniostorage","title":"MinIOStorage\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316","text":"<pre><code>from rdetoolkit.storage.minio import MinIOStorage\n\n# \u76f4\u63a5\u8a8d\u8a3c\u60c5\u5831\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    access_key=\"your-access-key\",\n    secret_key=\"your-secret-key\",\n    secure=True  # HTTPS\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306fTrue\n)\n\n# \u74b0\u5883\u5909\u6570\u304b\u3089\u8a8d\u8a3c\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\nimport os\nos.environ[\"MINIO_ACCESS_KEY\"] = \"your-access-key\"\nos.environ[\"MINIO_SECRET_KEY\"] = \"your-secret-key\"\n\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    # access_key\u3068secret_key\u3092\u7701\u7565\u3059\u308b\u3068\u74b0\u5883\u5909\u6570\u304b\u3089\u8aad\u307f\u8fbc\u3080\n)\n</code></pre>"},{"location":"usage/object_storage/#_5","title":"\u30d0\u30b1\u30c3\u30c8\u64cd\u4f5c","text":""},{"location":"usage/object_storage/#_6","title":"\u30d0\u30b1\u30c3\u30c8\u306e\u4f5c\u6210","text":"<pre><code>storage.make_bucket(\"my-bucket\", location=\"us-east-1\")\n</code></pre>"},{"location":"usage/object_storage/#_7","title":"\u30d0\u30b1\u30c3\u30c8\u4e00\u89a7\u306e\u53d6\u5f97","text":"<pre><code>buckets = storage.list_buckets()\nfor bucket in buckets:\n    print(f\"\u30d0\u30b1\u30c3\u30c8\u540d: {bucket['name']}, \u4f5c\u6210\u65e5: {bucket['creation_date']}\")\n</code></pre>"},{"location":"usage/object_storage/#_8","title":"\u30d0\u30b1\u30c3\u30c8\u306e\u5b58\u5728\u78ba\u8a8d","text":"<pre><code>if storage.bucket_exists(\"my-bucket\"):\n    print(\"\u30d0\u30b1\u30c3\u30c8\u304c\u5b58\u5728\u3057\u307e\u3059\")\nelse:\n    print(\"\u30d0\u30b1\u30c3\u30c8\u304c\u5b58\u5728\u3057\u307e\u305b\u3093\")\n</code></pre>"},{"location":"usage/object_storage/#_9","title":"\u30d0\u30b1\u30c3\u30c8\u306e\u524a\u9664","text":"<pre><code>storage.remove_bucket(\"my-bucket\")  # \u30d0\u30b1\u30c3\u30c8\u304c\u7a7a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n</code></pre>"},{"location":"usage/object_storage/#_10","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u64cd\u4f5c","text":""},{"location":"usage/object_storage/#_11","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\uff08\u30e1\u30e2\u30ea\u4e0a\u306e\u30c7\u30fc\u30bf\u304b\u3089\uff09","text":"<pre><code># \u6587\u5b57\u5217\u304b\u3089\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\ndata = \"Hello, MinIO!\"\nstorage.put_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"hello.txt\",\n    data=data,\n    length=len(data),\n    content_type=\"text/plain\"\n)\n\n# \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u304b\u3089\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\nbinary_data = b\"\\x00\\x01\\x02\\x03\"\nstorage.put_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"binary-file\",\n    data=binary_data,\n    length=len(binary_data),\n    content_type=\"application/octet-stream\"\n)\n</code></pre>"},{"location":"usage/object_storage/#_12","title":"\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9","text":"<pre><code>storage.fput_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\",\n    file_path=\"/path/to/local/document.pdf\",\n    content_type=\"application/pdf\"\n)\n</code></pre>"},{"location":"usage/object_storage/#_13","title":"\u30e1\u30bf\u30c7\u30fc\u30bf\u4ed8\u304d\u3067\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9","text":"<pre><code>metadata = {\n    \"Author\": \"\u5c71\u7530\u592a\u90ce\",\n    \"Version\": \"1.0\",\n    \"Department\": \"\u958b\u767a\u90e8\"\n}\n\nstorage.fput_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\",\n    file_path=\"/path/to/local/document.pdf\",\n    content_type=\"application/pdf\",\n    metadata=metadata\n)\n</code></pre>"},{"location":"usage/object_storage/#_14","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\uff08\u30e1\u30e2\u30ea\u4e0a\u306b\uff09","text":"<pre><code>response = storage.get_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"hello.txt\"\n)\n\n# \u30ec\u30b9\u30dd\u30f3\u30b9\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\ndata = response.read()\nprint(data.decode('utf-8'))  # \"Hello, MinIO!\"\n\n# \u4f7f\u3044\u7d42\u308f\u3063\u305f\u3089\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\nresponse.close()\n</code></pre>"},{"location":"usage/object_storage/#_15","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9","text":"<pre><code>storage.fget_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\",\n    file_path=\"/path/to/save/document.pdf\"\n)\n</code></pre>"},{"location":"usage/object_storage/#_16","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u53d6\u5f97","text":"<pre><code>object_info = storage.stat_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\"\n)\n\nprint(f\"\u30b5\u30a4\u30ba: {object_info.size} bytes\")\nprint(f\"\u6700\u7d42\u66f4\u65b0\u65e5: {object_info.last_modified}\")\nprint(f\"ETag: {object_info.etag}\")\nprint(f\"\u30b3\u30f3\u30c6\u30f3\u30c4\u30bf\u30a4\u30d7: {object_info.content_type}\")\nprint(f\"\u30e1\u30bf\u30c7\u30fc\u30bf: {object_info.metadata}\")\n</code></pre>"},{"location":"usage/object_storage/#_17","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u524a\u9664","text":"<pre><code>storage.remove_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\"\n)\n</code></pre>"},{"location":"usage/object_storage/#urlpresigned-url","title":"\u7f72\u540d\u4ed8\u304dURL\uff08presigned URL\uff09\u306e\u751f\u6210","text":""},{"location":"usage/object_storage/#url","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u53d6\u5f97\u7528\u306e\u7f72\u540d\u4ed8\u304dURL","text":"<pre><code>from datetime import timedelta\n\n# 1\u6642\u9593\u6709\u52b9\u306a\u7f72\u540d\u4ed8\u304dURL\u3092\u751f\u6210\nurl = storage.presigned_get_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"private-document.pdf\",\n    expires=timedelta(hours=1)\n)\n\nprint(f\"\u6b21\u306eURL\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059: {url}\")\n# \u3053\u306eURL\u306f\u8a8d\u8a3c\u306a\u3057\u30671\u6642\u9593\u3060\u3051\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\n</code></pre>"},{"location":"usage/object_storage/#url_1","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u7528\u306e\u7f72\u540d\u4ed8\u304dURL","text":"<pre><code># 1\u65e5\u6709\u52b9\u306a\u7f72\u540d\u4ed8\u304dURL\u3092\u751f\u6210\nurl = storage.presigned_put_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"upload-here.zip\",\n    expires=timedelta(days=1)\n)\n\nprint(f\"\u6b21\u306eURL\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u53ef\u80fd\u3067\u3059: {url}\")\n# \u3053\u306eURL\u306b\u5bfe\u3057\u3066PUT\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3053\u3068\u3067\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u53ef\u80fd\n</code></pre>"},{"location":"usage/object_storage/#_18","title":"\u30bb\u30ad\u30e5\u30a2\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u53d6\u5f97","text":"<p>\u901a\u5e38\u306e<code>get_object</code>\u3088\u308a\u3082\u30bb\u30ad\u30e5\u30a2\u306a\u65b9\u6cd5\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\uff1a</p> <pre><code>response = storage.secure_get_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"sensitive-document.pdf\",\n    expires=timedelta(minutes=5)  # \u975e\u5e38\u306b\u77ed\u3044\u6709\u52b9\u671f\u9650\u3092\u8a2d\u5b9a\n)\n\n# \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\ndata = response.read()\n\n# \u4f7f\u3044\u7d42\u308f\u3063\u305f\u3089\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\nresponse.close()\n</code></pre>"},{"location":"usage/object_storage/#_19","title":"\u30d7\u30ed\u30ad\u30b7\u74b0\u5883\u3067\u306e\u5229\u7528","text":"<p>\u30d7\u30ed\u30ad\u30b7\u74b0\u5883\u4e0b\u3067MinIOStorage\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u304b\u3001\u660e\u793a\u7684\u306bHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/object_storage/#_20","title":"\u74b0\u5883\u5909\u6570\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u8a2d\u5b9a","text":"<pre><code>import os\n\n# \u74b0\u5883\u5909\u6570\u3067\u30d7\u30ed\u30ad\u30b7\u3092\u8a2d\u5b9a\nos.environ[\"HTTP_PROXY\"] = \"http://proxy.example.com:8080\"\nos.environ[\"HTTPS_PROXY\"] = \"http://proxy.example.com:8080\"\n\n# \u901a\u5e38\u901a\u308a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    access_key=\"your-access-key\",\n    secret_key=\"your-secret-key\"\n)\n</code></pre>"},{"location":"usage/object_storage/#http","title":"\u30ab\u30b9\u30bf\u30e0HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u8a2d\u5b9a","text":"<pre><code>from rdetoolkit.storage.minio import MinIOStorage\n\n# \u30ab\u30b9\u30bf\u30e0\u30d7\u30ed\u30ad\u30b7\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f5c\u6210\nproxy_client = MinIOStorage.create_proxy_client(\n    proxy_url=\"http://proxy.example.com:8080\"\n)\n\n# \u30d7\u30ed\u30ad\u30b7\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    access_key=\"your-access-key\",\n    secret_key=\"your-secret-key\",\n    http_client=proxy_client\n)\n</code></pre>"},{"location":"usage/object_storage/#_21","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"usage/object_storage/#_22","title":"\u4e00\u822c\u7684\u306a\u30a8\u30e9\u30fc","text":"<ol> <li>\u8a8d\u8a3c\u30a8\u30e9\u30fc</li> <li>\u30a2\u30af\u30bb\u30b9\u30ad\u30fc\u3068\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc\u304c\u6b63\u3057\u3044\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</li> <li> <p>\u74b0\u5883\u5909\u6570\u304c\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</p> </li> <li> <p>\u63a5\u7d9a\u30a8\u30e9\u30fc</p> </li> <li>\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u6b63\u3057\u3044\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</li> <li>MinIO\u30b5\u30fc\u30d0\u30fc\u304c\u7a3c\u50cd\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</li> <li>\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u63a5\u7d9a\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</li> <li> <p>\u30d7\u30ed\u30ad\u30b7\u8a2d\u5b9a\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</p> </li> <li> <p>\u6a29\u9650\u30a8\u30e9\u30fc</p> </li> <li> <p>\u30d0\u30b1\u30c3\u30c8\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u64cd\u4f5c\u6a29\u9650\u304c\u3042\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</p> </li> <li> <p>\u30d0\u30b1\u30c3\u30c8\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u30a8\u30e9\u30fc</p> </li> <li>\u30d0\u30b1\u30c3\u30c8\u540d\u306e\u30b9\u30da\u30eb\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</li> <li>\u30d0\u30b1\u30c3\u30c8\u304c\u5b58\u5728\u3059\u308b\u304b<code>bucket_exists()</code>\u3067\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044</li> </ol>"},{"location":"usage/object_storage/#_23","title":"\u30ed\u30b0\u306e\u78ba\u8a8d","text":"<p>\u554f\u984c\u89e3\u6c7a\u306e\u305f\u3081\u306b\u3001\u3088\u308a\u8a73\u7d30\u306a\u30ed\u30b0\u3092\u6709\u52b9\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>import logging\n\n# MinIO\u306e\u30ed\u30b0\u3092\u6709\u52b9\u306b\u3059\u308b\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"usage/object_storage/#_24","title":"\u5b9f\u8df5\u4f8b","text":""},{"location":"usage/object_storage/#_25","title":"\u57fa\u672c\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>from rdetoolkit.storage.minio import MinIOStorage\nfrom datetime import timedelta\nimport os\n\n# MinIOStorage\u306e\u521d\u671f\u5316\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    access_key=\"your-access-key\",\n    secret_key=\"your-secret-key\"\n)\n\n# \u4f5c\u696d\u7528\u30d0\u30b1\u30c3\u30c8\u306e\u4f5c\u6210\nbucket_name = \"my-documents\"\nif not storage.bucket_exists(bucket_name):\n    storage.make_bucket(bucket_name)\n    print(f\"\u30d0\u30b1\u30c3\u30c8 '{bucket_name}' \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\")\n\n# \u30d5\u30a1\u30a4\u30eb\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\nlocal_file = \"/path/to/important-doc.pdf\"\nobject_name = os.path.basename(local_file)\n\nstorage.fput_object(\n    bucket_name=bucket_name,\n    object_name=object_name,\n    file_path=local_file,\n    content_type=\"application/pdf\",\n    metadata={\"CreatedBy\": \"User123\"}\n)\nprint(f\"\u30d5\u30a1\u30a4\u30eb '{object_name}' \u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3057\u305f\")\n\n# \u4e00\u6642\u7684\u306a\u5171\u6709\u30ea\u30f3\u30af\u306e\u4f5c\u6210\nshare_url = storage.presigned_get_object(\n    bucket_name=bucket_name,\n    object_name=object_name,\n    expires=timedelta(hours=24)\n)\nprint(f\"24\u6642\u9593\u6709\u52b9\u306a\u5171\u6709\u30ea\u30f3\u30af: {share_url}\")\n\n# \u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\ndownload_path = f\"/path/to/downloads/{object_name}\"\nstorage.fget_object(\n    bucket_name=bucket_name,\n    object_name=object_name,\n    file_path=download_path\n)\nprint(f\"\u30d5\u30a1\u30a4\u30eb\u3092 '{download_path}' \u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3057\u305f\")\n</code></pre>"},{"location":"usage/object_storage/#_26","title":"\u307e\u3068\u3081","text":"<p>MinIOStorage\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001MinIO\u30b5\u30fc\u30d0\u30fc\u3068\u306e\u9023\u643a\u304c\u975e\u5e38\u306b\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\u4e3b\u306a\u6a5f\u80fd\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ul> <li>\u30d0\u30b1\u30c3\u30c8\u306e\u4f5c\u6210\u3001\u4e00\u89a7\u53d6\u5f97\u3001\u524a\u9664</li> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u30d5\u30a1\u30a4\u30eb\uff09\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3068\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u7ba1\u7406</li> <li>\u7f72\u540d\u4ed8\u304dURL\uff08\u671f\u9650\u4ed8\u304d\u30a2\u30af\u30bb\u30b9\u30ea\u30f3\u30af\uff09\u306e\u751f\u6210</li> <li>\u30d7\u30ed\u30ad\u30b7\u74b0\u5883\u3078\u306e\u5bfe\u5fdc</li> </ul>"},{"location":"usage/object_storage/#_27","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u8a73\u7d30\u306a\u6a5f\u80fd\u3092\u78ba\u8a8d\u3059\u308b</li> <li>MinIO Python SDK\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3059\u308b</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u3067\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30c8\u30ec\u30fc\u30b8\u6d3b\u7528\u65b9\u6cd5\u3092\u5b66\u3076</li> </ul>"},{"location":"usage/quickstart/","title":"RDEToolKit\u3092\u4f53\u9a13\u3059\u308b","text":""},{"location":"usage/quickstart/#_1","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001RDEToolKit\u3092\u4f7f\u7528\u3057\u3066\u521d\u3081\u3066\u306eRDE\u69cb\u9020\u5316\u51e6\u7406\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001\u5b9f\u884c\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u7d0415\u5206\u3067\u57fa\u672c\u7684\u306a\u69cb\u9020\u5316\u51e6\u7406\u306e\u6d41\u308c\u3092\u4f53\u9a13\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/quickstart/#_2","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>Python 3.9\u4ee5\u4e0a</li> <li>\u57fa\u672c\u7684\u306aPython\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u77e5\u8b58</li> <li>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u64cd\u4f5c\u306e\u57fa\u672c\u7684\u306a\u7406\u89e3</li> </ul>"},{"location":"usage/quickstart/#1","title":"1. \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u3059\u308b","text":"<p>\u307e\u305a\u3001RDEToolKit\u3092\u4f7f\u7528\u3057\u3066\u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <pre><code>python3 -m rdetoolkit init sample_project\n</code></pre> <p>\u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>sample_project/\n\u251c\u2500\u2500 main.py                    # \u30e1\u30a4\u30f3\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\n\u251c\u2500\u2500 requirements.txt           # \u4f9d\u5b58\u95a2\u4fc2\n\u251c\u2500\u2500 modules/                   # \u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u30e2\u30b8\u30e5\u30fc\u30eb\n\u2514\u2500\u2500 data/\n    \u251c\u2500\u2500 inputdata/            # \u5165\u529b\u30c7\u30fc\u30bf\n    \u251c\u2500\u2500 invoice/              # \u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\n    \u2514\u2500\u2500 tasksupport/          # \u8a2d\u5b9a\u30fb\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\n</code></pre>"},{"location":"usage/quickstart/#2","title":"2. \u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b","text":"<p><code>modules/process.py</code>\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304d\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff1a</p> modules/process.py<pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"\n    \u30ab\u30b9\u30bf\u30e0\u30c7\u30fc\u30bf\u51e6\u7406\u95a2\u6570\n\n    Args:\n        srcpaths: \u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\n        resource_paths: \u51fa\u529b\u30ea\u30bd\u30fc\u30b9\u30d1\u30b9\n    \"\"\"\n    # \u5165\u529b\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n    print(f\"\u5165\u529b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {srcpaths.inputdata}\")\n    print(f\"\u30a4\u30f3\u30dc\u30a4\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {srcpaths.invoice}\")\n\n    # \u7c21\u5358\u306a\u30d5\u30a1\u30a4\u30eb\u51e6\u7406\u306e\u4f8b\n    import shutil\n    from pathlib import Path\n\n    # \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u3092\u69cb\u9020\u5316\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\n    input_files = list(srcpaths.inputdata.glob(\"*\"))\n    for file_path in input_files:\n        if file_path.is_file():\n            dest_path = resource_paths.structured / file_path.name\n            shutil.copy2(file_path, dest_path)\n            print(f\"\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3057\u305f: {file_path.name}\")\n\n    # \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u8a2d\u5b9a\u4f8b\n    metadata = {\n        \"processed_files\": len(input_files),\n        \"processing_status\": \"completed\"\n    }\n\n    # \u30e1\u30bf\u30c7\u30fc\u30bf\u3092JSON\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\n    import json\n    metadata_file = resource_paths.meta / \"processing_metadata.json\"\n    with open(metadata_file, 'w', encoding='utf-8') as f:\n        json.dump(metadata, f, ensure_ascii=False, indent=2)\n\n    print(\"\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\")\n    return 0\n</code></pre>"},{"location":"usage/quickstart/#3","title":"3. \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b","text":"<p><code>data/inputdata/</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b5\u30f3\u30d7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3057\u307e\u3059\uff1a</p> <pre><code># \u30b5\u30f3\u30d7\u30eb\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\necho \"\u3053\u308c\u306f\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3067\u3059\" &gt; sample_project/data/inputdata/sample.txt\necho \"\u5b9f\u9a13\u30c7\u30fc\u30bf: \u6e29\u5ea6 25\u00b0C, \u6e7f\u5ea6 60%\" &gt; sample_project/data/inputdata/experiment_data.txt\n</code></pre>"},{"location":"usage/quickstart/#4","title":"4. \u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b","text":"<p>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\uff1a</p> <pre><code>cd sample_project\npython main.py\n</code></pre> <p>\u5b9f\u884c\u304c\u6210\u529f\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>\u5165\u529b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: /path/to/sample_project/data/inputdata\n\u30a4\u30f3\u30dc\u30a4\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: /path/to/sample_project/data/invoice\n\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3057\u305f: sample.txt\n\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3057\u305f: experiment_data.txt\n\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\n\u69cb\u9020\u5316\u51e6\u7406\u304c\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u307e\u3057\u305f\n</code></pre>"},{"location":"usage/quickstart/#5","title":"5. \u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b","text":"<p>\u51e6\u7406\u5b8c\u4e86\u5f8c\u3001\u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u304c\u751f\u6210\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>sample_project/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 modules/\n\u2502   \u2514\u2500\u2500 process.py\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 inputdata/\n\u2502   \u2502   \u251c\u2500\u2500 sample.txt\n\u2502   \u2502   \u2514\u2500\u2500 experiment_data.txt\n\u2502   \u251c\u2500\u2500 invoice/\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport/\n\u2502       \u2514\u2500\u2500 invoice.schema.json\n\u2514\u2500\u2500 output/                    # \u65b0\u3057\u304f\u751f\u6210\u3055\u308c\u308b\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    \u251c\u2500\u2500 raw/                   # \u751f\u30c7\u30fc\u30bf\n    \u251c\u2500\u2500 structured/            # \u69cb\u9020\u5316\u30c7\u30fc\u30bf\n    \u2502   \u251c\u2500\u2500 sample.txt\n    \u2502   \u2514\u2500\u2500 experiment_data.txt\n    \u251c\u2500\u2500 meta/                  # \u30e1\u30bf\u30c7\u30fc\u30bf\n    \u2502   \u2514\u2500\u2500 processing_metadata.json\n    \u251c\u2500\u2500 main_image/            # \u30e1\u30a4\u30f3\u753b\u50cf\n    \u251c\u2500\u2500 other_image/           # \u305d\u306e\u4ed6\u306e\u753b\u50cf\n    \u251c\u2500\u2500 thumbnail/             # \u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\n    \u2514\u2500\u2500 logs/                  # \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\n</code></pre>"},{"location":"usage/quickstart/#6","title":"6. \u51e6\u7406\u7d50\u679c\u306e\u8a73\u7d30\u78ba\u8a8d","text":"<p>\u751f\u6210\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code># \u69cb\u9020\u5316\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nls -la output/structured/\n\n# \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ncat output/meta/processing_metadata.json\n</code></pre> <p>\u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5185\u5bb9\u304c\u8a18\u9332\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <pre><code>{\n  \"processed_files\": 2,\n  \"processing_status\": \"completed\"\n}\n</code></pre>"},{"location":"usage/quickstart/#_3","title":"\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01","text":"<p>\u521d\u3081\u3066\u306eRDE\u69cb\u9020\u5316\u51e6\u7406\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u5b66\u3093\u3060\u3053\u3068\uff1a</p> <ul> <li>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u521d\u671f\u5316: <code>rdetoolkit init</code>\u30b3\u30de\u30f3\u30c9\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u9020\u3092\u4f5c\u6210</li> <li>\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u5b9f\u88c5: <code>dataset()</code>\u95a2\u6570\u3067\u30c7\u30fc\u30bf\u51e6\u7406\u30ed\u30b8\u30c3\u30af\u3092\u5b9a\u7fa9</li> <li>\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c: \u5165\u529b\u30c7\u30fc\u30bf\u3092\u69cb\u9020\u5316\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u6574\u7406</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u7ba1\u7406: \u51e6\u7406\u7d50\u679c\u3092JSON\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u8a18\u9332</li> <li>\u5b9f\u884c\u3068\u78ba\u8a8d: \u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u691c\u8a3c</li> </ul>"},{"location":"usage/quickstart/#_4","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u57fa\u672c\u7684\u306a\u69cb\u9020\u5316\u51e6\u7406\u3092\u4f53\u9a13\u3057\u305f\u306e\u3067\u3001\u6b21\u306f\u4ee5\u4e0b\u306e\u30c8\u30d4\u30c3\u30af\u3092\u5b66\u7fd2\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3092\u7406\u89e3\u3059\u308b</li> <li>\u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u63a2\u7d22\u3059\u308b</li> <li>CLI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u9ad8\u5ea6\u306a\u30b3\u30de\u30f3\u30c9\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/validation/","title":"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd","text":""},{"location":"usage/validation/#_2","title":"\u6982\u8981","text":"<p>RDEToolKit\u306b\u306f\u3001RDE\u95a2\u9023\u30d5\u30a1\u30a4\u30eb\u306e\u6574\u5408\u6027\u3068\u54c1\u8cea\u3092\u78ba\u4fdd\u3059\u308b\u305f\u3081\u306e\u5305\u62ec\u7684\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u306e\u958b\u767a\u6642\u306b\u4e8b\u524d\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u3053\u3068\u3067\u3001RDE\u3078\u306e\u767b\u9332\u6642\u306e\u30a8\u30e9\u30fc\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/validation/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>RDEToolKit\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</li> <li>\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u57fa\u672c\u7684\u306a\u7406\u89e3</li> <li>Python 3.9\u4ee5\u4e0a</li> </ul>"},{"location":"usage/validation/#_4","title":"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5bfe\u8c61\u30d5\u30a1\u30a4\u30eb","text":"<p>RDEToolKit\u3067\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5bfe\u8c61\u3068\u306a\u308b\u4e3b\u8981\u306a\u30d5\u30a1\u30a4\u30eb\uff1a</p> <ul> <li>invoice.schema.json: \u9001\u308a\u72b6\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb</li> <li>invoice.json: \u9001\u308a\u72b6\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb</li> <li>metadata-def.json: \u30e1\u30bf\u30c7\u30fc\u30bf\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb</li> <li>metadata.json: \u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb</li> </ul> <p>\u91cd\u8981</p> <p>\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u69cb\u9020\u5316\u51e6\u7406\u5185\u3067\u5185\u5bb9\u3092\u5909\u66f4\u3067\u304d\u308b\u305f\u3081\u3001\u4e8b\u524d\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u91cd\u8981\u3067\u3059\u3002</p> <p>\u95a2\u9023\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</p> <p>\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066</p>"},{"location":"usage/validation/#invoiceschemajson","title":"invoice.schema.json \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":""},{"location":"usage/validation/#_5","title":"\u6982\u8981","text":"<p><code>invoice.schema.json</code>\u306f\u3001RDE\u306e\u753b\u9762\u3092\u69cb\u6210\u3059\u308b\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\u69cb\u9020\u5316\u51e6\u7406\u4e2d\u3067\u306e\u5909\u66f4\u3084\u30ed\u30fc\u30ab\u30eb\u3067\u306e\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\u306b\u304a\u3044\u3066\u3001\u5fc5\u8981\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306e\u30c1\u30a7\u30c3\u30af\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"usage/validation/#_6","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":"invoice.schema.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3<pre><code>import json\nfrom pydantic import ValidationError\n\nfrom rdetoolkit.validation import InvoiceValidator\nfrom rdetoolkit.exceptions import InvoiceSchemaValidationError\n\n# \u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9\nschema = {\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n    \"description\": \"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30b5\u30f3\u30d7\u30eb\u56fa\u6709\u60c5\u5831invoice\",\n    \"type\": \"object\",\n    \"required\": [\"custom\", \"sample\"],\n    \"properties\": {\n        \"custom\": {\n            \"type\": \"object\",\n            \"label\": {\"ja\": \"\u56fa\u6709\u60c5\u5831\", \"en\": \"Custom Information\"},\n            \"required\": [\"sample1\"],\n            \"properties\": {\n                \"sample1\": {\n                    \"label\": {\"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff11\", \"en\": \"sample1\"},\n                    \"type\": \"string\",\n                    \"format\": \"date\",\n                    \"options\": {\"unit\": \"A\"}\n                },\n                \"sample2\": {\n                    \"label\": {\"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff12\", \"en\": \"sample2\"},\n                    \"type\": \"number\",\n                    \"options\": {\"unit\": \"b\"}\n                },\n            },\n        },\n        \"sample\": {\n            \"type\": \"object\",\n            \"label\": {\"ja\": \"\u8a66\u6599\u60c5\u5831\", \"en\": \"Sample Information\"},\n            \"properties\": {\n                \"generalAttributes\": {\n                    \"type\": \"array\",\n                    \"items\": [\n                        {\n                            \"type\": \"object\",\n                            \"required\": [\"termId\"],\n                            \"properties\": {\n                                \"termId\": {\n                                    \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n                                }\n                            }\n                        }\n                    ],\n                },\n                \"specificAttributes\": {\"type\": \"array\", \"items\": []},\n            },\n        },\n    },\n}\n\n# \u30c7\u30fc\u30bf\u4f8b\ndata = {\n    \"datasetId\": \"1s1199df4-0d1v-41b0-1dea-23bf4dh09g12\",\n    \"basic\": {\n        \"dateSubmitted\": \"\",\n        \"dataOwnerId\": \"0c233ef274f28e611de4074638b4dc43e737ab993132343532343430\",\n        \"dataName\": \"test-dataset\",\n        \"instrumentId\": None,\n        \"experimentId\": None,\n        \"description\": None,\n    },\n    \"custom\": {\"sample1\": \"2023-01-01\", \"sample2\": 1.0},\n    \"sample\": {\n        \"sampleId\": \"\",\n        \"names\": [\"test\"],\n        \"composition\": None,\n        \"referenceUrl\": None,\n        \"description\": None,\n        \"generalAttributes\": [\n            {\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": None}\n        ],\n        \"specificAttributes\": [],\n        \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\",\n    },\n}\n\n# \u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\nwith open(\"temp/invoice.schema.json\", \"w\") as f:\n    json.dump(schema, f, ensure_ascii=False, indent=2)\n\n# \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\nvalidator = InvoiceValidator(\"temp/invoice.schema.json\")\ntry:\n    validator.validate(obj=data)\n    print(\"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\")\nexcept ValidationError as validation_error:\n    raise InvoiceSchemaValidationError from validation_error\n</code></pre>"},{"location":"usage/validation/#_7","title":"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u306e\u5bfe\u51e6","text":"<p><code>invoice.schema.json</code>\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001<code>pydantic_core._pydantic_core.ValidationError</code>\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p> <p>\u53c2\u8003\u8cc7\u6599</p> <p>pydantic_core._pydantic_core.ValidationError - Pydantic</p>"},{"location":"usage/validation/#_8","title":"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u8aad\u307f\u65b9","text":"<p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u306f\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u8868\u793a\u3055\u308c\u307e\u3059\uff1a</p> <ul> <li>\u30a8\u30e9\u30fc\u539f\u56e0\u3068\u306a\u3063\u305f\u30d5\u30a3\u30fc\u30eb\u30c9</li> <li>\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7</li> <li>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8</li> </ul> \u30a8\u30e9\u30fc\u4f8b<pre><code>1. Field: required.0\n   Type: literal_error\n   Context: Input should be 'custom' or 'sample'\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>required</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b<code>custom</code>\u307e\u305f\u306f<code>sample</code>\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"usage/validation/#_9","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u4fee\u6b63\u65b9\u6cd5","text":"<p>\u30a8\u30e9\u30fc\u4f8b\uff1a \u554f\u984c\u306e\u3042\u308b\u30b9\u30ad\u30fc\u30de<pre><code>{\n    \"required\": [\"custom\"], // sample\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3044\n    \"properties\": {\n        \"custom\": { /* ... */ },\n        \"sample\": { /* ... */ }\n    }\n}\n</code></pre></p> <p>\u4fee\u6b63\u65b9\u6cd5\uff1a \u4fee\u6b63\u5f8c\u306e\u30b9\u30ad\u30fc\u30de<pre><code>{\n    \"required\": [\"custom\", \"sample\"], // \u4e21\u65b9\u3092\u542b\u3081\u308b\n    \"properties\": {\n        \"custom\": { /* ... */ },\n        \"sample\": { /* ... */ }\n    }\n}\n</code></pre></p>"},{"location":"usage/validation/#invoicejson","title":"invoice.json \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":""},{"location":"usage/validation/#_10","title":"\u6982\u8981","text":"<p><code>invoice.json</code>\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001\u5bfe\u5fdc\u3059\u308b<code>invoice.schema.json</code>\u304c\u5fc5\u8981\u3067\u3059\u3002\u30b9\u30ad\u30fc\u30de\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u5236\u7d04\u306b\u5f93\u3063\u3066\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</p>"},{"location":"usage/validation/#_11","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":"invoice.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3<pre><code># \u4e0a\u8a18\u306eschema\u3068data\u3092\u4f7f\u7528\nvalidator = InvoiceValidator(\"temp/invoice.schema.json\")\ntry:\n    validator.validate(obj=data)\n    print(\"invoice.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\")\nexcept ValidationError as validation_error:\n    print(f\"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc: {validation_error}\")\n</code></pre>"},{"location":"usage/validation/#_12","title":"\u8a66\u6599\u60c5\u5831\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":"<p>\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u69cb\u9020\u5316\u51e6\u7406\u3092\u958b\u767a\u3059\u308b\u5834\u5408\u3001<code>invoice.json</code>\uff08\u9001\u308a\u72b6\uff09\u3092\u4e8b\u524d\u306b\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u8a66\u6599\u60c5\u5831\u3092\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u30b1\u30fc\u30b9\u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\uff1a</p>"},{"location":"usage/validation/#1","title":"1. \u8a66\u6599\u60c5\u5831\u3092\u65b0\u898f\u306b\u8ffd\u52a0\u3059\u308b\u5834\u5408","text":"<p>\u3053\u306e\u5834\u5408\u3001<code>sample</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306e<code>sampleId</code>\u3001<code>names</code>\u3001<code>ownerId</code>\u304c\u5fc5\u9808\u306b\u306a\u308a\u307e\u3059\u3002</p> \u65b0\u898f\u8a66\u6599\u60c5\u5831<pre><code>\"sample\": {\n    \"sampleId\": \"de1132316439\",\n    \"names\": [\"test\"],\n    \"composition\": null,\n    \"referenceUrl\": null,\n    \"description\": null,\n    \"generalAttributes\": [\n        {\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": null}\n    ],\n    \"specificAttributes\": [],\n    \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\"\n}\n</code></pre>"},{"location":"usage/validation/#2","title":"2. \u65e2\u5b58\u306e\u8a66\u6599\u60c5\u5831\u3092\u53c2\u7167\u3059\u308b\u5834\u5408","text":"<p>\u3053\u306e\u5834\u5408\u3001<code>sample</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306e<code>sampleId</code>\u304c\u5fc5\u9808\u306b\u306a\u308a\u307e\u3059\u3002</p> \u65e2\u5b58\u8a66\u6599\u60c5\u5831\u53c2\u7167<pre><code>\"sample\": {\n    \"sampleId\": \"de1132316439\",\n    \"names\": [],\n    \"composition\": null,\n    \"referenceUrl\": null,\n    \"description\": null,\n    \"generalAttributes\": [\n        {\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": null}\n    ],\n    \"specificAttributes\": [],\n    \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\"\n}\n</code></pre>"},{"location":"usage/validation/#_13","title":"\u8a66\u6599\u60c5\u5831\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc","text":"<p>\u4e0a\u8a18\u306e2\u3064\u306e\u30b1\u30fc\u30b9\u306e\u3044\u305a\u308c\u304b\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p> \u8a66\u6599\u60c5\u5831\u30a8\u30e9\u30fc\u4f8b<pre><code>Error: Error in validating system standard field.\nPlease correct the following fields in invoice.json\nField: sample\nType: anyOf\nContext: {'sampleId': '', 'names': 'test', 'generalAttributes': [...], 'specificAttributes': [], 'ownerId': ''} is not valid under any of the given schemas\n</code></pre>"},{"location":"usage/validation/#_14","title":"\u305d\u306e\u4ed6\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc","text":"<p><code>invoice.json</code>\u306e<code>basic</code>\u9805\u76ee\u306b\u904e\u4e0d\u8db3\u3084\u5024\u304c\u4e0d\u6b63\u306a\u5834\u5408\u3001<code>jsonschema</code>\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p> \u57fa\u672c\u60c5\u5831\u30a8\u30e9\u30fc\u4f8b<pre><code>Error: Error in validating system standard item in invoice.schema.json.\nPlease correct the following fields in invoice.json\nField: basic.dataOwnerId\nType: pattern\nContext: String does not match expected pattern\n</code></pre>"},{"location":"usage/validation/#metadata-defjson","title":"metadata-def.json \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":""},{"location":"usage/validation/#_15","title":"\u6982\u8981","text":"<p><code>metadata-def.json</code>\u306f\u3001\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u3068\u5236\u7d04\u3092\u5b9a\u7fa9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308a\u3001\u30e1\u30bf\u30c7\u30fc\u30bf\u30b9\u30ad\u30fc\u30de\u306e\u6574\u5408\u6027\u3092\u78ba\u4fdd\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/validation/#_16","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":"metadata-def.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3<pre><code>from rdetoolkit.validation import MetadataValidator\n\n# \u30e1\u30bf\u30c7\u30fc\u30bf\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\nmetadata_validator = MetadataValidator(\"path/to/metadata-def.json\")\ntry:\n    metadata_validator.validate_schema()\n    print(\"metadata-def.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\")\nexcept ValidationError as e:\n    print(f\"\u30e1\u30bf\u30c7\u30fc\u30bf\u5b9a\u7fa9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc: {e}\")\n</code></pre>"},{"location":"usage/validation/#metadatajson","title":"metadata.json \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":""},{"location":"usage/validation/#_17","title":"\u6982\u8981","text":"<p><code>metadata.json</code>\u306f\u3001<code>metadata-def.json</code>\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30b9\u30ad\u30fc\u30de\u306b\u57fa\u3065\u304f\u5b9f\u969b\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002</p>"},{"location":"usage/validation/#_18","title":"\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":"metadata.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3<pre><code># \u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\ntry:\n    metadata_validator.validate_data(\"path/to/metadata.json\")\n    print(\"metadata.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\")\nexcept ValidationError as e:\n    print(f\"\u30e1\u30bf\u30c7\u30fc\u30bf\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc: {e}\")\n</code></pre>"},{"location":"usage/validation/#_19","title":"\u7d71\u5408\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":""},{"location":"usage/validation/#_20","title":"\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u5185\u3067\u306e\u81ea\u52d5\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3","text":"<p>RDEToolKit\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u5b9f\u884c\u6642\u306b\u306f\u3001\u81ea\u52d5\u7684\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\uff1a</p> \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u7d71\u5408\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3<pre><code>from rdetoolkit import workflows\n\ndef my_dataset_function(rde):\n    # \u30c7\u30fc\u30bf\u51e6\u7406\u30ed\u30b8\u30c3\u30af\n    rde.set_metadata({\"status\": \"processed\"})\n    return 0\n\n# \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u5b9f\u884c\u6642\u306b\u81ea\u52d5\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3055\u308c\u308b\ntry:\n    result = workflows.run(my_dataset_function)\n    print(\"\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u5b9f\u884c\u6210\u529f\")\nexcept Exception as e:\n    print(f\"\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u5b9f\u884c\u30a8\u30e9\u30fc\uff08\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u542b\u3080\uff09: {e}\")\n</code></pre>"},{"location":"usage/validation/#_21","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"usage/validation/#_22","title":"\u958b\u767a\u6642\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6226\u7565","text":"<ol> <li>\u6bb5\u968e\u7684\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</li> <li>\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u5148\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</li> <li> <p>\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u5f8c\u3067\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</p> </li> <li> <p>\u7d99\u7d9a\u7684\u30c1\u30a7\u30c3\u30af</p> </li> <li>\u30d5\u30a1\u30a4\u30eb\u5909\u66f4\u6642\u306b\u81ea\u52d5\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</li> <li> <p>CI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3</p> </li> <li> <p>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</p> </li> <li>\u8a73\u7d30\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u6d3b\u7528</li> <li>\u6bb5\u968e\u7684\u306a\u30a8\u30e9\u30fc\u4fee\u6b63</li> </ol>"},{"location":"usage/validation/#_23","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"usage/validation/#_24","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5","text":"<ol> <li>\u30b9\u30ad\u30fc\u30de\u69cb\u6587\u30a8\u30e9\u30fc</li> <li>JSON\u69cb\u6587\u306e\u78ba\u8a8d</li> <li> <p>\u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u78ba\u8a8d</p> </li> <li> <p>\u30c7\u30fc\u30bf\u578b\u4e0d\u4e00\u81f4</p> </li> <li>\u30b9\u30ad\u30fc\u30de\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u578b\u3068\u306e\u7167\u5408</li> <li> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u78ba\u8a8d</p> </li> <li> <p>\u53c2\u7167\u30a8\u30e9\u30fc</p> </li> <li>\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306e\u78ba\u8a8d</li> <li>\u30d5\u30a1\u30a4\u30eb\u5b58\u5728\u306e\u78ba\u8a8d</li> </ol>"},{"location":"usage/validation/#_25","title":"\u5b9f\u8df5\u4f8b","text":""},{"location":"usage/validation/#_26","title":"\u5b8c\u5168\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","text":"\u5b8c\u5168\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u4f8b<pre><code>import json\nfrom pathlib import Path\nfrom rdetoolkit.validation import InvoiceValidator, MetadataValidator\nfrom rdetoolkit.exceptions import InvoiceSchemaValidationError\n\ndef validate_all_files(project_dir: Path):\n    \"\"\"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u306e\u5168\u30d5\u30a1\u30a4\u30eb\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\"\"\"\n\n    # 1. invoice.schema.json \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n    schema_path = project_dir / \"tasksupport\" / \"invoice.schema.json\"\n    invoice_path = project_dir / \"invoice\" / \"invoice.json\"\n\n    try:\n        invoice_validator = InvoiceValidator(schema_path)\n        print(\"\u2713 invoice.schema.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\")\n\n        # 2. invoice.json \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n        with open(invoice_path) as f:\n            invoice_data = json.load(f)\n\n        invoice_validator.validate(obj=invoice_data)\n        print(\"\u2713 invoice.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\")\n\n    except ValidationError as e:\n        print(f\"\u2717 Invoice \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc: {e}\")\n        return False\n\n    # 3. metadata-def.json \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n    metadata_def_path = project_dir / \"tasksupport\" / \"metadata-def.json\"\n    metadata_path = project_dir / \"metadata.json\"\n\n    try:\n        metadata_validator = MetadataValidator(metadata_def_path)\n        metadata_validator.validate_schema()\n        print(\"\u2713 metadata-def.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\")\n\n        # 4. metadata.json \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n        if metadata_path.exists():\n            metadata_validator.validate_data(metadata_path)\n            print(\"\u2713 metadata.json \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6210\u529f\")\n\n    except ValidationError as e:\n        print(f\"\u2717 Metadata \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc: {e}\")\n        return False\n\n    print(\"\ud83c\udf89 \u5168\u30d5\u30a1\u30a4\u30eb\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5b8c\u4e86\")\n    return True\n\n# \u4f7f\u7528\u4f8b\nproject_directory = Path(\"./my_rde_project\")\nvalidate_all_files(project_directory)\n</code></pre>"},{"location":"usage/validation/#_27","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9\u306e\u8a73\u7d30\u3092\u5b66\u3076</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u3067\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u6d3b\u7528\u65b9\u6cd5\u3092\u7406\u89e3\u3059\u308b</li> <li>API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u8a73\u7d30\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/config/config/","title":"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5","text":""},{"location":"usage/config/config/#_2","title":"\u76ee\u7684","text":"<p>RDEToolKit\u306e\u69cb\u9020\u5316\u51e6\u7406\u52d5\u4f5c\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\uff08<code>rdeconfig.yaml</code>\uff09\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u57fa\u672c\u8a2d\u5b9a\u304b\u3089\u9ad8\u5ea6\u306a\u8a2d\u5b9a\u307e\u3067\u3001\u6bb5\u968e\u7684\u306b\u5b66\u3079\u307e\u3059\u3002</p>"},{"location":"usage/config/config/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>RDEToolKit\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5\u306e\u7406\u89e3</li> <li>YAML\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306e\u57fa\u672c\u77e5\u8b58</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306e\u7406\u89e3</li> </ul>"},{"location":"usage/config/config/#_4","title":"\u624b\u9806","text":""},{"location":"usage/config/config/#1","title":"1. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3059\u308b","text":"<p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u6b63\u3057\u3044\u5834\u6240\u306b\u914d\u7f6e\u3057\u307e\u3059\uff1a</p> \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u914d\u7f6e\u5834\u6240<pre><code>data/\n\u2514\u2500\u2500 tasksupport/\n    \u2514\u2500\u2500 rdeconfig.yaml  # \u3053\u3053\u306b\u914d\u7f6e\n</code></pre>"},{"location":"usage/config/config/#2","title":"2. \u57fa\u672c\u8a2d\u5b9a\u3092\u4f5c\u6210\u3059\u308b","text":"<p>\u6700\u5c0f\u9650\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> \u57fa\u672c\u7684\u306ardeconfig.yaml<pre><code>system:\n  save_raw: true\n  magic_variable: false\n  save_thumbnail_image: true\n  extended_mode: null\n</code></pre>"},{"location":"usage/config/config/#3","title":"3. \u5404\u8a2d\u5b9a\u9805\u76ee\u3092\u8a2d\u5b9a\u3059\u308b","text":""},{"location":"usage/config/config/#save_raw","title":"save_raw\u8a2d\u5b9a","text":"<p>\u5165\u529b\u30c7\u30fc\u30bf\u3092<code>raw</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3059\u308b\u304b\u3092\u5236\u5fa1\u3057\u307e\u3059\uff1a</p> save_raw\u8a2d\u5b9a<pre><code>system:\n  save_raw: true   # \u5165\u529b\u30c7\u30fc\u30bf\u3092raw\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\uff08\u63a8\u5968\uff09\n  save_raw: false  # \u5165\u529b\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u306a\u3044\n</code></pre> <p>\u63a8\u5968\u8a2d\u5b9a</p> <p>\u30c7\u30fc\u30bf\u306e\u8ffd\u8de1\u6027\u3092\u78ba\u4fdd\u3059\u308b\u305f\u3081\u3001<code>save_raw: true</code>\u3092\u63a8\u5968\u3057\u307e\u3059\u3002</p>"},{"location":"usage/config/config/#magic_variable","title":"magic_variable\u8a2d\u5b9a","text":"<p>\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u52d5\u7684\u7f6e\u63db\u6a5f\u80fd\u3092\u5236\u5fa1\u3057\u307e\u3059\uff1a</p> magic_variable\u8a2d\u5b9a<pre><code>system:\n  magic_variable: true   # ${filename}\u306a\u3069\u306e\u7f6e\u63db\u3092\u6709\u52b9\u5316\n  magic_variable: false  # \u7f6e\u63db\u6a5f\u80fd\u3092\u7121\u52b9\u5316\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\n</code></pre> <p>\u4f7f\u7528\u4f8b\uff1a magic_variable\u4f7f\u7528\u4f8b<pre><code>{\n  \"data_name\": \"${filename}\",\n  \"output_file\": \"${filename}_processed.csv\"\n}\n</code></pre></p>"},{"location":"usage/config/config/#save_thumbnail_image","title":"save_thumbnail_image\u8a2d\u5b9a","text":"<p>\u30e1\u30a4\u30f3\u753b\u50cf\u304b\u3089\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u306e\u81ea\u52d5\u751f\u6210\u3092\u5236\u5fa1\u3057\u307e\u3059\uff1a</p> save_thumbnail_image\u8a2d\u5b9a<pre><code>system:\n  save_thumbnail_image: true   # \u30b5\u30e0\u30cd\u30a4\u30eb\u81ea\u52d5\u751f\u6210\uff08\u63a8\u5968\uff09\n  save_thumbnail_image: false  # \u30b5\u30e0\u30cd\u30a4\u30eb\u751f\u6210\u3092\u7121\u52b9\u5316\n</code></pre>"},{"location":"usage/config/config/#extended_mode","title":"extended_mode\u8a2d\u5b9a","text":"<p>\u9ad8\u5ea6\u306a\u51e6\u7406\u30e2\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\uff1a</p> extended_mode\u8a2d\u5b9a<pre><code>system:\n  extended_mode: null           # \u6a19\u6e96\u30e2\u30fc\u30c9\n  extended_mode: \"rdeformat\"    # RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9\n  extended_mode: \"MultiDataTile\" # \u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u30e2\u30fc\u30c9\n</code></pre>"},{"location":"usage/config/config/#4","title":"4. \u9ad8\u5ea6\u306a\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b","text":""},{"location":"usage/config/config/#multidatatile","title":"MultiDataTile\u8a2d\u5b9a","text":"<p>\u8907\u6570\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u3092\u7d71\u5408\u7ba1\u7406\u3059\u308b\u5834\u5408\u306e\u8a2d\u5b9a\uff1a</p> MultiDataTile\u8a2d\u5b9a<pre><code>system:\n  extended_mode: \"MultiDataTile\"\n\nmultidatatile:\n  divided_dir_digit: 4\n  divided_dir_start_number: 1\n</code></pre>"},{"location":"usage/config/config/#smarttable","title":"SmartTable\u8a2d\u5b9a","text":"<p>SmartTable\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306e\u8a2d\u5b9a\uff1a</p> SmartTable\u8a2d\u5b9a<pre><code>smarttable:\n  generate_template: true\n  template_name: \"smarttable_template.xlsx\"\n  auto_fill_metadata: true\n</code></pre>"},{"location":"usage/config/config/#5","title":"5. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u691c\u8a3c","text":"<p>\u4f5c\u6210\u3057\u305f\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304c\u6b63\u3057\u3044\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff1a</p> \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u691c\u8a3c<pre><code>import yaml\n\ndef validate_config_file(config_path):\n    try:\n        with open(config_path, 'r', encoding='utf-8') as f:\n            config = yaml.safe_load(f)\n\n        # \u5fc5\u9808\u9805\u76ee\u306e\u78ba\u8a8d\n        if 'system' not in config:\n            print(\"\u274c system\u30bb\u30af\u30b7\u30e7\u30f3\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n            return False\n\n        system = config['system']\n        required_fields = ['save_raw', 'magic_variable', 'save_thumbnail_image']\n\n        for field in required_fields:\n            if field not in system:\n                print(f\"\u274c \u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u4e0d\u8db3: {field}\")\n                return False\n\n        print(\"\u2705 \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306f\u6709\u52b9\u3067\u3059\")\n        return True\n\n    except yaml.YAMLError as e:\n        print(f\"\u274c YAML\u5f62\u5f0f\u30a8\u30e9\u30fc: {e}\")\n        return False\n    except FileNotFoundError:\n        print(f\"\u274c \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093: {config_path}\")\n        return False\n</code></pre>"},{"location":"usage/config/config/#_5","title":"\u7d50\u679c\u306e\u78ba\u8a8d","text":"<p>\u8a2d\u5b9a\u304c\u6b63\u3057\u304f\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff1a</p>"},{"location":"usage/config/config/#_6","title":"\u8a2d\u5b9a\u5024\u306e\u78ba\u8a8d","text":"\u8a2d\u5b9a\u5024\u78ba\u8a8d<pre><code>def check_applied_settings():\n    from rdetoolkit.models.config import Config\n\n    # \u8a2d\u5b9a\u306e\u8aad\u307f\u8fbc\u307f\n    config = Config.from_file(\"data/tasksupport/rdeconfig.yaml\")\n\n    print(f\"save_raw: {config.system.save_raw}\")\n    print(f\"magic_variable: {config.system.magic_variable}\")\n    print(f\"save_thumbnail_image: {config.system.save_thumbnail_image}\")\n    print(f\"extended_mode: {config.system.extended_mode}\")\n</code></pre>"},{"location":"usage/config/config/#_7","title":"\u52d5\u4f5c\u78ba\u8a8d","text":"\u52d5\u4f5c\u78ba\u8a8d\u30b3\u30de\u30f3\u30c9<pre><code># \u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u8a2d\u5b9a\u304c\u53cd\u6620\u3055\u308c\u308b\u304b\u30c6\u30b9\u30c8\npython main.py\n\n# \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u3067\u8a2d\u5b9a\u5024\u3092\u78ba\u8a8d\ngrep -i \"config\" data/logs/rdesys.log\n</code></pre>"},{"location":"usage/config/config/#_8","title":"\u8a2d\u5b9a\u4f8b\u96c6","text":""},{"location":"usage/config/config/#_9","title":"\u6a19\u6e96\u7684\u306a\u7814\u7a76\u30c7\u30fc\u30bf\u51e6\u7406","text":"\u6a19\u6e96\u8a2d\u5b9a\u4f8b<pre><code>system:\n  save_raw: true\n  magic_variable: false\n  save_thumbnail_image: true\n  extended_mode: null\n</code></pre>"},{"location":"usage/config/config/#_10","title":"\u5927\u91cf\u30c7\u30fc\u30bf\u4e00\u62ec\u51e6\u7406","text":"\u4e00\u62ec\u51e6\u7406\u8a2d\u5b9a\u4f8b<pre><code>system:\n  save_raw: true\n  magic_variable: true\n  save_thumbnail_image: false\n  extended_mode: \"MultiDataTile\"\n\nmultidatatile:\n  divided_dir_digit: 4\n  divided_dir_start_number: 1\n</code></pre>"},{"location":"usage/config/config/#_11","title":"\u65e2\u5b58\u30c7\u30fc\u30bf\u79fb\u884c","text":"\u79fb\u884c\u8a2d\u5b9a\u4f8b<pre><code>system:\n  save_raw: false\n  magic_variable: false\n  save_thumbnail_image: true\n  extended_mode: \"rdeformat\"\n</code></pre>"},{"location":"usage/config/config/#_12","title":"\u95a2\u9023\u60c5\u5831","text":"<p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066\u3055\u3089\u306b\u5b66\u3076\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u51e6\u7406\u30e2\u30fc\u30c9\u3067\u5404extended_mode\u306e\u8a73\u7d30\u3092\u78ba\u8a8d\u3059\u308b</li> <li>Magic Variable\u6a5f\u80fd\u3067\u52d5\u7684\u7f6e\u63db\u6a5f\u80fd\u3092\u5b66\u3076</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3067\u8a2d\u5b9a\u304c\u5f71\u97ff\u3059\u308b\u51e6\u7406\u30d5\u30ed\u30fc\u3092\u7406\u89e3\u3059\u308b</li> </ul>"},{"location":"usage/config/file_folder_mode/","title":"\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u3068\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u3068\u306f","text":""},{"location":"usage/config/file_folder_mode/#_2","title":"\u76ee\u7684","text":"<p>ExcelInvoice\u51e6\u7406\u306b\u304a\u3051\u308b\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u3068\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u306e\u9055\u3044\u3068\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u5165\u529b\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u306b\u5fdc\u3058\u305f\u6700\u9069\u306a\u30e2\u30fc\u30c9\u9078\u629e\u3068\u8a2d\u5b9a\u65b9\u6cd5\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/config/file_folder_mode/#_3","title":"\u8ab2\u984c\u3068\u80cc\u666f","text":"<p>ExcelInvoice\u3092\u4f7f\u7528\u3057\u305f\u4e00\u62ec\u30c7\u30fc\u30bf\u767b\u9332\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u591a\u69d8\u306a\u5165\u529b\u5f62\u5f0f\u3078\u306e\u5bfe\u5fdc\u304c\u5fc5\u8981\u3067\u3057\u305f\uff1a</p> <ul> <li>\u5358\u4e00\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f: \u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c1\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u69cb\u6210\u3055\u308c\u308b\u5834\u5408</li> <li>\u8907\u6570\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f: \u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u69cb\u6210\u3055\u308c\u308b\u5834\u5408</li> <li>\u6df7\u5728\u5f62\u5f0f: \u30d5\u30a1\u30a4\u30eb\u6570\u304c\u7570\u306a\u308b\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u540c\u6642\u306b\u51e6\u7406\u3059\u308b\u5834\u5408</li> <li>\u52b9\u7387\u6027: \u5927\u91cf\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u52b9\u7387\u7684\u306b\u51e6\u7406\u3059\u308b\u5fc5\u8981\u6027</li> </ul> <p>\u3053\u308c\u3089\u306e\u8ab2\u984c\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u3001\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u3068\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u304c\u8a2d\u8a08\u3055\u308c\u307e\u3057\u305f\u3002</p>"},{"location":"usage/config/file_folder_mode/#_4","title":"\u4e3b\u8981\u30b3\u30f3\u30bb\u30d7\u30c8","text":""},{"location":"usage/config/file_folder_mode/#_5","title":"\u30e2\u30fc\u30c9\u5224\u5b9a\u306e\u4ed5\u7d44\u307f","text":"<pre><code>flowchart TD\n    A[ZIP\u30d5\u30a1\u30a4\u30eb\u89e3\u51cd] --&gt; B{\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u78ba\u8a8d}\n    B --&gt;|\u30d5\u30e9\u30c3\u30c8\u69cb\u9020| C[\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9]\n    B --&gt;|\u968e\u5c64\u69cb\u9020| D[\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9]\n    C --&gt; E[\u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u3067\u51e6\u7406]\n    D --&gt; F[\u30d5\u30a9\u30eb\u30c0\u5358\u4f4d\u3067\u51e6\u7406]\n</code></pre>"},{"location":"usage/config/file_folder_mode/#2","title":"2\u3064\u306e\u30e2\u30fc\u30c9\u306e\u6bd4\u8f03","text":"\u9805\u76ee \u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9 \u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9 \u5165\u529b\u5f62\u5f0f 1\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 = 1\u30d5\u30a1\u30a4\u30eb 1\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 = 1\u30d5\u30a9\u30eb\u30c0 ZIP\u69cb\u9020 \u30d5\u30e9\u30c3\u30c8\uff08\u30d5\u30a1\u30a4\u30eb\u304c\u76f4\u63a5\u914d\u7f6e\uff09 \u968e\u5c64\uff08\u30d5\u30a9\u30eb\u30c0\u3067\u5206\u985e\uff09 \u9069\u7528\u5834\u9762 \u5358\u7d14\u306a\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb \u8907\u5408\u7684\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u51e6\u7406\u5358\u4f4d \u30d5\u30a1\u30a4\u30eb \u30d5\u30a9\u30eb\u30c0 \u81ea\u52d5\u5224\u5b9a \u25cb \u25cb"},{"location":"usage/config/file_folder_mode/#_6","title":"\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9","text":""},{"location":"usage/config/file_folder_mode/#_7","title":"\u6982\u8981","text":"<p>\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5358\u4e00\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u69cb\u6210\u3055\u308c\u308b\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/config/file_folder_mode/#zip","title":"ZIP\u69cb\u9020\u4f8b","text":"<pre><code>experiment_data.zip\n\u251c\u2500\u2500 sample001.csv\n\u251c\u2500\u2500 sample002.csv\n\u251c\u2500\u2500 sample003.csv\n\u2514\u2500\u2500 sample004.csv\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_8","title":"\u51e6\u7406\u7d50\u679c","text":"<pre><code>data/\n\u251c\u2500\u2500 divided/\n\u2502   \u251c\u2500\u2500 0001/  # sample001.csv\u7528\n\u2502   \u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 sample001.csv\n\u2502   \u2502   \u251c\u2500\u2500 structured/\n\u2502   \u2502   \u2514\u2500\u2500 meta/\n\u2502   \u251c\u2500\u2500 0002/  # sample002.csv\u7528\n\u2502   \u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 sample002.csv\n\u2502   \u2502   \u251c\u2500\u2500 structured/\n\u2502   \u2502   \u2514\u2500\u2500 meta/\n\u2502   \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_9","title":"\u4f7f\u7528\u5834\u9762","text":"<ul> <li>\u6e2c\u5b9a\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb: \u5404\u5b9f\u9a13\u306e\u7d50\u679c\u304c1\u3064\u306eCSV\u30d5\u30a1\u30a4\u30eb</li> <li>\u753b\u50cf\u30d5\u30a1\u30a4\u30eb: \u5404\u30b5\u30f3\u30d7\u30eb\u306e\u9855\u5fae\u93e1\u753b\u50cf</li> <li>\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb: \u5404\u5b9f\u9a13\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u30ed\u30b0</li> <li>\u5358\u7d14\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8: \u8ffd\u52a0\u30d5\u30a1\u30a4\u30eb\u304c\u4e0d\u8981\u306a\u5834\u5408</li> </ul>"},{"location":"usage/config/file_folder_mode/#_10","title":"\u5b9f\u88c5\u4f8b","text":"\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u51e6\u7406\u4f8b<pre><code>def process_file_mode_data(srcpaths, resource_paths):\n    # divided/0001, divided/0002, ... \u306e\u5404\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u51e6\u7406\n    divided_dirs = [d for d in os.listdir(\"data/divided\") if d.startswith(\"00\")]\n\n    for dir_name in divided_dirs:\n        divided_path = Path(\"data/divided\") / dir_name\n        raw_files = list((divided_path / \"raw\").glob(\"*\"))\n\n        # \u5404\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306f1\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\n        if len(raw_files) == 1:\n            input_file = raw_files[0]\n            process_single_file(input_file, divided_path)\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_11","title":"\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9","text":""},{"location":"usage/config/file_folder_mode/#_12","title":"\u6982\u8981","text":"<p>\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u69cb\u6210\u3055\u308c\u308b\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/config/file_folder_mode/#zip_1","title":"ZIP\u69cb\u9020\u4f8b","text":"<pre><code>experiment_data.zip\n\u251c\u2500\u2500 experiment_001/\n\u2502   \u251c\u2500\u2500 data.csv\n\u2502   \u251c\u2500\u2500 config.json\n\u2502   \u2514\u2500\u2500 image.png\n\u251c\u2500\u2500 experiment_002/\n\u2502   \u251c\u2500\u2500 data.csv\n\u2502   \u251c\u2500\u2500 config.json\n\u2502   \u2514\u2500\u2500 image.png\n\u2514\u2500\u2500 experiment_003/\n    \u251c\u2500\u2500 data.csv\n    \u251c\u2500\u2500 config.json\n    \u2514\u2500\u2500 image.png\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_13","title":"\u51e6\u7406\u7d50\u679c","text":"<pre><code>data/\n\u251c\u2500\u2500 divided/\n\u2502   \u251c\u2500\u2500 0001/  # experiment_001\u7528\n\u2502   \u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 data.csv\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 config.json\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 image.png\n\u2502   \u2502   \u251c\u2500\u2500 structured/\n\u2502   \u2502   \u2514\u2500\u2500 meta/\n\u2502   \u251c\u2500\u2500 0002/  # experiment_002\u7528\n\u2502   \u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 data.csv\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 config.json\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 image.png\n\u2502   \u2502   \u251c\u2500\u2500 structured/\n\u2502   \u2502   \u2514\u2500\u2500 meta/\n\u2502   \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_14","title":"\u4f7f\u7528\u5834\u9762","text":"<ul> <li>\u8907\u5408\u5b9f\u9a13\u30c7\u30fc\u30bf: \u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb + \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb + \u753b\u50cf</li> <li>\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7d50\u679c: \u5165\u529b\u30d5\u30a1\u30a4\u30eb + \u51fa\u529b\u30d5\u30a1\u30a4\u30eb + \u30ed\u30b0</li> <li>\u6a5f\u5668\u30c7\u30fc\u30bf: \u6e2c\u5b9a\u30c7\u30fc\u30bf + \u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb + \u30e1\u30bf\u30c7\u30fc\u30bf</li> <li>\u95a2\u9023\u30d5\u30a1\u30a4\u30eb\u7fa4: \u4e3b\u30c7\u30fc\u30bf\u3068\u88dc\u52a9\u30d5\u30a1\u30a4\u30eb\u306e\u30bb\u30c3\u30c8</li> </ul>"},{"location":"usage/config/file_folder_mode/#_15","title":"\u5b9f\u88c5\u4f8b","text":"\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u51e6\u7406\u4f8b<pre><code>def process_folder_mode_data(srcpaths, resource_paths):\n    divided_dirs = [d for d in os.listdir(\"data/divided\") if d.startswith(\"00\")]\n\n    for dir_name in divided_dirs:\n        divided_path = Path(\"data/divided\") / dir_name\n        raw_files = list((divided_path / \"raw\").glob(\"*\"))\n\n        # \u5404\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u306f\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\n        if len(raw_files) &gt; 1:\n            process_file_group(raw_files, divided_path)\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_16","title":"\u81ea\u52d5\u30e2\u30fc\u30c9\u5224\u5b9a","text":""},{"location":"usage/config/file_folder_mode/#_17","title":"\u5224\u5b9a\u30ed\u30b8\u30c3\u30af","text":"<p>RDEToolKit\u306f\u3001ZIP\u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u9020\u3092\u81ea\u52d5\u7684\u306b\u5206\u6790\u3057\u3066\u30e2\u30fc\u30c9\u3092\u6c7a\u5b9a\u3057\u307e\u3059\uff1a</p> \u30e2\u30fc\u30c9\u5224\u5b9a\u4f8b<pre><code>def determine_excel_invoice_mode(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        file_list = zip_file.namelist()\n\n        # \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\n        has_directories = any('/' in name for name in file_list)\n\n        if has_directories:\n            return \"\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\"\n        else:\n            return \"\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\"\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_18","title":"\u5224\u5b9a\u57fa\u6e96","text":"\u6761\u4ef6 \u5224\u5b9a\u7d50\u679c ZIP\u30d5\u30a1\u30a4\u30eb\u76f4\u4e0b\u306b\u30d5\u30a1\u30a4\u30eb\u306e\u307f \u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9 ZIP\u30d5\u30a1\u30a4\u30eb\u76f4\u4e0b\u306b\u30d5\u30a9\u30eb\u30c0\u304c\u5b58\u5728 \u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9 \u6df7\u5728\uff08\u30d5\u30a1\u30a4\u30eb\u3068\u30d5\u30a9\u30eb\u30c0\u4e21\u65b9\uff09 \u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\uff08\u512a\u5148\uff09"},{"location":"usage/config/file_folder_mode/#_19","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u7528\u4f8b","text":""},{"location":"usage/config/file_folder_mode/#_20","title":"\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u306e\u6d3b\u7528","text":"\u6e2c\u5b9a\u30c7\u30fc\u30bf\u51e6\u7406<pre><code>def process_measurement_files(srcpaths, resource_paths):\n    # \u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9: \u5404CSV\u30d5\u30a1\u30a4\u30eb\u3092\u500b\u5225\u51e6\u7406\n    for divided_dir in get_divided_directories():\n        csv_file = find_csv_file(divided_dir)\n\n        # \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n        df = pd.read_csv(csv_file)\n\n        # \u7d71\u8a08\u51e6\u7406\n        stats = calculate_statistics(df)\n\n        # \u7d50\u679c\u4fdd\u5b58\n        save_structured_data(stats, divided_dir)\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_21","title":"\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u306e\u6d3b\u7528","text":"\u8907\u5408\u30c7\u30fc\u30bf\u51e6\u7406<pre><code>def process_experiment_folders(srcpaths, resource_paths):\n    # \u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9: \u95a2\u9023\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u7d71\u5408\u51e6\u7406\n    for divided_dir in get_divided_directories():\n        files = get_all_files(divided_dir)\n\n        # \u30d5\u30a1\u30a4\u30eb\u7a2e\u5225\u306e\u8b58\u5225\n        data_file = find_file_by_extension(files, '.csv')\n        config_file = find_file_by_extension(files, '.json')\n        image_file = find_file_by_extension(files, '.png')\n\n        # \u7d71\u5408\u51e6\u7406\n        result = process_experiment_set(data_file, config_file, image_file)\n\n        # \u7d50\u679c\u4fdd\u5b58\n        save_integrated_result(result, divided_dir)\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_22","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"usage/config/file_folder_mode/#_23","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5","text":""},{"location":"usage/config/file_folder_mode/#_24","title":"\u671f\u5f85\u3057\u305f\u30e2\u30fc\u30c9\u3067\u51e6\u7406\u3055\u308c\u306a\u3044","text":"\u30e2\u30fc\u30c9\u78ba\u8a8d<pre><code>def check_processing_mode(zip_path):\n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        file_list = zip_file.namelist()\n\n        print(\"ZIP\u30d5\u30a1\u30a4\u30eb\u5185\u5bb9:\")\n        for name in file_list:\n            print(f\"  {name}\")\n\n        # \u30e2\u30fc\u30c9\u5224\u5b9a\u7d50\u679c\n        mode = determine_excel_invoice_mode(zip_path)\n        print(f\"\u5224\u5b9a\u3055\u308c\u305f\u30e2\u30fc\u30c9: {mode}\")\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_25","title":"\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u3044","text":"\u30d5\u30a1\u30a4\u30eb\u5b58\u5728\u78ba\u8a8d<pre><code>def verify_file_structure(divided_dir):\n    raw_dir = Path(divided_dir) / \"raw\"\n\n    if not raw_dir.exists():\n        print(f\"\u274c raw\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u307e\u305b\u3093: {raw_dir}\")\n        return False\n\n    files = list(raw_dir.glob(\"*\"))\n    print(f\"raw\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u6570: {len(files)}\")\n\n    for file in files:\n        print(f\"  - {file.name}\")\n\n    return len(files) &gt; 0\n</code></pre>"},{"location":"usage/config/file_folder_mode/#_26","title":"\u30c7\u30d0\u30c3\u30b0\u306e\u30d2\u30f3\u30c8","text":"\u554f\u984c \u78ba\u8a8d\u9805\u76ee \u89e3\u6c7a\u65b9\u6cd5 \u30e2\u30fc\u30c9\u5224\u5b9a\u30a8\u30e9\u30fc ZIP\u69cb\u9020 ZIP\u30d5\u30a1\u30a4\u30eb\u5185\u5bb9\u3092\u78ba\u8a8d \u30d5\u30a1\u30a4\u30eb\u4e0d\u8db3 divided/00xx/raw/ \u30d5\u30a1\u30a4\u30eb\u5c55\u958b\u3092\u78ba\u8a8d \u51e6\u7406\u30a8\u30e9\u30fc \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb data/logs/rdesys.log \u3092\u78ba\u8a8d"},{"location":"usage/config/file_folder_mode/#_27","title":"\u307e\u3068\u3081","text":"<p>\u30d5\u30a1\u30a4\u30eb\u30e2\u30fc\u30c9\u3068\u30d5\u30a9\u30eb\u30c0\u30e2\u30fc\u30c9\u306e\u7279\u5fb4\uff1a</p> <ul> <li>\u81ea\u52d5\u5224\u5b9a: ZIP\u69cb\u9020\u306b\u57fa\u3065\u304f\u81ea\u52d5\u30e2\u30fc\u30c9\u9078\u629e</li> <li>\u67d4\u8edf\u6027: \u591a\u69d8\u306a\u5165\u529b\u5f62\u5f0f\u3078\u306e\u5bfe\u5fdc</li> <li>\u52b9\u7387\u6027: \u5927\u91cf\u30c7\u30fc\u30bf\u306e\u4e00\u62ec\u51e6\u7406</li> <li>\u900f\u660e\u6027: \u660e\u78ba\u306a\u51e6\u7406\u30eb\u30fc\u30eb\u3068\u4e88\u6e2c\u53ef\u80fd\u306a\u7d50\u679c</li> </ul>"},{"location":"usage/config/file_folder_mode/#_28","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>ExcelInvoice\u51e6\u7406\u3092\u3055\u3089\u306b\u6d3b\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u51e6\u7406\u30e2\u30fc\u30c9\u3067ExcelInvoice\u30e2\u30fc\u30c9\u306e\u8a73\u7d30\u3092\u5b66\u3076</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3067\u51e6\u7406\u30d5\u30ed\u30fc\u3092\u7406\u89e3\u3059\u308b</li> <li>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u3067divided\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4ed5\u69d8\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/config/magic_variable/","title":"Magic Variable\u6a5f\u80fd\u3068\u306f","text":""},{"location":"usage/config/magic_variable/#_1","title":"\u76ee\u7684","text":"<p>RDEToolKit\u306eMagic Variable\u6a5f\u80fd\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306a\u3069\u306e\u52d5\u7684\u306a\u5024\u3092\u81ea\u52d5\u7684\u306b\u7f6e\u63db\u3059\u308b\u4ed5\u7d44\u307f\u3068\u8a2d\u5b9a\u65b9\u6cd5\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/config/magic_variable/#_2","title":"\u8ab2\u984c\u3068\u80cc\u666f","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8ab2\u984c\u304c\u3042\u308a\u307e\u3057\u305f\uff1a</p> <ul> <li>\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u624b\u52d5\u5165\u529b: \u30e1\u30bf\u30c7\u30fc\u30bf\u306b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u624b\u52d5\u3067\u8a18\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f</li> <li>\u4e00\u8cab\u6027\u306e\u7dad\u6301: \u8907\u6570\u306e\u30a8\u30f3\u30c8\u30ea\u3067\u540c\u3058\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6b63\u78ba\u306b\u8a18\u5165\u3059\u308b\u3053\u3068\u304c\u56f0\u96e3</li> <li>\u52b9\u7387\u6027\u306e\u554f\u984c: \u5927\u91cf\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u51e6\u7406\u3059\u308b\u969b\u306e\u4f5c\u696d\u6642\u9593\u306e\u5897\u5927</li> <li>\u52d5\u7684\u5024\u306e\u7ba1\u7406: \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3084\u8a08\u7b97\u5024\u306a\u3069\u306e\u52d5\u7684\u306a\u5024\u306e\u7ba1\u7406\u304c\u8907\u96d1</li> </ul> <p>\u3053\u308c\u3089\u306e\u8ab2\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001Magic Variable\u6a5f\u80fd\u304c\u958b\u767a\u3055\u308c\u307e\u3057\u305f\u3002</p>"},{"location":"usage/config/magic_variable/#_3","title":"\u4e3b\u8981\u30b3\u30f3\u30bb\u30d7\u30c8","text":""},{"location":"usage/config/magic_variable/#magic-variable_1","title":"Magic Variable\u306e\u4ed5\u7d44\u307f","text":"<pre><code>flowchart LR\n    A[JSON\u30d5\u30a1\u30a4\u30eb] --&gt; B[${filename}]\n    C[\u5b9f\u969b\u306e\u30d5\u30a1\u30a4\u30eb\u540d] --&gt; D[sample.csv]\n    B --&gt; E[\u7f6e\u63db\u51e6\u7406]\n    D --&gt; E\n    E --&gt; F[sample.csv]\n</code></pre>"},{"location":"usage/config/magic_variable/#_4","title":"\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u5909\u6570","text":"\u5909\u6570\u540d \u8aac\u660e \u4f8b <code>${filename}</code> \u62e1\u5f35\u5b50\u3092\u9664\u3044\u305f\u30d5\u30a1\u30a4\u30eb\u540d <code>sample.csv</code> \u2192 <code>sample</code> <code>${filename_with_ext}</code> \u62e1\u5f35\u5b50\u3092\u542b\u3080\u30d5\u30a1\u30a4\u30eb\u540d <code>sample.csv</code> \u2192 <code>sample.csv</code> <code>${timestamp}</code> \u73fe\u5728\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7 <code>2023-01-01T12:00:00Z</code> <code>${date}</code> \u73fe\u5728\u306e\u65e5\u4ed8 <code>2023-01-01</code> <code>${time}</code> \u73fe\u5728\u306e\u6642\u523b <code>12:00:00</code>"},{"location":"usage/config/magic_variable/#_5","title":"\u8a2d\u5b9a\u65b9\u6cd5","text":""},{"location":"usage/config/magic_variable/#1","title":"1. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u306e\u6709\u52b9\u5316","text":"<p><code>rdeconfig.yaml</code>\u3067Magic Variable\u6a5f\u80fd\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\uff1a</p> rdeconfig.yaml<pre><code>system:\n  magic_variable: true\n</code></pre>"},{"location":"usage/config/magic_variable/#2-json","title":"2. JSON\u30d5\u30a1\u30a4\u30eb\u3067\u306e\u4f7f\u7528","text":"<p>\u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3084\u305d\u306e\u4ed6\u306eJSON\u30d5\u30a1\u30a4\u30eb\u3067\u5909\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> metadata.json<pre><code>{\n  \"data_name\": \"${filename}\",\n  \"original_file\": \"${filename_with_ext}\",\n  \"processing_date\": \"${date}\",\n  \"processing_time\": \"${timestamp}\",\n  \"output_file\": \"${filename}_processed.csv\"\n}\n</code></pre>"},{"location":"usage/config/magic_variable/#3","title":"3. \u51e6\u7406\u7d50\u679c\u306e\u78ba\u8a8d","text":"<p>Magic Variable\u6a5f\u80fd\u304c\u6709\u52b9\u306a\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7f6e\u63db\u3055\u308c\u307e\u3059\uff1a</p> \u51e6\u7406\u5f8c\u306emetadata.json<pre><code>{\n  \"data_name\": \"sample\",\n  \"original_file\": \"sample.csv\",\n  \"processing_date\": \"2023-01-01\",\n  \"processing_time\": \"2023-01-01T12:00:00Z\",\n  \"output_file\": \"sample_processed.csv\"\n}\n</code></pre>"},{"location":"usage/config/magic_variable/#_6","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u7528\u4f8b","text":""},{"location":"usage/config/magic_variable/#_7","title":"\u5b9f\u9a13\u30c7\u30fc\u30bf\u306e\u81ea\u52d5\u547d\u540d","text":"\u5b9f\u9a13\u30e1\u30bf\u30c7\u30fc\u30bf\u4f8b<pre><code>{\n  \"experiment_id\": \"EXP_${date}_${filename}\",\n  \"sample_name\": \"${filename}\",\n  \"data_file\": \"${filename_with_ext}\",\n  \"analysis_date\": \"${date}\",\n  \"result_file\": \"analysis_${filename}_${timestamp}.json\"\n}\n</code></pre>"},{"location":"usage/config/magic_variable/#_8","title":"\u30d0\u30c3\u30c1\u51e6\u7406\u3067\u306e\u6d3b\u7528","text":"\u30d0\u30c3\u30c1\u51e6\u7406\u8a2d\u5b9a\u4f8b<pre><code>{\n  \"batch_id\": \"BATCH_${date}\",\n  \"input_files\": [\n    \"${filename_with_ext}\"\n  ],\n  \"output_directory\": \"results_${date}\",\n  \"log_file\": \"processing_${filename}_${timestamp}.log\"\n}\n</code></pre>"},{"location":"usage/config/magic_variable/#_9","title":"\u8907\u6570\u30d5\u30a1\u30a4\u30eb\u51e6\u7406","text":"\u8907\u6570\u30d5\u30a1\u30a4\u30eb\u51e6\u7406\u4f8b<pre><code>def process_multiple_files(srcpaths, resource_paths):\n    input_files = os.listdir(srcpaths.inputdata)\n\n    for file in input_files:\n        if file.endswith('.csv'):\n            # Magic Variable\u3092\u4f7f\u7528\u3057\u305f\u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210\n            metadata = {\n                \"source_file\": \"${filename_with_ext}\",\n                \"processed_by\": \"RDEToolKit\",\n                \"processing_timestamp\": \"${timestamp}\",\n                \"output_name\": \"${filename}_structured.csv\"\n            }\n\n            # \u30d5\u30a1\u30a4\u30eb\u56fa\u6709\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\n            meta_file = Path(resource_paths.meta) / f\"{file}_metadata.json\"\n            with open(meta_file, 'w') as f:\n                json.dump(metadata, f, indent=2)\n</code></pre>"},{"location":"usage/config/magic_variable/#_10","title":"\u9ad8\u5ea6\u306a\u6a5f\u80fd","text":""},{"location":"usage/config/magic_variable/#_11","title":"\u30ab\u30b9\u30bf\u30e0\u5909\u6570\u306e\u5b9a\u7fa9","text":"\u30ab\u30b9\u30bf\u30e0\u5909\u6570\u4f8b<pre><code>def dataset_with_custom_variables(srcpaths, resource_paths):\n    # \u30ab\u30b9\u30bf\u30e0\u5909\u6570\u306e\u5b9a\u7fa9\n    custom_vars = {\n        \"project_id\": \"PROJECT_2023\",\n        \"researcher\": \"Dr. Smith\",\n        \"version\": \"v1.0\"\n    }\n\n    # Magic Variable\u3068\u7d44\u307f\u5408\u308f\u305b\u305f\u30e1\u30bf\u30c7\u30fc\u30bf\n    metadata = {\n        \"file_name\": \"${filename}\",\n        \"project\": custom_vars[\"project_id\"],\n        \"researcher\": custom_vars[\"researcher\"],\n        \"version\": custom_vars[\"version\"],\n        \"created_at\": \"${timestamp}\"\n    }\n\n    return metadata\n</code></pre>"},{"location":"usage/config/magic_variable/#_12","title":"\u6761\u4ef6\u4ed8\u304d\u7f6e\u63db","text":"\u6761\u4ef6\u4ed8\u304d\u7f6e\u63db\u4f8b<pre><code>{\n  \"data_type\": \"${filename}\",\n  \"quality_check\": {\n    \"status\": \"pending\",\n    \"checked_at\": \"${timestamp}\",\n    \"file_reference\": \"${filename_with_ext}\"\n  },\n  \"backup_location\": \"backup/${date}/${filename_with_ext}\"\n}\n</code></pre>"},{"location":"usage/config/magic_variable/#_13","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"usage/config/magic_variable/#_14","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5","text":""},{"location":"usage/config/magic_variable/#_15","title":"\u5909\u6570\u304c\u7f6e\u63db\u3055\u308c\u306a\u3044","text":"\u8a2d\u5b9a\u78ba\u8a8d<pre><code>def check_magic_variable_config():\n    from rdetoolkit.models.config import Config\n\n    config = Config.from_file(\"data/tasksupport/rdeconfig.yaml\")\n\n    if not config.system.magic_variable:\n        print(\"\u274c Magic Variable\u6a5f\u80fd\u304c\u7121\u52b9\u3067\u3059\")\n        print(\"rdeconfig.yaml\u3067magic_variable: true\u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\")\n    else:\n        print(\"\u2705 Magic Variable\u6a5f\u80fd\u304c\u6709\u52b9\u3067\u3059\")\n</code></pre>"},{"location":"usage/config/magic_variable/#_16","title":"\u4e0d\u6b63\u306a\u5909\u6570\u540d","text":"\u6b63\u3057\u3044\u5909\u6570\u540d\u306e\u4f7f\u7528<pre><code>{\n  \"correct\": \"${filename}\",\n  \"incorrect\": \"$filename\",\n  \"also_incorrect\": \"{filename}\",\n  \"wrong_case\": \"${FILENAME}\"\n}\n</code></pre>"},{"location":"usage/config/magic_variable/#_17","title":"\u30c7\u30d0\u30c3\u30b0\u65b9\u6cd5","text":"Magic Variable\u52d5\u4f5c\u78ba\u8a8d<pre><code>def debug_magic_variables(srcpaths, resource_paths):\n    import logging\n\n    logging.basicConfig(level=logging.DEBUG)\n    logger = logging.getLogger(__name__)\n\n    # \u7f6e\u63db\u524d\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\n    original_metadata = {\n        \"file\": \"${filename}\",\n        \"timestamp\": \"${timestamp}\"\n    }\n\n    logger.debug(f\"\u7f6e\u63db\u524d: {original_metadata}\")\n\n    # \u5b9f\u969b\u306e\u51e6\u7406\u3067Magic Variable\u304c\u3069\u3046\u52d5\u4f5c\u3059\u308b\u304b\u30ed\u30b0\u51fa\u529b\n    logger.info(\"Magic Variable\u51e6\u7406\u3092\u5b9f\u884c\u4e2d...\")\n</code></pre>"},{"location":"usage/config/magic_variable/#_18","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u8003\u616e\u4e8b\u9805","text":""},{"location":"usage/config/magic_variable/#_19","title":"\u5927\u91cf\u30d5\u30a1\u30a4\u30eb\u51e6\u7406\u6642\u306e\u6ce8\u610f\u70b9","text":"\u52b9\u7387\u7684\u306a\u51e6\u7406<pre><code>def efficient_magic_variable_processing(srcpaths, resource_paths):\n    # \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u4e00\u5ea6\u3060\u3051\u751f\u6210\n    current_timestamp = datetime.now().isoformat()\n    current_date = datetime.now().date().isoformat()\n\n    # \u5171\u901a\u30e1\u30bf\u30c7\u30fc\u30bf\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n    metadata_template = {\n        \"processing_date\": current_date,\n        \"processing_timestamp\": current_timestamp,\n        \"processor\": \"RDEToolKit\"\n    }\n\n    # \u30d5\u30a1\u30a4\u30eb\u56fa\u6709\u306e\u60c5\u5831\u306e\u307fMagic Variable\u3092\u4f7f\u7528\n    for file in input_files:\n        file_metadata = metadata_template.copy()\n        file_metadata.update({\n            \"source_file\": \"${filename_with_ext}\",\n            \"output_file\": \"${filename}_processed.csv\"\n        })\n</code></pre>"},{"location":"usage/config/magic_variable/#_20","title":"\u307e\u3068\u3081","text":"<p>Magic Variable\u6a5f\u80fd\u306e\u4e3b\u8981\u306a\u7279\u5fb4\uff1a</p> <ul> <li>\u81ea\u52d5\u5316: \u30d5\u30a1\u30a4\u30eb\u540d\u3084\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u81ea\u52d5\u7f6e\u63db</li> <li>\u4e00\u8cab\u6027: \u8907\u6570\u30a8\u30f3\u30c8\u30ea\u3067\u306e\u60c5\u5831\u306e\u4e00\u8cab\u6027\u78ba\u4fdd</li> <li>\u52b9\u7387\u6027: \u624b\u52d5\u5165\u529b\u4f5c\u696d\u306e\u5927\u5e45\u524a\u6e1b</li> <li>\u52d5\u7684\u5024: \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3084\u65e5\u4ed8\u306e\u52d5\u7684\u751f\u6210</li> </ul>"},{"location":"usage/config/magic_variable/#_21","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>Magic Variable\u6a5f\u80fd\u3092\u3055\u3089\u306b\u6d3b\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u8a73\u7d30\u306a\u8a2d\u5b9a\u65b9\u6cd5\u3092\u5b66\u3076</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3067\u51e6\u7406\u30d5\u30ed\u30fc\u3092\u7406\u89e3\u3059\u308b</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3067\u30e1\u30bf\u30c7\u30fc\u30bf\u8a2d\u8a08\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/config/mode/","title":"\u51e6\u7406\u30e2\u30fc\u30c9\u3068\u306f","text":""},{"location":"usage/config/mode/#_2","title":"\u76ee\u7684","text":"<p>RDEToolKit\u304c\u63d0\u4f9b\u3059\u308b5\u3064\u306e\u51e6\u7406\u30e2\u30fc\u30c9\uff08Invoice\u3001ExcelInvoice\u3001SmartTableInvoice\u3001MultiDataTile\u3001RDEFormat\uff09\u306e\u7279\u5fb4\u3068\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u3068\u767b\u9332\u65b9\u6cd5\u306b\u5fdc\u3058\u305f\u6700\u9069\u306a\u30e2\u30fc\u30c9\u9078\u629e\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/config/mode/#_3","title":"\u8ab2\u984c\u3068\u80cc\u666f","text":"<p>\u7814\u7a76\u30c7\u30fc\u30bf\u306e\u767b\u9332\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u591a\u69d8\u306a\u30cb\u30fc\u30ba\u304c\u3042\u308a\u307e\u3057\u305f\uff1a</p> <ul> <li>\u5358\u4e00\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8: 1\u3064\u306e\u5b9f\u9a13\u7d50\u679c\u30921\u3064\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u767b\u9332</li> <li>\u4e00\u62ec\u767b\u9332: \u8907\u6570\u306e\u95a2\u9023\u5b9f\u9a13\u3092\u52b9\u7387\u7684\u306b\u4e00\u62ec\u767b\u9332</li> <li>\u7d71\u5408\u7ba1\u7406: \u95a2\u9023\u3059\u308b\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30921\u3064\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u7d71\u5408</li> <li>\u65e2\u5b58\u30c7\u30fc\u30bf\u79fb\u884c: \u4ed6\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u306e\u65e2\u5b58\u30c7\u30fc\u30bf\u306e\u79fb\u884c</li> </ul> <p>\u3053\u308c\u3089\u306e\u7570\u306a\u308b\u30cb\u30fc\u30ba\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u30015\u3064\u306e\u51e6\u7406\u30e2\u30fc\u30c9\u304c\u8a2d\u8a08\u3055\u308c\u307e\u3057\u305f\u3002</p>"},{"location":"usage/config/mode/#_4","title":"\u4e3b\u8981\u30b3\u30f3\u30bb\u30d7\u30c8","text":""},{"location":"usage/config/mode/#_5","title":"\u51e6\u7406\u30e2\u30fc\u30c9\u306e\u5206\u985e","text":"<pre><code>flowchart TD\n    A[\u30c7\u30fc\u30bf\u767b\u9332\u30cb\u30fc\u30ba] --&gt; B{\u30c7\u30fc\u30bf\u6570}\n    B --&gt;|\u5358\u4e00| C[Invoice Mode]\n    B --&gt;|\u8907\u6570| D{\u7ba1\u7406\u65b9\u6cd5}\n    D --&gt;|\u500b\u5225\u7ba1\u7406| E{\u767b\u9332\u65b9\u6cd5}\n    E --&gt;|Excel\u7ba1\u7406| F[ExcelInvoice Mode]\n    E --&gt;|\u30c6\u30fc\u30d6\u30eb\u81ea\u52d5\u8aad\u8fbc| G[SmartTableInvoice Mode]\n    D --&gt;|\u7d71\u5408\u7ba1\u7406| H[MultiDataTile Mode]\n    A --&gt; I{\u30c7\u30fc\u30bf\u5f62\u5f0f}\n    I --&gt;|\u65e2\u5b58RDE\u5f62\u5f0f| J[RDEFormat Mode]\n</code></pre>"},{"location":"usage/config/mode/#_6","title":"\u30e2\u30fc\u30c9\u6bd4\u8f03\u8868","text":"\u30e2\u30fc\u30c9 \u7528\u9014 \u30c7\u30fc\u30bf\u6570 \u7ba1\u7406\u65b9\u6cd5 \u8a2d\u5b9a\u65b9\u6cd5 Invoice \u6a19\u6e96\u7684\u306a\u5358\u4e00\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u767b\u9332 1\u500b \u500b\u5225 \u30c7\u30d5\u30a9\u30eb\u30c8 ExcelInvoice \u8907\u6570\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e00\u62ec\u767b\u9332 \u8907\u6570 \u500b\u5225 Excel\u30d5\u30a1\u30a4\u30eb SmartTableInvoice \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u306e\u81ea\u52d5\u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210 \u8907\u6570 \u500b\u5225 \u30c6\u30fc\u30d6\u30eb\u30d5\u30a1\u30a4\u30eb MultiDataTile \u95a2\u9023\u30c7\u30fc\u30bf\u306e\u7d71\u5408\u7ba1\u7406 \u8907\u6570 \u7d71\u5408 \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb RDEFormat \u65e2\u5b58\u30c7\u30fc\u30bf\u306e\u79fb\u884c\u30fb\u30e2\u30c3\u30af\u4f5c\u6210 1\u500b \u500b\u5225 \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb"},{"location":"usage/config/mode/#_7","title":"\u5404\u30e2\u30fc\u30c9\u306e\u8a73\u7d30","text":""},{"location":"usage/config/mode/#1-invoice-mode","title":"1. Invoice Mode\uff08\u6a19\u6e96\u30e2\u30fc\u30c9\uff09","text":"<p>\u6700\u3082\u57fa\u672c\u7684\u306a\u51e6\u7406\u30e2\u30fc\u30c9\u3067\u3059\u3002</p>"},{"location":"usage/config/mode/#_8","title":"\u7279\u5fb4","text":"<ul> <li>1\u3064\u306e\u5b9f\u9a13\u7d50\u679c\u30921\u3064\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u767b\u9332</li> <li>\u30b7\u30f3\u30d7\u30eb\u306a\u8a2d\u5b9a\u3068\u64cd\u4f5c</li> <li>\u521d\u5fc3\u8005\u306b\u6700\u9069</li> </ul>"},{"location":"usage/config/mode/#_9","title":"\u4f7f\u7528\u5834\u9762","text":"<ul> <li>\u5358\u767a\u306e\u5b9f\u9a13\u30c7\u30fc\u30bf\u767b\u9332</li> <li>\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u958b\u767a</li> <li>\u5b66\u7fd2\u30fb\u30c6\u30b9\u30c8\u7528\u9014</li> </ul>"},{"location":"usage/config/mode/#_10","title":"\u8a2d\u5b9a\u4f8b","text":"Invoice Mode\u8a2d\u5b9a<pre><code>system:\n  extended_mode: null  # \u307e\u305f\u306f\u8a2d\u5b9a\u306a\u3057\n</code></pre>"},{"location":"usage/config/mode/#_11","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<pre><code>data/\n\u251c\u2500\u2500 inputdata/\n\u251c\u2500\u2500 invoice/\n\u251c\u2500\u2500 tasksupport/\n\u251c\u2500\u2500 structured/\n\u251c\u2500\u2500 meta/\n\u2514\u2500\u2500 raw/\n</code></pre>"},{"location":"usage/config/mode/#2-excelinvoice-mode","title":"2. ExcelInvoice Mode","text":"<p>Excel\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3057\u3066\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u52b9\u7387\u7684\u306b\u4e00\u62ec\u767b\u9332\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002</p>"},{"location":"usage/config/mode/#_12","title":"\u7279\u5fb4","text":"<ul> <li>Excel\u30d5\u30a1\u30a4\u30eb\u3067\u8907\u6570\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u60c5\u5831\u3092\u7ba1\u7406</li> <li>\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u500b\u5225\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u767b\u9332</li> <li>\u5927\u91cf\u30c7\u30fc\u30bf\u306e\u52b9\u7387\u7684\u306a\u51e6\u7406</li> </ul>"},{"location":"usage/config/mode/#_13","title":"\u4f7f\u7528\u5834\u9762","text":"<ul> <li>\u540c\u7a2e\u306e\u5b9f\u9a13\u3092\u5927\u91cf\u306b\u5b9f\u65bd\u3057\u305f\u5834\u5408</li> <li>\u5b9a\u671f\u7684\u306a\u30c7\u30fc\u30bf\u767b\u9332\u696d\u52d9</li> <li>\u30c1\u30fc\u30e0\u3067\u306e\u5354\u8abf\u4f5c\u696d</li> </ul>"},{"location":"usage/config/mode/#_14","title":"\u8a2d\u5b9a\u65b9\u6cd5","text":"<p>ExcelInvoice\u30d5\u30a1\u30a4\u30eb\uff08<code>*_excel_invoice.xlsx</code>\uff09\u3092<code>inputdata</code>\u306b\u914d\u7f6e\u3059\u308b\u3060\u3051\u3067\u81ea\u52d5\u8a8d\u8b58\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/config/mode/#_15","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<pre><code>data/\n\u251c\u2500\u2500 inputdata/\n\u2502   \u2514\u2500\u2500 experiment_excel_invoice.xlsx\n\u251c\u2500\u2500 invoice/\n\u251c\u2500\u2500 tasksupport/\n\u251c\u2500\u2500 divided/\n\u2502   \u251c\u2500\u2500 0001/\n\u2502   \u2502   \u251c\u2500\u2500 structured/\n\u2502   \u2502   \u251c\u2500\u2500 meta/\n\u2502   \u2502   \u2514\u2500\u2500 raw/\n\u2502   \u2514\u2500\u2500 0002/\n\u2502       \u251c\u2500\u2500 structured/\n\u2502       \u251c\u2500\u2500 meta/\n\u2502       \u2514\u2500\u2500 raw/\n\u2514\u2500\u2500 logs/\n</code></pre>"},{"location":"usage/config/mode/#3-smarttableinvoice-mode","title":"3. SmartTableInvoice Mode","text":"<p>\u30c6\u30fc\u30d6\u30eb\u30d5\u30a1\u30a4\u30eb\uff08Excel/CSV/TSV\uff09\u304b\u3089\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308a\u3001\u81ea\u52d5\u7684\u306binvoice.json\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002</p>"},{"location":"usage/config/mode/#_16","title":"\u7279\u5fb4","text":"<ul> <li>\u591a\u5f62\u5f0f\u5bfe\u5fdc: Excel (.xlsx)\u3001CSV\u3001TSV\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f</li> <li>2\u884c\u30d8\u30c3\u30c0\u30fc\u5f62\u5f0f: 1\u884c\u76ee\u306b\u8868\u793a\u540d\u30012\u884c\u76ee\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u30ad\u30fc\u3092\u914d\u7f6e</li> <li>\u81ea\u52d5\u30e1\u30bf\u30c7\u30fc\u30bf\u30de\u30c3\u30d4\u30f3\u30b0: <code>basic/</code>\u3001<code>custom/</code>\u3001<code>sample/</code>\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u306b\u3088\u308b\u69cb\u9020\u5316\u30c7\u30fc\u30bf\u751f\u6210</li> <li>\u914d\u5217\u30c7\u30fc\u30bf\u30b5\u30dd\u30fc\u30c8: <code>generalAttributes</code>\u304a\u3088\u3073<code>specificAttributes</code>\u3078\u306e\u9069\u5207\u306a\u30de\u30c3\u30d4\u30f3\u30b0</li> <li>zip\u30d5\u30a1\u30a4\u30eb\u7d71\u5408: \u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u542b\u3080zip\u3068\u30c6\u30fc\u30d6\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u81ea\u52d5\u95a2\u9023\u4ed8\u3051</li> </ul>"},{"location":"usage/config/mode/#_17","title":"\u4f7f\u7528\u5834\u9762","text":"<ul> <li>\u5927\u91cf\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u7ba1\u7406\u3057\u305f\u3044\u5834\u5408</li> <li>\u65e2\u5b58\u306eExcel/CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u79fb\u884c\u3059\u308b\u5834\u5408</li> <li>\u8907\u96d1\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u67d4\u8edf\u306b\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408</li> </ul>"},{"location":"usage/config/mode/#_18","title":"\u8a2d\u5b9a\u65b9\u6cd5","text":"<p>SmartTable\u30d5\u30a1\u30a4\u30eb\uff08<code>smarttable_*.{xlsx,csv,tsv}</code>\uff09\u3092<code>inputdata</code>\u306b\u914d\u7f6e\u3059\u308b\u3060\u3051\u3067\u81ea\u52d5\u8a8d\u8b58\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/config/mode/#_19","title":"\u30c6\u30fc\u30d6\u30eb\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f","text":"<pre><code># 1\u884c\u76ee: \u8868\u793a\u540d\uff08\u30e6\u30fc\u30b6\u30fc\u5411\u3051\u306e\u8aac\u660e\uff09\n\u30c7\u30fc\u30bf\u540d,\u5165\u529b\u30d5\u30a1\u30a4\u30eb1,\u30b5\u30a4\u30af\u30eb,\u539a\u3055,\u6e29\u5ea6,\u8a66\u6599\u540d,\u8a66\u6599ID,\u4e00\u822c\u9805\u76ee\n\n# 2\u884c\u76ee: \u30de\u30c3\u30d4\u30f3\u30b0\u30ad\u30fc\uff08\u5b9f\u969b\u306e\u51e6\u7406\u3067\u4f7f\u7528\uff09\nbasic/dataName,inputdata1,custom/cycle,custom/thickness,custom/temperature,sample/names,sample/sampleId,sample/generalAttributes.3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\n\n# 3\u884c\u76ee\u4ee5\u964d: \u30c7\u30fc\u30bf\n\u5b9f\u9a131,file1.txt,1,2mm,25,sample001,S001,value1\n\u5b9f\u9a132,file2.txt,2,3mm,30,sample002,S002,value2\n</code></pre>"},{"location":"usage/config/mode/#_20","title":"\u30de\u30c3\u30d4\u30f3\u30b0\u30ad\u30fc\u306e\u4ed5\u69d8","text":"<ul> <li><code>basic/xxxx</code>: invoice.json\u306e<code>basic</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u306e<code>xxxx</code>\u30ad\u30fc\u306b\u30de\u30c3\u30d4\u30f3\u30b0</li> <li><code>custom/xxxx</code>: invoice.json\u306e<code>custom</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u306e<code>xxxx</code>\u30ad\u30fc\u306b\u30de\u30c3\u30d4\u30f3\u30b0</li> <li><code>sample/xxxx</code>: invoice.json\u306e<code>sample</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u306e<code>xxxx</code>\u30ad\u30fc\u306b\u30de\u30c3\u30d4\u30f3\u30b0</li> <li><code>sample/generalAttributes.&lt;termId&gt;</code>: <code>generalAttributes</code>\u914d\u5217\u5185\u306e\u8a72\u5f53\u3059\u308b<code>termId</code>\u306e<code>value</code>\u306b\u30de\u30c3\u30d4\u30f3\u30b0</li> <li><code>sample/specificAttributes.&lt;classId&gt;.&lt;termId&gt;</code>: <code>specificAttributes</code>\u914d\u5217\u5185\u306e\u8a72\u5f53\u3059\u308b<code>classId</code>\u3068<code>termId</code>\u306e<code>value</code>\u306b\u30de\u30c3\u30d4\u30f3\u30b0</li> <li><code>inputdataX</code>: zip\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u6307\u5b9a\uff08X=1,2,3...\uff09</li> </ul>"},{"location":"usage/config/mode/#_21","title":"\u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3","text":"SmartTable\u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3<pre><code>smarttable:\n  save_table_file: true  # SmartTable\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u5834\u5408\n</code></pre> <p><code>save_table_file</code>\u30aa\u30d7\u30b7\u30e7\u30f3: - <code>false</code>\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09: SmartTable\u30d5\u30a1\u30a4\u30eb\u306fraw/nonshared_raw\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3055\u308c\u307e\u305b\u3093 - <code>true</code>: \u30aa\u30ea\u30b8\u30ca\u30eb\u306eSmartTable\u30d5\u30a1\u30a4\u30eb\u304craw/nonshared_raw\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059</p>"},{"location":"usage/config/mode/#_22","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<pre><code>data/\n\u251c\u2500\u2500 inputdata/\n\u2502   \u251c\u2500\u2500 smarttable_experiment.xlsx\n\u2502   \u2514\u2500\u2500 data.zip\n\u251c\u2500\u2500 invoice/\n\u251c\u2500\u2500 tasksupport/\n\u251c\u2500\u2500 divided/\n\u2502   \u251c\u2500\u2500 0001/\n\u2502   \u2502   \u251c\u2500\u2500 invoice/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 invoice.json  # smarttable\u306e1\u884c\u76ee\u304b\u3089\u751f\u6210\n\u2502   \u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 file1.txt\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 file2.txt\n\u2502   \u2502   \u2514\u2500\u2500 (\u305d\u306e\u4ed6\u306e\u6a19\u6e96\u30d5\u30a9\u30eb\u30c0)\n\u2502   \u2514\u2500\u2500 0002/\n\u2502       \u251c\u2500\u2500 invoice/\n\u2502       \u2502   \u2514\u2500\u2500 invoice.json  # smarttable\u306e2\u884c\u76ee\u304b\u3089\u751f\u6210\n\u2502       \u2514\u2500\u2500 (\u305d\u306e\u4ed6\u306e\u6a19\u6e96\u30d5\u30a9\u30eb\u30c0)\n\u2514\u2500\u2500 temp/\n    \u251c\u2500\u2500 fsmarttable_experiment_0001.csv\n    \u2514\u2500\u2500 fsmarttable_experiment_0002.csv\n</code></pre>"},{"location":"usage/config/mode/#4-multidatatile-mode","title":"4. MultiDataTile Mode","text":"<p>\u95a2\u9023\u3059\u308b\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30921\u3064\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u7d71\u5408\u7ba1\u7406\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002</p>"},{"location":"usage/config/mode/#_23","title":"\u7279\u5fb4","text":"<ul> <li>\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u30921\u3064\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u7d71\u5408</li> <li>\u30c7\u30fc\u30bf\u9593\u306e\u95a2\u9023\u6027\u3092\u4fdd\u6301</li> <li>\u8907\u5408\u7684\u306a\u5b9f\u9a13\u7d50\u679c\u306e\u7ba1\u7406\u306b\u6700\u9069</li> </ul>"},{"location":"usage/config/mode/#_24","title":"\u4f7f\u7528\u5834\u9762","text":"<ul> <li>\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u7d71\u5408</li> <li>\u591a\u6bb5\u968e\u5b9f\u9a13\u306e\u7d50\u679c\u7d71\u5408</li> <li>\u95a2\u9023\u3059\u308b\u8907\u6570\u306e\u6e2c\u5b9a\u30c7\u30fc\u30bf\u306e\u4e00\u62ec\u7ba1\u7406</li> </ul>"},{"location":"usage/config/mode/#_25","title":"\u8a2d\u5b9a\u4f8b","text":"MultiDataTile Mode\u8a2d\u5b9a<pre><code>system:\n  extended_mode: \"MultiDataTile\"\n\nmultidatatile:\n  divided_dir_digit: 4\n  divided_dir_start_number: 1\n</code></pre>"},{"location":"usage/config/mode/#_26","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<pre><code>data/\n\u251c\u2500\u2500 inputdata/\n\u251c\u2500\u2500 invoice/\n\u251c\u2500\u2500 tasksupport/\n\u251c\u2500\u2500 divided/\n\u2502   \u251c\u2500\u2500 0001/  # \u30c7\u30fc\u30bf\u30bf\u30a4\u30eb1\n\u2502   \u251c\u2500\u2500 0002/  # \u30c7\u30fc\u30bf\u30bf\u30a4\u30eb2\n\u2502   \u2514\u2500\u2500 0003/  # \u30c7\u30fc\u30bf\u30bf\u30a4\u30eb3\n\u251c\u2500\u2500 structured/  # \u7d71\u5408\u7d50\u679c\n\u251c\u2500\u2500 meta/        # \u7d71\u5408\u30e1\u30bf\u30c7\u30fc\u30bf\n\u2514\u2500\u2500 raw/         # \u7d71\u5408\u751f\u30c7\u30fc\u30bf\n</code></pre>"},{"location":"usage/config/mode/#5-rdeformat-mode","title":"5. RDEFormat Mode","text":"<p>\u65e2\u5b58\u306eRDE\u5f62\u5f0f\u30c7\u30fc\u30bf\u306e\u79fb\u884c\u3084\u30e2\u30c3\u30af\u30c7\u30fc\u30bf\u4f5c\u6210\u306b\u4f7f\u7528\u3059\u308b\u30e2\u30fc\u30c9\u3067\u3059\u3002</p>"},{"location":"usage/config/mode/#_27","title":"\u7279\u5fb4","text":"<ul> <li>\u4e8b\u524d\u306b\u69cb\u9020\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u767b\u9332</li> <li>\u4ed6\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u306e\u30c7\u30fc\u30bf\u79fb\u884c</li> <li>\u30c6\u30b9\u30c8\u7528\u30e2\u30c3\u30af\u30c7\u30fc\u30bf\u306e\u4f5c\u6210</li> </ul>"},{"location":"usage/config/mode/#_28","title":"\u4f7f\u7528\u5834\u9762","text":"<ul> <li>\u4ed6\u306eRDE\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u306e\u30c7\u30fc\u30bf\u79fb\u884c</li> <li>\u958b\u767a\u30fb\u30c6\u30b9\u30c8\u7528\u306e\u30e2\u30c3\u30af\u30c7\u30fc\u30bf\u4f5c\u6210</li> <li>\u65e2\u5b58\u306e\u69cb\u9020\u5316\u30c7\u30fc\u30bf\u306e\u518d\u767b\u9332</li> </ul>"},{"location":"usage/config/mode/#_29","title":"\u8a2d\u5b9a\u4f8b","text":"RDEFormat Mode\u8a2d\u5b9a<pre><code>system:\n  extended_mode: \"rdeformat\"\n</code></pre>"},{"location":"usage/config/mode/#_30","title":"\u5165\u529b\u5f62\u5f0f","text":"<p>RDE\u5f62\u5f0f\u306eZIP\u30d5\u30a1\u30a4\u30eb\uff08<code>rdeformat_*.zip</code>\uff09\u3092<code>inputdata</code>\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002</p>"},{"location":"usage/config/mode/#_31","title":"\u30e2\u30fc\u30c9\u9078\u629e\u306e\u6307\u91dd","text":""},{"location":"usage/config/mode/#_32","title":"\u6c7a\u5b9a\u30d5\u30ed\u30fc\u30c1\u30e3\u30fc\u30c8","text":"<pre><code>flowchart TD\n    A[\u30c7\u30fc\u30bf\u767b\u9332\u3092\u958b\u59cb] --&gt; B{\u30c7\u30fc\u30bf\u306f\u65e2\u306bRDE\u5f62\u5f0f\uff1f}\n    B --&gt;|Yes| C[RDEFormat Mode]\n    B --&gt;|No| D{\u767b\u9332\u3059\u308b\u30c7\u30fc\u30bf\u6570\u306f\uff1f}\n    D --&gt;|1\u500b| E[Invoice Mode]\n    D --&gt;|\u8907\u6570| F{\u7ba1\u7406\u65b9\u6cd5\u306f\uff1f}\n    F --&gt;|\u500b\u5225\u7ba1\u7406| G{\u30e1\u30bf\u30c7\u30fc\u30bf\u7ba1\u7406\u65b9\u6cd5\u306f\uff1f}\n    G --&gt;|Excel\u5f62\u5f0f| H[ExcelInvoice Mode]\n    G --&gt;|\u30c6\u30fc\u30d6\u30eb\u81ea\u52d5\u8aad\u8fbc| I[SmartTableInvoice Mode]\n    G --&gt;|\u624b\u52d5\u5165\u529b| E\n    F --&gt;|\u7d71\u5408\u7ba1\u7406| J[MultiDataTile Mode]\n</code></pre>"},{"location":"usage/config/mode/#_33","title":"\u9078\u629e\u57fa\u6e96","text":"\u6761\u4ef6 \u63a8\u5968\u30e2\u30fc\u30c9 \u7406\u7531 \u521d\u56de\u5229\u7528\u30fb\u5b66\u7fd2\u76ee\u7684 Invoice \u30b7\u30f3\u30d7\u30eb\u3067\u7406\u89e3\u3057\u3084\u3059\u3044 \u5358\u4e00\u5b9f\u9a13\u7d50\u679c Invoice \u8a2d\u5b9a\u304c\u6700\u5c0f\u9650 \u540c\u7a2e\u5b9f\u9a13\u306e\u5927\u91cf\u30c7\u30fc\u30bf ExcelInvoice \u52b9\u7387\u7684\u306a\u4e00\u62ec\u51e6\u7406 \u8907\u96d1\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u69cb\u9020 SmartTableInvoice \u67d4\u8edf\u306a\u30de\u30c3\u30d4\u30f3\u30b0\u6a5f\u80fd \u65e2\u5b58Excel/CSV\u304b\u3089\u306e\u79fb\u884c SmartTableInvoice \u81ea\u52d5\u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210 \u95a2\u9023\u30c7\u30fc\u30bf\u306e\u7d71\u5408 MultiDataTile \u30c7\u30fc\u30bf\u9593\u95a2\u4fc2\u306e\u4fdd\u6301 \u65e2\u5b58RDE\u30c7\u30fc\u30bf RDEFormat \u5f62\u5f0f\u5909\u63db\u4e0d\u8981"},{"location":"usage/config/mode/#_34","title":"\u5b9f\u88c5\u4f8b","text":""},{"location":"usage/config/mode/#_35","title":"\u30e2\u30fc\u30c9\u5224\u5b9a\u30ed\u30b8\u30c3\u30af","text":"\u30e2\u30fc\u30c9\u81ea\u52d5\u5224\u5b9a<pre><code>def determine_processing_mode(input_dir, config):\n    # \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u306e\u660e\u793a\u7684\u6307\u5b9a\u3092\u512a\u5148\n    if config.system.extended_mode:\n        return config.system.extended_mode\n\n    # \u30d5\u30a1\u30a4\u30eb\u540d\u306b\u3088\u308b\u81ea\u52d5\u5224\u5b9a\n    files = os.listdir(input_dir)\n\n    for file in files:\n        if file.endswith('_excel_invoice.xlsx'):\n            return 'ExcelInvoice'\n        elif file.startswith('smarttable_') and (\n            file.endswith('.xlsx') or \n            file.endswith('.csv') or \n            file.endswith('.tsv')):\n            return 'SmartTableInvoice'\n        elif file.startswith('rdeformat_') and file.endswith('.zip'):\n            return 'RDEFormat'\n\n    # \u30c7\u30d5\u30a9\u30eb\u30c8\u306fInvoice\u30e2\u30fc\u30c9\n    return 'Invoice'\n</code></pre>"},{"location":"usage/config/mode/#_36","title":"\u307e\u3068\u3081","text":"<p>RDEToolKit\u306e5\u3064\u306e\u51e6\u7406\u30e2\u30fc\u30c9\u306e\u7279\u5fb4\uff1a</p> <ul> <li>Invoice: \u57fa\u672c\u7684\u306a\u5358\u4e00\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u767b\u9332</li> <li>ExcelInvoice: \u52b9\u7387\u7684\u306a\u8907\u6570\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4e00\u62ec\u767b\u9332  </li> <li>SmartTableInvoice: \u30c6\u30fc\u30d6\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u81ea\u52d5\u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210\u3068\u8907\u6570\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u767b\u9332</li> <li>MultiDataTile: \u95a2\u9023\u30c7\u30fc\u30bf\u306e\u7d71\u5408\u7ba1\u7406</li> <li>RDEFormat: \u65e2\u5b58\u30c7\u30fc\u30bf\u306e\u79fb\u884c\u30fb\u30e2\u30c3\u30af\u4f5c\u6210</li> </ul> <p>\u9069\u5207\u306a\u30e2\u30fc\u30c9\u9078\u629e\u306b\u3088\u308a\u3001\u7814\u7a76\u30c7\u30fc\u30bf\u306e\u52b9\u7387\u7684\u306a\u7ba1\u7406\u3068\u767b\u9332\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"usage/config/mode/#_37","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u5404\u51e6\u7406\u30e2\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u30e2\u30fc\u30c9\u8a2d\u5b9a\u65b9\u6cd5\u3092\u5b66\u3076</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3067\u51e6\u7406\u30d5\u30ed\u30fc\u3092\u7406\u89e3\u3059\u308b</li> <li>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u3067\u30e2\u30fc\u30c9\u5225\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/structured_process/development_guide/","title":"\u69cb\u9020\u5316\u51e6\u7406\u958b\u767a\u30ac\u30a4\u30c9","text":""},{"location":"usage/structured_process/development_guide/#_1","title":"\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u305f\u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u88c5\u65b9\u6cd5","text":"<p>\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3001Rigaku\u306eX\u7dda\u56de\u6298\u88c5\u7f6e\uff08XRD\uff09\u304b\u3089\u51fa\u529b\u3055\u308c\u308bRAS\u30d5\u30a1\u30a4\u30eb\u3092\u51e6\u7406\u3057\u3001RDE\u306b\u767b\u9332\u3059\u308b\u305f\u3081\u306e\u69cb\u9020\u5316\u51e6\u7406\u3092\u3001RDEToolKit\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u69cb\u7bc9\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/development_guide/#_2","title":"\u30c7\u30fc\u30bf\u5229\u7528\u306b\u95a2\u3059\u308b\u8b1d\u8f9e","text":"<p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u4f7f\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u6280\u8853\u60c5\u5831\u306f\u3001\u56fd\u7acb\u7814\u7a76\u958b\u767a\u6cd5\u4eba\u7269\u8cea\u30fb\u6750\u6599\u7814\u7a76\u6a5f\u69cb\uff08NIMS\uff09\u306e\u300cNIMS Materials Data Conversion Tools (M-DaC)\u300d\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304b\u3089\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002M-DaC\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u8a08\u6e2c\u6a5f\u5668\u30e1\u30fc\u30ab\u30fc\u3068\u306e\u5354\u529b\u306b\u3088\u308a\u958b\u767a\u3055\u308c\u305f\u3001\u5b9f\u9a13\u30c7\u30fc\u30bf\u306e\u52b9\u7387\u7684\u306a\u53ce\u96c6\u3068\u9ad8\u4ed8\u52a0\u4fa1\u5024\u5316\u3092\u76ee\u7684\u3068\u3057\u305f\u6280\u8853\u958b\u767a\u306e\u6210\u679c\u3067\u3059\u3002</p> <p>\u8b1d\u8f9e\uff1a</p> <ul> <li>\u30c7\u30fc\u30bf\u63d0\u4f9b: \u56fd\u7acb\u7814\u7a76\u958b\u767a\u6cd5\u4eba\u7269\u8cea\u30fb\u6750\u6599\u7814\u7a76\u6a5f\u69cb\uff08NIMS\uff09</li> <li>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8: NIMS Materials Data Conversion Tools (M-DaC) for XRD</li> <li>\u5171\u540c\u958b\u767a: \u682a\u5f0f\u4f1a\u793e\u30ea\u30ac\u30af</li> <li>\u30e9\u30a4\u30bb\u30f3\u30b9: MIT License</li> <li>\u5f15\u7528: H. Nagao, S. Matsunami, M. Suzuki, and H. Yoshikawa: \"NIMS Materials Data Conversion Tools (M-DaC) ver 1.1\"</li> </ul> <p>\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u6210\u679c\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5b9f\u969b\u306e\u7814\u7a76\u73fe\u5834\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u5f62\u5f0f\u306b\u57fa\u3065\u3044\u305f\u5b9f\u8df5\u7684\u306a\u5b66\u7fd2\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002NIMS\u304a\u3088\u3073\u95a2\u9023\u3059\u308b\u3059\u3079\u3066\u306e\u7814\u7a76\u8005\u30fb\u6280\u8853\u8005\u306e\u7686\u69d8\u306b\u6df1\u304f\u611f\u8b1d\u3044\u305f\u3057\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/development_guide/#ras","title":"RAS\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066","text":""},{"location":"usage/structured_process/development_guide/#_3","title":"\u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u7279\u5fb4","text":"<p>RAS\u30d5\u30a1\u30a4\u30eb\uff08Rigaku\uff09\u306f\u3001Rigaku\u793e\u306eX\u7dda\u56de\u6298\u88c5\u7f6eSmartLab\u306a\u3069\u304b\u3089\u51fa\u529b\u3055\u308c\u308b\u6a19\u6e96\u7684\u306a\u30c7\u30fc\u30bf\u5f62\u5f0f\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li>ASCII\u5f62\u5f0f: \u30c6\u30ad\u30b9\u30c8\u30d9\u30fc\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u3001\u4eba\u9593\u304c\u8aad\u3081\u308b\u5f62\u5f0f</li> <li>\u69cb\u9020\u5316\u3055\u308c\u305f\u30e1\u30bf\u30c7\u30fc\u30bf: \u6e2c\u5b9a\u6761\u4ef6\u3001\u88c5\u7f6e\u8a2d\u5b9a\u3001\u30b5\u30f3\u30d7\u30eb\u60c5\u5831\u306a\u3069\u304c\u4f53\u7cfb\u7684\u306b\u8a18\u9332</li> <li>3\u5217\u30c7\u30fc\u30bf: \u89d2\u5ea6\u3001\u5f37\u5ea6\u3001\u6e1b\u8870\u88dc\u6b63\u4fc2\u6570\u306e3\u5217\u3067\u69cb\u6210\u3055\u308c\u308b\u6e2c\u5b9a\u30c7\u30fc\u30bf</li> <li>\u533a\u5207\u308a\u6587\u5b57: \u30a2\u30b9\u30bf\u30ea\u30b9\u30af\uff08*\uff09\u3067\u59cb\u307e\u308b\u884c\u304c\u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u30b3\u30e1\u30f3\u30c8\u3092\u793a\u3059</li> </ul>"},{"location":"usage/structured_process/development_guide/#_4","title":"\u30d5\u30a1\u30a4\u30eb\u69cb\u9020","text":"<pre><code>*RAS_DATA_START\n*FILE_DATETIME 2023-01-15 10:30:00\n*SAMPLE_NAME Al2O3_sample\n*TARGET_NAME Cu\n*TUBE_VOLTAGE 40.0\n*TUBE_CURRENT 30.0\n*SCAN_MODE continuous\n*SCAN_SPEED 2.0\n*SCAN_STEP 0.02\n*START_ANGLE 10.0\n*STOP_ANGLE 90.0\n*RAS_HEADER_START\n... (\u8a73\u7d30\u306a\u30e1\u30bf\u30c7\u30fc\u30bf)\n*RAS_HEADER_END\n*RAS_INT_START\n10.0000 1200.0000 1.0000\n10.0200 1205.0000 1.0000\n10.0400 1198.0000 1.0000\n... (\u6e2c\u5b9a\u30c7\u30fc\u30bf)\n*RAS_INT_END\n*RAS_DATA_END\n</code></pre>"},{"location":"usage/structured_process/development_guide/#rdetoolkitrde","title":"rdetoolkit\u3092\u4f7f\u3063\u3066RDE\u69cb\u9020\u5316\u51e6\u7406\u3092\u69cb\u7bc9\u3059\u308b","text":""},{"location":"usage/structured_process/development_guide/#rde","title":"RDE\u69cb\u9020\u5316\u51e6\u7406\u306e\u958b\u767a\u30d7\u30ed\u30bb\u30b9","text":"<p>\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u793a\u3059\u958b\u767a\u30d7\u30ed\u30bb\u30b9\u306f\u4e00\u4f8b\u3067\u3059\u3002\u5229\u7528\u8005\u306e\u30cb\u30fc\u30ba\u306b\u5fdc\u3058\u3066\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>flowchart TD\n    %% \u5168\u4f53\u306e\u5411\u304d\u3092\u7e26\uff08Top\u2192Bottom\uff09\u306b\u6307\u5b9a\n    subgraph RDE\u69cb\u9020\u5316\u51e6\u7406\u958b\u767a\u30d7\u30ed\u30bb\u30b9\n        direction TB\n        style RDE\u69cb\u9020\u5316\u51e6\u7406\u958b\u767a\u30d7\u30ed\u30bb\u30b9 fill:#f0f4f8,stroke:#333,stroke-width:2px,rx:10,ry:10\n    end\n\n    %% \u30ce\u30fc\u30c9\u306e\u5171\u901a\u30b9\u30bf\u30a4\u30eb\u5b9a\u7fa9\n    classDef step fill:#cfe2f3,stroke:#333,stroke-width:1.5px,rx:5,ry:5,font-size:14px;\n\n    %% \u5404\u30b9\u30c6\u30c3\u30d7\n    A[\ud83d\udd0d \u62bd\u51fa\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b]:::step --&gt; B[\ud83d\udee0\ufe0f \u74b0\u5883\u69cb\u7bc9]:::step\n    B --&gt; C[\ud83d\udcc4 \u5fc5\u8981\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b]:::step\n    C --&gt; D[\ud83d\udcbb \u69cb\u9020\u5316\u51e6\u7406\u3092\u958b\u767a\u3059\u308b]:::step\n    D --&gt; E[\u2705 \u52d5\u4f5c\u78ba\u8a8d\u3059\u308b]:::step\n</code></pre>"},{"location":"usage/structured_process/development_guide/#rde_1","title":"RDE\u30c7\u30fc\u30bf\u767b\u9332\u3067\u5fc5\u8981\u3068\u306a\u308b\u4e8b\u524d\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u7fa4\u306b\u3064\u3044\u3066","text":"<p>RDE\u306f\u518d\u5229\u7528\u306a\u30c7\u30fc\u30bf\u767b\u9332\u306b\u304a\u3044\u3066\u3001\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u306f\u5fc5\u9808\u3068\u306a\u308a\u307e\u3059\u3002</p> <ul> <li><code>templates/tasksupport/invoice.shcema.json</code></li> <li><code>templates/tasksupport/metadata-def.json</code></li> </ul> <p>RDE\u306f\u3001\u8a08\u6e2c\u88c5\u7f6e\u304b\u3089\u51fa\u529b\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3084\u65e5\u3005\u306e\u5b9f\u9a13\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u62bd\u51fa\u3059\u308b\u3079\u304d\u4e8b\u524d\u30e1\u30bf\u30c7\u30fc\u30bf\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb<code>metadata-def.json</code>\u3068\u3001\u30b5\u30f3\u30d7\u30eb\u60c5\u5831(\u5408\u6210\u6761\u4ef6\u306a\u3069)\u3084\u8a08\u6e2c\u6761\u4ef6\u306a\u3069\u65e5\u3005\u306e\u5b9f\u9a13\u3067\u5b9a\u578b\u7684\u306b\u8a18\u9332\u304c\u5fc5\u8981\u306a\u60c5\u5831\u3092\u3001\u30c7\u30fc\u30bf\u5165\u529b\u30d5\u30a9\u30fc\u30e0\u3092\u67d4\u8edf\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b<code>invoice.schema.json</code>\u3002</p> <ul> <li>\u30c7\u30fc\u30bf\u767b\u9332\u6642\u306b\u3001<code>invoice.schema.json</code>\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u65e5\u3005\u306e\u5b9f\u9a13\u3067\u5fc5\u8981\u306a\u60c5\u5831\u3092\u30c7\u30fc\u30bf\u5165\u529b\u30d5\u30a9\u30fc\u30e0\u3068\u3057\u3066\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002</li> <li>\u30c7\u30fc\u30bf\u767b\u9332\u6642\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u62bd\u51fa\u3059\u308b\u305f\u3081\u306e\u4e8b\u524d\u30d5\u30a1\u30a4\u30eb\u3092<code>metadata-def.json</code></li> </ul> <p>\u3055\u3089\u306b\u3001\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u7fa4\u306f\u3001\u5f53\u6a5f\u69cb\u304c\u63d0\u4f9b\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u7c21\u6613\u7684\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u307e\u305f\u3001\u4e0a\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u52a0\u3048\u3066\u3001\u500b\u4eba\u306e\u74b0\u5883\u3067\u69cb\u9020\u5316\u51e6\u7406\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e<code>invoice.json</code>\u3082\u4f5c\u6210\u53ef\u80fd\u3067\u3059\u3002</p> <ul> <li>nims-mdpf/RDE_datasettemplate-schemafile-make-tool - Github</li> </ul>"},{"location":"usage/structured_process/development_guide/#metadata-defjson","title":"\u62bd\u51fa\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b(metadata-def.json)","text":"<p>\u5165\u529b\u30c7\u30fc\u30bf\u304b\u3089\u62bd\u51fa\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4e8b\u524d\u306b\u6c7a\u3081\u3066\u304a\u304d\u307e\u3059\u3002\u5229\u7528\u8005\u3084\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3088\u3063\u3066\u3001\u4e8b\u524d\u306b\u5b9a\u7fa9\u3059\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u6570\u306f\u7570\u306a\u308a\u307e\u3059\u3002</p> <p>\u4eca\u56de\u306f\u3001\u6e2c\u5b9a\u6761\u4ef6\u30fb\u8a66\u6599\u60c5\u5831\u30fb\u6642\u9593\u30fb\u30c8\u30ec\u30fc\u30b5\u30d3\u30ea\u30c6\u30a3\u3068\u3044\u3046\u89b3\u70b9\u304b\u3089\u4ee5\u4e0b\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3059\u308b\u3068\u3044\u3046\u65b9\u91dd\u3067\u3001</p> <p>A. \u6e2c\u5b9a\u6761\u4ef6\uff08Measurement Conditions\uff09</p> <pre><code>*MEAS_COND_XG_VOLTAGE \"40\"           # \u7ba1\u96fb\u5727\uff08kV\uff09\n*MEAS_COND_XG_CURRENT \"30\"           # \u7ba1\u96fb\u6d41\uff08mA\uff09\n*HW_XG_TARGET_NAME \"Cu\"              # X\u7dda\u6e90\uff08Cu\uff09\n*HW_XG_WAVE_LENGTH_ALPHA1 \"1.540593\" # \u6ce2\u9577\u03b11\uff08\u00c5\uff09\n*HW_XG_WAVE_LENGTH_ALPHA2 \"1.544414\" # \u6ce2\u9577\u03b12\uff08\u00c5\uff09\n*MEAS_SCAN_START \"25.0000\"           # \u6e2c\u5b9a\u958b\u59cb\u89d2\u5ea6\n*MEAS_SCAN_STOP \"60.0000\"            # \u6e2c\u5b9a\u7d42\u4e86\u89d2\u5ea6\n*MEAS_SCAN_STEP \"0.0100\"             # \u6e2c\u5b9a\u30b9\u30c6\u30c3\u30d7\n*MEAS_SCAN_SPEED \"8.0000\"            # \u6e2c\u5b9a\u901f\u5ea6\uff08deg/min\uff09\n*MEAS_SCAN_MODE \"CONTINUOUS\"         # \u6e2c\u5b9a\u30e2\u30fc\u30c9\n</code></pre> <p>B. \u8a66\u6599\u60c5\u5831\uff08Sample Information\uff09</p> <pre><code>*FILE_SAMPLE \"Test Sample\"           # \u8a66\u6599\u540d\n*FILE_COMMENT \"XRD example\"          # \u30b3\u30e1\u30f3\u30c8\n*FILE_MEMO \"Rigaku XRD memo\"         # \u30e1\u30e2\n*FILE_OPERATOR \"English\"             # \u64cd\u4f5c\u8005\n*FILE_USERGROUP \"Academic\"           # \u30e6\u30fc\u30b6\u30fc\u30b0\u30eb\u30fc\u30d7\n</code></pre> <p>C. \u6642\u9593\u30fb\u30c8\u30ec\u30fc\u30b5\u30d3\u30ea\u30c6\u30a3\uff08Temporal &amp; Traceability\uff09</p> <pre><code>*MEAS_SCAN_START_TIME \"11/21/2017 08:32:31\" # \u6e2c\u5b9a\u958b\u59cb\u6642\u523b\n*MEAS_SCAN_END_TIME \"11/21/2017 08:37:42\"   # \u6e2c\u5b9a\u7d42\u4e86\u6642\u523b\n*MEAS_DATA_COUNT \"3501\"                     # \u30c7\u30fc\u30bf\u70b9\u6570\n*FILE_VERSION \"1\"                           # \u30d5\u30a1\u30a4\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\n</code></pre> <p>\u3053\u308c\u3089\u306e\u60c5\u5831\u3092\u3082\u3068\u306b\u3001<code>metadata-def.json</code>\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\u3002</p> <p>\u9577\u6587\u306e\u305f\u3081\u4e00\u6587\u629c\u7c8b\u3057\u3066\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>{\n    \"file_sample\": {\n        \"name\": {\n            \"ja\": \"\u8a66\u6599\u540d\",\n            \"en\": \"Sample Name\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_comment\": {\n        \"name\": {\n            \"ja\": \"\u30d5\u30a1\u30a4\u30eb\u30b3\u30e1\u30f3\u30c8\",\n            \"en\": \"File Comment\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    ...\n}\n</code></pre> Click to view the full `metadata-def.json` <pre><code>{\n    \"file_sample\": {\n        \"name\": {\n            \"ja\": \"\u8a66\u6599\u540d\",\n            \"en\": \"Sample Name\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_comment\": {\n        \"name\": {\n            \"ja\": \"\u30d5\u30a1\u30a4\u30eb\u30b3\u30e1\u30f3\u30c8\",\n            \"en\": \"File Comment\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_memo\": {\n        \"name\": {\n            \"ja\": \"\u30d5\u30a1\u30a4\u30eb\u30e1\u30e2\",\n            \"en\": \"File Memo\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_operator\": {\n        \"name\": {\n            \"ja\": \"\u64cd\u4f5c\u8005\",\n            \"en\": \"Operator\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_usergroup\": {\n        \"name\": {\n            \"ja\": \"\u30e6\u30fc\u30b6\u30fc\u30b0\u30eb\u30fc\u30d7\",\n            \"en\": \"User Group\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_version\": {\n        \"name\": {\n            \"ja\": \"\u30d5\u30a1\u30a4\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\",\n            \"en\": \"File Version\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_xg_target_name\": {\n        \"name\": {\n            \"ja\": \"X\u7dda\u30bf\u30fc\u30b2\u30c3\u30c8\u540d\",\n            \"en\": \"X-ray Target Name\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_xg_target_atomic_number\": {\n        \"name\": {\n            \"ja\": \"\u30bf\u30fc\u30b2\u30c3\u30c8\u539f\u5b50\u756a\u53f7\",\n            \"en\": \"Target Atomic Number\"\n        },\n        \"schema\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"hw_xg_wave_length_alpha1\": {\n        \"name\": {\n            \"ja\": \"\u6ce2\u9577\u03b11\",\n            \"en\": \"Wavelength Alpha1\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"hw_xg_wave_length_alpha2\": {\n        \"name\": {\n            \"ja\": \"\u6ce2\u9577\u03b12\",\n            \"en\": \"Wavelength Alpha2\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"hw_xg_wave_length_beta\": {\n        \"name\": {\n            \"ja\": \"\u6ce2\u9577\u03b2\",\n            \"en\": \"Wavelength Beta\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"hw_xg_wave_length_unit\": {\n        \"name\": {\n            \"ja\": \"\u6ce2\u9577\u5358\u4f4d\",\n            \"en\": \"Wavelength Unit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_xg_focus\": {\n        \"name\": {\n            \"ja\": \"X\u7dda\u30d5\u30a9\u30fc\u30ab\u30b9\",\n            \"en\": \"X-ray Focus\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_xg_focus_type\": {\n        \"name\": {\n            \"ja\": \"\u30d5\u30a9\u30fc\u30ab\u30b9\u30bf\u30a4\u30d7\",\n            \"en\": \"Focus Type\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_xg_voltage\": {\n        \"name\": {\n            \"ja\": \"\u7ba1\u96fb\u5727\",\n            \"en\": \"Tube Voltage\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_cond_xg_current\": {\n        \"name\": {\n            \"ja\": \"\u7ba1\u96fb\u6d41\",\n            \"en\": \"Tube Current\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"hw_xg_voltage_unit\": {\n        \"name\": {\n            \"ja\": \"\u96fb\u5727\u5358\u4f4d\",\n            \"en\": \"Voltage Unit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_xg_current_unit\": {\n        \"name\": {\n            \"ja\": \"\u96fb\u6d41\u5358\u4f4d\",\n            \"en\": \"Current Unit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_scan_start\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u958b\u59cb\u89d2\u5ea6\",\n            \"en\": \"Scan Start Angle\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_scan_stop\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u7d42\u4e86\u89d2\u5ea6\",\n            \"en\": \"Scan Stop Angle\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_scan_step\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u30b9\u30c6\u30c3\u30d7\",\n            \"en\": \"Scan Step\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_scan_speed\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u901f\u5ea6\",\n            \"en\": \"Scan Speed\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_scan_speed_unit\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u901f\u5ea6\u5358\u4f4d\",\n            \"en\": \"Scan Speed Unit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_scan_mode\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u30e2\u30fc\u30c9\",\n            \"en\": \"Scan Mode\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_scan_unit_x\": {\n        \"name\": {\n            \"ja\": \"X\u8ef8\u5358\u4f4d\",\n            \"en\": \"X-axis Unit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_scan_unit_y\": {\n        \"name\": {\n            \"ja\": \"Y\u8ef8\u5358\u4f4d\",\n            \"en\": \"Y-axis Unit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_scan_axis_x\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u8ef8X\",\n            \"en\": \"Scan Axis X\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_scan_resolution_x\": {\n        \"name\": {\n            \"ja\": \"X\u8ef8\u5206\u89e3\u80fd\",\n            \"en\": \"X-axis Resolution\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_data_count\": {\n        \"name\": {\n            \"ja\": \"\u30c7\u30fc\u30bf\u70b9\u6570\",\n            \"en\": \"Data Count\"\n        },\n        \"schema\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"meas_scan_start_time\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u958b\u59cb\u6642\u523b\",\n            \"en\": \"Scan Start Time\"\n        },\n        \"schema\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"meas_scan_end_time\": {\n        \"name\": {\n            \"ja\": \"\u6e2c\u5b9a\u7d42\u4e86\u6642\u523b\",\n            \"en\": \"Scan End Time\"\n        },\n        \"schema\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n        }\n    },\n    \"hw_goniometer_name\": {\n        \"name\": {\n            \"ja\": \"\u30b4\u30cb\u30aa\u30e1\u30fc\u30bf\u540d\",\n            \"en\": \"Goniometer Name\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_goniometer_id\": {\n        \"name\": {\n            \"ja\": \"\u30b4\u30cb\u30aa\u30e1\u30fc\u30bfID\",\n            \"en\": \"Goniometer ID\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_counter_select_name\": {\n        \"name\": {\n            \"ja\": \"\u691c\u51fa\u5668\u540d\",\n            \"en\": \"Detector Name\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_counter_pixel_size\": {\n        \"name\": {\n            \"ja\": \"\u691c\u51fa\u5668\u30d4\u30af\u30bb\u30eb\u30b5\u30a4\u30ba\",\n            \"en\": \"Detector Pixel Size\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_attachment_name\": {\n        \"name\": {\n            \"ja\": \"\u30a2\u30bf\u30c3\u30c1\u30e1\u30f3\u30c8\u540d\",\n            \"en\": \"Attachment Name\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_attachment_id\": {\n        \"name\": {\n            \"ja\": \"\u30a2\u30bf\u30c3\u30c1\u30e1\u30f3\u30c8ID\",\n            \"en\": \"Attachment ID\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_sample_holder_name\": {\n        \"name\": {\n            \"ja\": \"\u8a66\u6599\u30db\u30eb\u30c0\u30fc\u540d\",\n            \"en\": \"Sample Holder Name\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_sample_holder_id\": {\n        \"name\": {\n            \"ja\": \"\u8a66\u6599\u30db\u30eb\u30c0\u30fcID\",\n            \"en\": \"Sample Holder ID\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_incident_slit\": {\n        \"name\": {\n            \"ja\": \"\u5165\u5c04\u30b9\u30ea\u30c3\u30c8\",\n            \"en\": \"Incident Slit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_divergence_slit\": {\n        \"name\": {\n            \"ja\": \"\u767a\u6563\u30b9\u30ea\u30c3\u30c8\",\n            \"en\": \"Divergence Slit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_receiving_slit\": {\n        \"name\": {\n            \"ja\": \"\u53d7\u5149\u30b9\u30ea\u30c3\u30c8\",\n            \"en\": \"Receiving Slit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_soller_slit_incident\": {\n        \"name\": {\n            \"ja\": \"\u5165\u5c04\u5074\u30bd\u30fc\u30e9\u30fc\u30b9\u30ea\u30c3\u30c8\",\n            \"en\": \"Incident Soller Slit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_soller_slit_receiving\": {\n        \"name\": {\n            \"ja\": \"\u53d7\u5149\u5074\u30bd\u30fc\u30e9\u30fc\u30b9\u30ea\u30c3\u30c8\",\n            \"en\": \"Receiving Soller Slit\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_monochromator\": {\n        \"name\": {\n            \"ja\": \"\u30e2\u30ce\u30af\u30ed\u30e1\u30fc\u30bf\",\n            \"en\": \"Monochromator\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_attenuator\": {\n        \"name\": {\n            \"ja\": \"\u30a2\u30c3\u30c6\u30cd\u30fc\u30bf\",\n            \"en\": \"Attenuator\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_pha\": {\n        \"name\": {\n            \"ja\": \"\u6ce2\u9ad8\u5206\u6790\u5668\",\n            \"en\": \"Pulse Height Analyzer\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_offset_theta_s\": {\n        \"name\": {\n            \"ja\": \"\u03b8\u8a66\u6599\u30aa\u30d5\u30bb\u30c3\u30c8\",\n            \"en\": \"Theta Sample Offset\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_cond_axis_offset_theta_d\": {\n        \"name\": {\n            \"ja\": \"\u03b8\u691c\u51fa\u5668\u30aa\u30d5\u30bb\u30c3\u30c8\",\n            \"en\": \"Theta Detector Offset\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_cond_axis_offset_two_theta\": {\n        \"name\": {\n            \"ja\": \"2\u03b8\u30aa\u30d5\u30bb\u30c3\u30c8\",\n            \"en\": \"Two Theta Offset\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_cond_axis_offset_omega\": {\n        \"name\": {\n            \"ja\": \"\u03c9\u30aa\u30d5\u30bb\u30c3\u30c8\",\n            \"en\": \"Omega Offset\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_cond_axis_position_z\": {\n        \"name\": {\n            \"ja\": \"Z\u4f4d\u7f6e\",\n            \"en\": \"Z Position\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_cond_axis_position_zs\": {\n        \"name\": {\n            \"ja\": \"\u8a66\u6599Z\u4f4d\u7f6e\",\n            \"en\": \"Sample Z Position\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_cond_axis_position_zr\": {\n        \"name\": {\n            \"ja\": \"\u53d7\u5149Z\u4f4d\u7f6e\",\n            \"en\": \"Receiving Z Position\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_cond_axis_position_primary_geometry\": {\n        \"name\": {\n            \"ja\": \"\u4e00\u6b21\u5149\u5b66\u7cfb\u5e7e\u4f55\",\n            \"en\": \"Primary Geometry\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_incident_primary\": {\n        \"name\": {\n            \"ja\": \"\u5165\u5c04\u5149\u5b66\u7cfb\",\n            \"en\": \"Incident Primary\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_axis_position_receiving_optics\": {\n        \"name\": {\n            \"ja\": \"\u53d7\u5149\u5149\u5b66\u7cfb\",\n            \"en\": \"Receiving Optics\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_goniometer_radius_0\": {\n        \"name\": {\n            \"ja\": \"\u30b4\u30cb\u30aa\u534a\u5f840\",\n            \"en\": \"Goniometer Radius 0\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"hw_goniometer_radius_1\": {\n        \"name\": {\n            \"ja\": \"\u30b4\u30cb\u30aa\u534a\u5f841\",\n            \"en\": \"Goniometer Radius 1\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"hw_goniometer_radius_2\": {\n        \"name\": {\n            \"ja\": \"\u30b4\u30cb\u30aa\u534a\u5f842\",\n            \"en\": \"Goniometer Radius 2\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"disp_line_color\": {\n        \"name\": {\n            \"ja\": \"\u8868\u793a\u7dda\u8272\",\n            \"en\": \"Display Line Color\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_type\": {\n        \"name\": {\n            \"ja\": \"\u30d5\u30a1\u30a4\u30eb\u30bf\u30a4\u30d7\",\n            \"en\": \"File Type\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_part_id\": {\n        \"name\": {\n            \"ja\": \"\u30d5\u30a1\u30a4\u30eb\u90e8\u54c1ID\",\n            \"en\": \"File Part ID\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_wave_type\": {\n        \"name\": {\n            \"ja\": \"X\u7dda\u6ce2\u9577\u30bf\u30a4\u30d7\",\n            \"en\": \"X-ray Wave Type\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_scan_unequaly_spaced\": {\n        \"name\": {\n            \"ja\": \"\u4e0d\u7b49\u9593\u9694\u30b9\u30ad\u30e3\u30f3\",\n            \"en\": \"Unequally Spaced Scan\"\n        },\n        \"schema\": {\n            \"type\": \"boolean\"\n        }\n    }\n}\n</code></pre>"},{"location":"usage/structured_process/development_guide/#invoiceschemajson","title":"\u767b\u9332\u30d5\u30a9\u30fc\u30e0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b(invoice.schema.json)","text":"<p>invoice.schema.json\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u767b\u9332\u30d5\u30a9\u30fc\u30e0\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u6e2c\u5b9a\u6e29\u5ea6\u3092\u30c7\u30fc\u30bf\u767b\u9332\u6642\u306b\u624b\u5165\u529b\u3067\u767b\u9332\u3067\u304d\u308b\u3088\u3046\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u3001<code>invoice.schema.json</code>\u306e\u4e00\u90e8\u4f8b\u3067\u3059\u3002</p> <p>\u3082\u3057\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u5165\u529b\u30d5\u30a9\u30fc\u30e0\u3092\u78ba\u8a8d\u3057\u305f\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li>template_viewer - nims-mdpf/RDE_datasettemplate-schemafile-make-tool</li> </ul> <pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"myproject/XRD/project\",\n  \"description\": \"\u56fa\u6709\u60c5\u5831\u3068\u8a66\u6599\u60c5\u5831\u306e\u30b9\u30ad\u30fc\u30de\",\n  \"type\": \"object\",\n  \"required\": [\n      \"custom\",\n      \"sample\"\n  ],\n  \"properties\": {\n      \"custom\": {\n        \"type\": \"object\",\n        \"label\": {\n          \"ja\": \"\u56fa\u6709\u60c5\u5831\",\n          \"en\": \"Specific Information\"\n        },\n        \"required\": [],\n        \"properties\": {\n          \"measurement_temperature\": {\n              \"type\": \"number\",\n              \"label\": {\n                \"ja\": \"\u6e2c\u5b9a\u6e29\u5ea6\",\n                \"en\": \"Measurement Temperature\"\n              },\n              \"options\": {\n                \"unit\": \"C\"\n              }\n          }\n        }\n      },\n      \"sample\": {\n        \"type\": \"object\",\n        \"label\": {\n          \"ja\": \"\u8a66\u6599\u60c5\u5831\",\n          \"en\": \"Sample Information\"\n        },\n        \"required\": [\n          \"names\"\n        ],\n        \"properties\": {\n          \"generalAttributes\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"e2d20d02-2e38-2cd3-b1b3-66fdb8a11057\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"efcf34e7-4308-c195-6691-6f4d28ffc9bb\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"7cc57dfb-8b70-4b3a-5315-fbce4cbf73d0\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"1e70d11d-cbdd-bfd1-9301-9612c29b4060\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"5e166ac4-bfcd-457a-84bc-8626abe9188f\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"0d0417a3-3c3b-496a-b0fb-5a26f8a74166\"\n                      }\n                  }\n                }\n              ]\n          }\n        }\n      }\n  }\n}\n</code></pre>"},{"location":"usage/structured_process/development_guide/#_5","title":"\u74b0\u5883\u6e96\u5099","text":""},{"location":"usage/structured_process/development_guide/#_6","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316","text":"<p>uv\u3092\u4f7f\u7528\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002</p> <pre><code># \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\nuv init rde-struct-project\ncd rde-struct-project\n</code></pre> <p>pip\u3092\u5229\u7528\u3059\u308b\u5834\u5408</p> <pre><code>mkdir rde-struct-project\ncd rde-struct-project\npyhton3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>\u521d\u671f\u5316\u5f8c\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002requirements.txt\u306e\u4ee3\u308f\u308a\u306bpyproject.toml\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002</p> <ul> <li><code>pyproject.toml</code>: \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\u3068\u30e1\u30bf\u30c7\u30fc\u30bf</li> <li><code>src/</code>: \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\uff09</li> <li><code>README.md</code>: \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8aac\u660e\u6587\u66f8</li> </ul>"},{"location":"usage/structured_process/development_guide/#_7","title":"\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>pip\u3092\u4f7f\u7528\u3057\u3066\u3001RDEToolKit\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002</p> <pre><code>pip install rdetoolkit\n</code></pre> <p>uv\u3092\u4f7f\u3046\u5834\u5408</p> <pre><code>uv add rdetoolkit\nuv sync\n</code></pre>"},{"location":"usage/structured_process/development_guide/#_8","title":"\u69cb\u9020\u5316\u51e6\u7406\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316","text":"<p>rdetoolkit\u3092\u4f7f\u7528\u3057\u3066\u3001\u69cb\u9020\u5316\u51e6\u7406\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002</p> <pre><code># pip\npython3 -m rdetoolkit init\n# uv\nuv run python -m rdetoolkit init\n</code></pre> <p>\u3053\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\u3001\u4ee5\u4e0b\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\uff1a</p> <ul> <li>continer/: \u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u884c\u74b0\u5883\u3092\u5b9a\u7fa9\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea</li> <li>container/data/: \u69cb\u9020\u5316\u51e6\u7406\u3067\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea</li> <li>input/: \u5165\u529b\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(\u30ed\u30fc\u30ab\u30eb\u958b\u767a\u30fb\u30c7\u30d0\u30c3\u30b0\u3067\u306f\u5229\u7528\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002)</li> <li>templates/: \u69cb\u9020\u5316\u51e6\u7406\u3067\u4f7f\u7528\u3059\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(\u30ed\u30fc\u30ab\u30eb\u958b\u767a\u30fb\u30c7\u30d0\u30c3\u30b0\u3067\u306f\u5229\u7528\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002)</li> </ul> <pre><code>rde-struct-project/\n\u251c\u2500\u2500 container\n\u2502   \u251c\u2500\u2500 data\n\u2502   \u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2502   \u2514\u2500\u2500 tasksupport\n\u2502   \u2502       \u251c\u2500\u2500 invoice.schema.json\n\u2502   \u2502       \u2514\u2500\u2500 metadata-def.json\n\u2502   \u251c\u2500\u2500 modules/ # \u30ab\u30b9\u30bf\u30e0\u30e2\u30b8\u30e5\u30fc\u30eb\u7fa4\u3092\u914d\u7f6e\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 main.py # \u69cb\u9020\u5316\u51e6\u7406\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 input\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u2514\u2500\u2500 invoice\n\u2502       \u2514\u2500\u2500 invoice.json\n\u2514\u2500\u2500 templates\n    \u2514\u2500\u2500 tasksupport\n        \u251c\u2500\u2500 invoice.schema.json\n        \u2514\u2500\u2500 metadata-def.json\n</code></pre> <p>\u3055\u304d\u307b\u3069\u4f5c\u6210\u3057\u305f\u3001<code>metadata-def.json</code>\u3068<code>invoice.schema.json</code>\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u751f\u6210\u30c4\u30fc\u30eb\u3067\u4f5c\u6210\u3057\u305f<code>invoice.json</code>\u3092<code>container/data/tasksupport/</code>\u3068\u3001<code>templates/</code>\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002</p> <pre><code>cp metadata-def.json container/data/tasksupport/\ncp invoice.schema.json container/data/tasksupport/\ncp invoice.json container/data/invoice/\ncp metadata-def.json templates/tasksupport\ncp invoice.schema.json templates/tasksupport\ncp metadata-def.json templates/tasksupport/tasksupport/\ncp invoice.schema.json templates/tasksupport/tasksupport/\n</code></pre> <p>\u307e\u305f\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u305f\u5165\u529b\u30c7\u30fc\u30bfXRD_RIGAKU.ras\u3082<code>container/data/inputdata/</code>\u306b\u914d\u7f6e\u3057\u307e\u3059\u3002</p> <pre><code>cp XRD_RIGAKU.ras container/data/inputdata/\n</code></pre>"},{"location":"usage/structured_process/development_guide/#_9","title":"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0","text":"<p><code>data/tasksupport/rdeconfig.yml</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3001RDE\u69cb\u9020\u5316\u51e6\u7406\u3067\u5fc5\u8981\u306a\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <pre><code>system:\n    save_raw: true\n    save_nonshared_raw: false\n    magic_variable: false\n    save_thumbnail_image: true\n</code></pre>"},{"location":"usage/structured_process/development_guide/#rdetoolkit","title":"rdetoolkit\u304c\u63a8\u5968\u3059\u308b\u69cb\u9020\u5316\u51e6\u7406\u306e\u57fa\u672c\u69cb\u6210","text":"<p>rdetoolkit\u3067\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u306e\u57fa\u672c\u7684\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u63a8\u5968\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>container\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u2502   \u2514\u2500\u2500 XRD_RIGAKU.ras\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport\n\u2502       \u251c\u2500\u2500 invoice.schema.json\n\u2502       \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 modules\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 mymodule.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre> \u30c7\u30a3\u30ec\u30af\u30c8\u30ea/\u30d5\u30a1\u30a4\u30eb \u8aac\u660e main.py \u69cb\u9020\u5316\u51e6\u7406\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3002\u958b\u767a\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 modules \u30ab\u30b9\u30bf\u30e0\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u914d\u7f6e\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3002 requirements.txt \u5fc5\u8981\u306aPython\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5b9a\u7fa9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3002 data \u69cb\u9020\u5316\u51e6\u7406\u3067\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3002 <p>rdetoolkit\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3001<code>pandas</code>, <code>numpy</code>, <code>matplotlib</code>\u306a\u3069\u306e\u30c7\u30fc\u30bf\u51e6\u7406\u306b\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u81ea\u52d5\u7684\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u3067\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u3084\u53ef\u8996\u5316\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/development_guide/#mainpy","title":"main.py\u306e\u5b9f\u88c5","text":"<p>\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4f5c\u6210\u3055\u308c\u305f<code>main.py</code>\u306f\u3001\u4eca\u56de\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\u5404\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30e6\u30fc\u30b6\u30fc\u304c\u958b\u767a\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u7fa4\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001<code>rdetoolkit.workflows.run()</code>\u306b\u958b\u767a\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u3067\u3001RDE\u69cb\u9020\u5316\u51e6\u7406\u3067\u5fc5\u8981\u306apre/post\u51e6\u7406\u3092\u542b\u3080\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002</p> <p>\u4eca\u56de\u958b\u767a\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092<code>modules.mymodule.my_xrd_func()</code>\u3068\u3057\u307e\u3059\u3002<code>run()</code>\u306e\u5f15\u6570<code>custom_dataset_function</code>\u306b\u3053\u306e\u95a2\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</p> <pre><code>import rdetoolkit\n\nfrom modules.mymodule import my_xrd_func\n\nrdetoolkit.workflows.run(custom_dataset_function=my_xrd_func)\n</code></pre>"},{"location":"usage/structured_process/development_guide/#_10","title":"\u30ab\u30b9\u30bf\u30e0\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5b9f\u88c5","text":"<p><code>container/modules/</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30ab\u30b9\u30bf\u30e0\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u914d\u7f6e\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001<code>mymodule.py</code>\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u3001XRD\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <p>\u3053\u3053\u3067\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u5b9a\u7fa9\u3059\u308b\u95a2\u6570<code>my_xrd_func</code>\u306b\u4ee5\u4e0b\u306e\u5f15\u6570\u3092\u542b\u3081\u308b\u3053\u3068\u3067\u3059\uff1a</p> <ul> <li><code>RdeInputDirPaths</code>: \u5165\u529b\u30c7\u30fc\u30bf\u5404\u7a2e\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u7fa4\u3092\u683c\u7d0d\u3057\u305f\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3002</li> <li><code>RdeOutputResourcePath</code>: \u51fa\u529b\u30ea\u30bd\u30fc\u30b9\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u683c\u7d0d\u3057\u305f\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3002</li> </ul> <p>\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u4f7f\u3046\u3068\u3001RDE\u30b7\u30b9\u30c6\u30e0\u306b\u5b89\u5168\u30fb\u78ba\u5b9f\u306b\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3067\u304d\u307e\u3059\u3002</p> <p>\u3055\u3089\u306b\u3001\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306f\u3001<code>RdeInputDirPaths</code>\u30af\u30e9\u30b9\u306e<code>rawfiles</code>\u5c5e\u6027\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002<code>srcpaths</code>\u3067\u306f\u306a\u304f\u3001<code>resource_paths.rawfiles</code>\u3068\u3044\u3046\u914d\u5217\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u306e\u5c5e\u6027\u306e\u5229\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002</p> <p>RDE\u306b\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e2d\u306b\u3001\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u3068\u3044\u3046\u5358\u4f4d\u3067\u30c7\u30fc\u30bf\u304c\u767b\u9332\u3055\u308c\u307e\u3059\u3002rdetoolkit\u3067\u306f\u3001\u3053\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u306e\u5358\u4f4d\u3067\u5165\u529b\u30c7\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3001\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u305f\u3081\u3001<code>RdeInputDirPaths</code>\u306e<code>rawfiles</code>\u5c5e\u6027\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\u3057\u307e\u3059\u3002</p> <pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    pass\n</code></pre> <p>\u3064\u3065\u3044\u3066\u3001<code>my_xrd_func</code>\u95a2\u6570\u5185\u3067\u5b9f\u88c5\u3059\u308b\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002RDE\u69cb\u9020\u5316\u51e6\u7406\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u81ea\u8eab\u304c\u67d4\u8edf\u306b\u51e6\u7406\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u6700\u3082\u591a\u3044\u30b1\u30fc\u30b9\u306f\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u7cfb\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002</p> <ul> <li>\u5165\u529b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u62bd\u51fa</li> <li>\u69cb\u9020\u5316\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210</li> <li>\u30d7\u30ed\u30c3\u30c8\u753b\u50cf\u306e\u4f5c\u6210(RDE\u4e0a\u3067\u53ef\u8996\u5316\u3057\u305f\u30b0\u30e9\u30d5\u3092\u95b2\u89a7\u3059\u308b\u305f\u3081)</li> </ul> <p>\u4ee5\u4e0b\u306e\u65b9\u91dd\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> \u51e6\u7406\u5185\u5bb9 \u51e6\u7406\u5185\u5bb9 \u95a2\u6570\u540d \u5165\u529b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f <code>.ras</code>\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8a08\u6e2c\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u5206\u96e2 <code>read_ras_file</code> \u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u62bd\u51fa \u5206\u96e2\u3057\u305f\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58 <code>save_metadata</code> \u69cb\u9020\u5316\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210 \u8a08\u6e2c\u30c7\u30fc\u30bf\u306e\u307f\u3092csv\u306b\u4fdd\u5b58 pandas\u306eto_csv()\u3092\u5229\u7528\u3059\u308b \u30d7\u30ed\u30c3\u30c8\u753b\u50cf\u306e\u4f5c\u6210 XRD\u306e\u30d7\u30ed\u30c3\u30c8\u753b\u50cf\u3092\u4f5c\u6210 <code>xrd_plot</code>"},{"location":"usage/structured_process/development_guide/#step1","title":"Step1: \u5165\u529b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080","text":"<p><code>read_ras_file</code>\u95a2\u6570\u3067\u306f\u3001\u5165\u529b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8a08\u6e2c\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u5206\u96e2\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <pre><code>from pathlib import Path\nimport re\nimport pandas as pd\n\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\n\ndef parse_ras_file(filepath: str | Path) -&gt; tuple[dict[str, str], pd.DataFrame]:\n    \"\"\"RAS\u30d5\u30a1\u30a4\u30eb\u89e3\u6790: \u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u6e2c\u5b9a\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\"\"\"\n    metadata, data_lines = {}, []\n\n    with open(filepath, 'r', encoding='utf-8') as f:\n        lines = f.readlines()\n\n    in_data = False\n    for line in lines:\n        line = line.strip()\n        if not line:\n            continue\n\n        if line.startswith('*'):\n            if line == '*RAS_INT_START':\n                in_data = True\n            elif line == '*RAS_INT_END':\n                break\n            elif not in_data:\n                parts = line[1:].split(' ', 1)\n                if len(parts) == 2 and parts[1].strip():\n                    key = re.sub(r'[^a-zA-Z0-9]+', '_', parts[0].lower()).strip('_')\n                    metadata[key] = parts[1].strip().strip('\"')\n        elif in_data:\n            parts = line.split()\n            if len(parts) == 3:\n                try:\n                    x, i, a = float(parts[0]), float(parts[1]), float(parts[2])\n                    data_lines.append([x, i * a])\n                except ValueError:\n                    continue\n\n    return metadata, pd.DataFrame(data_lines, columns=['two_theta', 'intensity'])\n\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n    # ras\u30d5\u30a1\u30a4\u30eb\u304c\u4e00\u3064\u3057\u304b\u306a\u3044\u305f\u3081\u3001\u6700\u521d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5bfe\u8c61\u3068\u3059\u308b\n    metadata, dataframe = parse_ras_file(resource_paths.rawfiles[0])\n</code></pre>"},{"location":"usage/structured_process/development_guide/#step2","title":"Step2: \u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b","text":"<p><code>save_metadata</code>\u95a2\u6570\u3067\u306f\u3001\u62bd\u51fa\u3057\u305f\u30e1\u30bf\u30c7\u30fc\u30bf\u3092<code>metadata-def.json</code>\u306b\u57fa\u3065\u3044\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <pre><code>from pathlib import Path\nimport re\nimport pandas as pd\n\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\nfrom rdetoolkit.rde2util import Meta\n\n\ndef parse_ras_file(filepath: str | Path) -&gt; tuple[dict[str, str], pd.DataFrame]:\n    \"\"\"\n    RAS\u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u6790\u3057\u3001\u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u6e2c\u5b9a\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3059\u308b\n    \"\"\"\n    # ... \u7701\u7565: \u4e0a\u8a18\u306eparse_ras_file\u95a2\u6570\u306e\u5185\u5bb9\u3092\u3053\u3053\u306b\u542b\u3081\u308b ...\n    return metadata, df\n\n# **\u8ffd\u52a0**\ndef save_metadata(metadata: dict[str, str], metadata_def_json_path: str | Path, save_path: str | Path):\n    \"\"\"\u30e1\u30bf\u30c7\u30fc\u30bf\u3092metadata-def.json\u306b\u57fa\u3065\u3044\u3066\u4fdd\u5b58\"\"\"\n    meta = Meta(metadata_def_json_path)\n    meta.assign_vals(metadata)\n    meta.writefile(str(save_path))\n\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n    metadata, dataframe = parse_ras_file(resource_paths.rawfiles[0])\n\n    # **\u8ffd\u52a0**: \u30e1\u30bf\u30c7\u30fc\u30bf\u4fdd\u5b58\u51e6\u7406\n    metadata_def_json_path = srcpaths.tasksupport.joinpath(\"metadata-def.json\")\n    save_path = resource_paths.meta.joinpath(\"metadata.json\")\n    save_metadata(metadata, metadata_def_json_path, save_path)\n</code></pre>"},{"location":"usage/structured_process/development_guide/#step3","title":"Step3: \u69cb\u9020\u5316\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","text":"<p><code>my_xrd_func</code>\u95a2\u6570\u5185\u3067\u3001\u8a08\u6e2c\u30c7\u30fc\u30bf\u3092CSV\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <pre><code>def parse_ras_file(filepath: str | Path) -&gt; tuple[dict[str, str], pd.DataFrame]:\n    # ... \u7701\u7565: \u4e0a\u8a18\u306eparse_ras_file\u95a2\u6570\u306e\u5185\u5bb9\u3092\u3053\u3053\u306b\u542b\u3081\u308b ...\n    return metadata, df\n\n\ndef save_metadata(metadata: dict[str, str], metadata_def_json_path: str | Path, save_path: str | Path):\n    # ... \u7701\u7565: \u4e0a\u8a18\u306esave_metadata\u95a2\u6570\u306e\u5185\u5bb9\u3092\u3053\u3053\u306b\u542b\u3081\u308b ...\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    metadata, dataframe = parse_ras_file(resource_paths.rawfiles[0])\n\n    metadata_def_json_path = srcpaths.tasksupport.joinpath(\"metadata-def.json\")\n    save_path = resource_paths.meta.joinpath(\"metadata.json\")\n    save_metadata(metadata, metadata_def_json_path, save_path)\n\n    # **\u8ffd\u52a0**: \u8a08\u6e2c\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\n    dataframe.to_csv(resource_paths.struct.joinpath(\"mesurement.csv\"), index=False)\n</code></pre>"},{"location":"usage/structured_process/development_guide/#step4","title":"Step4: \u30d7\u30ed\u30c3\u30c8\u753b\u50cf\u306e\u4f5c\u6210","text":"<p><code>xrd_plot</code>\u95a2\u6570\u3067\u306f\u3001XRD\u30c7\u30fc\u30bf\u306e\u30d7\u30ed\u30c3\u30c8\u753b\u50cf\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <pre><code>```python\ndef parse_ras_file(filepath: str | Path) -&gt; tuple[dict[str, str], pd.DataFrame]:\n    # ... \u7701\u7565: \u4e0a\u8a18\u306eparse_ras_file\u95a2\u6570\u306e\u5185\u5bb9\u3092\u3053\u3053\u306b\u542b\u3081\u308b ...\n    return metadata, df\n\n\ndef save_metadata(metadata: dict[str, str], metadata_def_json_path: str | Path, save_path: str | Path):\n    # ... \u7701\u7565: \u4e0a\u8a18\u306esave_metadata\u95a2\u6570\u306e\u5185\u5bb9\u3092\u3053\u3053\u306b\u542b\u3081\u308b ...\n\ndef xrd_plot(data: pd.DataFrame, output_path: str | Path):\n    \"\"\"XRD\u30d7\u30ed\u30c3\u30c8\u753b\u50cf\u4f5c\u6210\"\"\"\n    plt.figure(figsize=(10, 6))\n    plt.plot(data['two_theta'], data['intensity'], label='Intensity')\n    plt.xlabel('2Theta (degrees)')\n    plt.ylabel('Intensity')\n    plt.title('XRD Pattern')\n    plt.legend()\n    plt.grid()\n    plt.savefig(output_path)\n    plt.close()\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    metadata, dataframe = parse_ras_file(resource_paths.rawfiles[0])\n\n    metadata_def_json_path = srcpaths.tasksupport.joinpath(\"metadata-def.json\")\n    save_path = resource_paths.meta.joinpath(\"metadata.json\")\n    save_metadata(metadata, metadata_def_json_path, save_path)\n\n    # \u8a08\u6e2c\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\n    dataframe.to_csv(resource_paths.struct.joinpath(\"mesurement.csv\"), index=False)\n\n    # **\u8ffd\u52a0**: \u30d7\u30ed\u30c3\u30c8\u753b\u50cf\u4f5c\u6210\n    xrd_plot(dataframe, resource_paths.main_image.joinpath(\"xrd_graph.png\"))\n</code></pre>"},{"location":"usage/structured_process/development_guide/#step5","title":"Step5: \u4f8b\u5916\u51e6\u7406\u3092\u8ffd\u52a0\u3059\u308b","text":"<p><code>rdetoolkit</code>\u3067\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u4e2d\u306b\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u4f8b\u5916\u3092<code>StructuredError</code>\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30a8\u30e9\u30fc\u767a\u751f\u6642\u306b\u9069\u5207\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002</p> <pre><code>from pathlib import Path\nimport re\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\nfrom rdetoolkit.rde2util import Meta\nfrom rdetoolkit.exceptions import StructuredError # **\u8ffd\u52a0**\n\n# ... \u7701\u7565: \u4e0a\u8a18\u306e\u95a2\u6570\u7fa4\u3092\u5185\u5bb9\u3092\u3053\u3053\u306b\u542b\u3081\u308b ...\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"XRD\u30c7\u30fc\u30bf\u51e6\u7406\u30e1\u30a4\u30f3\u95a2\u6570\"\"\"\n    try:\n        # RAS\u30d5\u30a1\u30a4\u30eb\u89e3\u6790\n        metadata, dataframe = parse_ras_file(resource_paths.rawfiles[0])\n\n        # \u30e1\u30bf\u30c7\u30fc\u30bf\u4fdd\u5b58\n        try:\n            save_metadata(metadata,\n                        srcpaths.tasksupport.joinpath(\"metadata-def.json\"),\n                        resource_paths.meta.joinpath(\"metadata.json\"))\n        except StructuredError as e:\n            print(f\"Error saving metadata: {e}\")\n            return None\n\n        # \u6e2c\u5b9a\u30c7\u30fc\u30bf\u4fdd\u5b58\n        dataframe.to_csv(resource_paths.struct.joinpath(\"mesurement.csv\"), index=False)\n\n        # \u30d7\u30ed\u30c3\u30c8\u753b\u50cf\u4f5c\u6210\n        xrd_plot(dataframe, resource_paths.main_image.joinpath(\"xrd_graph.png\"))\n    except Exception as e:\n        raise StructuredError(f\"An error occurred during XRD processing: {e}\") from e\n</code></pre>"},{"location":"usage/structured_process/development_guide/#step6","title":"Step6: \u69cb\u9020\u5316\u51e6\u7406\u306e\u52d5\u4f5c\u78ba\u8a8d","text":"<pre><code>cd container\npython3 main.py\n</code></pre> <p>\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002(\u7a7a\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u8868\u793a\u304b\u3089\u9664\u5916\u3057\u3066\u3044\u307e\u3059\u3002)</p> <pre><code>container/data\n\u251c\u2500\u2500 inputdata\n\u2502   \u2514\u2500\u2500 XRD_RIGAKU.ras\n\u251c\u2500\u2500 invoice\n\u2502   \u2514\u2500\u2500 invoice.json\n\u251c\u2500\u2500 job.failed\n\u251c\u2500\u2500 main_image\n\u2502   \u2514\u2500\u2500 xrd_graph.png\n\u251c\u2500\u2500 meta\n\u2502   \u2514\u2500\u2500 metadata.json\n\u251c\u2500\u2500 nonshared_raw\n\u2502   \u2514\u2500\u2500 XRD_RIGAKU.ras\n\u251c\u2500\u2500 raw\n\u2502   \u2514\u2500\u2500 XRD_RIGAKU.ras\n\u251c\u2500\u2500 structured\n\u2502   \u2514\u2500\u2500 mesurement.csv\n\u251c\u2500\u2500 tasksupport\n\u2502   \u251c\u2500\u2500 invoice.schema.json\n\u2502   \u251c\u2500\u2500 metadata-def.json\n\u2502   \u2514\u2500\u2500 rdeconfig.yml\n\u2514\u2500\u2500 thumbnail\n    \u2514\u2500\u2500 xrd_graph.png\n</code></pre>"},{"location":"usage/structured_process/development_guide/#_11","title":"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306f","text":"<p><code>container/data/logs</code>\u4ee5\u4e0b\u306b\u3001<code>rdesys.log</code>\u306b\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u3001\u3053\u3053\u306b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8a18\u9332\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/development_guide/#rde_2","title":"RDE\u306b\u69cb\u9020\u5316\u51e6\u7406\u3092\u63d0\u51fa\u3059\u308b","text":"<p>\u3082\u3057\u52d5\u4f5c\u7b49\u554f\u984c\u304c\u306a\u3051\u308c\u3070\u3001RDE\u306b\u69cb\u9020\u5316\u51e6\u7406\u3092\u63d0\u51fa\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057zip\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u3001\u3053\u306ezip\u30d5\u30a1\u30a4\u30eb\u3092RDE\u306b\u63d0\u51fa\u3057\u307e\u3059\u3002</p> <pre><code>uv run python -m rdetoolkit artifact -s . -o rde_submit_files.zip\n</code></pre> <pre><code># \u51fa\u529b\n\ud83d\udce6 Archiving project files...\n\ud83d\udccc - Source Directory: .\n\ud83d\udccc - Output Archive: rde_submit_files.zip\n\u2705 \ud83d\udc33 Dockerfile found!: container/Dockerfile\n\u2705 \ud83d\udc0d requirements.txt found!: container/requirements.txt\n\ud83d\udd0d Scanning for external connections...OK\n\ud83d\udd0d Scanning for code security vulnerabilities...OK\n\u2705 Archive created successfully: rde_submit_files.zip\n\u2705 Archive and report generation completed successfully.: rde_submit_files.md\n</code></pre>"},{"location":"usage/structured_process/directory/","title":"\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":""},{"location":"usage/structured_process/directory/#_2","title":"\u76ee\u7684","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306e\u8a73\u7d30\u4ed5\u69d8\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u5165\u529b\u30fb\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5f79\u5272\u3068\u547d\u540d\u898f\u5247\u3001divided\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4f7f\u7528\u65b9\u6cd5\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/directory/#_3","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u4ed5\u69d8","text":""},{"location":"usage/structured_process/directory/#_4","title":"\u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c\u6642\u306b\u5fc5\u8981\u306a\u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u7fa4\u3067\u3059\u3002\u30ed\u30fc\u30ab\u30eb\u5b9f\u884c\u6642\u306f\u4e8b\u524d\u306b\u4f5c\u6210\u304c\u5fc5\u8981\u3067\u3059\uff1a</p> \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d \u7a2e\u5225 \u7528\u9014 inputdata \u5165\u529b\u30c7\u30fc\u30bf \u5165\u529b\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u683c\u7d0d invoice \u9001\u308a\u72b6\u30c7\u30fc\u30bf \u9001\u308a\u72b6(invoice.json)\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 tasksupport \u753b\u50cf\u30d5\u30a1\u30a4\u30eb \u4e8b\u524d\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4f5c\u6210\u6642\u306b\u767b\u9332\u3057\u305f\u69cb\u9020\u5316\u51e6\u7406\u88dc\u52a9\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u683c\u7d0d"},{"location":"usage/structured_process/directory/#_5","title":"\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c\u524d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f8b","text":"<p>\u30ed\u30fc\u30ab\u30eb\u3067\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4e8b\u524d\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>.\n\u251c\u2500\u2500 modules\n\u2502   \u2514\u2500\u2500 custom_modules.py\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u2502   \u2514\u2500\u2500 sample_data.ras\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport\n\u2502       \u251c\u2500\u2500 invoice.schema.json\n\u2502       \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 main.py # \u8d77\u52d5\u51e6\u7406\u3092\u5b9a\u7fa9(entry point)\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"usage/structured_process/directory/#_6","title":"\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea","text":"<p>\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u7fa4\u3067\u3059\u3002rdetoolkit\u3067\u306f\u3001\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c\u3059\u308b\u3068\u3001\u4e0b\u8a18\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u81ea\u52d5\u3067\u4f5c\u6210\u3055\u308c\u307e\u3059\uff1a</p> \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d \u7a2e\u5225 \u7528\u9014 meta \u4e3b\u8981\u30d1\u30e9\u30e1\u30fc\u30bf\u60c5\u5831\u30d5\u30a1\u30a4\u30eb \u4e3b\u8981\u30d1\u30e9\u30e1\u30fc\u30bf\u60c5\u5831\u30d5\u30a1\u30a4\u30eb(<code>metadata.json</code>)\u3092\u683c\u7d0d main_image \u753b\u50cf\u30d5\u30a1\u30a4\u30eb RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u8a73\u7d30\u753b\u50cf\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u308b\u30b5\u30e0\u30cd\u30a4\u30eb\u30d5\u30a1\u30a4\u30eb other_image \u753b\u50cf\u30d5\u30a1\u30a4\u30eb RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u306b\u306e\u307f\u8868\u793a\u3055\u308c\u308b thumbnail \u753b\u50cf\u30d5\u30a1\u30a4\u30eb RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4e00\u89a7\u306b\u8868\u793a\u3055\u308c\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb attachment - \u6dfb\u4ed8\u30d5\u30a1\u30a4\u30eb(\u203b) nonshared_raw - \u5171\u6709\u4e0d\u53ef\u80fd\u306a\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u914d\u7f6e raw raw\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb \u5171\u6709\u53ef\u80fd\u306araw\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u914d\u7f6e\u3002\u5165\u529b\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3059\u308b\u3002 structured \u69cb\u9020\u5316\u30d5\u30a1\u30a4\u30eb \u69cb\u9020\u5316\u51e6\u7406\u306b\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3002\u5165\u529b\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3059\u308b\u3002 logs - \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u767b\u9332\u30fb\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u304c\u3001\u30ed\u30b0\u3092\u84c4\u7a4d\u3059\u308b\u305f\u3081\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 temp - \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u767b\u9332\u30fb\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u304c\u3001\u4e00\u6642\u7684\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u3057\u3066\u3001temp\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 <p>Warning</p> <p>attachment\u306f\u3001rdetoolkit\u3067\u306f\u81ea\u52d5\u3067\u751f\u6210\u3055\u308c\u307e\u305b\u3093\u3002</p>"},{"location":"usage/structured_process/directory/#_7","title":"\u30ed\u30fc\u30ab\u30eb\u3067\u69cb\u9020\u5316\u51e6\u7406\u5b9f\u884c\u5f8c\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f8b","text":"<pre><code>\u251c\u2500\u2500 modules\n\u2502   \u2514\u2500\u2500 custom_modules.py\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u2502   \u2514\u2500\u2500 excelinvoice.zip\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u251c\u2500\u2500 logs\n\u2502   \u2502   \u2514\u2500\u2500 rdesys.log\n\u2502   \u251c\u2500\u2500 main_image\n\u2502   \u2502   \u2514\u2500\u2500 iamge0.png\n\u2502   \u251c\u2500\u2500 meta\n\u2502   \u2502   \u2514\u2500\u2500 metadata.json\n\u2502   \u251c\u2500\u2500 nonshared_raw\n\u2502   \u251c\u2500\u2500 other_image\n\u2502   \u2502   \u251c\u2500\u2500 sub_image1.png\n\u2502   \u2502   \u2514\u2500\u2500 sub_image2.png\n\u2502   \u251c\u2500\u2500 raw\n\u2502   \u2502   \u251c\u2500\u2500 DMF-pos-1.xyz\n\u2502   \u2502   \u251c\u2500\u2500 li-mole.inp\n\u2502   \u2502   \u2514\u2500\u2500 opt.xyz\n\u2502   \u251c\u2500\u2500 structured\n\u2502   \u2502   \u2514\u2500\u2500 sample.csv\n\u2502   \u251c\u2500\u2500 tasksupport\n\u2502   \u2502   \u251c\u2500\u2500 invoice.schema.json\n\u2502   \u2502   \u2514\u2500\u2500 metadata-def.json\n\u2502   \u251c\u2500\u2500 temp\n\u2502   \u2502   \u2514\u2500\u2500 invoice_org.json\n\u2502   \u2514\u2500\u2500 thumbnail\n\u2502       \u2514\u2500\u2500 image.png\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"usage/structured_process/directory/#divided","title":"divided\u30c7\u30a3\u30ec\u30af\u30c8\u30ea","text":""},{"location":"usage/structured_process/directory/#_8","title":"\u6982\u8981","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u3067\u306f\u3001ExcelInvoice\u3084\u3001\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u30e2\u30fc\u30c9\u3068\u3044\u3046\u3001\u4e00\u5ea6\u306b\u8907\u6570\u306e\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3059\u308b\u30e2\u30fc\u30c9\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u3053\u306e\u30e2\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001<code>divided</code>\u3068\u3044\u3046\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002</p> <p>Note</p> <p>ExcelInvoice\u3084\u3001\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u30e2\u30fc\u30c9\u3092\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8ff0\u3057\u3001\u6307\u5b9a\u3057\u305f\u5165\u529b\u898f\u5247\u3067\u69cb\u9020\u5316\u51e6\u7406\u3092\u5b9f\u884c\u3057\u305f\u5834\u5408\u3001\u81ea\u52d5\u7684\u306bdivided\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/directory/#divided_1","title":"divided\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u547d\u540d\u898f\u5247","text":"<ul> <li>\u547d\u540d\u898f\u5247: <code>data/divided/00xx</code></li> <li><code>00xx</code>: 4\u6841\u3067\u30bc\u30ed\u57cb\u3081(\u4f8b\uff1a0001/, 0029/\u306a\u3069)</li> <li><code>data/divided/00xx</code>\u914d\u4e0b\u306b\u3001<code>structured</code>\u3084<code>meta</code>\u306a\u3069\u306eRDE\u69cb\u9020\u5316\u51e6\u7406\u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u914d\u7f6e</li> <li>\u3053\u306e\u6642\u3001<code>inputdata</code>, <code>invoice</code>, <code>tasksupport</code>\u306f\u4f5c\u6210\u3057\u306a\u304f\u3066\u826f\u3044</li> </ul>"},{"location":"usage/structured_process/directory/#divided_2","title":"divided\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u4f8b","text":"<pre><code>\u251c\u2500\u2500 divided/\n\u2502   \u251c\u2500\u2500 0001/  # \u4f8b: 0001/, 0002/ \u306a\u3069\n\u2502   \u2502   \u251c\u2500\u2500 structured/\n\u2502   \u2502   \u251c\u2500\u2500 meta/\n\u2502   \u2502   \u251c\u2500\u2500 thumbnail/\n\u2502   \u2502   \u251c\u2500\u2500 main_image/\n\u2502   \u2502   \u251c\u2500\u2500 other_image/\n\u2502   \u2502   \u251c\u2500\u2500 nonshared_raw/\n\u2502   \u2502   \u2514\u2500\u2500 raw/\n\u2502   \u251c\u2500\u2500 0002/\n\u2502   \u2502   \u251c\u2500\u2500 structured/\n\u2502   \u2502   \u251c\u2500\u2500 meta/\n\u2502   \u2502   \u251c\u2500\u2500 thumbnail/\n\u2502   \u2502   \u251c\u2500\u2500 main_image/\n\u2502   \u2502   \u251c\u2500\u2500 other_image/\n\u2502   \u2502   \u251c\u2500\u2500 nonshared_raw/\n\u2502   \u2502   \u2514\u2500\u2500 raw/\n\u251c\u2500\u2500 inputdata/\n\u251c\u2500\u2500 invoice/\n\u251c\u2500\u2500 tasksupport/\n\u251c\u2500\u2500 structured/\n\u251c\u2500\u2500 meta/\n\u251c\u2500\u2500 thumbnail/\n\u251c\u2500\u2500 main_image/\n\u251c\u2500\u2500 other_image/\n\u251c\u2500\u2500 nonshared_raw/\n\u2514\u2500\u2500 raw/\n</code></pre>"},{"location":"usage/structured_process/directory/#directoryops","title":"DirectoryOps\u306b\u3088\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210","text":""},{"location":"usage/structured_process/directory/#_9","title":"\u6982\u8981","text":"<p>\u4e0a\u8a18\u3067\u793a\u3057\u305f\u901a\u308a\u3001RDE\u69cb\u9020\u5316\u51e6\u7406\u3067\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u3001<code>divided/00xx</code>\u306e\u3088\u3046\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306a\u3069\u3001\u547d\u540d\u898f\u5247\u306b\u3057\u305f\u304c\u3063\u3066\u751f\u6210\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u30b1\u30fc\u30b9\u304c\u5b58\u5728\u3057\u307e\u3059\u3002<code>rdetoolkit.core.DirectoryOps</code>\u4f7f\u7528\u3059\u308b\u3068\u3001\u7c21\u5358\u306bRDE\u69cb\u9020\u5316\u51e6\u7406\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/directory/#_10","title":"\u4f7f\u7528\u4f8b","text":"DirectoryOps\u306e\u4f7f\u7528\u65b9\u6cd5<pre><code>from rdetoolkit.core import DirectoryOps\n\n# 1. \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210: data\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\ndir_ops = DirectoryOps(\"data\")\n\n# 2. structured\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\np = dir_ops.structured.path\nprint(p)  # data/structured\n\n# 3. index\u4ed8\u304d\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\np = dir_ops.structured(2).path\nprint(p)  # data/divided/0002/structured\n\n# 4. data\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306b\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u4e00\u5ea6\u306b\u4f5c\u6210\u3057\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\np = dir_ops.all()\nprint(p)  # ['data/invoice', 'data/invoice_patch', 'data/attachment', ...]\n\n# 5. data\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306b\u3001index\u4ed8\u304d\u306e\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u4e00\u5ea6\u306b\u4f5c\u6210\u3057\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\np = dir_ops.all(1)\nprint(p)  # ['data/invoice', ..., 'data/divided/0001/structured', ...]\n\n# 6. \u6307\u5b9a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\np = dir_ops.structured.list()\nprint(p)  # ['data/structured/structured_item_1.csv', ...]\n\n# 7. \u6307\u5b9a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b(divided)\np = dir_ops.structured(2).list()\nprint(p)  # ['data/divided/0002/structured/structured_item_1.csv', ...]\n</code></pre>"},{"location":"usage/structured_process/directory/#_11","title":"\u95a2\u9023\u60c5\u5831","text":"<p>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306b\u3064\u3044\u3066\u3055\u3089\u306b\u5b66\u3076\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3067\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f7f\u7528\u3055\u308c\u308b\u51e6\u7406\u30d5\u30ed\u30fc\u3092\u7406\u89e3\u3059\u308b</li> <li>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u53d6\u5f97\u3067\u30d1\u30b9\u64cd\u4f5c\u65b9\u6cd5\u3092\u78ba\u8a8d\u3059\u308b</li> <li>\u51e6\u7406\u30e2\u30fc\u30c9\u3067divided\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30e2\u30fc\u30c9\u3092\u5b66\u3076</li> </ul>"},{"location":"usage/structured_process/errorhandling/","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u65b9\u6cd5","text":""},{"location":"usage/structured_process/errorhandling/#_2","title":"\u76ee\u7684","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u3067\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30a8\u30e9\u30fc\u306e\u5bfe\u51e6\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u30d1\u30bf\u30fc\u30f3\u3068\u52b9\u679c\u7684\u306a\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u624b\u9806\u3092\u5b66\u3079\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/errorhandling/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>RDEToolKit\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5\u306e\u7406\u89e3</li> <li>Python\u306e\u57fa\u672c\u7684\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u77e5\u8b58</li> <li>\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u65b9\u306e\u7406\u89e3</li> </ul>"},{"location":"usage/structured_process/errorhandling/#_4","title":"\u624b\u9806","text":""},{"location":"usage/structured_process/errorhandling/#1","title":"1. \u30a8\u30e9\u30fc\u306e\u7a2e\u985e\u3092\u7279\u5b9a\u3059\u308b","text":"<p>\u307e\u305a\u3001\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u306e\u7a2e\u985e\u3092\u7279\u5b9a\u3057\u307e\u3059\uff1a</p> \u30a8\u30e9\u30fc\u60c5\u5831\u306e\u53d6\u5f97<pre><code>import traceback\n\ndef identify_error():\n    try:\n        # \u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9f\u884c\n        result = workflows.run(custom_dataset_function)\n    except Exception as e:\n        print(f\"\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7: {type(e).__name__}\")\n        print(f\"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8: {str(e)}\")\n        print(f\"\u8a73\u7d30\u306a\u30c8\u30ec\u30fc\u30b9\u30d0\u30c3\u30af:\")\n        traceback.print_exc()\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#2","title":"2. \u30d5\u30a1\u30a4\u30eb\u95a2\u9023\u30a8\u30e9\u30fc\u3092\u89e3\u6c7a\u3059\u308b","text":""},{"location":"usage/structured_process/errorhandling/#_5","title":"\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u30a8\u30e9\u30fc","text":"\u30d5\u30a1\u30a4\u30eb\u5b58\u5728\u78ba\u8a8d<pre><code>import os\n\ndef check_file_exists(file_path):\n    if not os.path.exists(file_path):\n        print(f\"\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093: {file_path}\")\n        # \u4ee3\u66ff\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u63d0\u6848\n        alternatives = [\n            file_path.replace('.csv', '.xlsx'),\n            os.path.join('data', os.path.basename(file_path))\n        ]\n        for alt in alternatives:\n            if os.path.exists(alt):\n                print(f\"\u4ee3\u66ff\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f: {alt}\")\n                return alt\n        return None\n    return file_path\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#_6","title":"\u6a29\u9650\u30a8\u30e9\u30fc\u306e\u89e3\u6c7a","text":"\u6a29\u9650\u306e\u4fee\u6b63<pre><code># \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u6a29\u9650\u3092\u8a2d\u5b9a\nchmod 755 data/\nchmod 755 data/structured/\nchmod 755 data/logs/\n\n# \u30d5\u30a1\u30a4\u30eb\u306e\u6a29\u9650\u3092\u8a2d\u5b9a\nchmod 644 data/invoice/invoice.json\nchmod 644 data/tasksupport/*.json\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#3","title":"3. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u89e3\u6c7a\u3059\u308b","text":""},{"location":"usage/structured_process/errorhandling/#json","title":"JSON\u5f62\u5f0f\u306e\u691c\u8a3c","text":"JSON\u691c\u8a3c<pre><code>import json\n\ndef validate_json_file(file_path):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n        print(f\"\u2705 {file_path} \u306f\u6709\u52b9\u306aJSON\u3067\u3059\")\n        return data\n    except json.JSONDecodeError as e:\n        print(f\"\u274c JSON\u5f62\u5f0f\u30a8\u30e9\u30fc in {file_path}:\")\n        print(f\"   \u884c {e.lineno}, \u5217 {e.colno}: {e.msg}\")\n        return None\n    except FileNotFoundError:\n        print(f\"\u274c \u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093: {file_path}\")\n        return None\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#_7","title":"\u30b9\u30ad\u30fc\u30de\u691c\u8a3c\u30a8\u30e9\u30fc\u306e\u5bfe\u51e6","text":"\u30b9\u30ad\u30fc\u30de\u691c\u8a3c<pre><code>def validate_against_schema(data, schema_path):\n    try:\n        with open(schema_path, 'r') as f:\n            schema = json.load(f)\n\n        # \u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u78ba\u8a8d\n        if 'required' in schema:\n            for field in schema['required']:\n                if field not in data:\n                    print(f\"\u274c \u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u4e0d\u8db3: {field}\")\n                    return False\n\n        print(\"\u2705 \u30b9\u30ad\u30fc\u30de\u691c\u8a3c\u306b\u5408\u683c\u3057\u307e\u3057\u305f\")\n        return True\n    except Exception as e:\n        print(f\"\u274c \u30b9\u30ad\u30fc\u30de\u691c\u8a3c\u30a8\u30e9\u30fc: {e}\")\n        return False\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#4-rdetoolkit","title":"4. RDEToolKit\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b","text":""},{"location":"usage/structured_process/errorhandling/#structurederror","title":"StructuredError\u306e\u4f7f\u7528","text":"\u69cb\u9020\u5316\u30a8\u30e9\u30fc\u306e\u5b9f\u88c5<pre><code>from rdetoolkit.exceptions import StructuredError\n\ndef dataset_with_error_handling(srcpaths, resource_paths):\n    try:\n        # \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u51e6\u7406\n        config = read_config_file(\"config.json\")\n    except FileNotFoundError as e:\n        # RDE\u7528\u306e\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u8a2d\u5b9a\n        raise StructuredError(\n            \"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\", \n            ecode=3, \n            eobj=e\n        ) from e\n    except json.JSONDecodeError as e:\n        raise StructuredError(\n            \"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u5f62\u5f0f\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\", \n            ecode=4, \n            eobj=e\n        ) from e\n\n    # \u6b63\u5e38\u51e6\u7406\n    return process_data(config)\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#_8","title":"\u30a8\u30e9\u30fc\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u306e\u4f7f\u7528","text":"\u30a8\u30e9\u30fc\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc<pre><code>from rdetoolkit.errors import catch_exception_with_message\n\n@catch_exception_with_message(\n    error_message=\"\u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\", \n    error_code=100, \n    verbose=False\n)\ndef dataset_with_decorator(srcpaths, resource_paths):\n    # \u51e6\u7406\u30ed\u30b8\u30c3\u30af\n    return process_data()\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#5","title":"5. \u30ed\u30b0\u3092\u6d3b\u7528\u3057\u305f\u30c7\u30d0\u30c3\u30b0","text":""},{"location":"usage/structured_process/errorhandling/#_9","title":"\u8a73\u7d30\u30ed\u30b0\u306e\u8a2d\u5b9a","text":"\u30ed\u30b0\u8a2d\u5b9a<pre><code>import logging\n\ndef setup_detailed_logging():\n    logging.basicConfig(\n        level=logging.DEBUG,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler('debug.log'),\n            logging.StreamHandler()\n        ]\n    )\n\n    logger = logging.getLogger(__name__)\n    return logger\n\ndef debug_processing(srcpaths, resource_paths):\n    logger = setup_detailed_logging()\n\n    logger.info(\"\u69cb\u9020\u5316\u51e6\u7406\u3092\u958b\u59cb\u3057\u307e\u3059\")\n    logger.debug(f\"\u5165\u529b\u30d1\u30b9: {srcpaths}\")\n    logger.debug(f\"\u51fa\u529b\u30d1\u30b9: {resource_paths}\")\n\n    try:\n        # \u51e6\u7406\u5b9f\u884c\n        result = your_processing_logic()\n        logger.info(\"\u51e6\u7406\u304c\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u307e\u3057\u305f\")\n        return result\n    except Exception as e:\n        logger.error(f\"\u51e6\u7406\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f: {e}\")\n        logger.debug(\"\u8a73\u7d30\u306a\u30c8\u30ec\u30fc\u30b9\u30d0\u30c3\u30af:\", exc_info=True)\n        raise\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#_10","title":"\u7d50\u679c\u306e\u78ba\u8a8d","text":"<p>\u30a8\u30e9\u30fc\u89e3\u6c7a\u5f8c\u306f\u4ee5\u4e0b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p>"},{"location":"usage/structured_process/errorhandling/#jobfailed","title":"job.failed\u30d5\u30a1\u30a4\u30eb\u306e\u78ba\u8a8d","text":"\u30a8\u30e9\u30fc\u30d5\u30a1\u30a4\u30eb\u78ba\u8a8d<pre><code>def check_error_file():\n    error_file = \"job.failed\"\n    if os.path.exists(error_file):\n        with open(error_file, 'r') as f:\n            content = f.read()\n        print(f\"\u30a8\u30e9\u30fc\u60c5\u5831:\\n{content}\")\n        return False\n    else:\n        print(\"\u2705 \u30a8\u30e9\u30fc\u30d5\u30a1\u30a4\u30eb\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\uff08\u6b63\u5e38\u7d42\u4e86\uff09\")\n        return True\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#_11","title":"\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u78ba\u8a8d","text":"\u30ed\u30b0\u78ba\u8a8d\u30b3\u30de\u30f3\u30c9<pre><code># \u6700\u65b0\u306e\u30ed\u30b0\u30a8\u30f3\u30c8\u30ea\u3092\u78ba\u8a8d\ntail -n 20 data/logs/rdesys.log\n\n# \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u691c\u7d22\ngrep -i \"error\" data/logs/rdesys.log\n\n# \u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u691c\u7d22\ngrep -i \"warning\" data/logs/rdesys.log\n</code></pre>"},{"location":"usage/structured_process/errorhandling/#_12","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8","text":""},{"location":"usage/structured_process/errorhandling/#_13","title":"\u5b9f\u884c\u524d\u30c1\u30a7\u30c3\u30af","text":"<ul> <li>[ ] \u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u304c\u3059\u3079\u3066\u5b58\u5728\u3059\u308b</li> <li>[ ] \u30d5\u30a1\u30a4\u30eb\u306e\u6a29\u9650\u304c\u9069\u5207\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b</li> <li>[ ] \u5fc5\u8981\u306aPython\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b</li> <li>[ ] \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u5f62\u5f0f\u304c\u6b63\u3057\u3044</li> <li>[ ] \u5165\u529b\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u304c\u671f\u5f85\u3055\u308c\u308b\u5f62\u5f0f\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b</li> </ul>"},{"location":"usage/structured_process/errorhandling/#_14","title":"\u30a8\u30e9\u30fc\u767a\u751f\u6642\u30c1\u30a7\u30c3\u30af","text":"<ul> <li>[ ] \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a73\u7d30\u306b\u8aad\u3080</li> <li>[ ] job.failed\u30d5\u30a1\u30a4\u30eb\u3092\u78ba\u8a8d\u3059\u308b</li> <li>[ ] \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u78ba\u8a8d\u3059\u308b</li> <li>[ ] \u5165\u529b\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3059\u308b</li> <li>[ ] \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3059\u308b</li> <li>[ ] \u30c7\u30a3\u30b9\u30af\u5bb9\u91cf\u304c\u5341\u5206\u306b\u3042\u308b</li> </ul>"},{"location":"usage/structured_process/errorhandling/#_15","title":"\u89e3\u6c7a\u5f8c\u30c1\u30a7\u30c3\u30af","text":"<ul> <li>[ ] \u540c\u3058\u30a8\u30e9\u30fc\u304c\u518d\u767a\u3057\u306a\u3044\u304b\u78ba\u8a8d</li> <li>[ ] \u4ed6\u306e\u6a5f\u80fd\u306b\u5f71\u97ff\u304c\u306a\u3044\u304b\u78ba\u8a8d</li> <li>[ ] \u30ed\u30b0\u306b\u9069\u5207\u306a\u60c5\u5831\u304c\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d</li> <li>[ ] job.failed\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d</li> </ul>"},{"location":"usage/structured_process/errorhandling/#_16","title":"\u95a2\u9023\u60c5\u5831","text":"<p>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u3055\u3089\u306b\u5b66\u3076\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u51e6\u7406\u30d5\u30a7\u30fc\u30ba\u3092\u7406\u89e3\u3059\u308b</li> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u8a2d\u5b9a\u95a2\u9023\u30a8\u30e9\u30fc\u306e\u5bfe\u51e6\u6cd5\u3092\u5b66\u3076</li> <li>\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3067\u30c7\u30fc\u30bf\u691c\u8a3c\u30a8\u30e9\u30fc\u306e\u5bfe\u51e6\u6cd5\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/structured_process/feature_description/","title":"\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u8aac\u660e\u6b04\u3078\u306e\u81ea\u52d5\u8ee2\u8a18\u3068\u306f","text":""},{"location":"usage/structured_process/feature_description/#_2","title":"\u76ee\u7684","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u306b\u304a\u3051\u308b\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u8aac\u660e\u6b04\u3078\u306e\u81ea\u52d5\u8ee2\u8a18\u6a5f\u80fd\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u30e1\u30bf\u30c7\u30fc\u30bf\u9805\u76ee\u3092\u81ea\u52d5\u7684\u306b\u8aac\u660e\u6b04\u306b\u8868\u793a\u3059\u308b\u4ed5\u7d44\u307f\u3068\u8a2d\u5b9a\u65b9\u6cd5\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/feature_description/#_3","title":"\u8ab2\u984c\u3068\u80cc\u666f","text":"<p>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u7ba1\u7406\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8ab2\u984c\u304c\u3042\u308a\u307e\u3057\u305f\uff1a</p> <ul> <li>\u8aac\u660e\u6587\u306e\u624b\u52d5\u4f5c\u6210: \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3054\u3068\u306b\u8aac\u660e\u6587\u3092\u624b\u52d5\u3067\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f</li> <li>\u60c5\u5831\u306e\u4e00\u8cab\u6027: \u91cd\u8981\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u60c5\u5831\u304c\u8aac\u660e\u6b04\u306b\u53cd\u6620\u3055\u308c\u306a\u3044</li> <li>\u4f5c\u696d\u52b9\u7387: \u540c\u3058\u60c5\u5831\u3092\u8907\u6570\u7b87\u6240\u306b\u8a18\u5165\u3059\u308b\u91cd\u8907\u4f5c\u696d</li> <li>\u53ef\u8996\u6027: \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6982\u8981\u3092\u4e00\u76ee\u3067\u628a\u63e1\u3059\u308b\u3053\u3068\u304c\u56f0\u96e3</li> </ul> <p>\u3053\u308c\u3089\u306e\u8ab2\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001\u30e1\u30bf\u30c7\u30fc\u30bf\u304b\u3089\u306e\u81ea\u52d5\u8ee2\u8a18\u6a5f\u80fd\u304c\u958b\u767a\u3055\u308c\u307e\u3057\u305f\u3002</p>"},{"location":"usage/structured_process/feature_description/#_4","title":"\u4e3b\u8981\u30b3\u30f3\u30bb\u30d7\u30c8","text":""},{"location":"usage/structured_process/feature_description/#_5","title":"\u81ea\u52d5\u8ee2\u8a18\u306e\u4ed5\u7d44\u307f","text":"<pre><code>flowchart LR\n    A[metadata-def.json] --&gt; B[_feature\u8a2d\u5b9a]\n    C[metadata.json] --&gt; D[\u5b9f\u969b\u306e\u5024]\n    B --&gt; E[\u81ea\u52d5\u8ee2\u8a18\u51e6\u7406]\n    D --&gt; E\n    E --&gt; F[\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u8aac\u660e\u6b04]\n</code></pre>"},{"location":"usage/structured_process/feature_description/#_6","title":"\u8a2d\u5b9a\u53ef\u80fd\u306a\u9805\u76ee","text":"\u8a2d\u5b9a\u9805\u76ee \u8aac\u660e \u5fc5\u9808 <code>\"_feature\": true</code> \u8aac\u660e\u6b04\u306b\u8868\u793a\u3059\u308b\u304b\u306e\u8a2d\u5b9a \u25cb <code>\"name\"</code> \u8868\u793a\u540d\u306e\u5b9a\u7fa9\uff08\u65e5\u672c\u8a9e\u30fb\u82f1\u8a9e\uff09 \u25cb <code>\"unit\"</code> \u5358\u4f4d\u306e\u5b9a\u7fa9 -"},{"location":"usage/structured_process/feature_description/#_7","title":"\u8868\u793a\u30eb\u30fc\u30eb","text":"<ul> <li><code>_feature: true</code>\u304c\u8a2d\u5b9a\u3055\u308c\u305f\u9805\u76ee\u306e\u307f\u8868\u793a</li> <li>\u5024\u304c<code>null</code>\u3084\u7a7a\u6587\u5b57\u306e\u5834\u5408\u306f\u975e\u8868\u793a</li> <li>\u5b9a\u7fa9\u9806\u5e8f\u306b\u5f93\u3063\u3066\u8868\u793a</li> <li>\u5358\u4f4d\u304c\u3042\u308b\u5834\u5408\u306f\u62ec\u5f27\u5185\u306b\u8868\u793a</li> </ul>"},{"location":"usage/structured_process/feature_description/#_8","title":"\u8a2d\u5b9a\u65b9\u6cd5","text":""},{"location":"usage/structured_process/feature_description/#1-metadata-defjson","title":"1. metadata-def.json\u3067\u306e\u8a2d\u5b9a","text":"<p>\u8aac\u660e\u6b04\u306b\u8868\u793a\u3057\u305f\u3044\u9805\u76ee\u306b<code>\"_feature\": true</code>\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a</p> metadata-def.json<pre><code>{\n    \"length\": {\n        \"name\": {\n            \"ja\": \"\u9577\u3055\",\n            \"en\": \"length\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        },\n        \"unit\": \"nm\",\n        \"_feature\": true\n    },\n    \"weight\": {\n        \"name\": {\n            \"ja\": \"\u91cd\u3055\",\n            \"en\": \"weight\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        },\n        \"unit\": \"g\",\n        \"_feature\": true\n    },\n    \"height\": {\n        \"name\": {\n            \"ja\": \"\u9ad8\u3055\",\n            \"en\": \"height\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        },\n        \"unit\": \"nm\"\n    }\n}\n</code></pre>"},{"location":"usage/structured_process/feature_description/#2","title":"2. \u69cb\u9020\u5316\u51e6\u7406\u3067\u306e\u5024\u8a2d\u5b9a","text":"<p>\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\u3067\u30e1\u30bf\u30c7\u30fc\u30bf\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\uff1a</p> \u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u6e2c\u5b9a\u30c7\u30fc\u30bf\u306e\u51e6\u7406\n    measurement_data = process_measurement_data()\n\n    # \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u751f\u6210\n    metadata = {\n        \"length\": 100,\n        \"weight\": 250,\n        \"height\": 50  # _feature\u304cfalse\u306a\u306e\u3067\u8868\u793a\u3055\u308c\u306a\u3044\n    }\n\n    # metadata.json\u3068\u3057\u3066\u4fdd\u5b58\n    metadata_file = Path(resource_paths.meta) / \"metadata.json\"\n    with open(metadata_file, 'w', encoding='utf-8') as f:\n        json.dump(metadata, f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"usage/structured_process/feature_description/#3","title":"3. \u8868\u793a\u7d50\u679c\u306e\u78ba\u8a8d","text":"<p>\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u306e\u8aac\u660e\u6b04\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\uff1a</p> <pre><code>\u9577\u3055(nm):100\n\u91cd\u3055(g):250\n</code></pre>"},{"location":"usage/structured_process/feature_description/#_9","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u7528\u4f8b","text":""},{"location":"usage/structured_process/feature_description/#_10","title":"\u8907\u6570\u30c7\u30fc\u30bf\u578b\u306e\u8a2d\u5b9a","text":"\u591a\u69d8\u306a\u30c7\u30fc\u30bf\u578b\u306e\u8a2d\u5b9a\u4f8b<pre><code>{\n    \"experiment_id\": {\n        \"name\": {\n            \"ja\": \"\u5b9f\u9a13ID\",\n            \"en\": \"Experiment ID\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        },\n        \"_feature\": true\n    },\n    \"temperature\": {\n        \"name\": {\n            \"ja\": \"\u6e29\u5ea6\",\n            \"en\": \"Temperature\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        },\n        \"unit\": \"\u00b0C\",\n        \"_feature\": true\n    },\n    \"is_validated\": {\n        \"name\": {\n            \"ja\": \"\u691c\u8a3c\u6e08\u307f\",\n            \"en\": \"Validated\"\n        },\n        \"schema\": {\n            \"type\": \"boolean\"\n        },\n        \"_feature\": true\n    }\n}\n</code></pre>"},{"location":"usage/structured_process/feature_description/#_11","title":"\u6761\u4ef6\u4ed8\u304d\u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210","text":"\u6761\u4ef6\u4ed8\u304d\u30e1\u30bf\u30c7\u30fc\u30bf\u8a2d\u5b9a<pre><code>def generate_conditional_metadata(data):\n    metadata = {\n        \"experiment_id\": data.get(\"id\", \"\u672a\u8a2d\u5b9a\"),\n        \"temperature\": data.get(\"temp\", 25)\n    }\n\n    # \u6761\u4ef6\u306b\u5fdc\u3058\u3066\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\n    if data.get(\"validated\"):\n        metadata[\"is_validated\"] = True\n\n    return metadata\n</code></pre>"},{"location":"usage/structured_process/feature_description/#_12","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"usage/structured_process/feature_description/#_13","title":"\u8aac\u660e\u6b04\u306b\u8868\u793a\u3055\u308c\u306a\u3044\u5834\u5408","text":""},{"location":"usage/structured_process/feature_description/#_14","title":"\u8a2d\u5b9a\u78ba\u8a8d\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8","text":"\u8a2d\u5b9a\u78ba\u8a8d\u30b9\u30af\u30ea\u30d7\u30c8<pre><code>def check_feature_settings(metadata_def_path, metadata_path):\n    # metadata-def.json\u306e\u78ba\u8a8d\n    with open(metadata_def_path, 'r') as f:\n        schema = json.load(f)\n\n    # metadata.json\u306e\u78ba\u8a8d\n    with open(metadata_path, 'r') as f:\n        metadata = json.load(f)\n\n    # _feature\u8a2d\u5b9a\u306e\u78ba\u8a8d\n    for prop_name, prop_def in schema.items():\n        if prop_def.get(\"_feature\") is True:\n            if prop_name in metadata and metadata[prop_name] is not None:\n                print(f\"\u2705 {prop_name}: \u8868\u793a\u5bfe\u8c61\")\n            else:\n                print(f\"\u274c {prop_name}: \u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\")\n        else:\n            print(f\"\u26aa {prop_name}: \u8868\u793a\u5bfe\u8c61\u5916\")\n</code></pre>"},{"location":"usage/structured_process/feature_description/#_15","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5","text":"\u554f\u984c \u539f\u56e0 \u89e3\u6c7a\u65b9\u6cd5 \u9805\u76ee\u304c\u8868\u793a\u3055\u308c\u306a\u3044 <code>_feature: true</code>\u672a\u8a2d\u5b9a metadata-def.json\u306b\u8a2d\u5b9a\u3092\u8ffd\u52a0 \u5024\u304c\u7a7a\u767d\u3067\u8868\u793a\u3055\u308c\u308b metadata.json\u306b\u5024\u304c\u306a\u3044 \u69cb\u9020\u5316\u51e6\u7406\u3067\u5024\u3092\u8a2d\u5b9a \u5358\u4f4d\u304c\u8868\u793a\u3055\u308c\u306a\u3044 unit\u30d5\u30a3\u30fc\u30eb\u30c9\u672a\u8a2d\u5b9a metadata-def.json\u306bunit\u8ffd\u52a0"},{"location":"usage/structured_process/feature_description/#_16","title":"\u307e\u3068\u3081","text":"<p>\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u8aac\u660e\u6b04\u3078\u306e\u81ea\u52d5\u8ee2\u8a18\u6a5f\u80fd\u306e\u4e3b\u8981\u306a\u7279\u5fb4\uff1a</p> <ul> <li>\u81ea\u52d5\u5316: \u30e1\u30bf\u30c7\u30fc\u30bf\u304b\u3089\u8aac\u660e\u6b04\u3078\u306e\u81ea\u52d5\u8ee2\u8a18</li> <li>\u9078\u629e\u7684\u8868\u793a: \u91cd\u8981\u306a\u9805\u76ee\u306e\u307f\u3092\u9078\u629e\u3057\u3066\u8868\u793a</li> <li>\u591a\u8a00\u8a9e\u5bfe\u5fdc: \u65e5\u672c\u8a9e\u30fb\u82f1\u8a9e\u306e\u8868\u793a\u540d\u306b\u5bfe\u5fdc</li> <li>\u5358\u4f4d\u8868\u793a: \u6e2c\u5b9a\u5024\u306e\u5358\u4f4d\u3092\u81ea\u52d5\u8868\u793a</li> </ul>"},{"location":"usage/structured_process/feature_description/#_17","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u81ea\u52d5\u8ee2\u8a18\u6a5f\u80fd\u3092\u6d3b\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3067\u30b9\u30ad\u30fc\u30de\u8a2d\u8a08\u3092\u5b66\u3076</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3067\u51e6\u7406\u30d5\u30ed\u30fc\u3092\u7406\u89e3\u3059\u308b</li> <li>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u53d6\u5f97\u3067\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c\u65b9\u6cd5\u3092\u78ba\u8a8d\u3059\u308b</li> </ul>"},{"location":"usage/structured_process/rdepath/","title":"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5","text":""},{"location":"usage/structured_process/rdepath/#_2","title":"\u76ee\u7684","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u3092\u884c\u3046\u305f\u3081\u306b\u5fc5\u8981\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306e\u53d6\u5f97\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002<code>RdeInputDirPaths</code>\u3068<code>RdeOutputResourcePath</code>\u3092\u4f7f\u7528\u3057\u305f\u52b9\u7387\u7684\u306a\u30d1\u30b9\u7ba1\u7406\u3092\u5b66\u3079\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/rdepath/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>RDEToolKit\u306e\u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5\u306e\u7406\u89e3</li> <li>Python\u306e\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c\u306e\u57fa\u672c\u77e5\u8b58</li> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306e\u7406\u89e3</li> </ul>"},{"location":"usage/structured_process/rdepath/#_4","title":"\u624b\u9806","text":""},{"location":"usage/structured_process/rdepath/#1","title":"1. \u5165\u529b\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b","text":"<p><code>RdeInputDirPaths</code>\u3092\u4f7f\u7528\u3057\u3066\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30d1\u30b9\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\uff1a</p> \u5165\u529b\u30d1\u30b9\u306e\u53d6\u5f97<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u5165\u529b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    input_dir = srcpaths.inputdata\n    print(f\"\u5165\u529b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {input_dir}\")\n\n    # \u9001\u308a\u72b6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    invoice_dir = srcpaths.invoice\n    print(f\"\u9001\u308a\u72b6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {invoice_dir}\")\n\n    # \u30bf\u30b9\u30af\u30b5\u30dd\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    tasksupport_dir = srcpaths.tasksupport\n    print(f\"\u30bf\u30b9\u30af\u30b5\u30dd\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {tasksupport_dir}\")\n</code></pre>"},{"location":"usage/structured_process/rdepath/#2","title":"2. \u51fa\u529b\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b","text":"<p><code>RdeOutputResourcePath</code>\u3092\u4f7f\u7528\u3057\u3066\u51fa\u529b\u5148\u306e\u30d1\u30b9\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\uff1a</p> \u51fa\u529b\u30d1\u30b9\u306e\u53d6\u5f97<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u69cb\u9020\u5316\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    structured_dir = resource_paths.struct\n    print(f\"\u69cb\u9020\u5316\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {structured_dir}\")\n\n    # \u30e1\u30bf\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    meta_dir = resource_paths.meta\n    print(f\"\u30e1\u30bf\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {meta_dir}\")\n\n    # \u751f\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    raw_dir = resource_paths.raw\n    print(f\"\u751f\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {raw_dir}\")\n\n    # \u753b\u50cf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n    main_image_dir = resource_paths.main_image\n    other_image_dir = resource_paths.other_image\n    thumbnail_dir = resource_paths.thumbnail\n\n    print(f\"\u30e1\u30a4\u30f3\u753b\u50cf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {main_image_dir}\")\n    print(f\"\u305d\u306e\u4ed6\u753b\u50cf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {other_image_dir}\")\n    print(f\"\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea: {thumbnail_dir}\")\n</code></pre>"},{"location":"usage/structured_process/rdepath/#3","title":"3. \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080","text":"<p>\u53d6\u5f97\u3057\u305f\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\uff1a</p> \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f<pre><code>import os\nimport pandas as pd\nfrom pathlib import Path\n\ndef read_input_files(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\u3092\u53d6\u5f97\n    input_files = os.listdir(srcpaths.inputdata)\n    print(f\"\u5165\u529b\u30d5\u30a1\u30a4\u30eb: {input_files}\")\n\n    # CSV\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\n    for file in input_files:\n        if file.endswith('.csv'):\n            file_path = Path(srcpaths.inputdata) / file\n            df = pd.read_csv(file_path)\n            print(f\"\u8aad\u307f\u8fbc\u307f\u5b8c\u4e86 {file}: {df.shape}\")\n\n            # \u30c7\u30fc\u30bf\u51e6\u7406\n            processed_df = process_dataframe(df)\n\n            # \u69cb\u9020\u5316\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4fdd\u5b58\n            output_path = Path(resource_paths.struct) / f\"processed_{file}\"\n            processed_df.to_csv(output_path, index=False)\n</code></pre>"},{"location":"usage/structured_process/rdepath/#4","title":"4. \u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3059\u308b","text":"<p>\u51e6\u7406\u7d50\u679c\u3092\u9069\u5207\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3057\u307e\u3059\uff1a</p> \u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58<pre><code>import json\nfrom pathlib import Path\n\ndef save_processing_results(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u51e6\u7406\u7d50\u679c\u30c7\u30fc\u30bf\n    results = {\n        \"status\": \"completed\",\n        \"processed_files\": 5,\n        \"timestamp\": \"2023-01-01T12:00:00Z\"\n    }\n\n    # \u69cb\u9020\u5316\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4fdd\u5b58\n    structured_file = Path(resource_paths.struct) / \"results.json\"\n    with open(structured_file, 'w', encoding='utf-8') as f:\n        json.dump(results, f, indent=2, ensure_ascii=False)\n\n    # \u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4fdd\u5b58\n    metadata = {\n        \"processing_version\": \"1.0\",\n        \"input_file_count\": len(os.listdir(srcpaths.inputdata)),\n        \"processing_date\": \"2023-01-01\"\n    }\n\n    meta_file = Path(resource_paths.meta) / \"metadata.json\"\n    with open(meta_file, 'w', encoding='utf-8') as f:\n        json.dump(metadata, f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"usage/structured_process/rdepath/#_5","title":"\u7d50\u679c\u306e\u78ba\u8a8d","text":"<p>\u30d1\u30b9\u53d6\u5f97\u3068\u64cd\u4f5c\u304c\u6b63\u3057\u304f\u884c\u308f\u308c\u305f\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff1a</p>"},{"location":"usage/structured_process/rdepath/#_6","title":"\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c\u306e\u78ba\u8a8d","text":"\u64cd\u4f5c\u7d50\u679c\u78ba\u8a8d<pre><code>def verify_file_operations(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u6570\u306e\u78ba\u8a8d\n    input_count = len(os.listdir(srcpaths.inputdata))\n    print(f\"\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u6570: {input_count}\")\n\n    # \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u6570\u306e\u78ba\u8a8d\n    output_dirs = {\n        \"structured\": resource_paths.struct,\n        \"meta\": resource_paths.meta,\n        \"raw\": resource_paths.raw,\n        \"main_image\": resource_paths.main_image\n    }\n\n    for name, path in output_dirs.items():\n        if Path(path).exists():\n            file_count = len(os.listdir(path))\n            print(f\"{name}\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d5\u30a1\u30a4\u30eb\u6570: {file_count}\")\n        else:\n            print(f\"\u26a0\ufe0f {name}\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5b58\u5728\u3057\u307e\u305b\u3093\")\n</code></pre>"},{"location":"usage/structured_process/rdepath/#_7","title":"\u95a2\u9023\u60c5\u5831","text":"<p>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u306e\u53d6\u5f97\u306b\u3064\u3044\u3066\u3055\u3089\u306b\u5b66\u3076\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3067\u30d1\u30b9\u304c\u4f7f\u7528\u3055\u308c\u308b\u51e6\u7406\u30d5\u30ed\u30fc\u3092\u7406\u89e3\u3059\u308b</li> <li>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u4ed5\u69d8\u3067\u5404\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u5f79\u5272\u3092\u78ba\u8a8d\u3059\u308b</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u30d1\u30b9\u95a2\u9023\u30a8\u30e9\u30fc\u306e\u5bfe\u51e6\u6cd5\u3092\u5b66\u3076</li> </ul>"},{"location":"usage/structured_process/structured/","title":"\u69cb\u9020\u5316\u51e6\u7406\u3068\u306f","text":""},{"location":"usage/structured_process/structured/#_2","title":"\u76ee\u7684","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u306e\u57fa\u672c\u6982\u5ff5\u3068\u51e6\u7406\u30d5\u30ed\u30fc\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u306a\u305c\u69cb\u9020\u5316\u51e6\u7406\u304c\u5fc5\u8981\u306a\u306e\u304b\u3001\u3069\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3067\u52d5\u4f5c\u3059\u308b\u306e\u304b\u3092\u7406\u89e3\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"usage/structured_process/structured/#_3","title":"\u8ab2\u984c\u3068\u80cc\u666f","text":"<p>\u7814\u7a76\u30c7\u30fc\u30bf\u306e\u7ba1\u7406\u306b\u304a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8ab2\u984c\u304c\u3042\u308a\u307e\u3057\u305f\uff1a</p> <ul> <li>\u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u591a\u69d8\u6027: \u5b9f\u9a13\u88c5\u7f6e\u3084\u7814\u7a76\u5206\u91ce\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30c7\u30fc\u30bf\u5f62\u5f0f</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u4e0d\u7d71\u4e00: \u7814\u7a76\u8005\u3054\u3068\u306b\u7570\u306a\u308b\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u8a18\u8ff0\u65b9\u6cd5</li> <li>\u518d\u73fe\u6027\u306e\u78ba\u4fdd: \u30c7\u30fc\u30bf\u51e6\u7406\u624b\u9806\u306e\u6a19\u6e96\u5316\u3068\u8a18\u9332\u306e\u5fc5\u8981\u6027</li> <li>\u54c1\u8cea\u7ba1\u7406: \u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u3068\u59a5\u5f53\u6027\u306e\u691c\u8a3c</li> </ul> <p>\u3053\u308c\u3089\u306e\u8ab2\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001RDE\u69cb\u9020\u5316\u51e6\u7406\u3068\u3044\u3046\u6982\u5ff5\u304c\u751f\u307e\u308c\u307e\u3057\u305f\u3002</p>"},{"location":"usage/structured_process/structured/#_4","title":"\u4e3b\u8981\u30b3\u30f3\u30bb\u30d7\u30c8","text":""},{"location":"usage/structured_process/structured/#3","title":"3\u3064\u306e\u30d5\u30a7\u30fc\u30ba","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u306f\u3001\u4ee5\u4e0b\u306e3\u3064\u306e\u30d5\u30a7\u30fc\u30ba\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <pre><code>flowchart LR\n    A[\u521d\u671f\u5316\u30d5\u30a7\u30fc\u30ba] --&gt; B[\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u30d5\u30a7\u30fc\u30ba]\n    B --&gt; C[\u7d42\u4e86\u30d5\u30a7\u30fc\u30ba]\n\n    A1[\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210\u30d5\u30a1\u30a4\u30eb\u691c\u8a3c\u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f] --&gt; A\n    B1[\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u51e6\u7406\u30c7\u30fc\u30bf\u5909\u63db\u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210] --&gt; B\n    C1[\u51fa\u529b\u691c\u8a3c\u30ed\u30b0\u6700\u7d42\u5316\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7] --&gt; C\n</code></pre>"},{"location":"usage/structured_process/structured/#1","title":"1. \u521d\u671f\u5316\u30d5\u30a7\u30fc\u30ba","text":"<p>\u30b7\u30b9\u30c6\u30e0\u304c\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3059\u308b\u6e96\u5099\u6bb5\u968e\uff1a</p> <ul> <li>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306e\u4f5c\u6210: \u6a19\u6e96\u7684\u306a\u51fa\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u81ea\u52d5\u751f\u6210</li> <li>\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u691c\u8a3c: \u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3068\u6574\u5408\u6027\u3092\u30c1\u30a7\u30c3\u30af</li> <li>\u8a2d\u5b9a\u306e\u8aad\u307f\u8fbc\u307f: \u51e6\u7406\u30e2\u30fc\u30c9\u3068\u8a2d\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9069\u7528</li> <li>\u30ed\u30b0\u30b7\u30b9\u30c6\u30e0\u306e\u521d\u671f\u5316: \u51e6\u7406\u5c65\u6b74\u306e\u8a18\u9332\u3092\u958b\u59cb</li> </ul>"},{"location":"usage/structured_process/structured/#2","title":"2. \u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u30d5\u30a7\u30fc\u30ba","text":"<p>\u7814\u7a76\u8005\u304c\u5b9a\u7fa9\u3059\u308b\u6838\u5fc3\u7684\u306a\u51e6\u7406\u6bb5\u968e\uff1a</p> <ul> <li>\u30c7\u30fc\u30bf\u5909\u63db: \u751f\u30c7\u30fc\u30bf\u3092\u7814\u7a76\u76ee\u7684\u306b\u5fdc\u3058\u3066\u52a0\u5de5</li> <li>\u54c1\u8cea\u7ba1\u7406: \u30c7\u30fc\u30bf\u306e\u59a5\u5f53\u6027\u691c\u8a3c\u3068\u7570\u5e38\u5024\u691c\u51fa</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210: \u51e6\u7406\u7d50\u679c\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u8a18\u9332</li> <li>\u53ef\u8996\u5316: \u30b0\u30e9\u30d5\u3084\u56f3\u8868\u306e\u751f\u6210</li> </ul>"},{"location":"usage/structured_process/structured/#3_1","title":"3. \u7d42\u4e86\u30d5\u30a7\u30fc\u30ba","text":"<p>\u30b7\u30b9\u30c6\u30e0\u304c\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3059\u308b\u5b8c\u4e86\u6bb5\u968e\uff1a</p> <ul> <li>\u51fa\u529b\u691c\u8a3c: \u751f\u6210\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u6574\u5408\u6027\u78ba\u8a8d</li> <li>\u30ed\u30b0\u306e\u6700\u7d42\u5316: \u51e6\u7406\u7d50\u679c\u3068\u7d71\u8a08\u60c5\u5831\u306e\u8a18\u9332</li> <li>\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7: \u4e0d\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u306e\u524a\u9664</li> <li>\u5b9f\u884c\u7d50\u679c\u306e\u5831\u544a: \u6210\u529f\u30fb\u5931\u6557\u306e\u5224\u5b9a\u3068\u5831\u544a</li> </ul>"},{"location":"usage/structured_process/structured/#_5","title":"\u6a19\u6e96\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u6a19\u6e96\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>data/\n\u251c\u2500\u2500 inputdata/      # \u5165\u529b\u30c7\u30fc\u30bf\uff08\u7814\u7a76\u8005\u304c\u914d\u7f6e\uff09\n\u251c\u2500\u2500 invoice/        # \u9001\u308a\u72b6\u30c7\u30fc\u30bf\uff08\u30e1\u30bf\u30c7\u30fc\u30bf\uff09\n\u251c\u2500\u2500 tasksupport/    # \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u7fa4\n\u251c\u2500\u2500 raw/            # \u751f\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\n\u251c\u2500\u2500 structured/     # \u51e6\u7406\u6e08\u307f\u30c7\u30fc\u30bf\n\u251c\u2500\u2500 meta/           # \u30e1\u30bf\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\n\u251c\u2500\u2500 main_image/     # \u30e1\u30a4\u30f3\u8868\u793a\u753b\u50cf\n\u251c\u2500\u2500 other_image/    # \u305d\u306e\u4ed6\u306e\u753b\u50cf\n\u251c\u2500\u2500 thumbnail/      # \u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\n\u251c\u2500\u2500 logs/           # \u51e6\u7406\u30ed\u30b0\n\u2514\u2500\u2500 temp/           # \u4e00\u6642\u30d5\u30a1\u30a4\u30eb\n</code></pre>"},{"location":"usage/structured_process/structured/#_6","title":"\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc","text":"<pre><code>flowchart TD\n    A[\u751f\u30c7\u30fc\u30bf] --&gt; B[\u5165\u529b\u691c\u8a3c]\n    B --&gt; C[\u30ab\u30b9\u30bf\u30e0\u51e6\u7406]\n    C --&gt; D[\u54c1\u8cea\u7ba1\u7406]\n    D --&gt; E[\u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210]\n    E --&gt; F[\u51fa\u529b\u691c\u8a3c]\n    F --&gt; G[RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8]\n\n    H[\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb] --&gt; C\n    I[\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9] --&gt; B\n    I --&gt; F\n</code></pre>"},{"location":"usage/structured_process/structured/#_7","title":"\u51e6\u7406\u30e2\u30fc\u30c9","text":"<p>RDEToolKit\u306f\u3001\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u3068\u767b\u9332\u65b9\u6cd5\u306b\u5fdc\u3058\u30664\u3064\u306e\u51e6\u7406\u30e2\u30fc\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a</p> \u30e2\u30fc\u30c9 \u7528\u9014 \u7279\u5fb4 Invoice \u6a19\u6e96\u7684\u306a\u5358\u4e00\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u767b\u9332 \u6700\u3082\u57fa\u672c\u7684\u306a\u30e2\u30fc\u30c9 ExcelInvoice \u8907\u6570\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e00\u62ec\u767b\u9332 Excel\u30d5\u30a1\u30a4\u30eb\u306b\u3088\u308b\u52b9\u7387\u7684\u306a\u767b\u9332 MultiDataTile \u95a2\u9023\u30c7\u30fc\u30bf\u306e\u7d71\u5408\u7ba1\u7406 \u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u3092\u4e00\u3064\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u7ba1\u7406 RDEFormat \u65e2\u5b58\u30c7\u30fc\u30bf\u306e\u79fb\u884c\u30fb\u30e2\u30c3\u30af\u4f5c\u6210 \u4e8b\u524d\u306b\u69cb\u9020\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u767b\u9332"},{"location":"usage/structured_process/structured/#_8","title":"\u5229\u70b9\u3068\u52b9\u679c","text":""},{"location":"usage/structured_process/structured/#_9","title":"\u7814\u7a76\u8005\u306b\u3068\u3063\u3066\u306e\u5229\u70b9","text":"<ul> <li>\u6a19\u6e96\u5316: \u7d71\u4e00\u3055\u308c\u305f\u30c7\u30fc\u30bf\u5f62\u5f0f\u3068\u30e1\u30bf\u30c7\u30fc\u30bf</li> <li>\u518d\u73fe\u6027: \u51e6\u7406\u624b\u9806\u306e\u8a18\u9332\u3068\u518d\u5b9f\u884c</li> <li>\u52b9\u7387\u6027: \u81ea\u52d5\u5316\u306b\u3088\u308b\u4f5c\u696d\u6642\u9593\u306e\u77ed\u7e2e</li> <li>\u54c1\u8cea\u5411\u4e0a: \u691c\u8a3c\u6a5f\u80fd\u306b\u3088\u308b\u4fe1\u983c\u6027\u306e\u78ba\u4fdd</li> </ul>"},{"location":"usage/structured_process/structured/#_10","title":"\u7d44\u7e54\u306b\u3068\u3063\u3066\u306e\u5229\u70b9","text":"<ul> <li>\u30c7\u30fc\u30bf\u7ba1\u7406: \u7d71\u4e00\u3055\u308c\u305f\u30c7\u30fc\u30bf\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0</li> <li>\u691c\u7d22\u6027: \u69cb\u9020\u5316\u3055\u308c\u305f\u30e1\u30bf\u30c7\u30fc\u30bf\u306b\u3088\u308b\u9ad8\u5ea6\u306a\u691c\u7d22</li> <li>\u5171\u6709: \u6a19\u6e96\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u52b9\u7387\u7684\u306a\u5171\u6709</li> <li>\u9577\u671f\u4fdd\u5b58: \u6301\u7d9a\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u4fdd\u5b58\u5f62\u5f0f</li> </ul>"},{"location":"usage/structured_process/structured/#_11","title":"\u307e\u3068\u3081","text":"<p>RDE\u69cb\u9020\u5316\u51e6\u7406\u306f\u3001\u7814\u7a76\u30c7\u30fc\u30bf\u306e\u54c1\u8cea\u3068\u518d\u73fe\u6027\u3092\u78ba\u4fdd\u3059\u308b\u305f\u3081\u306e\u5305\u62ec\u7684\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\u4e3b\u8981\u306a\u7279\u5fb4\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ul> <li>3\u6bb5\u968e\u306e\u51e6\u7406\u30d5\u30ed\u30fc: \u521d\u671f\u5316\u3001\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u3001\u7d42\u4e86\u306e\u660e\u78ba\u306a\u5206\u96e2</li> <li>\u6a19\u6e96\u5316\u3055\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020: \u4e00\u8cab\u3057\u305f\u30c7\u30fc\u30bf\u7d44\u7e54\u5316</li> <li>\u67d4\u8edf\u306a\u51e6\u7406\u30e2\u30fc\u30c9: \u69d8\u3005\u306a\u7814\u7a76\u30cb\u30fc\u30ba\u306b\u5bfe\u5fdc</li> <li>\u81ea\u52d5\u5316\u3068\u691c\u8a3c: \u4eba\u7684\u30a8\u30e9\u30fc\u306e\u524a\u6e1b\u3068\u54c1\u8cea\u4fdd\u8a3c</li> </ul>"},{"location":"usage/structured_process/structured/#_12","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u306e\u6982\u5ff5\u3092\u7406\u89e3\u3057\u305f\u3089\u3001\u4ee5\u4e0b\u306e\u5b9f\u8df5\u7684\u306a\u30ac\u30a4\u30c9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u3067\u5b9f\u969b\u306b\u69cb\u9020\u5316\u51e6\u7406\u3092\u4f53\u9a13\u3059\u308b</li> <li>\u51e6\u7406\u30e2\u30fc\u30c9\u3067\u5404\u30e2\u30fc\u30c9\u306e\u8a73\u7d30\u3092\u5b66\u3076</li> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5\u3092\u78ba\u8a8d\u3059\u308b</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u5b66\u3076</li> </ul>"},{"location":"user-guide/config/","title":"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5","text":""},{"location":"user-guide/config/#_2","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001RDEToolKit\u306e\u52d5\u4f5c\u3092\u5236\u5fa1\u3059\u308b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\u3068\u4f7f\u7528\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u5207\u306b\u69cb\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u51e6\u7406\u30e2\u30fc\u30c9\u306e\u9078\u629e\u3001\u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\u306e\u5236\u5fa1\u3001\u30ab\u30b9\u30bf\u30e0\u8a2d\u5b9a\u306e\u5b9a\u7fa9\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/config/#_3","title":"\u524d\u63d0\u6761\u4ef6","text":"<p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u7528\u3059\u308b\u524d\u306b\u3001\u4ee5\u4e0b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <ul> <li>RDEToolKit\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u3067\u3042\u308b\u3053\u3068</li> <li>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f5c\u6210\u6e08\u307f\u3067\u3042\u308b\u3053\u3068</li> <li>\u57fa\u672c\u7684\u306aYAML\u307e\u305f\u306fTOML\u5f62\u5f0f\u306e\u77e5\u8b58</li> </ul>"},{"location":"user-guide/config/#_4","title":"\u624b\u9806","text":""},{"location":"user-guide/config/#1","title":"1. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b","text":"<p>RDEToolKit\u306f\u3001\u4ee5\u4e0b\u306e\u5834\u6240\u3068\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u81ea\u52d5\u691c\u7d22\u3057\u307e\u3059\uff1a</p>"},{"location":"user-guide/config/#_5","title":"\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u5834\u6240","text":"\u30d5\u30a1\u30a4\u30eb\u540d \u914d\u7f6e\u5834\u6240 \u5f62\u5f0f <code>rdeconfig.yaml</code> <code>tasksupport/</code> \u307e\u305f\u306f \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u76f4\u4e0b YAML <code>rdeconfig.yml</code> <code>tasksupport/</code> \u307e\u305f\u306f \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u76f4\u4e0b YAML <code>pyproject.toml</code> \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u76f4\u4e0b TOML <p>\u63a8\u5968\u914d\u7f6e</p> <p>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u56fa\u6709\u306e\u8a2d\u5b9a\u306f <code>tasksupport/rdeconfig.yaml</code> \u306b\u3001\u958b\u767a\u74b0\u5883\u5168\u4f53\u306e\u8a2d\u5b9a\u306f <code>pyproject.toml</code> \u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/config/#2","title":"2. \u57fa\u672c\u8a2d\u5b9a\u3092\u5b9a\u7fa9\u3059\u308b","text":""},{"location":"user-guide/config/#_6","title":"\u51e6\u7406\u30e2\u30fc\u30c9\u306e\u8a2d\u5b9a","text":"YAML\u5f62\u5f0fTOML\u5f62\u5f0f tasksupport/rdeconfig.yaml<pre><code>system:\n  # \u62e1\u5f35\u30e2\u30fc\u30c9\u306e\u6307\u5b9a\n  extended_mode: 'MultiDataTile'  # \u307e\u305f\u306f 'rdeformat'\n\n  # \u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\u8a2d\u5b9a\n  save_raw: true\n  save_nonshared_raw: true\n\n  # \u6a5f\u80fd\u306e\u6709\u52b9/\u7121\u52b9\n  magic_variable: true\n  save_thumbnail_image: true\n</code></pre> pyproject.toml<pre><code>[tool.rdetoolkit.system]\nextended_mode = 'MultiDataTile'\nsave_raw = true\nsave_nonshared_raw = true\nmagic_variable = true\nsave_thumbnail_image = true\n</code></pre>"},{"location":"user-guide/config/#_7","title":"\u8a2d\u5b9a\u9805\u76ee\u306e\u8a73\u7d30","text":"\u8a2d\u5b9a\u9805\u76ee \u578b \u30c7\u30d5\u30a9\u30eb\u30c8\u5024 \u8aac\u660e <code>extended_mode</code> string \u306a\u3057 \u62e1\u5f35\u30e2\u30fc\u30c9\uff08'MultiDataTile' \u307e\u305f\u306f 'rdeformat'\uff09 <code>save_raw</code> boolean false <code>raw</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u306e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58 <code>save_nonshared_raw</code> boolean true <code>nonshared_raw</code>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3078\u306e\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58 <code>magic_variable</code> boolean false Magic Variable\u6a5f\u80fd\u306e\u6709\u52b9\u5316 <code>save_thumbnail_image</code> boolean false \u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u306e\u81ea\u52d5\u751f\u6210"},{"location":"user-guide/config/#3","title":"3. \u51e6\u7406\u30e2\u30fc\u30c9\u5225\u306e\u8a2d\u5b9a","text":""},{"location":"user-guide/config/#invoice","title":"invoice\u30e2\u30fc\u30c9\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09","text":"tasksupport/rdeconfig.yaml<pre><code>system:\n  magic_variable: true\n  save_thumbnail_image: true\n</code></pre>"},{"location":"user-guide/config/#_8","title":"\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb\u30e2\u30fc\u30c9","text":"tasksupport/rdeconfig.yaml<pre><code>system:\n  extended_mode: 'MultiDataTile'\n\nmultidata_tile:\n  ignore_errors: true  # \u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\u7d99\u7d9a\n</code></pre>"},{"location":"user-guide/config/#rde","title":"RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9","text":"tasksupport/rdeconfig.yaml<pre><code>system:\n  extended_mode: 'rdeformat'\n  save_raw: false\n  save_nonshared_raw: false\n</code></pre>"},{"location":"user-guide/config/#4","title":"4. \u30ab\u30b9\u30bf\u30e0\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b","text":"<p>\u72ec\u81ea\u306e\u8a2d\u5b9a\u5024\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u69cb\u9020\u5316\u51e6\u7406\u5185\u3067\u53c2\u7167\u3067\u304d\u307e\u3059\uff1a</p> YAML\u5f62\u5f0fTOML\u5f62\u5f0f tasksupport/rdeconfig.yaml<pre><code>custom:\n  # \u753b\u50cf\u51e6\u7406\u8a2d\u5b9a\n  thumbnail_image_name: \"inputdata/sample_image.png\"\n  image_quality: 85\n  max_image_size: 1920\n\n  # \u30c7\u30fc\u30bf\u51e6\u7406\u8a2d\u5b9a\n  analysis_parameters:\n    threshold: 0.5\n    iterations: 100\n\n  # \u51fa\u529b\u8a2d\u5b9a\n  output_format: \"csv\"\n  include_metadata: true\n</code></pre> pyproject.toml<pre><code>[tool.rdetoolkit.custom]\nthumbnail_image_name = \"inputdata/sample_image.png\"\nimage_quality = 85\nmax_image_size = 1920\noutput_format = \"csv\"\ninclude_metadata = true\n\n[tool.rdetoolkit.custom.analysis_parameters]\nthreshold = 0.5\niterations = 100\n</code></pre>"},{"location":"user-guide/config/#5","title":"5. \u69cb\u9020\u5316\u51e6\u7406\u5185\u3067\u8a2d\u5b9a\u3092\u53c2\u7167\u3059\u308b","text":"<p>\u4f5c\u6210\u3057\u305f\u8a2d\u5b9a\u5024\u3092\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\u5185\u3067\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\uff1a</p> modules/process.py<pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u30b7\u30b9\u30c6\u30e0\u8a2d\u5b9a\u306e\u53c2\u7167\n    extended_mode = srcpaths.config.system.extended_mode\n    save_raw = srcpaths.config.system.save_raw\n    magic_variable = srcpaths.config.system.magic_variable\n\n    print(f\"\u51e6\u7406\u30e2\u30fc\u30c9: {extended_mode}\")\n    print(f\"Raw\u4fdd\u5b58: {save_raw}\")\n    print(f\"Magic Variable: {magic_variable}\")\n\n    # \u30ab\u30b9\u30bf\u30e0\u8a2d\u5b9a\u306e\u53c2\u7167\n    if hasattr(srcpaths.config, 'custom'):\n        custom_config = srcpaths.config.custom\n\n        # \u753b\u50cf\u8a2d\u5b9a\u306e\u53d6\u5f97\n        thumbnail_name = custom_config.get('thumbnail_image_name')\n        image_quality = custom_config.get('image_quality', 75)\n\n        # \u89e3\u6790\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u5f97\n        analysis_params = custom_config.get('analysis_parameters', {})\n        threshold = analysis_params.get('threshold', 0.5)\n\n        print(f\"\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf: {thumbnail_name}\")\n        print(f\"\u753b\u50cf\u54c1\u8cea: {image_quality}\")\n        print(f\"\u95be\u5024: {threshold}\")\n</code></pre>"},{"location":"user-guide/config/#_9","title":"\u7d50\u679c\u306e\u78ba\u8a8d","text":""},{"location":"user-guide/config/#_10","title":"\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u78ba\u8a8d","text":"<p>\u8a2d\u5b9a\u304c\u6b63\u3057\u304f\u8aad\u307f\u8fbc\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u65b9\u6cd5\uff1a</p> test_config.py<pre><code>from rdetoolkit.config import parse_config_file\n\n# \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u30c6\u30b9\u30c8\nconfig = parse_config_file()\n\nprint(\"=== \u8a2d\u5b9a\u78ba\u8a8d ===\")\nprint(f\"\u62e1\u5f35\u30e2\u30fc\u30c9: {config.system.extended_mode}\")\nprint(f\"Raw\u4fdd\u5b58: {config.system.save_raw}\")\nprint(f\"Magic Variable: {config.system.magic_variable}\")\n\nif hasattr(config, 'custom'):\n    print(f\"\u30ab\u30b9\u30bf\u30e0\u8a2d\u5b9a: {config.custom}\")\n</code></pre>"},{"location":"user-guide/config/#_11","title":"\u8a2d\u5b9a\u306e\u512a\u5148\u9806\u4f4d","text":"<p>\u8907\u6570\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306e\u512a\u5148\u9806\u4f4d\uff1a</p> <ol> <li><code>tasksupport/rdeconfig.yaml</code></li> <li><code>tasksupport/rdeconfig.yml</code></li> <li><code>./rdeconfig.yaml</code></li> <li><code>./rdeconfig.yml</code></li> <li><code>./pyproject.toml</code></li> </ol> <p>\u8a2d\u5b9a\u306e\u7af6\u5408</p> <p>\u540c\u3058\u8a2d\u5b9a\u9805\u76ee\u304c\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u512a\u5148\u9806\u4f4d\u306e\u9ad8\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/config/#_12","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"user-guide/config/#_13","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5","text":""},{"location":"user-guide/config/#yaml","title":"YAML\u69cb\u6587\u30a8\u30e9\u30fc","text":"<pre><code>ERROR: YAML parsing failed\n</code></pre> <p>\u89e3\u6c7a\u65b9\u6cd5: YAML\u69cb\u6587\u3092\u78ba\u8a8d\u3059\u308b <pre><code># \u6b63\u3057\u3044\u4f8b\nsystem:\n  extended_mode: 'MultiDataTile'\n  save_raw: true\n\n# \u9593\u9055\u3063\u305f\u4f8b\uff08\u30a4\u30f3\u30c7\u30f3\u30c8\u30a8\u30e9\u30fc\uff09\nsystem:\nextended_mode: 'MultiDataTile'\nsave_raw: true\n</code></pre></p>"},{"location":"user-guide/config/#_14","title":"\u8a2d\u5b9a\u5024\u304c\u53cd\u6620\u3055\u308c\u306a\u3044","text":"<p>\u78ba\u8a8d\u4e8b\u9805: 1. \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30b9\u30da\u30eb\u30df\u30b9 2. \u30d5\u30a1\u30a4\u30eb\u306e\u914d\u7f6e\u5834\u6240 3. YAML/TOML\u306e\u69cb\u6587\u30a8\u30e9\u30fc 4. \u8a2d\u5b9a\u9805\u76ee\u540d\u306e\u9593\u9055\u3044</p>"},{"location":"user-guide/config/#_15","title":"\u30ab\u30b9\u30bf\u30e0\u8a2d\u5b9a\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044","text":"safe_config_access.py<pre><code>def safe_get_custom_config(config, key, default=None):\n    \"\"\"\u5b89\u5168\u306b\u30ab\u30b9\u30bf\u30e0\u8a2d\u5b9a\u3092\u53d6\u5f97\u3059\u308b\"\"\"\n    if hasattr(config, 'custom') and key in config.custom:\n        return config.custom[key]\n    return default\n\n# \u4f7f\u7528\u4f8b\nthumbnail_name = safe_get_custom_config(\n    srcpaths.config, \n    'thumbnail_image_name', \n    'default_thumbnail.png'\n)\n</code></pre>"},{"location":"user-guide/config/#_16","title":"\u95a2\u9023\u60c5\u5831","text":"<p>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8a73\u7d30\u306a\u4ed5\u69d8\u306b\u3064\u3044\u3066\u306f\uff1a</p> <ul> <li>Magic Variables - \u52d5\u7684\u30e1\u30bf\u30c7\u30fc\u30bf\u7f6e\u63db\u6a5f\u80fd\u306e\u8a73\u7d30</li> <li>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 - \u8a2d\u5b9a\u95a2\u9023\u306eAPI\u4ed5\u69d8</li> </ul>"},{"location":"user-guide/","title":"\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9","text":""},{"location":"user-guide/#_2","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001RDEToolKit\u306e\u8a73\u7d30\u306a\u4f7f\u7528\u65b9\u6cd5\u3068\u9ad8\u5ea6\u306a\u6a5f\u80fd\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u57fa\u672c\u7684\u306a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u521d\u56de\u5b9f\u884c\u3092\u5b8c\u4e86\u3057\u305f\u5f8c\u306b\u3001\u3088\u308a\u52b9\u679c\u7684\u306bRDEToolKit\u3092\u6d3b\u7528\u3059\u308b\u305f\u3081\u306e\u60c5\u5831\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/#_3","title":"\u4e3b\u8981\u30c8\u30d4\u30c3\u30af","text":""},{"location":"user-guide/#_4","title":"\u57fa\u672c\u6982\u5ff5","text":"<ul> <li>\u69cb\u9020\u5316\u51e6\u7406\u3068\u306f - RDEToolKit\u306e\u4e2d\u6838\u3068\u306a\u308b\u6982\u5ff5\u3068\u51e6\u7406\u30d5\u30ed\u30fc</li> <li>\u51e6\u7406\u30e2\u30fc\u30c9 - 4\u3064\u306e\u51e6\u7406\u30e2\u30fc\u30c9\u306e\u7279\u5fb4\u3068\u4f7f\u3044\u5206\u3051</li> <li>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020 - RDE\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u6a19\u6e96\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u69cb\u6210</li> </ul>"},{"location":"user-guide/#_5","title":"\u8a2d\u5b9a\u3068\u30ab\u30b9\u30bf\u30de\u30a4\u30ba","text":"<ul> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb - rdeconfig.yaml\u3068pyproject.toml\u306b\u3088\u308b\u52d5\u4f5c\u5236\u5fa1</li> <li>Magic Variable - \u52d5\u7684\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u7f6e\u63db\u6a5f\u80fd</li> </ul>"},{"location":"user-guide/#_6","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u7528\u65b9\u6cd5","text":"<ul> <li>CLI\u30c4\u30fc\u30eb - \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u64cd\u4f5c\u306e\u8a73\u7d30</li> <li>\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 - \u30c7\u30fc\u30bf\u54c1\u8cea\u306e\u691c\u8a3c\u65b9\u6cd5</li> </ul>"},{"location":"user-guide/#_7","title":"\u9ad8\u5ea6\u306a\u6a5f\u80fd","text":"<ul> <li>Docker\u4f7f\u7528\u65b9\u6cd5 - Docker\u3092\u4f7f\u7528\u3057\u305f\u74b0\u5883\u69cb\u7bc9\u3068\u5b9f\u884c</li> </ul>"},{"location":"user-guide/#_8","title":"\u4f7f\u7528\u65b9\u6cd5\u306e\u6d41\u308c","text":"<ol> <li>\u6982\u5ff5\u7406\u89e3: \u69cb\u9020\u5316\u51e6\u7406\u3068\u306f\u3067\u57fa\u672c\u6982\u5ff5\u3092\u5b66\u7fd2</li> <li>\u74b0\u5883\u8a2d\u5b9a: \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u52d5\u4f5c\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba</li> <li>\u5b9f\u8df5\u5fdc\u7528: \u5177\u4f53\u7684\u306a\u7528\u9014\u306b\u5fdc\u3058\u305f\u6a5f\u80fd\u3092\u6d3b\u7528</li> <li>\u9ad8\u5ea6\u306a\u6d3b\u7528: \u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u3084\u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u6a5f\u80fd\u62e1\u5f35</li> </ol>"},{"location":"user-guide/#_9","title":"\u30b5\u30dd\u30fc\u30c8\u30ea\u30bd\u30fc\u30b9","text":""},{"location":"user-guide/#_10","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<ul> <li>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 - \u5168\u6a5f\u80fd\u306e\u6280\u8853\u4ed5\u69d8</li> <li>\u958b\u767a\u8005\u30ac\u30a4\u30c9 - \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u65b9\u6cd5</li> </ul>"},{"location":"user-guide/#_11","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3","text":"<ul> <li>GitHub Issues - \u30d0\u30b0\u5831\u544a\u3068\u6a5f\u80fd\u8981\u671b</li> <li>GitHub Discussions - \u8cea\u554f\u3068\u60c5\u5831\u4ea4\u63db</li> </ul> <p>\u5b66\u7fd2\u306e\u9032\u3081\u65b9</p> <p>RDEToolKit\u3092\u52b9\u679c\u7684\u306b\u5b66\u7fd2\u3059\u308b\u306b\u306f\u3001\u307e\u305a\u69cb\u9020\u5316\u51e6\u7406\u3068\u306f\u3067\u57fa\u672c\u6982\u5ff5\u3092\u7406\u89e3\u3057\u3001\u305d\u306e\u5f8c\u306b\u5177\u4f53\u7684\u306a\u7528\u9014\u306b\u5fdc\u3058\u305f\u30c8\u30d4\u30c3\u30af\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/#_12","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u521d\u3081\u3066\u306e\u65b9: \u69cb\u9020\u5316\u51e6\u7406\u3068\u306f\u304b\u3089\u958b\u59cb</li> <li>\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u305f\u3044\u65b9: \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167</li> <li>\u9ad8\u5ea6\u306a\u6a5f\u80fd\u3092\u4f7f\u3044\u305f\u3044\u65b9: Docker\u4f7f\u7528\u65b9\u6cd5\u3092\u78ba\u8a8d</li> </ul>"},{"location":"user-guide/structured-processing/","title":"\u69cb\u9020\u5316\u51e6\u7406\u3068\u306f","text":""},{"location":"user-guide/structured-processing/#_2","title":"\u76ee\u7684","text":"<p>\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001RDEToolKit\u306e\u4e2d\u6838\u6982\u5ff5\u3067\u3042\u308b\u300c\u69cb\u9020\u5316\u51e6\u7406\u300d\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002\u69cb\u9020\u5316\u51e6\u7406\u306e\u80cc\u666f\u3001\u4ed5\u7d44\u307f\u3001\u304a\u3088\u3073\u5b9f\u88c5\u65b9\u6cd5\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u52b9\u679c\u7684\u306a\u30c7\u30fc\u30bf\u5909\u63db\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u69cb\u7bc9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/structured-processing/#_3","title":"\u8ab2\u984c\u3068\u80cc\u666f","text":""},{"location":"user-guide/structured-processing/#_4","title":"\u7814\u7a76\u30c7\u30fc\u30bf\u7ba1\u7406\u306e\u8ab2\u984c","text":"<p>\u7814\u7a76\u6d3b\u52d5\u306b\u304a\u3044\u3066\u3001\u30c7\u30fc\u30bf\u306e\u7ba1\u7406\u3068\u5171\u6709\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8ab2\u984c\u304c\u3042\u308a\u307e\u3057\u305f\uff1a</p> <ul> <li>\u5f62\u5f0f\u306e\u591a\u69d8\u6027: \u7814\u7a76\u8005\u3084\u7814\u7a76\u5206\u91ce\u3054\u3068\u306b\u7570\u306a\u308b\u30c7\u30fc\u30bf\u5f62\u5f0f</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u4e0d\u7d71\u4e00: \u4e00\u8cab\u6027\u306e\u306a\u3044\u8a18\u8ff0\u65b9\u6cd5\u3068\u9805\u76ee</li> <li>\u51e6\u7406\u306e\u5c5e\u4eba\u5316: \u500b\u4eba\u306b\u4f9d\u5b58\u3057\u305f\u30c7\u30fc\u30bf\u5909\u63db\u624b\u9806</li> <li>\u518d\u73fe\u6027\u306e\u56f0\u96e3: \u51e6\u7406\u904e\u7a0b\u306e\u8a18\u9332\u3068\u5171\u6709\u306e\u4e0d\u5099</li> </ul>"},{"location":"user-guide/structured-processing/#rderesearch-data-express","title":"RDE\uff08Research Data Express\uff09\u306e\u5fc5\u8981\u6027","text":"<p>\u3053\u308c\u3089\u306e\u8ab2\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u3001\u7814\u7a76\u30c7\u30fc\u30bf\u3092\u6a19\u6e96\u5316\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7ba1\u7406\u30fb\u5171\u6709\u3059\u308b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3068\u3057\u3066RDE\u304c\u958b\u767a\u3055\u308c\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u65e2\u5b58\u306e\u591a\u69d8\u306a\u30c7\u30fc\u30bf\u3092RDE\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\u4f5c\u696d\u306f\u8907\u96d1\u3067\u6642\u9593\u304c\u304b\u304b\u308b\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u3002</p>"},{"location":"user-guide/structured-processing/#_5","title":"\u4e3b\u8981\u30b3\u30f3\u30bb\u30d7\u30c8","text":""},{"location":"user-guide/structured-processing/#_6","title":"\u69cb\u9020\u5316\u51e6\u7406\u306e\u5b9a\u7fa9","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u3068\u306f\u3001\u7814\u7a76\u30c7\u30fc\u30bf\u3092RDE\u6a19\u6e96\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3001\u9069\u5207\u306a\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u4ed8\u4e0e\u3057\u3066\u3001\u5171\u6709\u53ef\u80fd\u306a\u72b6\u614b\u306b\u3059\u308b\u4e00\u9023\u306e\u51e6\u7406\u306e\u3053\u3068\u3067\u3059\u3002</p> <pre><code>graph TD\n    A[\u751f\u30c7\u30fc\u30bf] --&gt; B[\u69cb\u9020\u5316\u51e6\u7406]\n    B --&gt; C[RDE\u6a19\u6e96\u5f62\u5f0f\u30c7\u30fc\u30bf]\n    C --&gt; D[\u30c7\u30fc\u30bf\u5171\u6709\u30fb\u516c\u958b]\n\n    B --&gt; B1[\u30c7\u30fc\u30bf\u5909\u63db]\n    B --&gt; B2[\u30e1\u30bf\u30c7\u30fc\u30bf\u4ed8\u4e0e]\n    B --&gt; B3[\u54c1\u8cea\u691c\u8a3c]\n    B --&gt; B4[\u30d5\u30a1\u30a4\u30eb\u6574\u7406]\n</code></pre>"},{"location":"user-guide/structured-processing/#3","title":"3\u6bb5\u968e\u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc","text":"<p>RDEToolKit\u306e\u69cb\u9020\u5316\u51e6\u7406\u306f\u3001\u4ee5\u4e0b\u306e3\u3064\u306e\u30d5\u30a7\u30fc\u30ba\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\uff1a</p>"},{"location":"user-guide/structured-processing/#1-initialization","title":"1. \u8d77\u52d5\u51e6\u7406\uff08Initialization\uff09","text":"<ul> <li>\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u306e\u81ea\u52d5\u751f\u6210: RDE\u6a19\u6e96\u306b\u6e96\u62e0\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u69cb\u6210</li> <li>\u5165\u529b\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f: \u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306e\u81ea\u52d5\u5224\u5b9a</li> <li>\u51e6\u7406\u30e2\u30fc\u30c9\u306e\u6c7a\u5b9a: \u30c7\u30fc\u30bf\u7279\u6027\u306b\u5fdc\u3058\u305f\u30e2\u30fc\u30c9\u9078\u629e</li> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u89e3\u6790: \u52d5\u4f5c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f</li> </ul> <pre><code>graph TD\n    init1[\u8d77\u52d5\u51e6\u7406] --&gt; init2[\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210]\n    init2 --&gt; init3{\u30e2\u30fc\u30c9\u9078\u629e}\n    init3 --&gt;|default| init6[invoice\u30e2\u30fc\u30c9]\n    init3 --&gt; init7[ExcelInvoice\u30e2\u30fc\u30c9]\n    init3 --&gt; init8[\u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb]\n    init3 --&gt; init9[RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9]\n    init6 --&gt; init10[\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406]\n    init7 --&gt; init10\n    init8 --&gt; init10\n    init9 --&gt; init10\n</code></pre>"},{"location":"user-guide/structured-processing/#2-custom-processing","title":"2. \u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406\uff08Custom Processing\uff09","text":"<p>\u30e6\u30fc\u30b6\u30fc\u304c\u5b9a\u7fa9\u3059\u308b\u72ec\u81ea\u306e\u51e6\u7406\u30ed\u30b8\u30c3\u30af\u304c\u5b9f\u884c\u3055\u308c\u308b\u6bb5\u968e\u3067\u3059\uff1a</p> <ul> <li>\u30c7\u30fc\u30bf\u5909\u63db: \u7814\u7a76\u30c7\u30fc\u30bf\u306e\u5f62\u5f0f\u5909\u63db</li> <li>\u89e3\u6790\u51e6\u7406: \u7d71\u8a08\u89e3\u6790\u3001\u53ef\u8996\u5316\u3001\u6a5f\u68b0\u5b66\u7fd2</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u62bd\u51fa: \u30d5\u30a1\u30a4\u30eb\u60c5\u5831\u304b\u3089\u306e\u81ea\u52d5\u62bd\u51fa</li> <li>\u54c1\u8cea\u30c1\u30a7\u30c3\u30af: \u30c7\u30fc\u30bf\u6574\u5408\u6027\u306e\u78ba\u8a8d</li> </ul> custom_processing_example.py<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\n    data = load_research_data(srcpaths.inputdata)\n\n    # \u30c7\u30fc\u30bf\u5909\u63db\u30fb\u89e3\u6790\n    processed_data = analyze_data(data)\n\n    # \u7d50\u679c\u4fdd\u5b58\n    save_results(processed_data, resource_paths.data)\n\n    # \u30e1\u30bf\u30c7\u30fc\u30bf\u751f\u6210\n    generate_metadata(processed_data, resource_paths.tasksupport)\n</code></pre>"},{"location":"user-guide/structured-processing/#3-finalization","title":"3. \u7d42\u4e86\u51e6\u7406\uff08Finalization\uff09","text":"<p>\u51e6\u7406\u7d50\u679c\u306e\u691c\u8a3c\u3068\u6700\u7d42\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u6574\u7406\u3092\u884c\u3044\u307e\u3059\uff1a</p> <ul> <li>\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3: JSON Schema \u306b\u3088\u308b\u69cb\u9020\u691c\u8a3c</li> <li>\u30b5\u30e0\u30cd\u30a4\u30eb\u751f\u6210: \u4ee3\u8868\u753b\u50cf\u306e\u81ea\u52d5\u4f5c\u6210</li> <li>\u30e1\u30bf\u30c7\u30fc\u30bf\u8a18\u8ff0: \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u8aac\u660e\u306e\u81ea\u52d5\u751f\u6210</li> <li>\u30d5\u30a1\u30a4\u30eb\u6574\u7406: \u6700\u7d42\u7684\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u306e\u78ba\u5b9a</li> </ul> <pre><code>graph TD\n    end1[\u30ab\u30b9\u30bf\u30e0\u69cb\u9020\u5316\u51e6\u7406] --&gt; end2[\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3]\n    end2 --&gt; end3{\u8a2d\u5b9a:save_thumbnail_image}\n    end3 --&gt;|False| end6[\u8aac\u660e\u6b04\u306e\u81ea\u52d5\u8a18\u8ff0]\n    end3 --&gt;|True| end5[Main\u753b\u50cf\u304b\u3089\u30b5\u30e0\u30cd\u30a4\u30eb\u753b\u50cf\u4fdd\u5b58]\n    end5 --&gt; end6\n    end6 --&gt; end7[\u7d42\u4e86]\n</code></pre>"},{"location":"user-guide/structured-processing/#4","title":"4\u3064\u306e\u51e6\u7406\u30e2\u30fc\u30c9","text":"<p>RDEToolKit\u306f\u3001\u30c7\u30fc\u30bf\u306e\u7279\u6027\u3068\u7528\u9014\u306b\u5fdc\u3058\u30664\u3064\u306e\u51e6\u7406\u30e2\u30fc\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a</p> \u30e2\u30fc\u30c9 \u8d77\u52d5\u6761\u4ef6 \u7279\u5fb4 \u7528\u9014 invoice\u30e2\u30fc\u30c9 \u30c7\u30d5\u30a9\u30eb\u30c8 \u57fa\u672c\u7684\u306a\u69cb\u9020\u5316\u51e6\u7406 \u5358\u4e00\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb ExcelInvoice\u30e2\u30fc\u30c9 <code>*._excel_invoice.xlsx</code>\u30d5\u30a1\u30a4\u30eb Excel\u9001\u308a\u72b6\u306e\u81ea\u52d5\u51e6\u7406 Excel\u5f62\u5f0f\u306e\u9001\u308a\u72b6 \u30de\u30eb\u30c1\u30c7\u30fc\u30bf\u30bf\u30a4\u30eb <code>extended_mode: 'MultiDataTile'</code> \u4e00\u62ec\u51e6\u7406\u3001\u30a8\u30e9\u30fc\u30b9\u30ad\u30c3\u30d7 \u8907\u6570\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb RDE\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30e2\u30fc\u30c9 <code>extended_mode: 'rdeformat'</code> \u65e2\u5b58RDE\u30c7\u30fc\u30bf\u306e\u518d\u51e6\u7406 RDE\u6a19\u6e96\u5f62\u5f0f"},{"location":"user-guide/structured-processing/#_7","title":"\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u95a2\u6570\u306e\u5b9f\u88c5\u30d1\u30bf\u30fc\u30f3","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff1a</p> processing_patterns.py<pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"\n    \u6a19\u6e96\u7684\u306a\u69cb\u9020\u5316\u51e6\u7406\u95a2\u6570\n\n    Args:\n        srcpaths: \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u60c5\u5831\n        resource_paths: \u51fa\u529b\u30ea\u30bd\u30fc\u30b9\u306e\u30d1\u30b9\u60c5\u5831\n    \"\"\"\n    # 1. \u5165\u529b\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n    validate_input_data(srcpaths)\n\n    # 2. \u30c7\u30fc\u30bf\u51e6\u7406\u306e\u5b9f\u884c\n    process_research_data(srcpaths, resource_paths)\n\n    # 3. \u7d50\u679c\u306e\u4fdd\u5b58\n    save_processing_results(resource_paths)\n\n    # 4. \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u751f\u6210\n    generate_metadata(resource_paths)\n</code></pre>"},{"location":"user-guide/structured-processing/#_8","title":"\u307e\u3068\u3081","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u306e\u4e3b\u8981\u306a\u4fa1\u5024\uff1a</p> <ul> <li>\u81ea\u52d5\u5316: \u624b\u52d5\u4f5c\u696d\u306e\u5927\u5e45\u306a\u524a\u6e1b</li> <li>\u6a19\u6e96\u5316: RDE\u5f62\u5f0f\u3078\u306e\u7d71\u4e00\u7684\u306a\u5909\u63db</li> <li>\u54c1\u8cea\u4fdd\u8a3c: \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u306b\u3088\u308b\u4fe1\u983c\u6027\u78ba\u4fdd</li> <li>\u62e1\u5f35\u6027: \u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u306b\u3088\u308b\u67d4\u8edf\u306a\u5bfe\u5fdc</li> <li>\u518d\u73fe\u6027: \u51e6\u7406\u624b\u9806\u306e\u6587\u66f8\u5316\u3068\u5171\u6709</li> </ul>"},{"location":"user-guide/structured-processing/#_9","title":"\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8","text":"<ul> <li>1\u3064\u306e\u8cac\u4efb: \u5404\u51e6\u7406\u30d5\u30a7\u30fc\u30ba\u306f\u660e\u78ba\u306b\u5206\u96e2\u3055\u308c\u305f\u8cac\u4efb\u3092\u6301\u3064</li> <li>\u8a2d\u5b9a\u99c6\u52d5: \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u3088\u308b\u67d4\u8edf\u306a\u52d5\u4f5c\u5236\u5fa1</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0: \u5805\u7262\u306a\u4f8b\u5916\u51e6\u7406\u3068\u30ed\u30b0\u51fa\u529b</li> <li>\u30c6\u30b9\u30bf\u30d3\u30ea\u30c6\u30a3: \u5358\u4f53\u30c6\u30b9\u30c8\u304c\u53ef\u80fd\u306a\u69cb\u9020</li> </ul>"},{"location":"user-guide/structured-processing/#_10","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u69cb\u9020\u5316\u51e6\u7406\u306e\u7406\u89e3\u3092\u6df1\u3081\u308b\u306b\u306f\uff1a</p> <ol> <li>\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb - \u51e6\u7406\u30e2\u30fc\u30c9\u3068\u52d5\u4f5c\u8a2d\u5b9a\u306e\u8a73\u7d30</li> <li>CLI\u30c4\u30fc\u30eb - \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u64cd\u4f5c\u306e\u8a73\u7d30</li> <li>\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 - \u30c7\u30fc\u30bf\u54c1\u8cea\u306e\u691c\u8a3c\u65b9\u6cd5</li> <li>API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 - \u5229\u7528\u53ef\u80fd\u306a\u5168\u6a5f\u80fd\u306e\u78ba\u8a8d</li> </ol>"},{"location":"en/","title":"RDEToolKit","text":"<p>RDEToolKit is a fundamental Python package for creating workflows for RDE structured programs. By using various modules of RDEToolKit, you can easily build registration processes for research and experimental data to RDE. Primarily, RDEToolKit supports pre-processing and post-processing of user-defined structured processing. Additionally, by combining with Python modules used for research and experimental data, it enables more diverse processing from data registration to processing and graphing. This allows efficient management of the entire data science workflow, including data cleansing, transformation, aggregation, and visualization.</p> <p></p> <p></p>"},{"location":"en/#challenges-and-background","title":"Challenges and Background","text":"<p>Research data management and sharing faced several challenges:</p> <ul> <li>Data Format Standardization: Different data formats and file structures across researchers</li> <li>Metadata Standardization: Inconsistent metadata descriptions</li> <li>Process Automation: Manual burden of data conversion and organization tasks</li> <li>Reproducibility: Difficulty in documenting and standardizing processing procedures</li> </ul>"},{"location":"en/#key-concepts","title":"Key Concepts","text":""},{"location":"en/#structured-processing-workflow","title":"Structured Processing Workflow","text":"<p>RDEToolKit executes \"structured processing\" to convert research data into standardized RDE format through three phases:</p> <pre><code>graph LR\n    Initialization --&gt; Custom_Processing[Custom Structured Processing]\n    Custom_Processing --&gt; Finalization\n</code></pre> <ul> <li>Initialization: Directory creation, file loading, mode detection</li> <li>Custom Structured Processing: User-defined data transformation and analysis</li> <li>Finalization: Validation, thumbnail generation, metadata description</li> </ul>"},{"location":"en/#four-processing-modes","title":"Four Processing Modes","text":"<p>RDEToolKit provides four processing modes based on data type and usage:</p> Mode Purpose Features Invoice Mode Single data file Default mode, basic structured processing Excel Invoice Mode Excel format invoices Automatic processing of Excel invoice files Multi Data Tile Multiple data files Batch processing, error skip functionality RDE Format Mode RDE standard format Reprocessing of existing RDE data"},{"location":"en/#configuration-files","title":"Configuration Files","text":"<p>Processing behavior can be flexibly controlled through configuration files (<code>rdeconfig.yaml</code> or <code>pyproject.toml</code>):</p> <pre><code>system:\n  extended_mode: 'MultiDataTile'\n  save_raw: true\n  magic_variable: true\n  save_thumbnail_image: true\n</code></pre>"},{"location":"en/#installation","title":"Installation","text":"<p>RDEToolKit is provided as a Python package and can be installed with the following command:</p> <pre><code>pip install rdetoolkit\n</code></pre>"},{"location":"en/#code-sample","title":"Code Sample","text":"Sample1: With User-Defined Structured Processing Sample2: Without User-Defined Structured Processing"},{"location":"en/#key-features","title":"Key Features","text":""},{"location":"en/#automation-features","title":"Automation Features","text":"<ul> <li>Automatic Directory Structure Generation: Folder structure compliant with RDE standards</li> <li>Automatic File Format Detection: Processing mode selection based on input data</li> <li>Automatic Metadata Extraction: Metadata generation from file information</li> <li>Automatic Thumbnail Creation: Representative image generation from Main images</li> </ul>"},{"location":"en/#validation-features","title":"Validation Features","text":"<ul> <li>Schema Validation: Data structure validation using JSON Schema</li> <li>File Integrity Check: Verification of required file existence</li> <li>Metadata Validation: Consistency check with metadata-def.json</li> </ul>"},{"location":"en/#extensibility","title":"Extensibility","text":"<ul> <li>Custom Processing Integration: Integration of user-defined functions</li> <li>Plugin Functionality: Addition of custom processing logic</li> <li>Configuration Flexibility: Detailed settings in YAML/TOML format</li> </ul>"},{"location":"en/#summary","title":"Summary","text":"<p>Key values of RDEToolKit:</p> <ul> <li>Efficiency: Significant time reduction through automation of manual tasks</li> <li>Standardization: Unified conversion processing to RDE format</li> <li>Flexibility: Support for diverse research data formats</li> <li>Reliability: Quality assurance through validation features</li> <li>Extensibility: Easy integration of custom processing</li> </ul>"},{"location":"en/#next-steps","title":"Next Steps","text":"<p>To get started with RDEToolKit:</p> <ol> <li>Installation Guide - Environment setup procedures</li> <li>Quick Start - Experience your first structured processing</li> <li>User Guide - Detailed usage instructions</li> </ol>"},{"location":"en/installation/","title":"How to Install RDEToolKit","text":""},{"location":"en/installation/#purpose","title":"Purpose","text":"<p>This guide explains the procedures for installing RDEToolKit in your Python environment. We provide multiple installation methods for both development and production environments.</p>"},{"location":"en/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing RDEToolKit, ensure that the following requirements are met:</p> <ul> <li>Python: Version 3.9 or higher</li> <li>pip: Latest version recommended</li> <li>Internet Connection: Required for downloading packages from PyPI</li> </ul> <p>Checking Python Environment</p> <p>To check your current Python environment, run the following commands: <pre><code>python --version\npip --version\n</code></pre></p>"},{"location":"en/installation/#steps","title":"Steps","text":""},{"location":"en/installation/#1-standard-installation","title":"1. Standard Installation","text":"<p>The most common installation method. Install the stable version from PyPI.</p> Unix/macOSWindows terminal<pre><code>pip install rdetoolkit\n</code></pre> command_prompt<pre><code>pip install rdetoolkit\n</code></pre>"},{"location":"en/installation/#2-installation-with-minio-support","title":"2. Installation with MinIO Support","text":"<p>If you plan to use object storage (MinIO) functionality, install additional dependencies.</p> Unix/macOSWindows terminal<pre><code>pip install rdetoolkit[minio]\n</code></pre> command_prompt<pre><code>pip install rdetoolkit[minio]\n</code></pre>"},{"location":"en/installation/#3-development-version-installation","title":"3. Development Version Installation","text":"<p>To use the latest development version, install directly from the GitHub repository.</p> Unix/macOSWindows terminal<pre><code>pip install git+https://github.com/nims-dpfc/rdetoolkit.git\n</code></pre> command_prompt<pre><code>pip install git+https://github.com/nims-dpfc/rdetoolkit.git\n</code></pre> <p>Development Version Notice</p> <p>Development versions may be unstable. We recommend using stable versions in production environments.</p>"},{"location":"en/installation/#4-installation-in-virtual-environment","title":"4. Installation in Virtual Environment","text":"<p>Steps for creating an isolated environment for each project.</p> Using venvUsing conda terminal<pre><code># Create virtual environment\npython -m venv rde_env\n\n# Activate virtual environment\nsource rde_env/bin/activate  # Unix/macOS\n# rde_env\\Scripts\\activate  # Windows\n\n# Install RDEToolKit\npip install rdetoolkit\n</code></pre> terminal<pre><code># Create new environment\nconda create -n rde_env python=3.9\n\n# Activate environment\nconda activate rde_env\n\n# Install RDEToolKit\npip install rdetoolkit\n</code></pre>"},{"location":"en/installation/#verification","title":"Verification","text":"<p>Verify that the installation completed successfully.</p>"},{"location":"en/installation/#installation-check","title":"Installation Check","text":"python_console<pre><code>import rdetoolkit\nprint(rdetoolkit.__version__)\n</code></pre> <p>Expected output example: <pre><code>1.2.3\n</code></pre></p>"},{"location":"en/installation/#basic-functionality-test","title":"Basic Functionality Test","text":"test_installation.py<pre><code>from rdetoolkit import workflows\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\n# Verify that basic imports succeed\nprint(\"RDEToolKit installation successful!\")\n</code></pre>"},{"location":"en/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/installation/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"en/installation/#permission-error","title":"Permission Error","text":"<pre><code>ERROR: Could not install packages due to an EnvironmentError\n</code></pre> <p>Solution: Install at user level terminal<pre><code>pip install --user rdetoolkit\n</code></pre></p>"},{"location":"en/installation/#dependency-conflicts","title":"Dependency Conflicts","text":"<pre><code>ERROR: pip's dependency resolver does not currently take into account all the packages\n</code></pre> <p>Solution: Use a virtual environment terminal<pre><code>python -m venv clean_env\nsource clean_env/bin/activate\npip install rdetoolkit\n</code></pre></p>"},{"location":"en/installation/#python-version-incompatibility","title":"Python Version Incompatibility","text":"<pre><code>ERROR: Package 'rdetoolkit' requires a different Python\n</code></pre> <p>Solution: Upgrade to Python 3.9 or higher</p> <p>Support Information</p> <p>If installation issues persist, please report them on GitHub Issues.</p>"},{"location":"en/installation/#related-information","title":"Related Information","text":"<p>Next steps after installation completion:</p> <ul> <li>Quick Start - Execute your first structured processing</li> <li>Configuration File - Customize behavior settings</li> <li>API Reference - Detailed feature descriptions</li> </ul>"},{"location":"en/quick-start/","title":"Experience RDEToolKit","text":""},{"location":"en/quick-start/#purpose","title":"Purpose","text":"<p>This tutorial will help you execute your first structured processing using RDEToolKit and experience the basic workflow. The estimated time is approximately 15 minutes.</p> <p>Upon completion, you will be able to: - Understand the basic structure of RDE projects - Create custom structured processing functions - Execute structured processing and verify results</p>"},{"location":"en/quick-start/#1-create-a-project","title":"1. Create a Project","text":""},{"location":"en/quick-start/#purpose_1","title":"Purpose","text":"<p>Create a project directory for RDE structured processing and prepare the necessary file structure.</p>"},{"location":"en/quick-start/#code-to-execute","title":"Code to Execute","text":"Unix/macOSWindows terminal<pre><code># Create project directory\nmkdir my-rde-project\ncd my-rde-project\n\n# Create necessary directories\nmkdir -p data/inputdata\nmkdir -p tasksupport\nmkdir -p modules\n</code></pre> command_prompt<pre><code># Create project directory\nmkdir my-rde-project\ncd my-rde-project\n\n# Create necessary directories\nmkdir data\\inputdata\nmkdir tasksupport\nmkdir modules\n</code></pre>"},{"location":"en/quick-start/#expected-result","title":"Expected Result","text":"<p>The following directory structure will be created: <pre><code>my-rde-project/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 inputdata/\n\u251c\u2500\u2500 tasksupport/\n\u2514\u2500\u2500 modules/\n</code></pre></p>"},{"location":"en/quick-start/#2-define-dependencies","title":"2. Define Dependencies","text":""},{"location":"en/quick-start/#purpose_2","title":"Purpose","text":"<p>Define the Python packages to be used in the project.</p>"},{"location":"en/quick-start/#code-to-execute_1","title":"Code to Execute","text":"requirements.txt<pre><code>rdetoolkit&gt;=1.0.0\n</code></pre>"},{"location":"en/quick-start/#expected-result_1","title":"Expected Result","text":"<p>The <code>requirements.txt</code> file is created with RDEToolKit dependencies defined.</p>"},{"location":"en/quick-start/#3-create-custom-structured-processing","title":"3. Create Custom Structured Processing","text":""},{"location":"en/quick-start/#purpose_3","title":"Purpose","text":"<p>Create a custom function containing data processing logic.</p>"},{"location":"en/quick-start/#code-to-execute_2","title":"Code to Execute","text":"modules/process.py<pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\nimport json\nimport os\n\ndef display_message(message):\n    \"\"\"Helper function to display messages\"\"\"\n    print(f\"[INFO] {message}\")\n\ndef create_sample_metadata(resource_paths):\n    \"\"\"Create sample metadata\"\"\"\n    metadata = {\n        \"title\": \"Sample Dataset\",\n        \"description\": \"RDEToolKit tutorial sample\",\n        \"created_at\": \"2024-01-01\",\n        \"status\": \"processed\"\n    }\n\n    # Save metadata file\n    metadata_path = os.path.join(resource_paths.tasksupport, \"sample_metadata.json\")\n    with open(metadata_path, 'w', encoding='utf-8') as f:\n        json.dump(metadata, f, ensure_ascii=False, indent=2)\n\n    display_message(f\"Metadata saved: {metadata_path}\")\n\ndef dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"\n    Main structured processing function\n\n    Args:\n        srcpaths: Input file path information\n        resource_paths: Output resource path information\n    \"\"\"\n    display_message(\"Starting structured processing\")\n\n    # Display input path information\n    display_message(f\"Input data directory: {srcpaths.inputdata}\")\n    display_message(f\"Output resource directory: {resource_paths.root}\")\n\n    # Create sample metadata\n    create_sample_metadata(resource_paths)\n\n    # Display list of input files\n    if os.path.exists(srcpaths.inputdata):\n        files = os.listdir(srcpaths.inputdata)\n        display_message(f\"Number of input files: {len(files)}\")\n        for file in files:\n            display_message(f\"  - {file}\")\n\n    display_message(\"Structured processing completed\")\n</code></pre>"},{"location":"en/quick-start/#expected-result_2","title":"Expected Result","text":"<p>The <code>modules/process.py</code> file is created with structured processing logic defined.</p>"},{"location":"en/quick-start/#4-create-main-script","title":"4. Create Main Script","text":""},{"location":"en/quick-start/#purpose_4","title":"Purpose","text":"<p>Create an entry point to launch the RDEToolKit workflow.</p>"},{"location":"en/quick-start/#code-to-execute_3","title":"Code to Execute","text":"main.py<pre><code>import rdetoolkit\n\nfrom modules import process\n\ndef main():\n    \"\"\"Main execution function\"\"\"\n    print(\"=== RDEToolKit Tutorial ===\")\n\n    # Execute RDE structured processing\n    result = rdetoolkit.workflows.run(custom_dataset_function=process.dataset)\n\n    # Display results\n    print(\"\\n=== Processing Results ===\")\n    print(f\"Execution status: {result}\")\n\n    return result\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"en/quick-start/#expected-result_3","title":"Expected Result","text":"<p>The <code>main.py</code> file is created and ready to execute structured processing.</p>"},{"location":"en/quick-start/#5-prepare-sample-data","title":"5. Prepare Sample Data","text":""},{"location":"en/quick-start/#purpose_5","title":"Purpose","text":"<p>Create sample data to test the structured processing.</p>"},{"location":"en/quick-start/#code-to-execute_4","title":"Code to Execute","text":"data/inputdata/sample_data.txt<pre><code>Sample Research Data\n====================\n\nThis is a sample data file for RDEToolKit tutorial.\nCreated: 2024-01-01\nType: Text Data\nStatus: Ready for processing\n</code></pre>"},{"location":"en/quick-start/#expected-result_4","title":"Expected Result","text":"<p>The <code>data/inputdata/sample_data.txt</code> file is created with sample data ready for processing.</p>"},{"location":"en/quick-start/#6-execute-structured-processing","title":"6. Execute Structured Processing","text":""},{"location":"en/quick-start/#purpose_6","title":"Purpose","text":"<p>Execute RDE structured processing with the created project and verify its operation.</p>"},{"location":"en/quick-start/#code-to-execute_5","title":"Code to Execute","text":"terminal<pre><code># Install dependencies\npip install -r requirements.txt\n\n# Execute structured processing\npython main.py\n</code></pre>"},{"location":"en/quick-start/#expected-result_5","title":"Expected Result","text":"<p>Output similar to the following will be displayed:</p> <pre><code>=== RDEToolKit Tutorial ===\n[INFO] Starting structured processing\n[INFO] Input data directory: /path/to/my-rde-project/data/inputdata\n[INFO] Output resource directory: /path/to/my-rde-project\n[INFO] Metadata saved: /path/to/my-rde-project/tasksupport/sample_metadata.json\n[INFO] Number of input files: 1\n[INFO]   - sample_data.txt\n[INFO] Structured processing completed\n\n=== Processing Results ===\nExecution status: {'statuses': [{'run_id': '0000', 'title': 'sample-dataset', 'status': 'success', ...}]}\n</code></pre>"},{"location":"en/quick-start/#7-verify-results","title":"7. Verify Results","text":""},{"location":"en/quick-start/#purpose_7","title":"Purpose","text":"<p>Verify the execution results and file generation of structured processing.</p>"},{"location":"en/quick-start/#code-to-execute_6","title":"Code to Execute","text":"terminal<pre><code># Check generated file structure\nfind . -type f -name \"*.json\" | head -10\n</code></pre>"},{"location":"en/quick-start/#expected-result_6","title":"Expected Result","text":"<p>You can verify that files like the following have been generated: - <code>tasksupport/sample_metadata.json</code> - Created metadata file - <code>raw/</code> or <code>nonshared_raw/</code> - Copy of input files (depending on configuration)</p>"},{"location":"en/quick-start/#congratulations","title":"Congratulations!","text":"<p>You have completed your first structured processing using RDEToolKit.</p>"},{"location":"en/quick-start/#what-you-accomplished","title":"What You Accomplished","text":"<p>\u2705 Created basic RDE project structure \u2705 Implemented custom structured processing function \u2705 Executed structured processing workflow \u2705 Learned how to verify processing results  </p>"},{"location":"en/quick-start/#important-concepts-learned","title":"Important Concepts Learned","text":"<ul> <li>Project Structure: Roles of <code>data/inputdata/</code>, <code>tasksupport/</code>, <code>modules/</code></li> <li>Custom Functions: How to use <code>RdeInputDirPaths</code> and <code>RdeOutputResourcePath</code></li> <li>Workflow Execution: Basic usage of <code>rdetoolkit.workflows.run()</code></li> </ul>"},{"location":"en/quick-start/#next-steps","title":"Next Steps","text":"<p>To learn more in detail:</p> <ol> <li>Structured Processing Concepts - Detailed understanding of processing flow</li> <li>Configuration File - How to customize behavior</li> <li>API Reference - Check all available features</li> </ol> <p>Next Practice</p> <p>Try more complex structured processing using actual research data. It's important to select the appropriate processing mode based on the type of data.</p>"},{"location":"en/api/","title":"API Reference","text":""},{"location":"en/api/#purpose","title":"Purpose","text":"<p>This section provides technical specifications for all features of RDEToolKit. It is a comprehensive reference including detailed functionality, parameters, return values, and usage examples for each module.</p>"},{"location":"en/api/#api-documentation-structure","title":"API Documentation Structure","text":"<p>RDEToolKit's API documentation is structured using a hybrid approach:</p> <ul> <li>Auto-generated parts: Detailed technical specifications generated from docstrings in source code</li> <li>Manually created parts: Practical usage examples and inter-module collaboration methods</li> </ul>"},{"location":"en/api/#core-modules","title":"Core Modules","text":""},{"location":"en/api/#workflow-management","title":"Workflow Management","text":"<ul> <li>workflows - Structured processing execution and workflow management</li> <li>modeproc - Mode processing</li> </ul>"},{"location":"en/api/#configuration-and-file-operations","title":"Configuration and File Operations","text":"<ul> <li>config - Configuration file loading and management</li> <li>fileops - RDE-related file operations</li> </ul>"},{"location":"en/api/#data-processing","title":"Data Processing","text":"<ul> <li>invoicefile - Invoice file processing</li> <li>validation - Data validation</li> <li>rde2util - RDE-related utility functions</li> </ul>"},{"location":"en/api/#representative-image-operations","title":"Representative Image Operations","text":"<ul> <li>img2thumb - Image to thumbnail conversion</li> </ul>"},{"location":"en/api/#error-handling-and-logging","title":"Error Handling and Logging","text":"<ul> <li>rdelogger - Logging functionality</li> <li>errors - Error handling</li> <li>exceptions - Exception handling</li> </ul>"},{"location":"en/api/#data-models","title":"Data Models","text":""},{"location":"en/api/#configuration-models","title":"Configuration Models","text":"<ul> <li>models.config - Configuration data structure definitions</li> </ul>"},{"location":"en/api/#rde-related-models","title":"RDE-related Models","text":"<ul> <li>models.rde2types - RDE-related type definitions</li> <li>models.invoice - Invoice data structure</li> <li>models.metadata - Metadata management</li> </ul>"},{"location":"en/api/#processing-result-models","title":"Processing Result Models","text":"<ul> <li>Processing result management functionality is integrated into each module</li> </ul>"},{"location":"en/api/#implementation-modules","title":"Implementation Modules","text":""},{"location":"en/api/#controllers","title":"Controllers","text":"<ul> <li>impl.input_controller - Input mode management</li> <li>impl.compressed_controller - Compressed file management</li> </ul>"},{"location":"en/api/#interfaces","title":"Interfaces","text":"<ul> <li>interface.filechecker - File validation interface</li> </ul>"},{"location":"en/api/#command-line","title":"Command Line","text":"<ul> <li>CLI Commands - Command line interface usage</li> </ul>"},{"location":"en/api/#usage-patterns","title":"Usage Patterns","text":""},{"location":"en/api/#basic-usage","title":"Basic Usage","text":"basic_usage.py<pre><code>import rdetoolkit\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef my_dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Implement custom processing here\n    pass\n\n# Execute structured processing\nresult = rdetoolkit.workflows.run(custom_dataset_function=my_dataset_function)\n</code></pre>"},{"location":"en/api/#configuration-file-usage","title":"Configuration File Usage","text":"config_usage.py<pre><code>from rdetoolkit.config import parse_config_file\n\n# Load configuration file\nconfig = parse_config_file()\n\n# Reference configuration values\nextended_mode = config.system.extended_mode\nsave_raw = config.system.save_raw\n</code></pre>"},{"location":"en/api/#error-handling","title":"Error Handling","text":"error_handling.py<pre><code>from rdetoolkit.exceptions import RdeToolkitError\nfrom rdetoolkit import workflows\n\ntry:\n    result = workflows.run(custom_dataset_function=my_function)\nexcept RdeToolkitError as e:\n    print(f\"RDEToolKit error: {e}\")\n    print(f\"Error code: {e.error_code}\")\n</code></pre>"},{"location":"en/api/#api-version-information","title":"API Version Information","text":"Version Compatibility Major Changes 1.0.x Stable Initial release 1.1.x Backward compatible New features added 1.2.x Backward compatible Performance improvements <p>API Stability</p> <p>Backward compatibility is maintained within major versions. Breaking changes only occur during major version upgrades.</p>"},{"location":"en/api/#developer-information","title":"Developer Information","text":""},{"location":"en/api/#type-hints","title":"Type Hints","text":"<p>RDEToolKit supports complete type hints:</p> type_hints.py<pre><code>from typing import Optional\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef process_data(\n    srcpaths: RdeInputDirPaths,\n    resource_paths: RdeOutputResourcePath,\n    options: Optional[dict] = None\n) -&gt; bool:\n    # Type-safe implementation\n    return True\n</code></pre>"},{"location":"en/api/#next-steps","title":"Next Steps","text":"<ul> <li>Specific module details: Refer to the module links above</li> <li>Practical usage examples: User Guide</li> <li>Contributing to development: Developer Guide</li> </ul>"},{"location":"en/development/contributing/","title":"How to Contribute","text":""},{"location":"en/development/contributing/#purpose","title":"Purpose","text":"<p>This guide explains specific procedures and methods for effectively contributing to the RDEToolKit project. We provide detailed information so that everyone from first-time contributors to experienced developers can contribute smoothly.</p>"},{"location":"en/development/contributing/#prerequisites","title":"Prerequisites","text":"<p>Before starting to contribute, please ensure the following:</p> <ul> <li>GitHub Account: Required for creating pull requests</li> <li>Basic Git Knowledge: Branch operations, commits, pushes</li> <li>Python Development Experience: Basic Python knowledge</li> <li>Development Environment: Development environment setup completed</li> </ul>"},{"location":"en/development/contributing/#steps","title":"Steps","text":""},{"location":"en/development/contributing/#1-decide-what-to-contribute","title":"1. Decide What to Contribute","text":""},{"location":"en/development/contributing/#check-issues","title":"Check Issues","text":"<p>Select work from existing Issues or create a new Issue:</p> terminal<pre><code># Get latest repository state\ngit fetch origin\ngit checkout main\ngit pull origin main\n</code></pre>"},{"location":"en/development/contributing/#types-of-contributions","title":"Types of Contributions","text":"Type Description Label Bug Fix Resolving issues with existing features <code>bug</code> New Feature Adding or extending functionality <code>enhancement</code> Documentation Improving documentation <code>documentation</code> Testing Adding or improving tests <code>testing</code> <p>For First-time Contributors</p> <p>We recommend starting with Issues labeled <code>good first issue</code>.</p>"},{"location":"en/development/contributing/#2-create-development-branch","title":"2. Create Development Branch","text":""},{"location":"en/development/contributing/#branch-naming-convention","title":"Branch Naming Convention","text":"terminal<pre><code># For feature addition\ngit checkout -b feature/issue-123-add-new-validator\n\n# For bug fix\ngit checkout -b bugfix/issue-456-fix-config-parsing\n\n# For documentation update\ngit checkout -b docs/issue-789-update-api-reference\n</code></pre>"},{"location":"en/development/contributing/#branch-name-components","title":"Branch Name Components","text":"<ul> <li>Prefix: <code>feature/</code>, <code>bugfix/</code>, <code>docs/</code></li> <li>Issue Number: <code>issue-123</code></li> <li>Brief Description: <code>add-new-validator</code></li> </ul>"},{"location":"en/development/contributing/#3-execute-development","title":"3. Execute Development","text":""},{"location":"en/development/contributing/#code-changes","title":"Code Changes","text":"example_contribution.py<pre><code>from typing import List, Optional\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\n\ndef validate_input_files(srcpaths: RdeInputDirPaths) -&gt; List[str]:\n    \"\"\"\n    Validate input files\n\n    Args:\n        srcpaths: Input file path information\n\n    Returns:\n        List of validation errors (empty if valid)\n\n    Example:\n        &gt;&gt;&gt; errors = validate_input_files(srcpaths)\n        &gt;&gt;&gt; if not errors:\n        ...     print(\"All files are valid\")\n    \"\"\"\n    errors = []\n\n    # Check input directory existence\n    if not srcpaths.inputdata.exists():\n        errors.append(\"Input data directory does not exist\")\n\n    # Check file count\n    if srcpaths.inputdata.exists():\n        files = list(srcpaths.inputdata.glob(\"*\"))\n        if len(files) == 0:\n            errors.append(\"No input files found\")\n\n    return errors\n</code></pre>"},{"location":"en/development/contributing/#add-tests","title":"Add Tests","text":"test_contribution.py<pre><code>import pytest\nfrom pathlib import Path\nfrom rdetoolkit.validation import validate_input_files\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths\n\nclass TestValidateInputFiles:\n    def test_valid_directory_with_files(self, tmp_path):\n        \"\"\"Test valid directory with files\"\"\"\n        # Prepare test data\n        input_dir = tmp_path / \"inputdata\"\n        input_dir.mkdir()\n        (input_dir / \"test_file.txt\").write_text(\"test content\")\n\n        srcpaths = RdeInputDirPaths(inputdata=input_dir)\n\n        # Execute test\n        errors = validate_input_files(srcpaths)\n\n        # Verify\n        assert errors == []\n\n    def test_missing_directory(self, tmp_path):\n        \"\"\"Test non-existent directory\"\"\"\n        input_dir = tmp_path / \"nonexistent\"\n        srcpaths = RdeInputDirPaths(inputdata=input_dir)\n\n        errors = validate_input_files(srcpaths)\n\n        assert \"Input data directory does not exist\" in errors\n\n    def test_empty_directory(self, tmp_path):\n        \"\"\"Test empty directory\"\"\"\n        input_dir = tmp_path / \"inputdata\"\n        input_dir.mkdir()\n\n        srcpaths = RdeInputDirPaths(inputdata=input_dir)\n\n        errors = validate_input_files(srcpaths)\n\n        assert \"No input files found\" in errors\n</code></pre>"},{"location":"en/development/contributing/#4-execute-quality-checks","title":"4. Execute Quality Checks","text":""},{"location":"en/development/contributing/#run-automated-checks","title":"Run Automated Checks","text":"terminal<pre><code># Run all checks\nrye test\nrye lint\nrye fmt\n\n# Individual checks\npytest tests/test_contribution.py -v\nmypy src/rdetoolkit/validation.py\nblack src/rdetoolkit/validation.py\n</code></pre>"},{"location":"en/development/contributing/#run-pre-commit","title":"Run pre-commit","text":"terminal<pre><code># Manual execution of pre-commit hooks\npre-commit run --all-files\n\n# Run specific hooks only\npre-commit run black --all-files\npre-commit run mypy --all-files\n</code></pre>"},{"location":"en/development/contributing/#5-commit-and-push","title":"5. Commit and Push","text":""},{"location":"en/development/contributing/#commit-message-rules","title":"Commit Message Rules","text":"terminal<pre><code># Feature addition\ngit commit -m \"feat: add input file validation function\n\n- Add validate_input_files function to check directory existence\n- Add comprehensive test cases for validation scenarios\n- Update documentation with usage examples\n\nCloses #123\"\n\n# Bug fix\ngit commit -m \"fix: resolve config parsing error for YAML files\n\n- Fix YAML parsing issue when file contains special characters\n- Add error handling for malformed YAML files\n- Update tests to cover edge cases\n\nFixes #456\"\n</code></pre>"},{"location":"en/development/contributing/#commit-message-structure","title":"Commit Message Structure","text":"<ul> <li>Type: <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>test</code>, <code>refactor</code></li> <li>Description: Brief description of changes</li> <li>Details: Detailed description if necessary</li> <li>Issue Reference: <code>Closes #123</code>, <code>Fixes #456</code></li> </ul>"},{"location":"en/development/contributing/#6-create-pull-request","title":"6. Create Pull Request","text":""},{"location":"en/development/contributing/#pull-request-template","title":"Pull Request Template","text":"pull_request_template.md<pre><code>## Overview\nPlease briefly describe the purpose and content of this change.\n\n## Changes\n- [ ] New feature addition\n- [ ] Bug fix\n- [ ] Documentation update\n- [ ] Test addition\n- [ ] Refactoring\n\n## Testing\n- [ ] All existing tests pass\n- [ ] Added new tests\n- [ ] Executed manual testing\n\n## Checklist\n- [ ] Code complies with project style guide\n- [ ] Executed self-review\n- [ ] Updated documentation as needed\n- [ ] Changes do not include breaking changes\n\n## Related Issue\nCloses #123\n</code></pre>"},{"location":"en/development/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated Checks: Pass CI/CD pipeline</li> <li>Code Review: Review by maintainers</li> <li>Address Fixes: Fixes based on feedback</li> <li>Merge: Merge after approval</li> </ol>"},{"location":"en/development/contributing/#verification","title":"Verification","text":""},{"location":"en/development/contributing/#check-cicd","title":"Check CI/CD","text":"terminal<pre><code># Check GitHub Actions status\ngh pr checks\n\n# Check details of specific check\ngh run view --log\n</code></pre>"},{"location":"en/development/contributing/#respond-to-review-feedback","title":"Respond to Review Feedback","text":"terminal<pre><code># Fixes based on feedback\ngit add .\ngit commit -m \"fix: address review feedback\n\n- Update function documentation\n- Add missing type hints\n- Fix test assertion logic\"\n\ngit push origin feature/issue-123-add-new-validator\n</code></pre>"},{"location":"en/development/contributing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/development/contributing/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"en/development/contributing/#test-failures","title":"Test Failures","text":"terminal<pre><code># Check detailed test results\npytest -v --tb=long\n\n# Run specific test only\npytest tests/test_contribution.py::TestValidateInputFiles::test_valid_directory_with_files -v\n</code></pre>"},{"location":"en/development/contributing/#lint-errors","title":"Lint Errors","text":"terminal<pre><code># Fix automatically correctable errors\nblack src/\nisort src/\n\n# Check errors requiring manual fixes\nflake8 src/\npylint src/\n</code></pre>"},{"location":"en/development/contributing/#merge-conflicts","title":"Merge Conflicts","text":"terminal<pre><code># Get latest main branch\ngit fetch origin\ngit checkout main\ngit pull origin main\n\n# Merge to feature branch\ngit checkout feature/issue-123-add-new-validator\ngit merge main\n\n# After resolving conflicts\ngit add .\ngit commit -m \"resolve merge conflicts with main\"\ngit push origin feature/issue-123-add-new-validator\n</code></pre>"},{"location":"en/development/contributing/#related-information","title":"Related Information","text":"<p>Detailed information about contributions:</p> <ul> <li>Developer Guide - Development environment setup</li> <li>Documentation Creation - How to contribute to documentation</li> <li>GitHub Issues - Available tasks</li> </ul> <p>Community Support</p> <p>If you have questions or need help, feel free to ask on GitHub Discussions.</p>"},{"location":"en/development/docs/","title":"How to Create Documentation","text":""},{"location":"en/development/docs/#purpose","title":"Purpose","text":"<p>This guide explains how to create and update documentation for RDEToolKit. It provides a comprehensive documentation creation process including multilingual support, structured writing, and quality assurance procedures.</p>"},{"location":"en/development/docs/#prerequisites","title":"Prerequisites","text":"<p>Before starting documentation creation, please ensure the following:</p> <ul> <li>Development Environment: Development environment setup completed</li> <li>MkDocs Knowledge: Basic understanding of Markdown and MkDocs</li> <li>Multilingual Support: Ability to write in both Japanese and English</li> </ul>"},{"location":"en/development/docs/#steps","title":"Steps","text":""},{"location":"en/development/docs/#1-understand-documentation-structure","title":"1. Understand Documentation Structure","text":""},{"location":"en/development/docs/#directory-structure","title":"Directory Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.ja.md, index.en.md\n\u251c\u2500\u2500 installation.ja.md, installation.en.md\n\u251c\u2500\u2500 quick-start.ja.md, quick-start.en.md\n\u251c\u2500\u2500 user-guide/\n\u2502   \u251c\u2500\u2500 index.ja.md, index.en.md\n\u2502   \u251c\u2500\u2500 structured-processing.ja.md, structured-processing.en.md\n\u2502   \u251c\u2500\u2500 config.ja.md, config.en.md\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 index.ja.md, index.en.md\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 development/\n    \u251c\u2500\u2500 index.ja.md, index.en.md\n    \u251c\u2500\u2500 contributing.ja.md, contributing.en.md\n    \u2514\u2500\u2500 docs.ja.md, docs.en.md\n</code></pre>"},{"location":"en/development/docs/#file-naming-convention","title":"File Naming Convention","text":"<ul> <li>Japanese Version: <code>[filename].ja.md</code></li> <li>English Version: <code>[filename].en.md</code></li> <li>Paired Files: Create both Japanese and English versions for all pages</li> </ul>"},{"location":"en/development/docs/#2-determine-page-type","title":"2. Determine Page Type","text":""},{"location":"en/development/docs/#four-page-types","title":"Four Page Types","text":"Type Purpose Naming Example Components Tutorial Experiential Learning <code>quick-start.en.md</code> Steps, expected results, achievement How-to Guide Problem Solving <code>installation.en.md</code> Prerequisites, steps, verification Concept Explanation Understanding <code>structured-processing.en.md</code> Background, key concepts, summary Technical Reference Specification <code>api/workflows.en.md</code> Parameters, return values, examples"},{"location":"en/development/docs/#page-type-selection-criteria","title":"Page Type Selection Criteria","text":"<pre><code>graph TD\n    A[New Page] --&gt; B{User's Purpose?}\n    B --&gt;|Want to Learn| C[Tutorial]\n    B --&gt;|Want to Solve Problem| D[How-to Guide]\n    B --&gt;|Want to Understand| E[Concept Explanation]\n    B --&gt;|Want to Check Specs| F[Technical Reference]\n</code></pre>"},{"location":"en/development/docs/#3-create-japanese-version","title":"3. Create Japanese Version","text":""},{"location":"en/development/docs/#basic-template","title":"Basic Template","text":"template.ja.md<pre><code># [Verb-form Title]\n\n## Purpose\n\nClearly describe the purpose of this page and the value readers will gain.\n\n## [Prerequisites/Challenges and Background]\n\nExplain required knowledge, environment, or challenges to be solved.\n\n## [Key Concepts/Steps]\n\n### Subsection 1\n\nDescribe specific content in a structured manner.\n\n```python title=\"example.py\"\n# Add comments to important lines\ndef example_function():\n    return \"Hello, RDE!\"\n</code></pre>"},{"location":"en/development/docs/#subsection-2","title":"Subsection 2","text":"<p>Tip</p> <p>Provide additional information useful to readers.</p> <p>Warning</p> <p>Emphasize important precautions.</p>"},{"location":"en/development/docs/#summary","title":"Summary","text":"<p>Summarize key points in bullet points:</p> <ul> <li>Point 1</li> <li>Point 2</li> <li>Point 3</li> </ul>"},{"location":"en/development/docs/#next-steps","title":"Next Steps","text":"<p>Provide links to related pages:</p> <ul> <li>Developer Guide - Development environment setup</li> <li>Contributing - How to contribute <pre><code>#### Writing Guidelines\n\n**Structured Writing**:\n- Actively use bullet points and tables\n- Avoid long sentences, prioritize readability\n- Set clear purpose for each section\n\n**Code Block Writing**:\n```python title=\"config_example.py\"\n# Load configuration file\nconfig = load_config(\"rdeconfig.yaml\")\n\n# Get important configuration values\nextended_mode = config.system.extended_mode  # Specify processing mode\nsave_raw = config.system.save_raw  # Enable raw saving\n</code></pre></li> </ul> <p>Admonition Usage: <pre><code>!!! note \"Additional Information\"\n    Provide additional explanations or background information.\n\n!!! tip \"Practical Tips\"\n    Introduce efficient usage methods or convenient features.\n\n!!! warning \"Important Precautions\"\n    Explain warnings or limitations to avoid errors.\n</code></pre></p>"},{"location":"en/development/docs/#4-translate-to-english","title":"4. Translate to English","text":""},{"location":"en/development/docs/#translation-principles","title":"Translation Principles","text":"<ul> <li>Natural Technical English: Avoid literal translation, use natural English expressions</li> <li>Term Consistency: Consistent translation of technical terms</li> <li>Cultural Adaptation: Explanation methods suitable for English-speaking readers</li> </ul>"},{"location":"en/development/docs/#term-correspondence-table","title":"Term Correspondence Table","text":"Japanese English Notes \u69cb\u9020\u5316\u51e6\u7406 Structured Processing Core concept \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb Configuration File General term \u524d\u63d0\u6761\u4ef6 Prerequisites Standard expression \u624b\u9806 Steps / Instructions Choose based on context \u78ba\u8a8d Verification Meaning of result confirmation"},{"location":"en/development/docs/#translation-example","title":"Translation Example","text":"<p>Japanese: <pre><code>## \u624b\u9806\n\n### 1. \u74b0\u5883\u3092\u6e96\u5099\u3059\u308b\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001\u5fc5\u8981\u306a\u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff1a\n\n```bash\npip install rdetoolkit\n</code></pre> <pre><code>**English**:\n```markdown\n## Steps\n\n### 1. Prepare Environment\n\nExecute the following command to install required dependencies:\n\n```bash\npip install rdetoolkit\n</code></pre> <pre><code>### 5. Set Up Internal Links\n\n#### Types of Links\n\n```markdown\n# Links within same language\n[\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb](config.ja.md)\n[Configuration File](config.en.md)\n\n# Section links\n[\u624b\u9806](#\u624b\u9806)\n[Steps](#steps)\n\n# External links\n[GitHub Issues](https://github.com/nims-dpfc/rdetoolkit/issues)\n</code></pre></p>"},{"location":"en/development/docs/#link-verification","title":"Link Verification","text":"terminal<pre><code># Check internal links\nmkdocs build --strict\n\n# Detect broken links\nfind docs/ -name \"*.md\" -exec grep -l \"](.*\\.md)\" {} \\;\n</code></pre>"},{"location":"en/development/docs/#6-build-mkdocs-site","title":"6. Build MkDocs Site","text":""},{"location":"en/development/docs/#local-verification","title":"Local Verification","text":"terminal<pre><code># Start development server\nmkdocs serve\n\n# Check Japanese version\nopen http://localhost:8000\n\n# Check English version\nopen http://localhost:8000/en/\n</code></pre>"},{"location":"en/development/docs/#handle-build-errors","title":"Handle Build Errors","text":"terminal<pre><code># Display detailed error information\nmkdocs build --verbose --strict\n\n# Test specific pages only\nmkdocs build --config-file mkdocs.yml --site-dir test-site\n</code></pre>"},{"location":"en/development/docs/#verification","title":"Verification","text":""},{"location":"en/development/docs/#quality-checklist","title":"Quality Checklist","text":""},{"location":"en/development/docs/#content-quality","title":"Content Quality","text":"<ul> <li>[ ] Purpose is clearly described</li> <li>[ ] Structured writing is used</li> <li>[ ] Code blocks have titles</li> <li>[ ] Appropriate admonitions are used</li> <li>[ ] Next steps are provided</li> </ul>"},{"location":"en/development/docs/#multilingual-support","title":"Multilingual Support","text":"<ul> <li>[ ] Both Japanese and English files exist</li> <li>[ ] Terms are consistent</li> <li>[ ] Internal links are correctly set</li> <li>[ ] Language switching functions</li> </ul>"},{"location":"en/development/docs/#technical-quality","title":"Technical Quality","text":"<ul> <li>[ ] MkDocs build succeeds</li> <li>[ ] No broken links</li> <li>[ ] Images display correctly</li> <li>[ ] Code blocks are properly highlighted</li> </ul>"},{"location":"en/development/docs/#automated-checks","title":"Automated Checks","text":"terminal<pre><code># Lint documentation\nmarkdownlint docs/**/*.md\n\n# Link check\nmarkdown-link-check docs/**/*.md\n\n# Spell check\ncspell \"docs/**/*.md\"\n</code></pre>"},{"location":"en/development/docs/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/development/docs/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"en/development/docs/#mkdocs-build-error","title":"MkDocs Build Error","text":"<pre><code>ERROR - Config value: 'nav'. Error: Page file 'missing-page.md' does not exist.\n</code></pre> <p>Solution: Check nav section in <code>mkdocs.yml</code> and remove non-existent files</p>"},{"location":"en/development/docs/#broken-links","title":"Broken Links","text":"<pre><code>ERROR - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: page.md\n</code></pre> <p>Solution: Add page to <code>mkdocs.yml</code> or delete unnecessary files</p>"},{"location":"en/development/docs/#multilingual-display-issues","title":"Multilingual Display Issues","text":"<p>Check items: 1. <code>extra.alternate</code> settings in <code>mkdocs.yml</code> 2. File naming convention (.ja.md/.en.md) 3. Language-specific nav section settings</p>"},{"location":"en/development/docs/#related-information","title":"Related Information","text":"<p>Detailed information about documentation creation:</p> <ul> <li>Developer Guide - Development environment setup</li> <li>Contributing - How to contribute</li> <li>MkDocs Official Documentation - Detailed MkDocs specifications</li> </ul> <p>Continuous Improvement</p> <p>Documentation should be continuously improved. Actively collect user feedback and conduct regular reviews.</p>"},{"location":"en/development/","title":"Developer Guide","text":""},{"location":"en/development/#purpose","title":"Purpose","text":"<p>This section explains how to contribute to the RDEToolKit project and set up a development environment. We welcome various forms of contribution, including bug fixes, new feature additions, and documentation improvements.</p>"},{"location":"en/development/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"en/development/#code-contributions","title":"Code Contributions","text":"<ul> <li>Bug Fixes: Resolving existing issues</li> <li>New Feature Development: Adding and extending functionality</li> <li>Performance Improvements: Optimizing processing speed and memory usage</li> <li>Test Additions: Improving coverage</li> </ul>"},{"location":"en/development/#documentation-contributions","title":"Documentation Contributions","text":"<ul> <li>Documentation Improvements: Enhancing quality of existing documentation</li> <li>Translation: Expanding multilingual support</li> <li>Tutorial Creation: Enriching learning resources</li> </ul>"},{"location":"en/development/#community-contributions","title":"Community Contributions","text":"<ul> <li>Bug Reports: Finding and reporting issues</li> <li>Feature Requests: Proposing new features</li> <li>Answering Questions: Community support</li> </ul>"},{"location":"en/development/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"en/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python: 3.9 or higher</li> <li>Git: Version control</li> <li>Rye: Package management tool</li> </ul>"},{"location":"en/development/#setup-steps","title":"Setup Steps","text":"<ol> <li> <p>Clone Repository terminal<pre><code>git clone https://github.com/nims-dpfc/rdetoolkit.git\ncd rdetoolkit\n</code></pre></p> </li> <li> <p>Install Rye terminal<pre><code>curl -sSf https://rye-up.com/get | bash\nsource ~/.rye/env\n</code></pre></p> </li> <li> <p>Install Dependencies terminal<pre><code>rye sync\n</code></pre></p> </li> <li> <p>Activate Development Environment terminal<pre><code>source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Setup pre-commit terminal<pre><code>pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"en/development/#development-workflow","title":"Development Workflow","text":""},{"location":"en/development/#branch-strategy","title":"Branch Strategy","text":"<ul> <li>main: Stable main branch</li> <li>feature/: New feature development branches</li> <li>bugfix/: Bug fix branches</li> <li>docs/: Documentation update branches</li> </ul>"},{"location":"en/development/#development-process","title":"Development Process","text":"<ol> <li>Create or Check Issue</li> <li>Clarify work content in GitHub Issues</li> <li> <p>Check if existing Issue exists</p> </li> <li> <p>Create Branch terminal<pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Development and Testing terminal<pre><code># Make code changes\n# Run tests\nrye test\n\n# Lint check\nrye lint\n\n# Format\nrye fmt\n</code></pre></p> </li> <li> <p>Commit and Push terminal<pre><code>git add .\ngit commit -m \"feat: add new feature description\"\ngit push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create Pull Request</p> </li> <li>Create pull request on GitHub</li> <li>Include detailed description and test results</li> </ol>"},{"location":"en/development/#coding-standards","title":"Coding Standards","text":""},{"location":"en/development/#python-style","title":"Python Style","text":"<ul> <li>PEP 8: Comply with Python standard style guide</li> <li>Type Hints: Add type annotations to all functions</li> <li>docstring: Use Google-style docstrings</li> </ul> example_function.py<pre><code>def process_data(\n    input_data: List[Dict[str, Any]],\n    config: Optional[Config] = None\n) -&gt; ProcessResult:\n    \"\"\"\n    Function to process data\n\n    Args:\n        input_data: List of data to be processed\n        config: Processing configuration (optional)\n\n    Returns:\n        ProcessResult object containing processing results\n\n    Raises:\n        ValueError: When input data is invalid\n        ProcessingError: When error occurs during processing\n\n    Example:\n        &gt;&gt;&gt; data = [{\"key\": \"value\"}]\n        &gt;&gt;&gt; result = process_data(data)\n        &gt;&gt;&gt; print(result.status)\n        'success'\n    \"\"\"\n    if not input_data:\n        raise ValueError(\"Input data cannot be empty\")\n\n    # Processing logic\n    return ProcessResult(status=\"success\")\n</code></pre>"},{"location":"en/development/#writing-tests","title":"Writing Tests","text":"test_example.py<pre><code>import pytest\nfrom rdetoolkit.processing import process_data\n\nclass TestProcessData:\n    def test_valid_input(self):\n        \"\"\"Test with valid input data\"\"\"\n        data = [{\"key\": \"value\"}]\n        result = process_data(data)\n        assert result.status == \"success\"\n\n    def test_empty_input(self):\n        \"\"\"Test with empty input data\"\"\"\n        with pytest.raises(ValueError):\n            process_data([])\n\n    def test_invalid_input(self):\n        \"\"\"Test with invalid input data\"\"\"\n        with pytest.raises(TypeError):\n            process_data(\"invalid\")\n</code></pre>"},{"location":"en/development/#quality-assurance","title":"Quality Assurance","text":""},{"location":"en/development/#automated-checks","title":"Automated Checks","text":"<ul> <li>pre-commit: Automatic checks before commit</li> <li>GitHub Actions: CI/CD pipeline</li> <li>codecov: Test coverage measurement</li> </ul>"},{"location":"en/development/#check-items","title":"Check Items","text":"<ul> <li>Lint: flake8, pylint</li> <li>Format: black, isort</li> <li>Type Check: mypy</li> <li>Test: pytest</li> <li>Security: bandit</li> </ul>"},{"location":"en/development/#release-process","title":"Release Process","text":""},{"location":"en/development/#versioning","title":"Versioning","text":"<p>Adopts Semantic Versioning (SemVer):</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: Backward-compatible feature additions</li> <li>PATCH: Backward-compatible bug fixes</li> </ul>"},{"location":"en/development/#release-steps","title":"Release Steps","text":"<ol> <li>Update Changelog</li> <li>Update Version Number</li> <li>Create Tag</li> <li>Publish to PyPI</li> <li>Create GitHub Release</li> </ol>"},{"location":"en/development/#community-guidelines","title":"Community Guidelines","text":""},{"location":"en/development/#communication","title":"Communication","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: Questions and discussions</li> <li>Pull Request: Code review and discussion</li> </ul>"},{"location":"en/development/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Respect: Respect all participants</li> <li>Constructive: Provide constructive feedback</li> <li>Collaborative: Value teamwork</li> <li>Inclusive: Welcome diversity</li> </ul>"},{"location":"en/development/#next-steps","title":"Next Steps","text":"<p>To participate in development:</p> <ol> <li>Contributing - Detailed contribution guidelines</li> <li>Documentation Creation - How to create documentation</li> <li>GitHub Issues - Check available tasks</li> </ol> <p>For First-time Contributors</p> <p>If you're contributing for the first time, we recommend starting with Issues labeled \"good first issue\".</p>"},{"location":"en/rdetoolkit/artifact/report/","title":"Report Generation API","text":""},{"location":"en/rdetoolkit/artifact/report/#purpose","title":"Purpose","text":"<p>This module provides report generation functionality for RDEToolKit. It creates comprehensive reports from structured processing results, including data summaries, visualizations, and analysis outputs.</p>"},{"location":"en/rdetoolkit/artifact/report/#report-generation","title":"Report Generation","text":"<ul> <li>Comprehensive processing result reports</li> <li>Data visualization and charts</li> <li>Customizable report templates</li> </ul>"},{"location":"en/rdetoolkit/artifact/report/#output-formats","title":"Output Formats","text":"<ul> <li>Support for multiple output formats</li> <li>PDF and HTML report generation</li> <li>Integration with processing workflows</li> </ul>"},{"location":"en/rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report","title":"<code>src.rdetoolkit.artifact.report</code>","text":""},{"location":"en/rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.logger","title":"<code>logger: Incomplete = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.CodeSecurityScanner","title":"<code>CodeSecurityScanner(source_dir)</code>","text":"<p>               Bases: <code>ICodeScanner</code></p>"},{"location":"en/rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.ExternalConnScanner","title":"<code>ExternalConnScanner(source_dir)</code>","text":"<p>               Bases: <code>ICodeScanner</code></p>"},{"location":"en/rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.TemplateMarkdownReportGenerator","title":"<code>TemplateMarkdownReportGenerator(template_str=None)</code>","text":"<p>               Bases: <code>IReportGenerator</code></p> <p>TemplateMarkdownReportGenerator is a class that generates a markdown report for the given template and data.</p>"},{"location":"en/rdetoolkit/artifact/report/#src.rdetoolkit.artifact.report.get_scanner","title":"<code>get_scanner(scanner_type, source_dir)</code>","text":"<p>A method to switch the type of scanner (vulnerability or external).</p> <p>Parameters:</p> Name Type Description Default <code>scanner_type</code> <code>Literal['vulnerability', 'external']</code> <p>Expected to be either \"vulnerability\" or \"external\".</p> required <code>source_dir</code> <code>str | Path</code> <p>The directory to be scanned.</p> required <p>Returns:</p> Name Type Description <code>ICodeScanner</code> <code>ICodeScanner</code> <p>An instance of the corresponding scanner.</p>"},{"location":"en/rdetoolkit/artifact/report/#basic-report-generation","title":"Basic Report Generation","text":"report_generation.py<pre><code>from rdetoolkit.artifact.report import generate_report\nfrom pathlib import Path\n\n# Generate processing report\nprocessing_results = {\n    \"processed_files\": 10,\n    \"errors\": 0,\n    \"warnings\": 2,\n    \"processing_time\": \"00:05:30\"\n}\n\noutput_path = Path(\"data/reports/processing_report.html\")\nresult = generate_report(processing_results, output_path)\n\nprint(f\"Report generation result: {result}\")\n</code></pre>"},{"location":"en/rdetoolkit/cmd/command/","title":"Base Commands API","text":""},{"location":"en/rdetoolkit/cmd/command/#purpose","title":"Purpose","text":"<p>This module provides base command functionality for RDEToolKit's command-line interface. It defines abstract base classes and common functionality for implementing CLI commands.</p>"},{"location":"en/rdetoolkit/cmd/command/#command-base-classes","title":"Command Base Classes","text":"<ul> <li>Abstract base classes for CLI commands</li> <li>Common command functionality</li> <li>Argument parsing and validation</li> </ul>"},{"location":"en/rdetoolkit/cmd/command/#cli-framework","title":"CLI Framework","text":"<ul> <li>Extensible command architecture</li> <li>Error handling and reporting</li> <li>Help system integration</li> </ul>"},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command","title":"<code>src.rdetoolkit.cmd.command</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.logger","title":"<code>logger: Incomplete = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.Command","title":"<code>Command(name, **attrs)</code>","text":"<p>               Bases: <code>Command</code></p>"},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.DockerfileGenerator","title":"<code>DockerfileGenerator(path='Dockerfile')</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InitCommand","title":"<code>InitCommand</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceJsonGenerator","title":"<code>InvoiceJsonGenerator(path='invoice.json')</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.InvoiceSchemaJsonGenerator","title":"<code>InvoiceSchemaJsonGenerator(path='invoice.schema.json')</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MainScriptGenerator","title":"<code>MainScriptGenerator(path)</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.MetadataDefJsonGenerator","title":"<code>MetadataDefJsonGenerator(path='metadata-def.json')</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.RequirementsTxtGenerator","title":"<code>RequirementsTxtGenerator(path='requirements.txt')</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#src.rdetoolkit.cmd.command.VersionCommand","title":"<code>VersionCommand</code>","text":""},{"location":"en/rdetoolkit/cmd/command/#implementing-custom-commands","title":"Implementing Custom Commands","text":"custom_command.py<pre><code>from rdetoolkit.cmd.command import BaseCommand\nimport argparse\n\nclass CustomCommand(BaseCommand):\n    \"\"\"Custom command implementation\"\"\"\n\n    def add_arguments(self, parser: argparse.ArgumentParser):\n        \"\"\"Add command-specific arguments\"\"\"\n        parser.add_argument('--input', required=True, help='Input file path')\n        parser.add_argument('--output', required=True, help='Output file path')\n\n    def handle(self, args):\n        \"\"\"Handle command execution\"\"\"\n        print(f\"Processing: {args.input} -&gt; {args.output}\")\n        # Custom command logic here\n        return {\"status\": \"success\"}\n\n# Usage\ncommand = CustomCommand()\n# Command would be executed through CLI framework\n</code></pre>"},{"location":"en/rdetoolkit/cmd/gen_excelinvoice/","title":"Excel Invoice Generation API","text":""},{"location":"en/rdetoolkit/cmd/gen_excelinvoice/#purpose","title":"Purpose","text":"<p>This module provides Excel invoice generation functionality for RDEToolKit. It handles the creation of Excel-formatted invoice files from structured data, with support for templates and customization.</p>"},{"location":"en/rdetoolkit/cmd/gen_excelinvoice/#excel-invoice-generation","title":"Excel Invoice Generation","text":"<ul> <li>Excel file generation from structured data</li> <li>Template-based invoice creation</li> <li>Customizable formatting and layout</li> </ul>"},{"location":"en/rdetoolkit/cmd/gen_excelinvoice/#data-integration","title":"Data Integration","text":"<ul> <li>Integration with invoice data models</li> <li>Support for multiple data sources</li> <li>Validation and error handling</li> </ul>"},{"location":"en/rdetoolkit/cmd/gen_excelinvoice/#src.rdetoolkit.cmd.gen_excelinvoice","title":"<code>src.rdetoolkit.cmd.gen_excelinvoice</code>","text":""},{"location":"en/rdetoolkit/cmd/gen_excelinvoice/#src.rdetoolkit.cmd.gen_excelinvoice.logger","title":"<code>logger: Incomplete = get_logger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/cmd/gen_excelinvoice/#src.rdetoolkit.cmd.gen_excelinvoice.GenerateExcelInvoiceCommand","title":"<code>GenerateExcelInvoiceCommand(invoice_schema_file, output_path, mode)</code>","text":""},{"location":"en/rdetoolkit/cmd/gen_excelinvoice/#basic-excel-invoice-generation","title":"Basic Excel Invoice Generation","text":"excel_invoice_generation.py<pre><code>from rdetoolkit.cmd.gen_excelinvoice import generate_excel_invoice\nfrom pathlib import Path\n\n# Generate Excel invoice\ninput_data = {\n    \"basic\": {\n        \"dataName\": \"Experiment Data 001\",\n        \"description\": \"Temperature measurement experiment\"\n    },\n    \"sample\": {\n        \"generalAttributes\": [],\n        \"specificAttributes\": []\n    }\n}\n\noutput_path = Path(\"data/output/invoice.xlsx\")\nresult = generate_excel_invoice(input_data, output_path)\n\nprint(f\"Excel invoice generation result: {result}\")\n</code></pre>"},{"location":"en/rdetoolkit/impl/input_controller/#purpose","title":"Purpose","text":"<p>This module provides input data management functionality for RDEToolKit. It handles input data validation, preprocessing, and coordination with structured processing workflows.</p>"},{"location":"en/rdetoolkit/impl/input_controller/#input-data-management","title":"Input Data Management","text":"<ul> <li>Input data validation and preprocessing</li> <li>File type detection and classification</li> <li>Integration with processing workflows</li> </ul>"},{"location":"en/rdetoolkit/impl/input_controller/#data-coordination","title":"Data Coordination","text":"<ul> <li>Input path management</li> <li>Resource allocation</li> <li>Error handling and validation</li> </ul>"},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller","title":"<code>src.rdetoolkit.impl.input_controller</code>","text":""},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.ExcelInvoiceChecker","title":"<code>ExcelInvoiceChecker(unpacked_dir_basename)</code>","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to determine and parse the ExcelInvoice mode.</p> <p>This class is used to identify, group, and validate the files in ExcelInvoice mode. The primary focus is on determining the presence and validity of ZIP files, Excel Invoice files, and other file types.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for unpacked content.</p> <p>Methods:</p> Name Description <code>parse</code> <p>Path) -&gt; tuple[RawFiles, Optional[Path]]: Parse the source input directory, validate the file groups, and return the raw files and the Excel Invoice file.</p>"},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.InvoiceChecker","title":"<code>InvoiceChecker(unpacked_dir_basename)</code>","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to determine and parse the invoice mode.</p> <p>This class groups and checks invoice files, specifically identifying zip files, Excel invoice files, and other types of files.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for the unpacked content.</p> Note <p>For the purpose of this checker, notable files are primarily Excel invoices with a specific naming convention.</p>"},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.MultiFileChecker","title":"<code>MultiFileChecker(unpacked_dir_basename)</code>","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to identify and parse the MultiFile mode.</p> <p>This class is designed to handle multiple file modes. It checks the files in the source input directory, groups them, and retrieves the raw files.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory used for certain operations.</p>"},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.RDEFormatChecker","title":"<code>RDEFormatChecker(unpacked_dir_basename)</code>","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to identify and parse the RDE Format.</p> <p>This class is designed to handle files in the RDE Format. It checks the presence of ZIP files, unpacks them, and retrieves raw files from the unpacked content.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for unpacked content.</p>"},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.SmartTableChecker","title":"<code>SmartTableChecker(unpacked_dir_basename, save_table_file=False)</code>","text":"<p>               Bases: <code>IInputFileChecker</code></p> <p>A checker class to determine and parse the SmartTable invoice mode.</p> <p>This class handles SmartTable files (Excel/CSV/TSV) and optionally zip files, processing them for metadata extraction and invoice generation.</p> <p>Attributes:</p> Name Type Description <code>out_dir_temp</code> <code>Path</code> <p>Temporary directory for the unpacked content.</p>"},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.SmartTableChecker.checker_type","title":"<code>checker_type: str</code>  <code>property</code>","text":"<p>Return the type identifier for this checker.</p>"},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.SmartTableChecker.out_dir_temp","title":"<code>out_dir_temp: Incomplete = unpacked_dir_basename</code>  <code>instance-attribute</code>","text":""},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.SmartTableChecker.save_table_file","title":"<code>save_table_file: Incomplete = save_table_file</code>  <code>instance-attribute</code>","text":""},{"location":"en/rdetoolkit/impl/input_controller/#src.rdetoolkit.impl.input_controller.SmartTableChecker.parse","title":"<code>parse(src_dir_input)</code>","text":"<p>Parses the source input directory for SmartTable files and zip files.</p> <p>Creates individual CSV files for each SmartTable row and maps them to related files.</p> <p>Parameters:</p> Name Type Description Default <code>src_dir_input</code> <code>Path</code> <p>Source directory containing the input files.</p> required <p>Returns:</p> Type Description <code>tuple[RawFiles, Path | None]</code> <p>tuple[RawFiles, Path | None]: - RawFiles: A list of tuples where each tuple contains (csv_file, related_files...) - Path | None: Path to the SmartTable file if found, otherwise None.</p> <p>Raises:</p> Type Description <code>StructuredError</code> <p>If no SmartTable files are found or if multiple SmartTable files are present.</p>"},{"location":"en/rdetoolkit/impl/input_controller/#basic-input-processing","title":"Basic Input Processing","text":"input_processing.py<pre><code>from rdetoolkit.impl.input_controller import InputController\nfrom pathlib import Path\n\n# Process input data\ncontroller = InputController()\ninput_paths = [Path(\"data/input1\"), Path(\"data/input2\")]\n\nresult = controller.process_inputs(input_paths)\nprint(f\"Input processing result: {result}\")\n</code></pre>"},{"location":"en/rdetoolkit/models/config/","title":"Configuration Models API","text":""},{"location":"en/rdetoolkit/models/config/#purpose","title":"Purpose","text":"<p>This module defines configuration models for RDEToolKit using Pydantic. It provides structured configuration management with type safety, validation, and automatic default value application for system settings and processing configurations.</p>"},{"location":"en/rdetoolkit/models/config/#configuration-data-models","title":"Configuration Data Models","text":"<ul> <li>System settings management with type safety</li> <li>MultiDataTile settings for error handling</li> <li>Pydantic-based validation and serialization</li> </ul>"},{"location":"en/rdetoolkit/models/config/#type-safety-and-validation","title":"Type Safety and Validation","text":"<ul> <li>Automatic type checking and conversion</li> <li>Field validation with descriptive error messages</li> <li>Default value management</li> </ul>"},{"location":"en/rdetoolkit/models/config/#basic-configuration-creation","title":"Basic Configuration Creation","text":"basic_config.py<pre><code>from rdetoolkit.models.config import Config, SystemSettings, MultiDataTileSettings\n\n# Create system settings\nsystem_settings = SystemSettings(\n    extended_mode=True,\n    save_raw=True,\n    save_thumbnail_image=False\n)\n\n# Create MultiDataTile settings\nmultidatatile_settings = MultiDataTileSettings(\n    ignore_errors=False\n)\n\n# Create complete configuration\nconfig = Config(\n    system=system_settings,\n    multidatatile=multidatatile_settings\n)\n\nprint(f\"Extended mode: {config.system.extended_mode}\")\nprint(f\"Save raw files: {config.system.save_raw}\")\nprint(f\"Ignore errors: {config.multidatatile.ignore_errors}\")\n</code></pre>"},{"location":"en/rdetoolkit/models/config/#configuration-from-file","title":"Configuration from File","text":"config_from_file.py<pre><code>from rdetoolkit.models.config import Config\nfrom rdetoolkit.config import parse_config_file\n\n# Load configuration from file\nconfig = parse_config_file(\"config.yaml\")\n\n# Access configuration values\nprint(f\"System configuration:\")\nprint(f\"  Extended mode: {config.system.extended_mode}\")\nprint(f\"  Save raw: {config.system.save_raw}\")\nprint(f\"  Save thumbnails: {config.system.save_thumbnail_image}\")\n\nprint(f\"MultiDataTile configuration:\")\nprint(f\"  Ignore errors: {config.multidatatile.ignore_errors}\")\n</code></pre>"},{"location":"en/rdetoolkit/models/config/#dynamic-configuration-management","title":"Dynamic Configuration Management","text":"dynamic_config.py<pre><code>from rdetoolkit.models.config import Config\nimport os\n\n# Create configuration based on environment variables\nconfig_data = {\n    \"system\": {\n        \"extended_mode\": os.getenv(\"RDE_EXTENDED_MODE\", \"false\").lower() == \"true\",\n        \"save_raw\": os.getenv(\"RDE_SAVE_RAW\", \"true\").lower() == \"true\",\n        \"save_thumbnail_image\": os.getenv(\"RDE_SAVE_THUMBNAILS\", \"false\").lower() == \"true\"\n    },\n    \"multidatatile\": {\n        \"ignore_errors\": os.getenv(\"RDE_IGNORE_ERRORS\", \"false\").lower() == \"true\"\n    }\n}\n\n# Create configuration object\nconfig = Config(**config_data)\n\nprint(\"Configuration loaded from environment variables:\")\nprint(f\"Extended mode: {config.system.extended_mode}\")\nprint(f\"Save raw: {config.system.save_raw}\")\nprint(f\"Ignore errors: {config.multidatatile.ignore_errors}\")\n</code></pre>"},{"location":"en/rdetoolkit/models/invoice/#purpose","title":"Purpose","text":"<p>This module defines data models for invoices and Excel invoices in RDEToolKit. It provides structured invoice management, validation, registry management, and multi-language support through term registries.</p>"},{"location":"en/rdetoolkit/models/invoice/#data-models","title":"Data Models","text":"<ul> <li>Excel invoice header structure definitions</li> <li>Template configuration management</li> <li>Multi-language support through term registries</li> </ul>"},{"location":"en/rdetoolkit/models/invoice/#configuration-management","title":"Configuration Management","text":"<ul> <li>Fixed header management</li> <li>General and specific attribute configuration</li> <li>Term search and mapping functionality</li> </ul>"},{"location":"en/rdetoolkit/models/invoice/#fixed-header-management","title":"Fixed Header Management","text":"fixed_headers.py<pre><code>from rdetoolkit.models.invoice import FixedHeaders\nimport pandas as pd\n\n# Create fixed headers\nheaders = FixedHeaders()\n\n# Generate template DataFrame\ntemplate_df = headers.to_template_dataframe()\nprint(f\"Template columns: {len(template_df.columns)}\")\nprint(f\"Template rows: {len(template_df)}\")\n\n# Display header structure\nprint(\"Header structure:\")\nfor i, column in enumerate(template_df.columns):\n    print(f\"  Column {i+1}: {column}\")\n</code></pre>"},{"location":"en/rdetoolkit/models/invoice/#term-registry-usage","title":"Term Registry Usage","text":"term_registry.py<pre><code>from rdetoolkit.models.invoice import GeneralTermRegistry, SpecificTermRegistry\n\n# General term registry usage\ngeneral_registry = GeneralTermRegistry()\n\n# Search terms\nsearch_results = general_registry.search(\"temperature\")\nprint(f\"Search results: {search_results}\")\n\n# Search by term ID\nterm_by_id = general_registry.by_term_id(\"TEMP001\")\nif term_by_id:\n    print(f\"Term ID TEMP001: {term_by_id}\")\n\n# Search by Japanese term\nterm_by_ja = general_registry.by_ja(\"\u6e29\u5ea6\")\nif term_by_ja:\n    print(f\"Japanese '\u6e29\u5ea6': {term_by_ja}\")\n\n# Search by English term\nterm_by_en = general_registry.by_en(\"temperature\")\nif term_by_en:\n    print(f\"English 'temperature': {term_by_en}\")\n\n# Specific term registry usage\nspecific_registry = SpecificTermRegistry()\n\n# Search by term and class ID\nspecific_term = specific_registry.by_term_and_class_id(\"material\", \"MAT001\")\nif specific_term:\n    print(f\"Specific term: {specific_term}\")\n</code></pre>"},{"location":"en/rdetoolkit/models/invoice/#template-configuration-usage","title":"Template Configuration Usage","text":"template_config.py<pre><code>from rdetoolkit.models.invoice import TemplateConfig\n\n# Create template configuration\ntemplate_config = TemplateConfig(\n    name=\"Experiment Data Template\",\n    version=\"1.0\",\n    description=\"Template for temperature measurement experiments\",\n    author=\"John Doe\",\n    created_date=\"2024-01-01\"\n)\n\nprint(f\"Template name: {template_config.name}\")\nprint(f\"Version: {template_config.version}\")\nprint(f\"Description: {template_config.description}\")\nprint(f\"Author: {template_config.author}\")\nprint(f\"Created date: {template_config.created_date}\")\n\n# Validate template configuration\nif template_config.validate():\n    print(\"\u2713 Template configuration is valid\")\nelse:\n    print(\"\u2717 Template configuration has issues\")\n</code></pre>"},{"location":"en/rdetoolkit/models/invoice_schema/#purpose","title":"Purpose","text":"<p>This module defines the data models for invoice schema validation in RDEToolKit. It provides structured schema definitions for validating invoice JSON files against predefined schemas, ensuring data consistency and integrity.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#schema-validation-models","title":"Schema Validation Models","text":"<ul> <li>Invoice schema structure definitions</li> <li>JSONSchema-compliant validation models</li> <li>Type-safe schema representation</li> </ul>"},{"location":"en/rdetoolkit/models/invoice_schema/#data-integrity","title":"Data Integrity","text":"<ul> <li>Comprehensive schema validation</li> <li>Error detection and reporting</li> <li>Schema compliance verification</li> </ul>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema","title":"<code>src.rdetoolkit.models.invoice_schema</code>","text":""},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItems","title":"<code>BasicItems</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the basic items of an invoice.</p> <p><code>properties.basic</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.BasicItemsValue","title":"<code>BasicItemsValue</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.ClassId","title":"<code>ClassId</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the ClassId for an invoice.</p> <p><code>properties.sample.properties.specificAttributes.items.properties.classId</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomField","title":"<code>CustomField</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a custom field in an invoice schema.</p> <p><code>properties.custom.</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.CustomItems","title":"<code>CustomItems</code>","text":"<p>               Bases: <code>RootModel</code></p> <p>A class representing custom items in an invoice schema.</p> <p><code>properties.custom.properties.&lt;custom key&gt;</code> is an instance of this class.</p> <p>Attributes:</p> Name Type Description <code>root</code> <code>dict[str, MetaProperty]</code> <p>A dictionary containing the custom items.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.DatasetId","title":"<code>DatasetId</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the dataset ID for an invoice.</p> <p><code>properties.datasetId</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralAttribute","title":"<code>GeneralAttribute</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a general attribute in the invoice schema.</p> <p><code>properties.sample.properties.generalAttribute</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralChildProperty","title":"<code>GeneralChildProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a general child property.</p> <p><code>properties.sample.properties.generalAtttirbutes.items.properties</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.GeneralProperty","title":"<code>GeneralProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a general property in the invoice schema.</p> <p><code>properties.sample.properties.generalAtttirbutes.items</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.InvoiceSchemaJson","title":"<code>InvoiceSchemaJson</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Invoice schema class.</p> Example <p>To generate invoice.schema.json from the model, do as follows: <pre><code>obj = InvoiceSchemaJson(\n    version=\"https://json-schema.org/draft/2020-12/schema\",\n    schema_id=\"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n    description=\"RDE\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30a1\u30a4\u30eb\",\n    type=\"object\",\n    properties=Properties()\n)\nprint(obj.model_dump_json())\n</code></pre></p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.LangLabels","title":"<code>LangLabels</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class representing labels in different languages.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.MetaProperty","title":"<code>MetaProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a meta property in the invoice schema.</p> <p>Attributes:</p> Name Type Description <code>label</code> <code>LangLabels</code> <p>The label of the meta property.</p> <code>value_type</code> <code>Literal['boolean', 'integer', 'number', 'string']</code> <p>The type of the value for the meta property.</p> <code>description</code> <code>Optional[str]</code> <p>The description of the meta property.</p> <code>examples</code> <code>Optional[str]</code> <p>Examples of the meta property.</p> <code>default</code> <code>Optional[Union[bool, int, float, str]]</code> <p>The default value for the meta property.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Options","title":"<code>Options</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the options for a widget in the invoice schema.</p> <p><code>properties.custom.properties.&lt;custom key&gt;.options</code> is an instance of this class.</p> <p>Attributes:</p> Name Type Description <code>widget</code> <code>Optional[Literal['textarea']]</code> <p>The type of widget. Defaults to None.</p> <code>rows</code> <code>Optional[int]</code> <p>The number of rows for a textarea widget. Defaults to None.</p> <code>unit</code> <code>Optional[str]</code> <p>The unit of measurement for the widget. Defaults to None.</p> <code>placeholder</code> <code>Optional[Placeholder]</code> <p>The placeholder text for the widget. Defaults to None.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Placeholder","title":"<code>Placeholder</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class representing placeholders in different languages.</p> <p>This class inherits from <code>BaseModel</code>, and the <code>ja</code> and <code>en</code> attributes hold the placeholders in Japanese and English, respectively.</p> <p><code>properties.custom.properties.&lt;custom key&gt;.options.placeholder</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.Properties","title":"<code>Properties</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the properties of an invoice.</p> <p><code>properties</code> is an instance of this class.</p> <p>Attributes:</p> Name Type Description <code>custom</code> <code>Optional[CustomField]</code> <p>The custom field of the invoice.</p> <code>sample</code> <code>Optional[str]</code> <p>A sample field of the invoice.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleField","title":"<code>SampleField</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a sample field in the invoice schema.</p> <p><code>properties.sample</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleGeneralItems","title":"<code>SampleGeneralItems</code>","text":"<p>               Bases: <code>RootModel</code></p> <p>Represents a sample general item.</p> <p>This class is used as the instance for <code>properties.sample.properties.generalAtttirbutes.items</code>.</p> <p>Attributes:</p> Name Type Description <code>root</code> <code>Optional[list[GeneralProperty]]</code> <p>The list of general properties. Defaults to None.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleProperties","title":"<code>SampleProperties</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the properties of a sample.</p> <p><code>properties.sample.properties</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SamplePropertiesWhenAdding","title":"<code>SamplePropertiesWhenAdding</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the properties of a sample.</p> <p><code>properties.sample.properties</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SampleSpecificItems","title":"<code>SampleSpecificItems</code>","text":"<p>               Bases: <code>RootModel</code></p> <p>Represents a specificAttirbutes child property.</p> <p><code>properties.sample.properties.specificAttributes.itemss</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificAttribute","title":"<code>SpecificAttribute</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a specific attribute in the invoice schema.</p> <p><code>properties.sample.properties.specificAttribute</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificChildProperty","title":"<code>SpecificChildProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a specificAttirbutes child property.</p> <p><code>properties.sample.properties.specificAttributes.items.properties</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.SpecificProperty","title":"<code>SpecificProperty</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a specificAttirbutes child property.</p> <p><code>properties.sample.properties.specificAttributes.itemss</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#src.rdetoolkit.models.invoice_schema.TermId","title":"<code>TermId</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a term identifier.</p> <p><code>properties.sample.properties.generalAtttirbutes.items.properties.termId</code> is an instance of this class.</p>"},{"location":"en/rdetoolkit/models/invoice_schema/#basic-schema-validation","title":"Basic Schema Validation","text":"basic_schema_validation.py<pre><code>from rdetoolkit.models.invoice_schema import InvoiceSchemaJson\nfrom rdetoolkit.validation import InvoiceValidator\nfrom pathlib import Path\n\n# Load and validate invoice schema\nschema_path = Path(\"data/tasksupport/invoice.schema.json\")\nvalidator = InvoiceValidator(schema_path)\n\n# Validate invoice against schema\ninvoice_path = Path(\"data/invoice/invoice.json\")\ntry:\n    result = validator.validate(path=invoice_path)\n    print(\"Invoice validation successful\")\n    print(f\"Validated data keys: {list(result.keys())}\")\nexcept Exception as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"en/rdetoolkit/models/metadata/#purpose","title":"Purpose","text":"<p>This module defines data models for metadata management in RDEToolKit. It provides structured metadata definitions, validation models, and type-safe representations for metadata files used in structured data processing.</p>"},{"location":"en/rdetoolkit/models/metadata/#metadata-structure-models","title":"Metadata Structure Models","text":"<ul> <li>Comprehensive metadata structure definitions</li> <li>Pydantic-based validation and serialization</li> <li>Type-safe metadata representation</li> </ul>"},{"location":"en/rdetoolkit/models/metadata/#data-validation","title":"Data Validation","text":"<ul> <li>Schema validation for metadata files</li> <li>Field validation with descriptive error messages</li> <li>Automatic type conversion and validation</li> </ul>"},{"location":"en/rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata","title":"<code>src.rdetoolkit.models.metadata</code>","text":""},{"location":"en/rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MAX_VALUE_SIZE","title":"<code>MAX_VALUE_SIZE: Final[int] = 1024</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetaValue","title":"<code>MetaValue</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata class for the 'value' and 'unit' attributes.</p>"},{"location":"en/rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.MetadataItem","title":"<code>MetadataItem</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>metadata-def.json class.</p> <p>Stores metadata extracted by the data structuring process.</p> <p>Attributes:</p> Name Type Description <code>constant</code> <code>dict[str, MetaValue]</code> <p>A set of metadata common to all measurements.</p> <code>variable</code> <code>ValidableItems</code> <p>An array of metadata sets that vary with each measurement.</p>"},{"location":"en/rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.ValidableItems","title":"<code>ValidableItems</code>","text":"<p>               Bases: <code>RootModel</code></p> <p>A class representing validatable items of metadata.</p> <p>This class inherits from <code>RootModel</code>, and the <code>root</code> attribute holds a list of dictionaries, where each dictionary has a string as a key and a <code>MetaValue</code> as a value.</p> <p>Attributes:</p> Name Type Description <code>root</code> <code>list[dict[str, MetaValue]]</code> <p>A list of validatable items of metadata.</p>"},{"location":"en/rdetoolkit/models/metadata/#src.rdetoolkit.models.metadata.Variable","title":"<code>Variable</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata class for the 'variable' attribute.</p>"},{"location":"en/rdetoolkit/models/metadata/#basic-metadata-model-usage","title":"Basic Metadata Model Usage","text":"basic_metadata.py<pre><code>from rdetoolkit.models.metadata import MetadataItem\nfrom rdetoolkit.validation import metadata_validate\nfrom pathlib import Path\n\n# Validate metadata file\nmetadata_path = Path(\"data/meta/metadata.json\")\ntry:\n    metadata_validate(metadata_path)\n    print(\"Metadata validation successful\")\nexcept Exception as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"en/rdetoolkit/models/rde2types/","title":"Type Definitions API","text":""},{"location":"en/rdetoolkit/models/rde2types/#purpose","title":"Purpose","text":"<p>This module defines type definitions and type aliases used throughout RDEToolKit. It provides consistent type annotations, path types, and data structure definitions for type safety and code clarity.</p>"},{"location":"en/rdetoolkit/models/rde2types/#type-definitions","title":"Type Definitions","text":"<ul> <li>Path type definitions for file system operations</li> <li>Data structure type aliases</li> <li>Input/output type specifications</li> </ul>"},{"location":"en/rdetoolkit/models/rde2types/#type-safety","title":"Type Safety","text":"<ul> <li>Consistent type annotations across the codebase</li> <li>Type checking support for development</li> <li>Clear interface definitions</li> </ul>"},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types","title":"<code>src.rdetoolkit.models.rde2types</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.ExcelInvoicePathList","title":"<code>ExcelInvoicePathList = Sequence[Path]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.InputFilesGroup","title":"<code>InputFilesGroup = tuple[ZipFilesPathList, ExcelInvoicePathList, OtherFilesPathList]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetaItem","title":"<code>MetaItem = dict[str, Union[str, int, float, list, bool]]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetaType","title":"<code>MetaType = dict[str, Union[str, int, float, list, bool]]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.OtherFilesPathList","title":"<code>OtherFilesPathList = Sequence[Path]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.PathTuple","title":"<code>PathTuple = tuple[Path, ...]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RawFiles","title":"<code>RawFiles = Sequence[PathTuple]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeFsPath","title":"<code>RdeFsPath = Union[str, Path]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RepeatedMetaType","title":"<code>RepeatedMetaType = dict[str, list[Union[str, int, float, list, bool]]]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.UnZipFilesPathList","title":"<code>UnZipFilesPathList = Sequence[Path]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.ZipFilesPathList","title":"<code>ZipFilesPathList = Sequence[Path]</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.MetadataDefJson","title":"<code>MetadataDefJson</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Defines the metadata structure for a JSON object as a Typed Dictionary.</p> <p>This class specifies the required structure of metadata, including various fields that describe characteristics and properties of the data.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>Name</code> <p>The name associated with the metadata.</p> <code>schema</code> <code>Schema</code> <p>The schema of the metadata.</p> <code>unit</code> <code>str</code> <p>The unit of measurement.</p> <code>description</code> <code>str</code> <p>A description of the metadata.</p> <code>uri</code> <code>str</code> <p>The URI associated with the metadata.</p> <code>originalName</code> <code>str</code> <p>The original name of the metadata.</p> <code>originalType</code> <code>str</code> <p>The original type of the metadata.</p> <code>mode</code> <code>str</code> <p>The mode associated with the metadata.</p> <code>order</code> <code>str</code> <p>The order of the metadata.</p> <code>valiable</code> <code>int</code> <p>A variable associated with the metadata.</p> <code>_feature</code> <code>bool</code> <p>A private attribute indicating a feature.</p> <code>action</code> <code>str</code> <p>An action associated with the metadata.</p>"},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.Name","title":"<code>Name</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a name structure as a Typed Dictionary.</p> <p>This class is designed to hold names in different languages, specifically Japanese and English.</p> <p>Attributes:</p> Name Type Description <code>ja</code> <code>str</code> <p>The name in Japanese.</p> <code>en</code> <code>str</code> <p>The name in English.</p>"},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeFormatFlags","title":"<code>RdeFormatFlags()</code>  <code>dataclass</code>","text":"<p>Class for managing flags used in RDE.</p> <p>This class has two private attributes: _is_rdeformat_enabled and _is_multifile_enabled. These attributes are set in the post_init method, depending on the existence of certain files. Additionally, properties and setters are used to get and modify the values of these attributes. However, it is not allowed for both attributes to be True simultaneously.</p> Warning <p>Currently, this class is not used because the <code>data/tasksupport/rdeformat.txt</code> and <code>data/tasksupport/multifile.txt</code> files are not used. It is scheduled to be deleted in the next update.</p> <p>Attributes:</p> Name Type Description <code>_is_rdeformat_enabled</code> <code>bool</code> <p>Flag indicating whether RDE format is enabled</p> <code>_is_multifile_enabled</code> <code>bool</code> <p>Flag indicating whether multi-file support is enabled</p>"},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeInputDirPaths","title":"<code>RdeInputDirPaths(inputdata, invoice, tasksupport, config=...)</code>  <code>dataclass</code>","text":"<p>A data class that holds folder paths used for input in the RDE.</p> <p>It manages the folder paths for input data necessary for the RDE.</p> <p>Attributes:</p> Name Type Description <code>inputdata</code> <code>Path</code> <p>Path to the folder where input data is stored.</p> <code>invoice</code> <code>Path</code> <p>Path to the folder where invoice.json is stored.</p> <code>tasksupport</code> <code>Path</code> <p>Path to the folder where task support data is stored.</p> <code>config</code> <code>Config</code> <p>The configuration object.</p> Properties <p>default_csv (Path): Provides the path to the <code>default_value.csv</code> file. If <code>tasksupport</code> is specified, it uses the path under it; otherwise, it uses the default path under <code>data/tasksupport</code>.</p>"},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.RdeOutputResourcePath","title":"<code>RdeOutputResourcePath(raw, nonshared_raw, rawfiles, struct, main_image, other_image, meta, thumbnail, logs, invoice, invoice_schema_json, invoice_org, temp=..., invoice_patch=..., attachment=...)</code>  <code>dataclass</code>","text":"<p>A data class that holds folder paths used as output destinations for RDE.</p> <p>It maintains the paths for various files used in the structuring process.</p> <p>Attributes:</p> Name Type Description <code>raw</code> <code>Path</code> <p>Path where raw data is stored.</p> <code>nonshared_raw</code> <code>Path</code> <p>Path where nonshared raw data is stored.</p> <code>rawfiles</code> <code>tuple[Path, ...]</code> <p>Holds a tuple of input file paths, such as those unzipped, for a single tile of data.</p> <code>struct</code> <code>Path</code> <p>Path for storing structured data.</p> <code>main_image</code> <code>Path</code> <p>Path for storing the main image file.</p> <code>other_image</code> <code>Path</code> <p>Path for storing other image files.</p> <code>meta</code> <code>Path</code> <p>Path for storing metadata files.</p> <code>thumbnail</code> <code>Path</code> <p>Path for storing thumbnail image files.</p> <code>logs</code> <code>Path</code> <p>Path for storing log files.</p> <code>invoice</code> <code>Path</code> <p>Path for storing invoice files.</p> <code>invoice_schema_json</code> <code>Path</code> <p>Path for the invoice.schema.json file.</p> <code>invoice_org</code> <code>Path</code> <p>Path for storing the backup of invoice.json.</p> <code>temp</code> <code>Optional[Path]</code> <p>Path for storing temporary files.</p> <code>invoice_patch</code> <code>Optional[Path]</code> <p>Path for storing modified invoice files.</p> <code>attachment</code> <code>Optional[Path]</code> <p>Path for storing attachment files.</p>"},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.Schema","title":"<code>Schema</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a schema definition as a Typed Dictionary.</p> <p>This class is used to define the structure of a schema with optional keys. It extends TypedDict with <code>total=False</code> to allow partial dictionaries.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>The type of the schema.</p> <code>format</code> <code>str</code> <p>The format of the schema.</p>"},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.ValueUnitPair","title":"<code>ValueUnitPair(value, unit)</code>  <code>dataclass</code>","text":"<p>Dataclass representing a pair of value and unit.</p> <p>This class is used to store and manage a value along with its associated unit. It uses the features of dataclass for simplified data handling.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str</code> <p>The value part of the pair.</p> <code>unit</code> <code>str</code> <p>The unit associated with the value.</p>"},{"location":"en/rdetoolkit/models/rde2types/#src.rdetoolkit.models.rde2types.create_default_config","title":"<code>create_default_config()</code>","text":"<p>Creates and returns a default configuration object.</p> <p>Returns:</p> Name Type Description <code>Config</code> <code>Config</code> <p>A default configuration object.</p>"},{"location":"en/rdetoolkit/models/rde2types/#using-type-definitions","title":"Using Type Definitions","text":"type_usage.py<pre><code>from rdetoolkit.models.rde2types import RdeFsPath, RdeInputDirPaths, RdeOutputResourcePath\nfrom pathlib import Path\n\n# Use path types\ndef process_data(input_path: RdeFsPath, output_path: RdeFsPath):\n    \"\"\"Process data with type-safe paths\"\"\"\n    input_file = Path(input_path)\n    output_file = Path(output_path)\n\n    print(f\"Processing: {input_file} -&gt; {output_file}\")\n\n# Use with structured processing\ndef dataset_function(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"Type-safe dataset processing function\"\"\"\n    for src_path in srcpaths:\n        print(f\"Processing source: {src_path}\")\n\n    print(f\"Output resources: {resource_paths}\")\n</code></pre>"},{"location":"en/rdetoolkit/models/result/#purpose","title":"Purpose","text":"<p>This module defines result models for RDEToolKit operations. It provides structured result representations, status tracking, and error reporting for various processing operations.</p>"},{"location":"en/rdetoolkit/models/result/#result-structure-models","title":"Result Structure Models","text":"<ul> <li>Standardized result format definitions</li> <li>Status and error tracking</li> <li>Operation outcome representation</li> </ul>"},{"location":"en/rdetoolkit/models/result/#error-reporting","title":"Error Reporting","text":"<ul> <li>Detailed error information</li> <li>Success/failure status tracking</li> <li>Result metadata management</li> </ul>"},{"location":"en/rdetoolkit/models/result/#src.rdetoolkit.models.result","title":"<code>src.rdetoolkit.models.result</code>","text":""},{"location":"en/rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionResults","title":"<code>WorkflowExecutionResults</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"en/rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowExecutionStatus","title":"<code>WorkflowExecutionStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"en/rdetoolkit/models/result/#src.rdetoolkit.models.result.WorkflowResultManager","title":"<code>WorkflowResultManager()</code>","text":""},{"location":"en/rdetoolkit/models/result/#practical-usage","title":"Practical Usage","text":""},{"location":"en/rdetoolkit/models/result/#basic-result-handling","title":"Basic Result Handling","text":"result_handling.py<pre><code>from rdetoolkit.models.result import ProcessingResult\n\n# Create processing result\nresult = ProcessingResult(\n    status=\"success\",\n    message=\"Processing completed successfully\",\n    data={\"processed_files\": 10, \"errors\": 0}\n)\n\nprint(f\"Status: {result.status}\")\nprint(f\"Message: {result.message}\")\nprint(f\"Data: {result.data}\")\n</code></pre>"},{"location":"en/rdetoolkit/storage/minio/","title":"MinIO Integration API","text":""},{"location":"en/rdetoolkit/storage/minio/#purpose","title":"Purpose","text":"<p>This module provides MinIO object storage integration for RDEToolKit. It handles file upload, download, and management operations with MinIO storage systems, enabling cloud-based data storage and retrieval.</p>"},{"location":"en/rdetoolkit/storage/minio/#minio-operations","title":"MinIO Operations","text":"<ul> <li>File upload and download operations</li> <li>Bucket management and configuration</li> <li>Authentication and connection handling</li> </ul>"},{"location":"en/rdetoolkit/storage/minio/#storage-integration","title":"Storage Integration","text":"<ul> <li>Integration with structured processing workflows</li> <li>Batch operations support</li> <li>Error handling and retry mechanisms</li> </ul>"},{"location":"en/rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio","title":"<code>src.rdetoolkit.storage.minio</code>","text":""},{"location":"en/rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.HAS_MINIO","title":"<code>HAS_MINIO = True</code>  <code>module-attribute</code>","text":""},{"location":"en/rdetoolkit/storage/minio/#src.rdetoolkit.storage.minio.MinIOStorage","title":"<code>MinIOStorage(endpoint, access_key=None, secret_key=None, secure=True, region=None, http_client=None)</code>","text":"<p>Handles file operations on MinIO.</p> <p>Attributes:</p> Name Type Description <code>access_key</code> <code>str</code> <p>MinIO access key.</p> <code>secret_key</code> <code>str</code> <p>MinIO secret key.</p> <code>client</code> <code>Minio</code> <p>MinIO client instance.</p> <p>Initializes the MinIOStorage.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>MinIO endpoint.</p> required <code>access_key</code> <code>str | None</code> <p>Access key value. Defaults to environment variable.</p> <code>None</code> <code>secret_key</code> <code>str | None</code> <p>Secret key value. Defaults to environment variable.</p> <code>None</code> <code>secure</code> <code>bool</code> <p>Whether SSL is required.</p> <code>True</code> <code>region</code> <code>str | None</code> <p>Region of the bucket.</p> <code>None</code> <code>http_client</code> <code>PoolManager | None</code> <p>HTTP client for the Minio instance.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If access_key or secret_key is not provided.</p>"},{"location":"en/rdetoolkit/storage/minio/#basic-minio-operations","title":"Basic MinIO Operations","text":"minio_operations.py<pre><code>from rdetoolkit.storage.minio import MinIOClient\nfrom pathlib import Path\n\n# Initialize MinIO client\nclient = MinIOClient(\n    endpoint=\"localhost:9000\",\n    access_key=\"minioadmin\",\n    secret_key=\"minioadmin\",\n    secure=False\n)\n\n# Upload file\nlocal_file = Path(\"data/sample.json\")\nbucket_name = \"rdetoolkit-data\"\nobject_name = \"experiments/sample.json\"\n\nresult = client.upload_file(local_file, bucket_name, object_name)\nprint(f\"Upload result: {result}\")\n\n# Download file\ndownload_path = Path(\"data/downloaded/sample.json\")\nresult = client.download_file(bucket_name, object_name, download_path)\nprint(f\"Download result: {result}\")\n</code></pre>"},{"location":"en/usage/cli/","title":"Command Line Interface","text":""},{"location":"en/usage/cli/#overview","title":"Overview","text":"<p>RDEToolKit provides a comprehensive command-line interface to support the development and execution of RDE structured processing. It supports the entire development workflow from project initialization to Excel invoice generation and archive creation.</p>"},{"location":"en/usage/cli/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>rdetoolkit package installation</li> </ul>"},{"location":"en/usage/cli/#available-commands","title":"Available Commands","text":""},{"location":"en/usage/cli/#init-create-startup-project","title":"init: Create Startup Project","text":"<p>Creates a startup project for RDE structured processing.</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit init\n</code></pre> <pre><code>py -m rdetoolkit init\n</code></pre> <p>The following directories and files will be generated:</p> <pre><code>container\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport\n\u2502       \u251c\u2500\u2500 invoice.schema.json\n\u2502       \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 modules\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Description of each file:</p> <ul> <li>requirements.txt: Add Python packages you want to use for structured program construction. Run <code>pip install</code> as needed.</li> <li>modules: Store programs you want to use for structured processing.</li> <li>main.py: Define startup processing for structured programs</li> <li>data/inputdata: Place data files to be processed by structured processing.</li> <li>data/invoice: Required for local execution, even if empty.</li> <li>data/tasksupport: Place files that support structured processing.</li> </ul> <p>File Overwriting</p> <p>Existing files will be skipped from overwriting or generation.</p>"},{"location":"en/usage/cli/#make-excelinvoice-generate-excel-invoice","title":"make-excelinvoice: Generate Excel Invoice","text":"<p>Generates an Excel invoice from <code>invoice.schema.json</code>.</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit make-excelinvoice &lt;invoice.schema.json path&gt; -o &lt;save file path&gt; -m &lt;file or folder&gt;\n</code></pre> <pre><code>py -m rdetoolkit make-excelinvoice &lt;invoice.schema.json path&gt; -o &lt;save file path&gt; -m &lt;file or folder&gt;\n</code></pre>"},{"location":"en/usage/cli/#options","title":"Options","text":"Option Description Required -o(--output) Output file path. The file path should end with <code>_excel_invoice.xlsx</code>. \u25cb -m Mode selection. Choose registration mode. You can select file mode <code>file</code> or folder mode <code>folder</code>. - <p>Default Output</p> <p>If <code>-o</code> is not specified, it will be created as <code>template_excel_invoice.xlsx</code> in the execution directory.</p>"},{"location":"en/usage/cli/#version-version-check","title":"version: Version Check","text":"<p>Check the version of rdetoolkit.</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit version\n</code></pre> <pre><code>py -m rdetoolkit version\n</code></pre>"},{"location":"en/usage/cli/#artifact-create-rde-submission-archive","title":"artifact: Create RDE Submission Archive","text":"<p>Creates an archive (.zip) for submission to RDE. Compresses the specified source directory and excludes files or directories that match exclusion patterns.</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit artifact --source-dir &lt;source directory&gt; --output-archive &lt;output archive file&gt; --exclude &lt;exclusion pattern&gt;\n</code></pre> <pre><code>py -m rdetoolkit artifact --source-dir &lt;source directory&gt; --output-archive &lt;output archive file&gt; --exclude &lt;exclusion pattern&gt;\n</code></pre>"},{"location":"en/usage/cli/#options_1","title":"Options","text":"Option Description Required -s(--source-dir) Source directory to compress and scan \u25cb -o(--output-archive) Output archive file (e.g., rde_template.zip) - -e(--exclude) Directory names to exclude. By default, 'venv' and 'site-packages' are excluded -"},{"location":"en/usage/cli/#execution-report","title":"Execution Report","text":"<p>When an archive is created, the following execution report is generated:</p> <ul> <li>Existence check of Dockerfile and requirements.txt</li> <li>List of included directories and files</li> <li>Code scan results (security risk detection)</li> <li>External communication check results</li> </ul> <p>Sample execution report:</p> <pre><code># Execution Report\n\n**Execution Date:** 2025-04-08 02:58:44\n\n- **Dockerfile:** [Exists]: \ud83d\udc33\u3000container/Dockerfile\n- **Requirements:** [Exists]: \ud83d\udc0d container/requirements.txt\n\n## Included Directories\n\n- container/requirements.txt\n- container/Dockerfile\n- container/vuln.py\n- container/external.py\n\n## Code Scan Results\n\n### container/vuln.py\n\n**Description**: Usage of eval() poses the risk of arbitrary code execution.\n\n```python\ndef insecure():\n    value = eval(\"1+2\")\n    print(value)\n</code></pre>"},{"location":"en/usage/cli/#containerexternalpy","title":"container/external.py","text":"<pre><code>1:\n2: import requests\n3: def fetch():\n4:     response = requests.get(\"https://example.com\")\n5:     return response.text\n</code></pre> <p>Option Details</p> <ul> <li>If <code>--output-archive</code> is not specified, an archive will be created with a default filename.</li> <li>The <code>--exclude</code> option can be specified multiple times (e.g., <code>--exclude venv --exclude .git</code>).</li> </ul>"},{"location":"en/usage/cli/#next-steps","title":"Next Steps","text":"<ul> <li>Understand Structured Processing Concepts</li> <li>Learn how to create Configuration Files</li> <li>Check detailed features in API Reference</li> </ul>"},{"location":"en/usage/docker/","title":"Using RDEToolKit with Docker","text":""},{"location":"en/usage/docker/#overview","title":"Overview","text":"<p>This guide explains how to run RDE structured processing using RDEToolKit on Docker. Using Docker ensures environment consistency and simplifies deployment.</p>"},{"location":"en/usage/docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker Desktop or Docker Engine installed</li> <li>Basic knowledge of Docker commands</li> <li>Understanding of RDEToolKit project structure</li> </ul>"},{"location":"en/usage/docker/#directory-structure","title":"Directory Structure","text":"<p>Recommended directory structure for structured processing projects:</p> <pre><code>(Structured Processing Project Directory)\n\u251c\u2500\u2500 container\n\u2502   \u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 input1\n\u2502   \u2514\u2500\u2500 input2\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 template\n    \u251c\u2500\u2500 batch.yaml\n    \u251c\u2500\u2500 catalog.schema.json\n    \u251c\u2500\u2500 invoice.schema.json\n    \u251c\u2500\u2500 jobs.template.yaml\n    \u251c\u2500\u2500 metadata-def.json\n    \u2514\u2500\u2500 tasksupport\n</code></pre>"},{"location":"en/usage/docker/#creating-dockerfile","title":"Creating Dockerfile","text":"<p>Create <code>container/Dockerfile</code>. Here's a basic Dockerfile example:</p> container/Dockerfile<pre><code>FROM python:3.11.9\n\nWORKDIR /app\n\nCOPY requirements.txt .\n\nRUN pip install -r requirements.txt\n\nCOPY main.py /app\nCOPY modules/ /app/modules/\n</code></pre> <p>Customization</p> <p>Feel free to modify the Docker image and execution statements according to your project requirements.</p> <p>Reference</p> <p>You can find base images at Docker Hub Container Image Library.</p>"},{"location":"en/usage/docker/#building-images","title":"Building Images","text":""},{"location":"en/usage/docker/#basic-build","title":"Basic Build","text":"<p>Navigate to the directory containing the <code>Dockerfile</code> and run the docker build command:</p> Image Build<pre><code># Basic command\ndocker build -t image_name:tag path\n\n# Example\ndocker build -t sample_tif:v1 .\n</code></pre>"},{"location":"en/usage/docker/#option-descriptions","title":"Option Descriptions","text":"<ul> <li><code>-t</code> option: Specifies image name and tag. Image name can be arbitrary but should be unique.</li> <li>Path: Specifies the path to the directory containing the <code>Dockerfile</code>. Use <code>.</code> for current directory.</li> </ul>"},{"location":"en/usage/docker/#proxy-environment-support","title":"Proxy Environment Support","text":"<p>When building in a proxy environment, add the following options:</p> Build in Proxy Environment<pre><code>docker build -t sample_tif:v1 \\\n  --build-arg http_proxy=http://proxy.example.com:8080 \\\n  --build-arg https_proxy=http://proxy.example.com:8080 \\\n  .\n</code></pre>"},{"location":"en/usage/docker/#handling-pip-command-errors","title":"Handling pip Command Errors","text":"<p>Solution for SSL certificate errors with pip commands:</p>"},{"location":"en/usage/docker/#creating-pipconf-file","title":"Creating pip.conf File","text":"<p>Create a <code>pip.conf</code> file in the same directory as the Dockerfile:</p> pip.conf<pre><code>[install]\ntrusted-host =\n    pypi.python.org\n    files.pythonhosted.org\n    pypi.org\n</code></pre>"},{"location":"en/usage/docker/#modifying-dockerfile","title":"Modifying Dockerfile","text":"<p>Modify the Dockerfile to use pip.conf:</p> Modified Dockerfile<pre><code>FROM python:3.11\n\nWORKDIR /app\n\nCOPY requirements.txt .\nCOPY pip.conf /etc/pip.conf\n\nRUN pip install -r requirements.txt\n\nCOPY main.py /app\nCOPY modules/ /app/modules/\n</code></pre>"},{"location":"en/usage/docker/#running-docker-containers","title":"Running Docker Containers","text":""},{"location":"en/usage/docker/#basic-execution","title":"Basic Execution","text":"<p>To run the built image, use the <code>docker run</code> command:</p> Container Execution<pre><code># Basic command\ndocker run [options] image_name [command]\n\n# Example\ndocker run -it -v ${HOME}/sample_tif/container/data:/app2/data --name \"sample_tifv1\" sample_tif:v1 \"/bin/bash\"\n</code></pre>"},{"location":"en/usage/docker/#option-details","title":"Option Details","text":"Option Description <code>-it</code> Run container in interactive mode. Enables terminal and command-line interface <code>-v host_path:container_path</code> Mount directory between host and container <code>--name \"container_name\"</code> Assign a name to the container <code>image_name:tag</code> Name and version of Docker image to run <code>\"/bin/bash\"</code> Command to execute inside the container"},{"location":"en/usage/docker/#mounting-data-volumes","title":"Mounting Data Volumes","text":"<p>Mount input file directories to test structured processing:</p> Data Mount Example<pre><code>docker run -it \\\n  -v ${HOME}/sample_tif/container/data:/app2/data \\\n  -v ${HOME}/sample_tif/inputdata:/app2/inputdata \\\n  --name \"sample_tifv1\" \\\n  sample_tif:v1 \\\n  \"/bin/bash\"\n</code></pre>"},{"location":"en/usage/docker/#running-programs-inside-container","title":"Running Programs Inside Container","text":"<p>Once the container starts, execute your developed program:</p> Program Execution<pre><code># Navigate to working directory\ncd /app2\n\n# Execute structured processing program\npython3 /app/main.py\n</code></pre> <p>Terminal Change</p> <p>When executed, the terminal will change to something like <code>root@(container_id):</code>.</p>"},{"location":"en/usage/docker/#container-management","title":"Container Management","text":""},{"location":"en/usage/docker/#exiting-container","title":"Exiting Container","text":"Exit Container<pre><code>exit\n</code></pre>"},{"location":"en/usage/docker/#restarting-container","title":"Restarting Container","text":"Restart Stopped Container<pre><code>docker start sample_tifv1\ndocker exec -it sample_tifv1 /bin/bash\n</code></pre>"},{"location":"en/usage/docker/#removing-container","title":"Removing Container","text":"Remove Container<pre><code>docker rm sample_tifv1\n</code></pre>"},{"location":"en/usage/docker/#best-practices","title":"Best Practices","text":""},{"location":"en/usage/docker/#multi-stage-build","title":"Multi-stage Build","text":"<p>For production environments, use multi-stage builds to optimize image size:</p> Multi-stage Dockerfile<pre><code># Build stage\nFROM python:3.11 as builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --user -r requirements.txt\n\n# Runtime stage\nFROM python:3.11-slim\nWORKDIR /app\nCOPY --from=builder /root/.local /root/.local\nCOPY main.py /app\nCOPY modules/ /app/modules/\nENV PATH=/root/.local/bin:$PATH\n</code></pre>"},{"location":"en/usage/docker/#dockerignore-file","title":".dockerignore File","text":"<p>Exclude unnecessary files from build context:</p> .dockerignore<pre><code>.git\n.gitignore\nREADME.md\nDockerfile\n.dockerignore\n__pycache__\n*.pyc\n*.pyo\n*.pyd\n.Python\nenv\npip-log.txt\npip-delete-this-directory.txt\n.tox\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.log\n.venv\n</code></pre>"},{"location":"en/usage/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/usage/docker/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li>Port Conflict Error</li> <li>Avoid ports already in use</li> <li> <p>Check running containers with <code>docker ps</code></p> </li> <li> <p>Volume Mount Error</p> </li> <li>Verify paths are correct</li> <li> <p>Check permission settings</p> </li> <li> <p>Out of Memory Error</p> </li> <li>Check Docker memory limits</li> <li>Stop unnecessary containers</li> </ol>"},{"location":"en/usage/docker/#next-steps","title":"Next Steps","text":"<ul> <li>Understand Structured Processing Concepts</li> <li>Learn Docker environment configuration in Configuration Files</li> <li>Check archive creation using artifact command in Command Line Interface</li> </ul>"},{"location":"en/usage/metadata_definition_file/","title":"Template Files","text":""},{"location":"en/usage/metadata_definition_file/#overview","title":"Overview","text":"<p>RDE uses template files to define dataset structure and validation rules. These files play a crucial role during RDE structured processing execution, ensuring data consistency and quality.</p>"},{"location":"en/usage/metadata_definition_file/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic understanding of JSON Schema</li> <li>Knowledge of RDE dataset structure</li> <li>Text editor or JSON editing tools</li> </ul>"},{"location":"en/usage/metadata_definition_file/#types-of-template-files","title":"Types of Template Files","text":"<p>Main template files used in RDE:</p> <ul> <li>invoice.schema.json: Invoice schema definition</li> <li>invoice.json: Actual invoice data</li> <li>metadata-def.json: Metadata definition</li> <li>metadata.json: Actual metadata</li> </ul>"},{"location":"en/usage/metadata_definition_file/#about-invoiceschemajson","title":"About invoice.schema.json","text":""},{"location":"en/usage/metadata_definition_file/#overview_1","title":"Overview","text":"<p>This file defines the invoice schema. It complies with JSON Schema standard specifications and is used for invoice screen generation and validation.</p> <p>Reference</p> <p>Creating your first schema - json-schema.org</p>"},{"location":"en/usage/metadata_definition_file/#basic-structure","title":"Basic Structure","text":"Basic structure of invoice.schema.json<pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n  \"description\": \"RDE dataset template sample custom information invoice\",\n  \"type\": \"object\",\n  \"required\": [\"custom\", \"sample\"],\n  \"properties\": {\n    \"custom\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u56fa\u6709\u60c5\u5831\",\n        \"en\": \"Custom Information\"\n      },\n      \"required\": [\"sample1\", \"sample2\"],\n      \"properties\": {\n        \"sample1\": {\n          \"label\": {\n            \"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff11\",\n            \"en\": \"sample1\"\n          },\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"options\": {\n            \"unit\": \"A\"\n          }\n        },\n        \"sample2\": {\n          \"label\": {\n            \"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff12\",\n            \"en\": \"sample2\"\n          },\n          \"type\": \"number\",\n          \"options\": {\n            \"unit\": \"b\"\n          }\n        }\n      }\n    },\n    \"sample\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u8a66\u6599\u60c5\u5831\",\n        \"en\": \"Sample Information\"\n      },\n      \"properties\": {\n        \"generalAttributes\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"required\": [\"termId\"],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n                }\n              }\n            }\n          ]\n        },\n        \"specificAttributes\": {\n          \"type\": \"array\",\n          \"items\": []\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/usage/metadata_definition_file/#field-definitions","title":"Field Definitions","text":"Field Name (JSON Pointer) Type Format Required Fixed Value Description (Document Root) object - \u25cb - JSON document root /$schema string uri \u25cb <code>https://json-schema.org/draft/2020-12/schema</code> Meta-schema ID /$id string uri \u25cb - Unique ID for this schema /description string - - - Schema description /type string - \u25cb \"object\" Fixed value /required array - \u25cb - Array of required fields /properties object - \u25cb - Property definitions"},{"location":"en/usage/metadata_definition_file/#custom-information-definition","title":"Custom Information Definition","text":"<p>Detailed structure of the custom information section:</p> Custom information example<pre><code>\"custom\": {\n  \"type\": \"object\",\n  \"label\": {\n    \"ja\": \"\u56fa\u6709\u60c5\u5831\",\n    \"en\": \"Custom Information\"\n  },\n  \"required\": [\"sample1\"],\n  \"properties\": {\n    \"sample1\": {\n      \"label\": {\n        \"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff11\",\n        \"en\": \"sample1\"\n      },\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"options\": {\n        \"unit\": \"A\",\n        \"placeholder\": {\n          \"ja\": \"\u65e5\u4ed8\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n          \"en\": \"Please enter date\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/usage/metadata_definition_file/#data-types-and-options","title":"Data Types and Options","text":""},{"location":"en/usage/metadata_definition_file/#available-data-types","title":"Available Data Types","text":"Type Description Example <code>string</code> Text string \"sample text\" <code>number</code> Number (including decimals) 3.14 <code>integer</code> Integer 42 <code>boolean</code> Boolean value true, false"},{"location":"en/usage/metadata_definition_file/#option-settings","title":"Option Settings","text":"Option settings example<pre><code>\"options\": {\n  \"widget\": \"textarea\",\n  \"rows\": 5,\n  \"unit\": \"mm\",\n  \"placeholder\": {\n    \"ja\": \"\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n    \"en\": \"Please enter value\"\n  }\n}\n</code></pre>"},{"location":"en/usage/metadata_definition_file/#sample-information-definition","title":"Sample Information Definition","text":"<p>Structure of the sample information section:</p> Sample information example<pre><code>\"sample\": {\n  \"type\": \"object\",\n  \"label\": {\n    \"ja\": \"\u8a66\u6599\u60c5\u5831\",\n    \"en\": \"Sample Information\"\n  },\n  \"properties\": {\n    \"generalAttributes\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"termId\"],\n          \"properties\": {\n            \"termId\": {\n              \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n            }\n          }\n        }\n      ]\n    },\n    \"specificAttributes\": {\n      \"type\": \"array\",\n      \"items\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"classId\", \"termId\"],\n          \"properties\": {\n            \"classId\": {\n              \"const\": \"01cb3c01-37a4-5a43-d8ca-f523ca99a75b\"\n            },\n            \"termId\": {\n              \"const\": \"3250c45d-0ed6-1438-43b5-eb679918604a\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"en/usage/metadata_definition_file/#about-invoicejson","title":"About invoice.json","text":""},{"location":"en/usage/metadata_definition_file/#overview_2","title":"Overview","text":"<p>This is the actual data file based on the schema defined in invoice.schema.json.</p>"},{"location":"en/usage/metadata_definition_file/#basic-structure_1","title":"Basic Structure","text":"invoice.json example<pre><code>{\n  \"datasetId\": \"1s1199df4-0d1v-41b0-1dea-23bf4dh09g12\",\n  \"basic\": {\n    \"dateSubmitted\": \"\",\n    \"dataOwnerId\": \"0c233ef274f28e611de4074638b4dc43e737ab993132343532343430\",\n    \"dataName\": \"test-dataset\",\n    \"instrumentId\": null,\n    \"experimentId\": null,\n    \"description\": null\n  },\n  \"custom\": {\n    \"sample1\": \"2023-01-01\",\n    \"sample2\": 1.0\n  },\n  \"sample\": {\n    \"sampleId\": \"\",\n    \"names\": [\"test\"],\n    \"composition\": null,\n    \"referenceUrl\": null,\n    \"description\": null,\n    \"generalAttributes\": [\n      {\n        \"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\",\n        \"value\": null\n      }\n    ],\n    \"specificAttributes\": [],\n    \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\"\n  }\n}\n</code></pre>"},{"location":"en/usage/metadata_definition_file/#about-metadata-defjson","title":"About metadata-def.json","text":""},{"location":"en/usage/metadata_definition_file/#overview_3","title":"Overview","text":"<p>This file defines the structure and constraints of metadata. It specifies the format of metadata accompanying datasets.</p>"},{"location":"en/usage/metadata_definition_file/#basic-structure_2","title":"Basic Structure","text":"metadata-def.json example<pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/metadata-def.json\",\n  \"description\": \"Metadata definition schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"measurement\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"temperature\": {\n          \"type\": \"number\",\n          \"unit\": \"K\",\n          \"description\": \"Measurement temperature\"\n        },\n        \"pressure\": {\n          \"type\": \"number\",\n          \"unit\": \"Pa\",\n          \"description\": \"Measurement pressure\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/usage/metadata_definition_file/#best-practices","title":"Best Practices","text":""},{"location":"en/usage/metadata_definition_file/#schema-design-guidelines","title":"Schema Design Guidelines","text":"<ol> <li>Ensure Uniqueness</li> <li>Make <code>$id</code> field always unique</li> <li> <p>Make key names unique throughout the file</p> </li> <li> <p>Multilingual Support</p> </li> <li>Provide both Japanese and English in <code>label</code> fields</li> <li> <p>Make <code>placeholder</code> multilingual as well</p> </li> <li> <p>Strengthen Validation</p> </li> <li>Set appropriate <code>required</code> fields</li> <li> <p>Clearly define data type constraints</p> </li> <li> <p>Improve Usability</p> </li> <li>Write clear <code>description</code></li> <li>Set appropriate <code>placeholder</code></li> </ol>"},{"location":"en/usage/metadata_definition_file/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"en/usage/metadata_definition_file/#schema-errors","title":"Schema Errors","text":"Common error example<pre><code>{\n  \"required\": [\"custom\"], // sample is defined but not included\n  \"properties\": {\n    \"custom\": { /* ... */ },\n    \"sample\": { /* ... */ }\n  }\n}\n</code></pre> <p>Solution: After correction<pre><code>{\n  \"required\": [\"custom\", \"sample\"], // Include both\n  \"properties\": {\n    \"custom\": { /* ... */ },\n    \"sample\": { /* ... */ }\n  }\n}\n</code></pre></p>"},{"location":"en/usage/metadata_definition_file/#type-definition-errors","title":"Type Definition Errors","text":"Error example<pre><code>{\n  \"sample1\": {\n    \"type\": \"string\",\n    \"format\": \"date\",\n    \"default\": 123 // Type mismatch\n  }\n}\n</code></pre> <p>Solution: After correction<pre><code>{\n  \"sample1\": {\n    \"type\": \"string\",\n    \"format\": \"date\",\n    \"default\": \"2023-01-01\" // Correct type\n  }\n}\n</code></pre></p>"},{"location":"en/usage/metadata_definition_file/#practical-example","title":"Practical Example","text":""},{"location":"en/usage/metadata_definition_file/#complete-template-file-set","title":"Complete Template File Set","text":"<p>Example of complete template files used in actual projects:</p> Complete invoice.schema.json<pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/material_analysis/invoice.schema.json\",\n  \"description\": \"Invoice schema for material analysis dataset\",\n  \"type\": \"object\",\n  \"required\": [\"custom\", \"sample\"],\n  \"properties\": {\n    \"custom\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u6e2c\u5b9a\u6761\u4ef6\",\n        \"en\": \"Measurement Conditions\"\n      },\n      \"required\": [\"temperature\", \"measurement_time\"],\n      \"properties\": {\n        \"temperature\": {\n          \"label\": {\n            \"ja\": \"\u6e2c\u5b9a\u6e29\u5ea6\",\n            \"en\": \"Measurement Temperature\"\n          },\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"maximum\": 1000,\n          \"options\": {\n            \"unit\": \"K\",\n            \"placeholder\": {\n              \"ja\": \"\u6e29\u5ea6\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n              \"en\": \"Enter temperature\"\n            }\n          }\n        },\n        \"measurement_time\": {\n          \"label\": {\n            \"ja\": \"\u6e2c\u5b9a\u6642\u9593\",\n            \"en\": \"Measurement Time\"\n          },\n          \"type\": \"integer\",\n          \"minimum\": 1,\n          \"options\": {\n            \"unit\": \"min\",\n            \"placeholder\": {\n              \"ja\": \"\u6e2c\u5b9a\u6642\u9593\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n              \"en\": \"Enter measurement time\"\n            }\n          }\n        },\n        \"notes\": {\n          \"label\": {\n            \"ja\": \"\u5099\u8003\",\n            \"en\": \"Notes\"\n          },\n          \"type\": \"string\",\n          \"options\": {\n            \"widget\": \"textarea\",\n            \"rows\": 3,\n            \"placeholder\": {\n              \"ja\": \"\u7279\u8a18\u4e8b\u9805\u304c\u3042\u308c\u3070\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\",\n              \"en\": \"Enter any special notes\"\n            }\n          }\n        }\n      }\n    },\n    \"sample\": {\n      \"type\": \"object\",\n      \"label\": {\n        \"ja\": \"\u8a66\u6599\u60c5\u5831\",\n        \"en\": \"Sample Information\"\n      },\n      \"properties\": {\n        \"generalAttributes\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"object\",\n              \"required\": [\"termId\"],\n              \"properties\": {\n                \"termId\": {\n                  \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n                }\n              }\n            }\n          ]\n        },\n        \"specificAttributes\": {\n          \"type\": \"array\",\n          \"items\": []\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/usage/metadata_definition_file/#next-steps","title":"Next Steps","text":"<ul> <li>Learn validation methods in Validation Features</li> <li>Understand how to use template files in Structured Processing</li> <li>Check detailed validation features in API Reference</li> </ul>"},{"location":"en/usage/object_storage/","title":"Using Object Storage (MinIO) with RDEToolKit","text":""},{"location":"en/usage/object_storage/#overview","title":"Overview","text":"<p>MinIOStorage is a Python interface that makes it easy to integrate with MinIO, an object storage service. You can easily use MinIO's main features such as file upload, download, and metadata retrieval.</p>"},{"location":"en/usage/object_storage/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Access to MinIO server (endpoint URL, access key, secret key)</li> </ul>"},{"location":"en/usage/object_storage/#installation","title":"Installation","text":"<p>Since it's provided as part of the rdetoolkit package, you can install it with the following command:</p> <pre><code>pip install rdetoolkit[minio]\n</code></pre>"},{"location":"en/usage/object_storage/#basic-usage","title":"Basic Usage","text":""},{"location":"en/usage/object_storage/#miniostorage-instantiation","title":"MinIOStorage Instantiation","text":"<pre><code>from rdetoolkit.storage.minio import MinIOStorage\n\n# Method to specify authentication information directly\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    access_key=\"your-access-key\",\n    secret_key=\"your-secret-key\",\n    secure=True  # Set to True when using HTTPS\n)\n\n# Method to get authentication information from environment variables\nimport os\nos.environ[\"MINIO_ACCESS_KEY\"] = \"your-access-key\"\nos.environ[\"MINIO_SECRET_KEY\"] = \"your-secret-key\"\n\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    # Omitting access_key and secret_key will read from environment variables\n)\n</code></pre>"},{"location":"en/usage/object_storage/#bucket-operations","title":"Bucket Operations","text":""},{"location":"en/usage/object_storage/#create-bucket","title":"Create Bucket","text":"<pre><code>storage.make_bucket(\"my-bucket\", location=\"us-east-1\")\n</code></pre>"},{"location":"en/usage/object_storage/#list-buckets","title":"List Buckets","text":"<pre><code>buckets = storage.list_buckets()\nfor bucket in buckets:\n    print(f\"Bucket name: {bucket['name']}, Creation date: {bucket['creation_date']}\")\n</code></pre>"},{"location":"en/usage/object_storage/#check-bucket-existence","title":"Check Bucket Existence","text":"<pre><code>if storage.bucket_exists(\"my-bucket\"):\n    print(\"Bucket exists\")\nelse:\n    print(\"Bucket does not exist\")\n</code></pre>"},{"location":"en/usage/object_storage/#remove-bucket","title":"Remove Bucket","text":"<pre><code>storage.remove_bucket(\"my-bucket\")  # Bucket must be empty\n</code></pre>"},{"location":"en/usage/object_storage/#object-operations","title":"Object Operations","text":""},{"location":"en/usage/object_storage/#upload-object-from-memory-data","title":"Upload Object (from memory data)","text":"<pre><code># Upload from string\ndata = \"Hello, MinIO!\"\nstorage.put_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"hello.txt\",\n    data=data,\n    length=len(data),\n    content_type=\"text/plain\"\n)\n\n# Upload from binary data\nbinary_data = b\"\\x00\\x01\\x02\\x03\"\nstorage.put_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"binary-file\",\n    data=binary_data,\n    length=len(binary_data),\n    content_type=\"application/octet-stream\"\n)\n</code></pre>"},{"location":"en/usage/object_storage/#upload-from-file","title":"Upload from File","text":"<pre><code>storage.fput_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\",\n    file_path=\"/path/to/local/document.pdf\",\n    content_type=\"application/pdf\"\n)\n</code></pre>"},{"location":"en/usage/object_storage/#upload-with-metadata","title":"Upload with Metadata","text":"<pre><code>metadata = {\n    \"Author\": \"John Doe\",\n    \"Version\": \"1.0\",\n    \"Department\": \"Development\"\n}\n\nstorage.fput_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\",\n    file_path=\"/path/to/local/document.pdf\",\n    content_type=\"application/pdf\",\n    metadata=metadata\n)\n</code></pre>"},{"location":"en/usage/object_storage/#download-object-to-memory","title":"Download Object (to memory)","text":"<pre><code>response = storage.get_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"hello.txt\"\n)\n\n# Read response data\ndata = response.read()\nprint(data.decode('utf-8'))  # \"Hello, MinIO!\"\n\n# Release resources when done\nresponse.close()\n</code></pre>"},{"location":"en/usage/object_storage/#download-object-to-file","title":"Download Object to File","text":"<pre><code>storage.fget_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\",\n    file_path=\"/path/to/save/document.pdf\"\n)\n</code></pre>"},{"location":"en/usage/object_storage/#get-object-metadata","title":"Get Object Metadata","text":"<pre><code>object_info = storage.stat_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\"\n)\n\nprint(f\"Size: {object_info.size} bytes\")\nprint(f\"Last modified: {object_info.last_modified}\")\nprint(f\"ETag: {object_info.etag}\")\nprint(f\"Content type: {object_info.content_type}\")\nprint(f\"Metadata: {object_info.metadata}\")\n</code></pre>"},{"location":"en/usage/object_storage/#remove-object","title":"Remove Object","text":"<pre><code>storage.remove_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"document.pdf\"\n)\n</code></pre>"},{"location":"en/usage/object_storage/#generate-presigned-urls","title":"Generate Presigned URLs","text":""},{"location":"en/usage/object_storage/#presigned-url-for-object-retrieval","title":"Presigned URL for Object Retrieval","text":"<pre><code>from datetime import timedelta\n\n# Generate presigned URL valid for 1 hour\nurl = storage.presigned_get_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"private-document.pdf\",\n    expires=timedelta(hours=1)\n)\n\nprint(f\"Download from this URL: {url}\")\n# This URL is accessible without authentication for 1 hour only\n</code></pre>"},{"location":"en/usage/object_storage/#presigned-url-for-object-upload","title":"Presigned URL for Object Upload","text":"<pre><code># Generate presigned URL valid for 1 day\nurl = storage.presigned_put_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"upload-here.zip\",\n    expires=timedelta(days=1)\n)\n\nprint(f\"Upload to this URL: {url}\")\n# You can upload by sending a PUT request to this URL\n</code></pre>"},{"location":"en/usage/object_storage/#secure-object-retrieval","title":"Secure Object Retrieval","text":"<p>Retrieve objects in a more secure way than regular <code>get_object</code>:</p> <pre><code>response = storage.secure_get_object(\n    bucket_name=\"my-bucket\",\n    object_name=\"sensitive-document.pdf\",\n    expires=timedelta(minutes=5)  # Set very short expiration time\n)\n\n# Read data\ndata = response.read()\n\n# Release resources when done\nresponse.close()\n</code></pre>"},{"location":"en/usage/object_storage/#usage-in-proxy-environment","title":"Usage in Proxy Environment","text":"<p>When using MinIOStorage in a proxy environment, you can set environment variables or explicitly specify an HTTP client as follows.</p>"},{"location":"en/usage/object_storage/#set-proxy-with-environment-variables","title":"Set Proxy with Environment Variables","text":"<pre><code>import os\n\n# Set proxy with environment variables\nos.environ[\"HTTP_PROXY\"] = \"http://proxy.example.com:8080\"\nos.environ[\"HTTPS_PROXY\"] = \"http://proxy.example.com:8080\"\n\n# Instantiate normally\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    access_key=\"your-access-key\",\n    secret_key=\"your-secret-key\"\n)\n</code></pre>"},{"location":"en/usage/object_storage/#custom-http-client-configuration","title":"Custom HTTP Client Configuration","text":"<pre><code>from rdetoolkit.storage.minio import MinIOStorage\n\n# Create custom proxy client\nproxy_client = MinIOStorage.create_proxy_client(\n    proxy_url=\"http://proxy.example.com:8080\"\n)\n\n# Instantiate using proxy client\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    access_key=\"your-access-key\",\n    secret_key=\"your-secret-key\",\n    http_client=proxy_client\n)\n</code></pre>"},{"location":"en/usage/object_storage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/usage/object_storage/#common-errors","title":"Common Errors","text":"<ol> <li>Authentication Error</li> <li>Check if access key and secret key are correct</li> <li> <p>Check if environment variables are set correctly</p> </li> <li> <p>Connection Error</p> </li> <li>Check if endpoint is correct</li> <li>Check if MinIO server is running</li> <li>Check network connection</li> <li> <p>If proxy settings are required, check if they are set correctly</p> </li> <li> <p>Permission Error</p> </li> <li> <p>Check if you have operation permissions for buckets or objects</p> </li> <li> <p>Bucket Not Found Error</p> </li> <li>Check bucket name spelling</li> <li>Check if bucket exists using <code>bucket_exists()</code></li> </ol>"},{"location":"en/usage/object_storage/#log-verification","title":"Log Verification","text":"<p>You can enable more detailed logs for troubleshooting:</p> <pre><code>import logging\n\n# Enable MinIO logs\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"en/usage/object_storage/#practical-example","title":"Practical Example","text":""},{"location":"en/usage/object_storage/#basic-file-management-system","title":"Basic File Management System","text":"<pre><code>from rdetoolkit.storage.minio import MinIOStorage\nfrom datetime import timedelta\nimport os\n\n# Initialize MinIOStorage\nstorage = MinIOStorage(\n    endpoint=\"minio.example.com:9000\",\n    access_key=\"your-access-key\",\n    secret_key=\"your-secret-key\"\n)\n\n# Create working bucket\nbucket_name = \"my-documents\"\nif not storage.bucket_exists(bucket_name):\n    storage.make_bucket(bucket_name)\n    print(f\"Created bucket '{bucket_name}'\")\n\n# Upload file\nlocal_file = \"/path/to/important-doc.pdf\"\nobject_name = os.path.basename(local_file)\n\nstorage.fput_object(\n    bucket_name=bucket_name,\n    object_name=object_name,\n    file_path=local_file,\n    content_type=\"application/pdf\",\n    metadata={\"CreatedBy\": \"User123\"}\n)\nprint(f\"Uploaded file '{object_name}'\")\n\n# Create temporary share link\nshare_url = storage.presigned_get_object(\n    bucket_name=bucket_name,\n    object_name=object_name,\n    expires=timedelta(hours=24)\n)\nprint(f\"24-hour valid share link: {share_url}\")\n\n# Download file\ndownload_path = f\"/path/to/downloads/{object_name}\"\nstorage.fget_object(\n    bucket_name=bucket_name,\n    object_name=object_name,\n    file_path=download_path\n)\nprint(f\"Downloaded file to '{download_path}'\")\n</code></pre>"},{"location":"en/usage/object_storage/#summary","title":"Summary","text":"<p>Using the MinIOStorage class makes integration with MinIO servers very easy. Main features include:</p> <ul> <li>Bucket creation, listing, and deletion</li> <li>Object (file) upload and download</li> <li>Metadata management</li> <li>Presigned URL (time-limited access link) generation</li> <li>Proxy environment support</li> </ul>"},{"location":"en/usage/object_storage/#next-steps","title":"Next Steps","text":"<ul> <li>Check detailed features in API Reference</li> <li>Refer to MinIO Python SDK Official Documentation</li> <li>Learn how to use object storage in Structured Processing</li> </ul>"},{"location":"en/usage/quickstart/","title":"Experience RDEToolKit","text":""},{"location":"en/usage/quickstart/#purpose","title":"Purpose","text":"<p>This tutorial will guide you through creating and running your first RDE structured processing project using RDEToolKit. You can experience the basic structured processing workflow in approximately 15 minutes.</p>"},{"location":"en/usage/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Basic Python programming knowledge</li> <li>Basic understanding of command-line operations</li> </ul>"},{"location":"en/usage/quickstart/#1-initialize-the-project","title":"1. Initialize the Project","text":"<p>Create a new RDE structured processing project:</p> Unix/macOSWindows <pre><code>python3 -m rdetoolkit init\n</code></pre> <pre><code>py -m rdetoolkit init\n</code></pre> <p>This command creates the following directory structure:</p> <pre><code>container\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport\n\u2502       \u251c\u2500\u2500 invoice.schema.json\n\u2502       \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 modules\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"en/usage/quickstart/#description-of-generated-files","title":"Description of Generated Files","text":"<ul> <li>requirements.txt: Python dependencies for your structured processing</li> <li>modules/: Directory for custom processing modules</li> <li>main.py: Entry point for the structured processing program</li> <li>data/inputdata/: Place input data files here</li> <li>data/invoice/: Contains invoice.json (required for local execution)</li> <li>data/tasksupport/: Schema and metadata definition files</li> </ul> <p>File Overwriting</p> <p>Existing files will not be overwritten. You can run this command safely.</p>"},{"location":"en/usage/quickstart/#2-implement-custom-processing","title":"2. Implement Custom Processing","text":"<p>Edit the <code>main.py</code> file to implement your custom structured processing function:</p> main.py<pre><code>import rdetoolkit.workflows as workflows\n\ndef my_dataset(rde):\n    \"\"\"\n    Custom dataset processing function\n\n    Args:\n        rde: RDE processing context object\n    \"\"\"\n    # Write your custom processing logic here\n    print(\"Processing dataset...\")\n\n    # Example: Set metadata\n    rde.set_metadata({\n        \"processing_status\": \"completed\",\n        \"timestamp\": \"2023-01-01T00:00:00Z\"\n    })\n\n    return 0\n\nif __name__ == \"__main__\":\n    # Execute the structured processing workflow\n    workflows.run(my_dataset)\n</code></pre>"},{"location":"en/usage/quickstart/#3-add-input-data","title":"3. Add Input Data","text":"<p>Place your data files in the <code>data/inputdata/</code> directory:</p> Example: Copy Data File<pre><code># Example: Copy your data file\ncp your_data_file.csv container/data/inputdata/\n</code></pre>"},{"location":"en/usage/quickstart/#4-execute-structured-processing","title":"4. Execute Structured Processing","text":"<p>Run the structured processing:</p> Unix/macOSWindows <pre><code>cd container\npython3 main.py\n</code></pre> <pre><code>cd container\npy main.py\n</code></pre> <p>During execution, you will see output similar to:</p> <pre><code>Processing dataset...\nStructured processing completed successfully\n</code></pre>"},{"location":"en/usage/quickstart/#5-verify-results","title":"5. Verify Results","text":"<p>After successful execution, the following output structure will be generated:</p> <pre><code>container/data/\n\u251c\u2500\u2500 inputdata/\n\u2502   \u2514\u2500\u2500 your_data_file.csv\n\u251c\u2500\u2500 invoice/\n\u2502   \u2514\u2500\u2500 invoice.json\n\u251c\u2500\u2500 logs/\n\u2502   \u2514\u2500\u2500 rdesys.log\n\u251c\u2500\u2500 main_image/\n\u251c\u2500\u2500 meta/\n\u251c\u2500\u2500 other_image/\n\u251c\u2500\u2500 raw/\n\u2502   \u2514\u2500\u2500 your_data_file.csv\n\u251c\u2500\u2500 structured/\n\u251c\u2500\u2500 tasksupport/\n\u2502   \u251c\u2500\u2500 invoice.schema.json\n\u2502   \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 temp/\n\u2514\u2500\u2500 thumbnail/\n</code></pre> <p>Output Directory Descriptions</p> <ul> <li>raw/: Copy of input data</li> <li>structured/: Processed data</li> <li>meta/: Metadata files</li> <li>logs/: Execution logs</li> </ul>"},{"location":"en/usage/quickstart/#congratulations","title":"Congratulations!","text":"<p>You have successfully completed your first structured processing project using RDEToolKit. You have achieved the following:</p> <ul> <li>\u2705 Project initialization</li> <li>\u2705 Custom processing function implementation</li> <li>\u2705 Structured processing execution</li> <li>\u2705 Result verification</li> </ul>"},{"location":"en/usage/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you have experienced basic structured processing, learn about the following topics:</p> <ul> <li>Understand Structured Processing Concepts</li> <li>Explore Configuration Options</li> <li>Learn about Processing Modes</li> <li>Check CLI Reference for advanced commands</li> </ul>"},{"location":"en/usage/validation/","title":"Validation Features","text":""},{"location":"en/usage/validation/#overview","title":"Overview","text":"<p>RDEToolKit implements comprehensive validation features to ensure the integrity and quality of RDE-related files. By performing pre-checks during local development, you can prevent errors when registering with RDE.</p>"},{"location":"en/usage/validation/#prerequisites","title":"Prerequisites","text":"<ul> <li>RDEToolKit installation</li> <li>Basic understanding of template files</li> <li>Python 3.9 or higher</li> </ul>"},{"location":"en/usage/validation/#validation-target-files","title":"Validation Target Files","text":"<p>Main files subject to validation in RDEToolKit:</p> <ul> <li>invoice.schema.json: Invoice schema file</li> <li>invoice.json: Invoice data file</li> <li>metadata-def.json: Metadata definition file</li> <li>metadata.json: Metadata file</li> </ul> <p>Important</p> <p>These files can be modified within structured processing, making pre-validation crucial.</p> <p>Related Documentation</p> <p>About Template Files</p>"},{"location":"en/usage/validation/#invoiceschemajson-validation","title":"invoice.schema.json Validation","text":""},{"location":"en/usage/validation/#overview_1","title":"Overview","text":"<p><code>invoice.schema.json</code> is a schema file that configures RDE screens. It provides check functionality to verify that necessary fields are defined when modifying during structured processing or creating definition files locally.</p>"},{"location":"en/usage/validation/#basic-usage","title":"Basic Usage","text":"invoice.schema.json Validation<pre><code>import json\nfrom pydantic import ValidationError\n\nfrom rdetoolkit.validation import InvoiceValidator\nfrom rdetoolkit.exceptions import InvoiceSchemaValidationError\n\n# Schema definition\nschema = {\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"$id\": \"https://rde.nims.go.jp/rde/dataset-templates/dataset_template_custom_sample/invoice.schema.json\",\n    \"description\": \"RDE dataset template sample custom information invoice\",\n    \"type\": \"object\",\n    \"required\": [\"custom\", \"sample\"],\n    \"properties\": {\n        \"custom\": {\n            \"type\": \"object\",\n            \"label\": {\"ja\": \"\u56fa\u6709\u60c5\u5831\", \"en\": \"Custom Information\"},\n            \"required\": [\"sample1\"],\n            \"properties\": {\n                \"sample1\": {\n                    \"label\": {\"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff11\", \"en\": \"sample1\"},\n                    \"type\": \"string\",\n                    \"format\": \"date\",\n                    \"options\": {\"unit\": \"A\"}\n                },\n                \"sample2\": {\n                    \"label\": {\"ja\": \"\u30b5\u30f3\u30d7\u30eb\uff12\", \"en\": \"sample2\"},\n                    \"type\": \"number\",\n                    \"options\": {\"unit\": \"b\"}\n                },\n            },\n        },\n        \"sample\": {\n            \"type\": \"object\",\n            \"label\": {\"ja\": \"\u8a66\u6599\u60c5\u5831\", \"en\": \"Sample Information\"},\n            \"properties\": {\n                \"generalAttributes\": {\n                    \"type\": \"array\",\n                    \"items\": [\n                        {\n                            \"type\": \"object\",\n                            \"required\": [\"termId\"],\n                            \"properties\": {\n                                \"termId\": {\n                                    \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n                                }\n                            }\n                        }\n                    ],\n                },\n                \"specificAttributes\": {\"type\": \"array\", \"items\": []},\n            },\n        },\n    },\n}\n\n# Data example\ndata = {\n    \"datasetId\": \"1s1199df4-0d1v-41b0-1dea-23bf4dh09g12\",\n    \"basic\": {\n        \"dateSubmitted\": \"\",\n        \"dataOwnerId\": \"0c233ef274f28e611de4074638b4dc43e737ab993132343532343430\",\n        \"dataName\": \"test-dataset\",\n        \"instrumentId\": None,\n        \"experimentId\": None,\n        \"description\": None,\n    },\n    \"custom\": {\"sample1\": \"2023-01-01\", \"sample2\": 1.0},\n    \"sample\": {\n        \"sampleId\": \"\",\n        \"names\": [\"test\"],\n        \"composition\": None,\n        \"referenceUrl\": None,\n        \"description\": None,\n        \"generalAttributes\": [\n            {\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": None}\n        ],\n        \"specificAttributes\": [],\n        \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\",\n    },\n}\n\n# Save schema file\nwith open(\"temp/invoice.schema.json\", \"w\") as f:\n    json.dump(schema, f, ensure_ascii=False, indent=2)\n\n# Execute validation\nvalidator = InvoiceValidator(\"temp/invoice.schema.json\")\ntry:\n    validator.validate(obj=data)\n    print(\"Validation successful\")\nexcept ValidationError as validation_error:\n    raise InvoiceSchemaValidationError from validation_error\n</code></pre>"},{"location":"en/usage/validation/#handling-validation-errors","title":"Handling Validation Errors","text":"<p>When <code>invoice.schema.json</code> validation errors occur, <code>pydantic_core._pydantic_core.ValidationError</code> is raised.</p> <p>Reference</p> <p>pydantic_core._pydantic_core.ValidationError - Pydantic</p>"},{"location":"en/usage/validation/#reading-error-messages","title":"Reading Error Messages","text":"<p>Error messages display the following information:</p> <ul> <li>Field causing the error</li> <li>Error type</li> <li>Error message</li> </ul> Error Example<pre><code>1. Field: required.0\n   Type: literal_error\n   Context: Input should be 'custom' or 'sample'\n</code></pre> <p>This example indicates that the <code>required</code> field must contain <code>custom</code> or <code>sample</code>.</p>"},{"location":"en/usage/validation/#common-errors-and-fixes","title":"Common Errors and Fixes","text":"<p>Error Example: Problematic Schema<pre><code>{\n    \"required\": [\"custom\"], // sample is defined but not included\n    \"properties\": {\n        \"custom\": { /* ... */ },\n        \"sample\": { /* ... */ }\n    }\n}\n</code></pre></p> <p>Fix: Corrected Schema<pre><code>{\n    \"required\": [\"custom\", \"sample\"], // Include both\n    \"properties\": {\n        \"custom\": { /* ... */ },\n        \"sample\": { /* ... */ }\n    }\n}\n</code></pre></p>"},{"location":"en/usage/validation/#invoicejson-validation","title":"invoice.json Validation","text":""},{"location":"en/usage/validation/#overview_2","title":"Overview","text":"<p><code>invoice.json</code> validation requires the corresponding <code>invoice.schema.json</code>. It checks data integrity according to constraints defined in the schema.</p>"},{"location":"en/usage/validation/#basic-usage_1","title":"Basic Usage","text":"invoice.json Validation<pre><code># Using the schema and data from above\nvalidator = InvoiceValidator(\"temp/invoice.schema.json\")\ntry:\n    validator.validate(obj=data)\n    print(\"invoice.json validation successful\")\nexcept ValidationError as validation_error:\n    print(f\"Validation error: {validation_error}\")\n</code></pre>"},{"location":"en/usage/validation/#sample-information-validation","title":"Sample Information Validation","text":"<p>When developing structured processing in a local environment, you need to prepare <code>invoice.json</code> (invoice) in advance. When defining sample information, the following two cases are expected:</p>"},{"location":"en/usage/validation/#1-adding-new-sample-information","title":"1. Adding New Sample Information","text":"<p>In this case, <code>sampleId</code>, <code>names</code>, and <code>ownerId</code> in the <code>sample</code> field are required.</p> New Sample Information<pre><code>\"sample\": {\n    \"sampleId\": \"de1132316439\",\n    \"names\": [\"test\"],\n    \"composition\": null,\n    \"referenceUrl\": null,\n    \"description\": null,\n    \"generalAttributes\": [\n        {\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": null}\n    ],\n    \"specificAttributes\": [],\n    \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\"\n}\n</code></pre>"},{"location":"en/usage/validation/#2-referencing-existing-sample-information","title":"2. Referencing Existing Sample Information","text":"<p>In this case, only <code>sampleId</code> in the <code>sample</code> field is required.</p> Existing Sample Information Reference<pre><code>\"sample\": {\n    \"sampleId\": \"de1132316439\",\n    \"names\": [],\n    \"composition\": null,\n    \"referenceUrl\": null,\n    \"description\": null,\n    \"generalAttributes\": [\n        {\"termId\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\", \"value\": null}\n    ],\n    \"specificAttributes\": [],\n    \"ownerId\": \"de17c7b3f0ff5126831c2d519f481055ba466ddb6238666132316439\"\n}\n</code></pre>"},{"location":"en/usage/validation/#sample-information-validation-errors","title":"Sample Information Validation Errors","text":"<p>If neither of the above two cases is satisfied, validation errors will occur.</p> Sample Information Error Example<pre><code>Error: Error in validating system standard field.\nPlease correct the following fields in invoice.json\nField: sample\nType: anyOf\nContext: {'sampleId': '', 'names': 'test', 'generalAttributes': [...], 'specificAttributes': [], 'ownerId': ''} is not valid under any of the given schemas\n</code></pre>"},{"location":"en/usage/validation/#other-validation-errors","title":"Other Validation Errors","text":"<p>When there are deficiencies or invalid values in the <code>basic</code> items of <code>invoice.json</code>, <code>jsonschema</code> validation errors occur.</p> Basic Information Error Example<pre><code>Error: Error in validating system standard item in invoice.schema.json.\nPlease correct the following fields in invoice.json\nField: basic.dataOwnerId\nType: pattern\nContext: String does not match expected pattern\n</code></pre>"},{"location":"en/usage/validation/#metadata-defjson-validation","title":"metadata-def.json Validation","text":""},{"location":"en/usage/validation/#overview_3","title":"Overview","text":"<p><code>metadata-def.json</code> is a file that defines the structure and constraints of metadata. Validation of this file ensures the integrity of metadata schemas.</p>"},{"location":"en/usage/validation/#basic-usage_2","title":"Basic Usage","text":"metadata-def.json Validation<pre><code>from rdetoolkit.validation import MetadataValidator\n\n# Metadata definition file validation\nmetadata_validator = MetadataValidator(\"path/to/metadata-def.json\")\ntry:\n    metadata_validator.validate_schema()\n    print(\"metadata-def.json validation successful\")\nexcept ValidationError as e:\n    print(f\"Metadata definition validation error: {e}\")\n</code></pre>"},{"location":"en/usage/validation/#metadatajson-validation","title":"metadata.json Validation","text":""},{"location":"en/usage/validation/#overview_4","title":"Overview","text":"<p><code>metadata.json</code> is the actual metadata file based on the schema defined in <code>metadata-def.json</code>.</p>"},{"location":"en/usage/validation/#basic-usage_3","title":"Basic Usage","text":"metadata.json Validation<pre><code># Metadata file validation\ntry:\n    metadata_validator.validate_data(\"path/to/metadata.json\")\n    print(\"metadata.json validation successful\")\nexcept ValidationError as e:\n    print(f\"Metadata validation error: {e}\")\n</code></pre>"},{"location":"en/usage/validation/#integrated-validation","title":"Integrated Validation","text":""},{"location":"en/usage/validation/#automatic-validation-in-workflows","title":"Automatic Validation in Workflows","text":"<p>Validation is automatically executed when running RDEToolKit workflows:</p> Workflow Integrated Validation<pre><code>from rdetoolkit import workflows\n\ndef my_dataset_function(rde):\n    # Data processing logic\n    rde.set_metadata({\"status\": \"processed\"})\n    return 0\n\n# Automatic validation is executed during workflow execution\ntry:\n    result = workflows.run(my_dataset_function)\n    print(\"Workflow execution successful\")\nexcept Exception as e:\n    print(f\"Workflow execution error (including validation): {e}\")\n</code></pre>"},{"location":"en/usage/validation/#best-practices","title":"Best Practices","text":""},{"location":"en/usage/validation/#validation-strategy-during-development","title":"Validation Strategy During Development","text":"<ol> <li>Staged Validation</li> <li>Validate schema files first</li> <li> <p>Validate data files later</p> </li> <li> <p>Continuous Checking</p> </li> <li>Automatic validation on file changes</li> <li> <p>Validation in CI/CD pipelines</p> </li> <li> <p>Error Handling</p> </li> <li>Utilize detailed error messages</li> <li>Gradual error correction</li> </ol>"},{"location":"en/usage/validation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/usage/validation/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li>Schema Syntax Errors</li> <li>Check JSON syntax</li> <li> <p>Verify required fields</p> </li> <li> <p>Data Type Mismatches</p> </li> <li>Compare with types defined in schema</li> <li> <p>Check default values</p> </li> <li> <p>Reference Errors</p> </li> <li>Verify file paths</li> <li>Check file existence</li> </ol>"},{"location":"en/usage/validation/#practical-example","title":"Practical Example","text":""},{"location":"en/usage/validation/#complete-validation-workflow","title":"Complete Validation Workflow","text":"Complete Validation Example<pre><code>import json\nfrom pathlib import Path\nfrom rdetoolkit.validation import InvoiceValidator, MetadataValidator\nfrom rdetoolkit.exceptions import InvoiceSchemaValidationError\n\ndef validate_all_files(project_dir: Path):\n    \"\"\"Validate all files in the project\"\"\"\n\n    # 1. invoice.schema.json validation\n    schema_path = project_dir / \"tasksupport\" / \"invoice.schema.json\"\n    invoice_path = project_dir / \"invoice\" / \"invoice.json\"\n\n    try:\n        invoice_validator = InvoiceValidator(schema_path)\n        print(\"\u2713 invoice.schema.json validation successful\")\n\n        # 2. invoice.json validation\n        with open(invoice_path) as f:\n            invoice_data = json.load(f)\n\n        invoice_validator.validate(obj=invoice_data)\n        print(\"\u2713 invoice.json validation successful\")\n\n    except ValidationError as e:\n        print(f\"\u2717 Invoice validation error: {e}\")\n        return False\n\n    # 3. metadata-def.json validation\n    metadata_def_path = project_dir / \"tasksupport\" / \"metadata-def.json\"\n    metadata_path = project_dir / \"metadata.json\"\n\n    try:\n        metadata_validator = MetadataValidator(metadata_def_path)\n        metadata_validator.validate_schema()\n        print(\"\u2713 metadata-def.json validation successful\")\n\n        # 4. metadata.json validation\n        if metadata_path.exists():\n            metadata_validator.validate_data(metadata_path)\n            print(\"\u2713 metadata.json validation successful\")\n\n    except ValidationError as e:\n        print(f\"\u2717 Metadata validation error: {e}\")\n        return False\n\n    print(\"\ud83c\udf89 All file validation completed\")\n    return True\n\n# Usage example\nproject_directory = Path(\"./my_rde_project\")\nvalidate_all_files(project_directory)\n</code></pre>"},{"location":"en/usage/validation/#next-steps","title":"Next Steps","text":"<ul> <li>Learn schema definition details in Template Files</li> <li>Understand validation usage in Structured Processing</li> <li>Check detailed validation features in API Reference</li> </ul>"},{"location":"en/usage/config/config/","title":"How to Create Configuration Files","text":""},{"location":"en/usage/config/config/#purpose","title":"Purpose","text":"<p>This document explains how to create and configure configuration files (<code>rdeconfig.yaml</code>) for customizing RDEToolKit structured processing behavior. You will learn from basic settings to advanced configurations step by step.</p>"},{"location":"en/usage/config/config/#prerequisites","title":"Prerequisites","text":"<ul> <li>Understanding of basic RDEToolKit usage</li> <li>Basic knowledge of YAML file format</li> <li>Understanding of structured processing directory structure</li> </ul>"},{"location":"en/usage/config/config/#steps","title":"Steps","text":""},{"location":"en/usage/config/config/#1-place-configuration-file","title":"1. Place Configuration File","text":"<p>Place the configuration file in the correct location:</p> Configuration File Location<pre><code>data/\n\u2514\u2500\u2500 tasksupport/\n    \u2514\u2500\u2500 rdeconfig.yaml  # Place here\n</code></pre>"},{"location":"en/usage/config/config/#2-create-basic-configuration","title":"2. Create Basic Configuration","text":"<p>Create a minimal configuration file:</p> Basic rdeconfig.yaml<pre><code>system:\n  save_raw: true\n  magic_variable: false\n  save_thumbnail_image: true\n  extended_mode: null\n</code></pre>"},{"location":"en/usage/config/config/#3-configure-each-setting-item","title":"3. Configure Each Setting Item","text":""},{"location":"en/usage/config/config/#save_raw-setting","title":"save_raw Setting","text":"<p>Controls whether to copy input data to the <code>raw</code> directory:</p> save_raw Setting<pre><code>system:\n  save_raw: true   # Copy input data to raw directory (recommended)\n  save_raw: false  # Do not copy input data\n</code></pre> <p>Recommended Setting</p> <p>We recommend <code>save_raw: true</code> to ensure data traceability.</p>"},{"location":"en/usage/config/config/#magic_variable-setting","title":"magic_variable Setting","text":"<p>Controls the dynamic filename replacement feature:</p> magic_variable Setting<pre><code>system:\n  magic_variable: true   # Enable ${filename} replacement\n  magic_variable: false  # Disable replacement feature (default)\n</code></pre> <p>Usage example: magic_variable Usage Example<pre><code>{\n  \"data_name\": \"${filename}\",\n  \"output_file\": \"${filename}_processed.csv\"\n}\n</code></pre></p>"},{"location":"en/usage/config/config/#save_thumbnail_image-setting","title":"save_thumbnail_image Setting","text":"<p>Controls automatic thumbnail generation from main images:</p> save_thumbnail_image Setting<pre><code>system:\n  save_thumbnail_image: true   # Auto-generate thumbnail images (recommended)\n  save_thumbnail_image: false  # Do not generate thumbnail images\n</code></pre>"},{"location":"en/usage/config/config/#extended_mode-setting","title":"extended_mode Setting","text":"<p>Specifies extended processing modes:</p> extended_mode Setting<pre><code>system:\n  extended_mode: null              # Standard invoice mode\n  extended_mode: \"MultiDataTile\"   # Multi-data tile mode\n  extended_mode: \"rdeformat\"       # RDE format mode\n</code></pre>"},{"location":"en/usage/config/config/#4-add-extended-settings","title":"4. Add Extended Settings","text":""},{"location":"en/usage/config/config/#non-shared-data-save-setting","title":"Non-shared Data Save Setting","text":"Non-shared Data Setting<pre><code>system:\n  save_nonshared_raw: true   # Save to non-shared raw directory\n  save_nonshared_raw: false  # Do not save to non-shared raw directory\n</code></pre>"},{"location":"en/usage/config/config/#multidatatile-error-handling-setting","title":"MultiDataTile Error Handling Setting","text":"MultiDataTile Error Handling<pre><code>multidata_tile:\n  ignore_errors: true   # Continue processing even if errors occur\n  ignore_errors: false  # Stop processing if errors occur (default)\n</code></pre>"},{"location":"en/usage/config/config/#adding-custom-settings","title":"Adding Custom Settings","text":"Custom Settings<pre><code>custom:\n  thumbnail_image_name: \"inputdata/sample_image.png\"\n  processing_timeout: 300\n  debug_mode: false\n</code></pre>"},{"location":"en/usage/config/config/#5-create-complete-configuration-examples","title":"5. Create Complete Configuration Examples","text":""},{"location":"en/usage/config/config/#basic-configuration-example","title":"Basic Configuration Example","text":"Basic Configuration rdeconfig.yaml<pre><code>system:\n  save_raw: true\n  save_nonshared_raw: false\n  magic_variable: false\n  save_thumbnail_image: true\n  extended_mode: null\n</code></pre>"},{"location":"en/usage/config/config/#advanced-configuration-example","title":"Advanced Configuration Example","text":"Advanced Configuration rdeconfig.yaml<pre><code>system:\n  save_raw: true\n  save_nonshared_raw: true\n  magic_variable: true\n  save_thumbnail_image: true\n  extended_mode: \"MultiDataTile\"\n\nmultidata_tile:\n  ignore_errors: false\n\ncustom:\n  thumbnail_image_name: \"inputdata/main_chart.png\"\n  processing_timeout: 600\n  debug_mode: true\n  output_format: \"csv\"\n</code></pre>"},{"location":"en/usage/config/config/#6-reference-configuration-values-in-structured-processing","title":"6. Reference Configuration Values in Structured Processing","text":"<p>Use the created configuration values within structured processing:</p> Configuration Value Reference<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Reference system settings\n    extended_mode = srcpaths.config.system.extended_mode\n    save_raw = srcpaths.config.system.save_raw\n    magic_variable = srcpaths.config.system.magic_variable\n\n    print(f\"Extended mode: {extended_mode}\")\n    print(f\"Save raw: {save_raw}\")\n    print(f\"Magic variable: {magic_variable}\")\n\n    # Reference custom settings\n    if \"custom\" in srcpaths.config:\n        thumbnail_name = srcpaths.config[\"custom\"].get(\"thumbnail_image_name\")\n        timeout = srcpaths.config[\"custom\"].get(\"processing_timeout\", 300)\n\n        print(f\"Thumbnail image: {thumbnail_name}\")\n        print(f\"Timeout: {timeout} seconds\")\n</code></pre>"},{"location":"en/usage/config/config/#verification","title":"Verification","text":"<p>Verify that the configuration file was created correctly:</p>"},{"location":"en/usage/config/config/#configuration-file-validation","title":"Configuration File Validation","text":"Configuration File Validation<pre><code>import yaml\nfrom pathlib import Path\n\ndef validate_config(config_path):\n    try:\n        with open(config_path, 'r', encoding='utf-8') as f:\n            config = yaml.safe_load(f)\n\n        print(\"\u2705 Configuration file loaded successfully\")\n\n        # Check system settings\n        if 'system' in config:\n            system = config['system']\n            print(f\"save_raw: {system.get('save_raw', 'default value')}\")\n            print(f\"extended_mode: {system.get('extended_mode', 'default value')}\")\n            print(f\"magic_variable: {system.get('magic_variable', 'default value')}\")\n\n        return config\n    except Exception as e:\n        print(f\"\u274c Configuration file error: {e}\")\n        return None\n\n# Usage example\nconfig = validate_config(\"data/tasksupport/rdeconfig.yaml\")\n</code></pre>"},{"location":"en/usage/config/config/#configuration-operation-verification","title":"Configuration Operation Verification","text":"Configuration Operation Verification<pre><code># Run structured processing to test if settings are applied\ncd container\npython3 main.py\n</code></pre>"},{"location":"en/usage/config/config/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/usage/config/config/#common-problems-and-solutions","title":"Common Problems and Solutions","text":"Problem Cause Solution YAML format error Indentation or colon issues Check indentation and spaces after colons Settings not applied Wrong file path or item names Verify file path and setting item names Character encoding error File character code issues Save file as UTF-8"},{"location":"en/usage/config/config/#configuration-priority","title":"Configuration Priority","text":"<ol> <li>Environment variables</li> <li><code>rdeconfig.yaml</code> file</li> <li>Default values</li> </ol>"},{"location":"en/usage/config/config/#related-information","title":"Related Information","text":"<p>To learn more about configuration files, refer to the following documents:</p> <ul> <li>Check detailed settings for each mode in Processing Modes</li> <li>Learn about dynamic replacement features in Magic Variable</li> <li>Understand processes affected by settings in Structured Processing Concepts</li> </ul>"},{"location":"en/usage/config/file_folder_mode/","title":"What are File Mode and Folder Mode","text":""},{"location":"en/usage/config/file_folder_mode/#purpose","title":"Purpose","text":"<p>This document explains File Mode and Folder Mode in ExcelInvoice mode. You will understand the differences between these two modes and how to use them according to input data structure.</p>"},{"location":"en/usage/config/file_folder_mode/#challenges-and-background","title":"Challenges and Background","text":"<p>Batch data registration in ExcelInvoice mode required support for diverse input formats:</p> <ul> <li>Individual Files: Batch registration of multiple independent files</li> <li>Folder Structure: Registration of related files grouped by folders</li> <li>Mixed Data: Processing when files and folders are mixed</li> <li>Automatic Detection: Automatic detection and appropriate processing of input formats</li> </ul> <p>File Mode and Folder Mode were developed to address these needs.</p>"},{"location":"en/usage/config/file_folder_mode/#key-concepts","title":"Key Concepts","text":""},{"location":"en/usage/config/file_folder_mode/#automatic-mode-detection-mechanism","title":"Automatic Mode Detection Mechanism","text":"<pre><code>flowchart TD\n    A[Analyze zip file] --&gt; B{Folders exist at top level?}\n    B --&gt;|Yes| C[Folder Mode]\n    B --&gt;|No| D[File Mode]\n\n    C --&gt; E[Compare folder count with ExcelInvoice rows]\n    D --&gt; F[Compare file count with ExcelInvoice rows]\n</code></pre>"},{"location":"en/usage/config/file_folder_mode/#comparison-of-two-modes","title":"Comparison of Two Modes","text":"Item File Mode Folder Mode Processing Unit Individual files Folder units Dataset Name Filename Folder name File Count 1 file = 1 dataset Multiple files = 1 dataset Use Case Independent data files Related file groups"},{"location":"en/usage/config/file_folder_mode/#file-mode","title":"File Mode","text":""},{"location":"en/usage/config/file_folder_mode/#overview","title":"Overview","text":"<p>File Mode processes multiple individual files bundled in a single zip file.</p>"},{"location":"en/usage/config/file_folder_mode/#features","title":"Features","text":"<ul> <li>Each file is treated as an independent dataset</li> <li>Number of files in zip must match number of rows in ExcelInvoice</li> <li>Filename is used as dataset name</li> </ul>"},{"location":"en/usage/config/file_folder_mode/#directory-structure-example","title":"Directory Structure Example","text":"File Mode Input Structure<pre><code>input.zip/\n|-- 20100131045801(2s).txt\n|-- 20100131052029(2p).txt\n</code></pre>"},{"location":"en/usage/config/file_folder_mode/#excelinvoice-file-configuration","title":"ExcelInvoice File Configuration","text":"<p>In the ExcelInvoice file, each row corresponds to each file:</p> <p></p>"},{"location":"en/usage/config/file_folder_mode/#folder-mode","title":"Folder Mode","text":""},{"location":"en/usage/config/file_folder_mode/#overview_1","title":"Overview","text":"<p>Folder Mode processes zip files containing folder structures.</p>"},{"location":"en/usage/config/file_folder_mode/#features_1","title":"Features","text":"<ul> <li>Each folder is treated as one dataset</li> <li>Can contain multiple files within folders</li> <li>Folder name is used as dataset name</li> </ul>"},{"location":"en/usage/config/file_folder_mode/#directory-structure-example_1","title":"Directory Structure Example","text":"Folder Mode Input Structure<pre><code>input.zip/\n|-- sample_folder_1/\n|   |-- file1.txt\n|   |-- file2.txt\n|\n|-- sample_folder_2/\n|   |-- file3.txt\n|   |-- file4.txt\n</code></pre>"},{"location":"en/usage/config/file_folder_mode/#excelinvoice-file-configuration_1","title":"ExcelInvoice File Configuration","text":"<p>In the ExcelInvoice file, each row corresponds to each folder:</p> <p></p>"},{"location":"en/usage/config/file_folder_mode/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/usage/config/file_folder_mode/#common-problems-and-solutions","title":"Common Problems and Solutions","text":"Problem Cause Solution File count and ExcelInvoice row mismatch Inconsistency between zip contents and ExcelInvoice Match file count with row count Invalid filename Filename contains special characters Remove special characters from filename Zip file extraction error Corrupted zip file Verify zip file integrity"},{"location":"en/usage/config/file_folder_mode/#important-notes","title":"Important Notes","text":"<ul> <li>Errors occur when the mode specified in ExcelInvoice differs from the zip file structure</li> <li>Zip files created on macOS may contain <code>.DS_Store</code> files</li> <li>Pay attention to character encoding of zip files created on Windows</li> </ul>"},{"location":"en/usage/config/file_folder_mode/#summary","title":"Summary","text":"<p>Key features of File Mode and Folder Mode:</p> <ul> <li>Automatic Detection: Automatic mode detection based on zip file structure</li> <li>Flexible Support: Support for both individual files and folder structures</li> <li>Batch Processing: Efficient batch registration via ExcelInvoice</li> <li>Data Integrity: Consistency check between file count and row count</li> </ul>"},{"location":"en/usage/config/file_folder_mode/#next-steps","title":"Next Steps","text":"<p>To utilize File Mode and Folder Mode, refer to the following documents:</p> <ul> <li>Check ExcelInvoice mode details in Data Registration Modes</li> <li>Learn related settings in Configuration Files</li> <li>Understand processing flows in Structured Processing Concepts</li> </ul>"},{"location":"en/usage/config/magic_variable/","title":"What is Magic Variable","text":""},{"location":"en/usage/config/magic_variable/#purpose","title":"Purpose","text":"<p>This document explains the Magic Variable feature in RDEToolKit. You will understand the mechanism and usage methods for automatically replacing dynamic values such as filenames and timestamps.</p>"},{"location":"en/usage/config/magic_variable/#challenges-and-background","title":"Challenges and Background","text":"<p>Structured processing faced the following challenges:</p> <ul> <li>Manual Filename Input: Need to manually input filenames for data names</li> <li>Consistency Assurance: Inconsistencies when writing the same filename in multiple places</li> <li>Dynamic Value Management: Automatic generation of dynamic values like timestamps</li> <li>Work Efficiency: Automation of repetitive tasks</li> </ul> <p>The Magic Variable feature was developed to solve these challenges.</p>"},{"location":"en/usage/config/magic_variable/#key-concepts","title":"Key Concepts","text":""},{"location":"en/usage/config/magic_variable/#dynamic-replacement-mechanism","title":"Dynamic Replacement Mechanism","text":"<pre><code>flowchart LR\n    A[JSON File] --&gt; B[${variable_name} description]\n    C[Actual Filename] --&gt; D[Variable Value]\n    B --&gt; E[Magic Variable Processing]\n    D --&gt; E\n    E --&gt; F[Replaced JSON File]\n</code></pre>"},{"location":"en/usage/config/magic_variable/#supported-variables","title":"Supported Variables","text":"Variable Name Description Example <code>${filename}</code> Input filename (without extension) <code>experiment_data</code> <code>${timestamp}</code> Current timestamp <code>2023-01-01T12:00:00Z</code>"},{"location":"en/usage/config/magic_variable/#application-scope","title":"Application Scope","text":"<ul> <li>Target Mode: Invoice mode only</li> <li>Target Files: JSON files (invoice.json, metadata.json, etc.)</li> <li>Replacement Timing: During structured processing execution</li> </ul>"},{"location":"en/usage/config/magic_variable/#configuration-method","title":"Configuration Method","text":""},{"location":"en/usage/config/magic_variable/#1-enable-magic-variable","title":"1. Enable Magic Variable","text":"<p>Enable Magic Variable in the configuration file:</p> rdeconfig.yaml<pre><code>system:\n    magic_variable: true\n</code></pre>"},{"location":"en/usage/config/magic_variable/#2-use-variables-in-json-files","title":"2. Use Variables in JSON Files","text":""},{"location":"en/usage/config/magic_variable/#usage-example-in-invoicejson","title":"Usage Example in invoice.json","text":"invoice.json<pre><code>{\n    \"basic\": {\n        \"dataName\": \"${filename}\",\n        \"description\": \"Data processing result from ${filename}\"\n    },\n    \"custom\": {\n        \"original_file\": \"${filename}\",\n        \"processing_date\": \"${timestamp}\"\n    }\n}\n</code></pre>"},{"location":"en/usage/config/magic_variable/#usage-example-in-metadatajson","title":"Usage Example in metadata.json","text":"metadata.json<pre><code>{\n    \"source_file\": \"${filename}\",\n    \"processing_timestamp\": \"${timestamp}\",\n    \"output_filename\": \"${filename}_result.csv\"\n}\n</code></pre>"},{"location":"en/usage/config/magic_variable/#3-verify-replacement-results","title":"3. Verify Replacement Results","text":"<p>For input file <code>experiment_data.csv</code>:</p> Replaced invoice.json<pre><code>{\n    \"basic\": {\n        \"dataName\": \"experiment_data\",\n        \"description\": \"Data processing result from experiment_data\"\n    },\n    \"custom\": {\n        \"original_file\": \"experiment_data\",\n        \"processing_date\": \"2023-01-01T12:00:00Z\"\n    }\n}\n</code></pre>"},{"location":"en/usage/config/magic_variable/#practical-usage-examples","title":"Practical Usage Examples","text":""},{"location":"en/usage/config/magic_variable/#dynamic-filename-generation","title":"Dynamic Filename Generation","text":"Utilization in Structured Processing<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Processing when Magic Variable is enabled\n\n    # Generate metadata (using Magic Variable)\n    metadata = {\n        \"source\": \"${filename}\",\n        \"processed_at\": \"${timestamp}\",\n        \"output\": \"${filename}_processed.csv\",\n        \"version\": \"1.0\"\n    }\n\n    # Save as metadata.json\n    metadata_file = Path(resource_paths.meta) / \"metadata.json\"\n    with open(metadata_file, 'w', encoding='utf-8') as f:\n        json.dump(metadata, f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"en/usage/config/magic_variable/#conditional-magic-variable-usage","title":"Conditional Magic Variable Usage","text":"Usage with Configuration Check<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Check Magic Variable setting\n    magic_enabled = srcpaths.config.system.magic_variable\n\n    if magic_enabled:\n        # Use Magic Variable\n        data_name = \"${filename}\"\n        timestamp = \"${timestamp}\"\n    else:\n        # Use fixed values\n        data_name = \"default_data\"\n        timestamp = \"2023-01-01T00:00:00Z\"\n\n    metadata = {\n        \"data_name\": data_name,\n        \"created_at\": timestamp\n    }\n</code></pre>"},{"location":"en/usage/config/magic_variable/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/usage/config/magic_variable/#when-magic-variable-doesnt-work","title":"When Magic Variable Doesn't Work","text":""},{"location":"en/usage/config/magic_variable/#configuration-check-checklist","title":"Configuration Check Checklist","text":"Configuration Check Script<pre><code>def check_magic_variable_settings(srcpaths):\n    # Check Magic Variable setting\n    magic_enabled = srcpaths.config.system.magic_variable\n    print(f\"Magic Variable enabled: {magic_enabled}\")\n\n    # Check input files\n    input_files = list(srcpaths.inputdata.glob(\"*\"))\n    for file in input_files:\n        print(f\"Input file: {file.name}\")\n        print(f\"Filename (without extension): {file.stem}\")\n</code></pre>"},{"location":"en/usage/config/magic_variable/#common-problems-and-solutions","title":"Common Problems and Solutions","text":"Problem Cause Solution Variables not replaced Magic Variable disabled Set <code>magic_variable: true</code> in configuration file Doesn't work in non-invoice modes Mode limitation Execute in invoice mode Variable names not recognized Description error Check <code>${filename}</code>, <code>${timestamp}</code> description"},{"location":"en/usage/config/magic_variable/#debugging-method","title":"Debugging Method","text":"Debug Code<pre><code>def debug_magic_variable(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Check configuration values\n    config = srcpaths.config\n    print(f\"Magic Variable setting: {config.system.magic_variable}\")\n\n    # Check input files\n    input_files = list(srcpaths.inputdata.glob(\"*\"))\n    print(f\"Number of input files: {len(input_files)}\")\n\n    for file in input_files:\n        print(f\"Filename: {file.name}\")\n        print(f\"Stem: {file.stem}\")\n\n    # Test metadata\n    test_metadata = {\n        \"test_filename\": \"${filename}\",\n        \"test_timestamp\": \"${timestamp}\"\n    }\n\n    print(f\"Test metadata: {test_metadata}\")\n</code></pre>"},{"location":"en/usage/config/magic_variable/#summary","title":"Summary","text":"<p>Key features of the Magic Variable function:</p> <ul> <li>Automatic Replacement: Automatic replacement of filenames and timestamps</li> <li>Consistency Assurance: Unification of the same values in multiple places</li> <li>Work Efficiency: Reduction of manual input tasks</li> <li>Dynamic Response: Generation of dynamic values at runtime</li> </ul>"},{"location":"en/usage/config/magic_variable/#next-steps","title":"Next Steps","text":"<p>To utilize the Magic Variable feature, refer to the following documents:</p> <ul> <li>Learn Magic Variable configuration methods in Configuration Files</li> <li>Check invoice mode details in Data Registration Modes</li> <li>Understand processing flows in Structured Processing Concepts</li> </ul>"},{"location":"en/usage/config/mode/","title":"What are Data Registration Modes","text":""},{"location":"en/usage/config/mode/#purpose","title":"Purpose","text":"<p>This document explains the five data registration modes in RDE structured processing. You will understand the characteristics, use cases, and configuration methods of each mode to select the appropriate mode.</p>"},{"location":"en/usage/config/mode/#challenges-and-background","title":"Challenges and Background","text":"<p>Research data registration had diverse needs such as:</p> <ul> <li>Single Dataset: Register one experimental result</li> <li>Batch Registration: Efficiently register multiple related experiments</li> <li>Integrated Management: Manage related data as one dataset</li> <li>Data Migration: Migrate existing RDE format data</li> </ul> <p>Five data registration modes were developed to address these diverse needs.</p>"},{"location":"en/usage/config/mode/#key-concepts","title":"Key Concepts","text":""},{"location":"en/usage/config/mode/#mode-selection-mechanism","title":"Mode Selection Mechanism","text":"<pre><code>flowchart TD\n    A[Start Structured Processing] --&gt; B{Check Input Files}\n    B --&gt;|*_excel_invoice.xlsx exists| C[ExcelInvoice Mode]\n    B --&gt;|smarttable_*.{xlsx,csv,tsv} exists| D[SmartTableInvoice Mode]\n    B --&gt;|Normal files| E{Check Configuration File}\n    E --&gt;|extended_mode: MultiDataTile| F[MultiDataTile Mode]\n    E --&gt;|extended_mode: rdeformat| G[RDEFormat Mode]\n    E --&gt;|No setting| H[Invoice Mode]\n</code></pre>"},{"location":"en/usage/config/mode/#five-mode-overview","title":"Five Mode Overview","text":"Mode Purpose Activation Condition Multiple Data Support Invoice Single dataset registration Default \u2717 ExcelInvoice Batch registration <code>*_excel_invoice.xlsx</code> exists \u2713 SmartTableInvoice Automatic metadata generation <code>smarttable_*.{xlsx,csv,tsv}</code> exists \u2713 MultiDataTile Integrated management Configuration file specification \u2713 RDEFormat Data migration Configuration file specification \u2713"},{"location":"en/usage/config/mode/#mode-details","title":"Mode Details","text":""},{"location":"en/usage/config/mode/#1-invoice-mode-standard-mode","title":"1. Invoice Mode (Standard Mode)","text":"<p>Overview: The most basic data registration mode for registering single datasets.</p> <p>Activation Condition: Activated by default.</p> <p>Features: - Single dataset registration - Simple configuration - Recommended for beginners</p> <p>Directory Structure: <pre><code>data/\n\u251c\u2500\u2500 inputdata/          # Input data\n\u251c\u2500\u2500 invoice/            # Invoice data\n\u2502   \u2514\u2500\u2500 invoice.json\n\u2514\u2500\u2500 tasksupport/        # Support files\n    \u251c\u2500\u2500 invoice.schema.json\n    \u2514\u2500\u2500 metadata-def.json\n</code></pre></p>"},{"location":"en/usage/config/mode/#2-excelinvoice-mode","title":"2. ExcelInvoice Mode","text":"<p>Overview: Mode for batch registration of multiple datasets using Excel files.</p> <p>Activation Condition: Automatically activated when files with <code>*_excel_invoice.xlsx</code> naming convention exist in input files.</p> <p>Features: - Batch registration of multiple datasets - Efficient management via Excel files - Suitable for batch processing</p> <p>Directory Structure: <pre><code>data/\n\u251c\u2500\u2500 inputdata/\n\u2502   \u2514\u2500\u2500 experiment_excel_invoice.xlsx  # Excel invoice file\n\u251c\u2500\u2500 invoice/\n\u2514\u2500\u2500 tasksupport/\n</code></pre></p>"},{"location":"en/usage/config/mode/#3-smarttableinvoice-mode","title":"3. SmartTableInvoice Mode","text":"<p>Overview: Mode that reads metadata from table files (Excel/CSV/TSV) and automatically generates invoice.json files.</p> <p>Activation Condition: Automatically activated when files with <code>smarttable_*.{xlsx,csv,tsv}</code> naming convention exist in input files.</p> <p>Features: - Multi-format support: Reads Excel (.xlsx), CSV, and TSV files - 2-row header format: Display names in row 1, mapping keys in row 2 - Automatic metadata mapping: Structured data generation with <code>basic/</code>, <code>custom/</code>, <code>sample/</code> prefixes - Array data support: Proper mapping to <code>generalAttributes</code> and <code>specificAttributes</code> - ZIP file integration: Automatic association between data files in ZIP and table files</p> <p>Table File Format: <pre><code># Row 1: Display names (user descriptions)\nData Name,Input File 1,Cycle,Thickness,Temperature,Sample Name,Sample ID,General Item\n\n# Row 2: Mapping keys (used in actual processing)\nbasic/dataName,inputdata1,custom/cycle,custom/thickness,custom/temperature,sample/names,sample/sampleId,sample/generalAttributes.3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\n\n# Row 3 onwards: Data\nExperiment1,file1.txt,1,2mm,25,sample001,S001,value1\nExperiment2,file2.txt,2,3mm,30,sample002,S002,value2\n</code></pre></p> <p>Mapping Key Specifications: - <code>basic/xxxx</code>: Maps to <code>xxxx</code> key in <code>basic</code> object of invoice.json - <code>custom/xxxx</code>: Maps to <code>xxxx</code> key in <code>custom</code> object of invoice.json - <code>sample/xxxx</code>: Maps to <code>xxxx</code> key in <code>sample</code> object of invoice.json - <code>sample/generalAttributes.&lt;termId&gt;</code>: Maps to <code>value</code> of corresponding <code>termId</code> in <code>generalAttributes</code> array - <code>sample/specificAttributes.&lt;classId&gt;.&lt;termId&gt;</code>: Maps to <code>value</code> of corresponding <code>classId</code> and <code>termId</code> in <code>specificAttributes</code> array - <code>inputdataX</code>: Specifies file path in ZIP file (X=1,2,3...)</p> <p>Configuration Options: <pre><code>smarttable:\n  save_table_file: true  # Save SmartTable file if true\n</code></pre></p> <p><code>save_table_file</code> option: - <code>false</code> (default): SmartTable file is not saved to raw/nonshared_raw directory - <code>true</code>: Original SmartTable file is saved to raw/nonshared_raw directory</p> <p>Directory Structure: <pre><code>data/\n\u251c\u2500\u2500 inputdata/\n\u2502   \u251c\u2500\u2500 smarttable_experiment.xlsx\n\u2502   \u2514\u2500\u2500 data.zip\n\u251c\u2500\u2500 divided/\n\u2502   \u251c\u2500\u2500 0001/\n\u2502   \u2502   \u251c\u2500\u2500 invoice/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 invoice.json  # Generated from row 1 of smarttable\n\u2502   \u2502   \u2514\u2500\u2500 raw/\n\u2502   \u2502       \u2514\u2500\u2500 file1.txt\n\u2502   \u2514\u2500\u2500 0002/\n\u2502       \u251c\u2500\u2500 invoice/\n\u2502       \u2502   \u2514\u2500\u2500 invoice.json  # Generated from row 2 of smarttable\n\u2502       \u2514\u2500\u2500 raw/\n\u2502           \u2514\u2500\u2500 file2.txt\n\u2514\u2500\u2500 temp/\n    \u251c\u2500\u2500 fsmarttable_experiment_0001.csv\n    \u2514\u2500\u2500 fsmarttable_experiment_0002.csv\n</code></pre></p>"},{"location":"en/usage/config/mode/#4-multidatatile-mode","title":"4. MultiDataTile Mode","text":"<p>Overview: Mode for integrated management of multiple related data tiles as one dataset.</p> <p>Activation Condition: Must specify <code>extended_mode: 'MultiDataTile'</code> in configuration file.</p> <p>Configuration Example: <pre><code>system:\n    extended_mode: 'MultiDataTile'\n</code></pre></p> <p>Features: - Integrated management of multiple data tiles - Maintains relationships between data - Suitable for large-scale datasets</p>"},{"location":"en/usage/config/mode/#5-rdeformat-mode","title":"5. RDEFormat Mode","text":"<p>Overview: Mode for migrating existing RDE format data or creating mocks.</p> <p>Activation Condition: Must specify <code>extended_mode: 'rdeformat'</code> in configuration file.</p> <p>Configuration Example: <pre><code>system:\n    extended_mode: 'rdeformat'\n</code></pre></p> <p>Features: - Migration of existing data - Mock creation of RDE format data - Data conversion processing</p>"},{"location":"en/usage/config/mode/#mode-comparison","title":"Mode Comparison","text":"Mode Multiple Data Configuration Required Use Case Difficulty Invoice \u2717 \u2717 Single dataset Beginner ExcelInvoice \u2713 \u2717 Batch registration Intermediate SmartTableInvoice \u2713 \u2717 Flexible metadata mapping Intermediate MultiDataTile \u2713 \u2713 Integrated management Advanced RDEFormat \u2713 \u2713 Data migration Advanced"},{"location":"en/usage/config/mode/#implementation-examples","title":"Implementation Examples","text":""},{"location":"en/usage/config/mode/#invoice-mode","title":"Invoice Mode","text":"<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Process single dataset\n    input_file = list(srcpaths.inputdata.glob(\"*.csv\"))[0]\n    df = pd.read_csv(input_file)\n\n    # Save processing results\n    output_path = resource_paths.structured / \"processed_data.csv\"\n    df.to_csv(output_path, index=False)\n</code></pre>"},{"location":"en/usage/config/mode/#multidatatile-mode","title":"MultiDataTile Mode","text":"<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Process multiple files\n    input_files = list(srcpaths.inputdata.glob(\"*.csv\"))\n\n    for i, file in enumerate(input_files):\n        df = pd.read_csv(file)\n\n        # Save to directory for each tile\n        tile_dir = resource_paths.structured / f\"tile_{i+1:04d}\"\n        tile_dir.mkdir(exist_ok=True)\n\n        output_path = tile_dir / f\"processed_{file.name}\"\n        df.to_csv(output_path, index=False)\n</code></pre>"},{"location":"en/usage/config/mode/#configuration-file-mode-specification","title":"Configuration File Mode Specification","text":""},{"location":"en/usage/config/mode/#rdeconfigyaml","title":"rdeconfig.yaml","text":"<pre><code>system:\n    # Standard mode (default)\n    extended_mode: null\n\n    # MultiDataTile mode\n    extended_mode: 'MultiDataTile'\n\n    # RDEFormat mode\n    extended_mode: 'rdeformat'\n</code></pre>"},{"location":"en/usage/config/mode/#pyprojecttoml","title":"pyproject.toml","text":"<pre><code>[tool.rdetoolkit.system]\nextended_mode = \"MultiDataTile\"\n</code></pre>"},{"location":"en/usage/config/mode/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/usage/config/mode/#common-problems","title":"Common Problems","text":"<ol> <li>Unintended mode activation</li> <li>Check input file names (existence of <code>*_excel_invoice.xlsx</code>)</li> <li> <p>Check <code>extended_mode</code> in configuration file</p> </li> <li> <p>MultiDataTile mode not activating</p> </li> <li>Verify <code>extended_mode: 'MultiDataTile'</code> is written in configuration file</li> <li> <p>Check if configuration file YAML format is correct</p> </li> <li> <p>Divided directory not created</p> </li> <li>Verify MultiDataTile mode or ExcelInvoice mode is correctly activated</li> <li>Check if multiple input data exist</li> </ol>"},{"location":"en/usage/config/mode/#related-information","title":"Related Information","text":"<p>To learn more about data registration modes, refer to the following documents:</p> <ul> <li>Learn configuration methods in Configuration Files</li> <li>Check directory roles in Directory Structure</li> <li>Understand processing flows in Structured Processing Concepts</li> </ul>"},{"location":"en/usage/structured_process/development_guide/","title":"Development Guide","text":""},{"location":"en/usage/structured_process/development_guide/#implementing-structured-processing-with-real-data","title":"Implementing Structured Processing with Real Data","text":"<p>This document explains how to build structured processing for registering RAS files output from Rigaku's X-ray diffraction (XRD) equipment to RDE using the RDEToolKit library.</p>"},{"location":"en/usage/structured_process/development_guide/#data-usage-acknowledgments","title":"Data Usage Acknowledgments","text":"<p>The sample data and related technical information used in this document are provided by the \"NIMS Materials Data Conversion Tools (M-DaC)\" project of the National Institute for Materials Science (NIMS). The M-DaC project is the result of technology development aimed at efficient collection and high value-added processing of experimental data, developed in cooperation with measurement equipment manufacturers.</p> <p>Acknowledgments:</p> <ul> <li>Data Provider: National Institute for Materials Science (NIMS)</li> <li>Project: NIMS Materials Data Conversion Tools (M-DaC) for XRD</li> <li>Joint Development: Rigaku Corporation</li> <li>License: MIT License</li> <li>Citation: H. Nagao, S. Matsunami, M. Suzuki, and H. Yoshikawa: \"NIMS Materials Data Conversion Tools (M-DaC) ver 1.1\"</li> </ul> <p>By utilizing the results of this project, practical learning based on data formats used in actual research sites becomes possible. We deeply appreciate NIMS and all related researchers and engineers.</p>"},{"location":"en/usage/structured_process/development_guide/#about-ras-files","title":"About RAS Files","text":""},{"location":"en/usage/structured_process/development_guide/#data-format-characteristics","title":"Data Format Characteristics","text":"<p>RAS files (Rigaku) are standard data formats output from Rigaku's X-ray diffraction equipment such as SmartLab. They have the following characteristics:</p> <ul> <li>ASCII format: Text-based file format that is human-readable</li> <li>Structured metadata: Systematic recording of measurement conditions, equipment settings, sample information, etc.</li> <li>3-column data: Measurement data consisting of three columns: angle, intensity, and attenuation correction coefficient</li> <li>Delimiter: Lines starting with asterisk (*) indicate metadata and comments</li> </ul>"},{"location":"en/usage/structured_process/development_guide/#file-structure","title":"File Structure","text":"<pre><code>*RAS_DATA_START\n*FILE_DATETIME 2023-01-15 10:30:00\n*SAMPLE_NAME Al2O3_sample\n*TARGET_NAME Cu\n*TUBE_VOLTAGE 40.0\n*TUBE_CURRENT 30.0\n*SCAN_MODE continuous\n*SCAN_SPEED 2.0\n*SCAN_STEP 0.02\n*START_ANGLE 10.0\n*STOP_ANGLE 90.0\n*RAS_HEADER_START\n... (detailed metadata)\n*RAS_HEADER_END\n*RAS_INT_START\n10.0000 1200.0000 1.0000\n10.0200 1205.0000 1.0000\n10.0400 1198.0000 1.0000\n... (measurement data)\n*RAS_INT_END\n*RAS_DATA_END\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#building-rde-structured-processing-with-rdetoolkit","title":"Building RDE Structured Processing with rdetoolkit","text":""},{"location":"en/usage/structured_process/development_guide/#rde-structured-processing-development-process","title":"RDE Structured Processing Development Process","text":"<p>The development process shown in this document is an example. Please adjust according to user needs.</p> <pre><code>flowchart TD\n    %% Specify overall direction as vertical (Top\u2192Bottom)\n    subgraph RDE Structured Processing Development Process\n        direction TB\n        style RDE Structured Processing Development Process fill:#f0f4f8,stroke:#333,stroke-width:2px,rx:10,ry:10\n    end\n\n    %% Common style definition for nodes\n    classDef step fill:#cfe2f3,stroke:#333,stroke-width:1.5px,rx:5,ry:5,font-size:14px;\n\n    %% Each step\n    A[\ud83d\udd0d Select metadata to extract]:::step --&gt; B[\ud83d\udee0\ufe0f Environment setup]:::step\n    B --&gt; C[\ud83d\udcc4 Create necessary template files]:::step\n    C --&gt; D[\ud83d\udcbb Develop structured processing]:::step\n    D --&gt; E[\u2705 Verify operation]:::step\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#about-predefined-file-groups-required-for-rde-data-registration","title":"About Predefined File Groups Required for RDE Data Registration","text":"<p>For reusable data registration in RDE, the following files are mandatory:</p> <ul> <li><code>templates/tasksupport/invoice.schema.json</code></li> <li><code>templates/tasksupport/metadata-def.json</code></li> </ul> <p>RDE uses a predefined metadata definition file <code>metadata-def.json</code> to extract metadata from files output by measurement equipment and daily experimental data files, and <code>invoice.schema.json</code> which allows flexible customization of data input forms for sample information (synthesis conditions, etc.) and measurement conditions that need to be recorded routinely in daily experiments.</p> <ul> <li>By creating <code>invoice.schema.json</code> during data registration, information necessary for daily experiments can be defined as a data input form.</li> <li>Predefined files for automatically extracting metadata from files during data registration: <code>metadata-def.json</code></li> </ul> <p>Furthermore, these file groups can be easily created using packages provided by our organization. In addition to the above files, <code>invoice.json</code> for building structured processing in personal environments can also be created.</p> <ul> <li>nims-mdpf/RDE_datasettemplate-schemafile-make-tool - Github</li> </ul>"},{"location":"en/usage/structured_process/development_guide/#selecting-metadata-to-extract-metadata-defjson","title":"Selecting Metadata to Extract (metadata-def.json)","text":"<p>Decide in advance which metadata to extract from input data. The number of predefined metadata varies depending on users and projects.</p> <p>This time, from the perspective of measurement conditions, sample information, time, and traceability, we will extract the following metadata:</p> <p>A. Measurement Conditions</p> <pre><code>*MEAS_COND_XG_VOLTAGE \"40\"           # Tube voltage (kV)\n*MEAS_COND_XG_CURRENT \"30\"           # Tube current (mA)\n*HW_XG_TARGET_NAME \"Cu\"              # X-ray source (Cu)\n*HW_XG_WAVE_LENGTH_ALPHA1 \"1.540593\" # Wavelength \u03b11 (\u00c5)\n*HW_XG_WAVE_LENGTH_ALPHA2 \"1.544414\" # Wavelength \u03b12 (\u00c5)\n*MEAS_SCAN_START \"25.0000\"           # Measurement start angle\n*MEAS_SCAN_STOP \"60.0000\"            # Measurement end angle\n*MEAS_SCAN_STEP \"0.0100\"             # Measurement step\n*MEAS_SCAN_SPEED \"8.0000\"            # Measurement speed (deg/min)\n*MEAS_SCAN_MODE \"CONTINUOUS\"         # Measurement mode\n</code></pre> <p>B. Sample Information</p> <pre><code>*FILE_SAMPLE \"Test Sample\"           # Sample name\n*FILE_COMMENT \"XRD example\"          # Comment\n*FILE_MEMO \"Rigaku XRD memo\"         # Memo\n*FILE_OPERATOR \"English\"             # Operator\n*FILE_USERGROUP \"Academic\"           # User group\n</code></pre> <p>C. Temporal &amp; Traceability</p> <pre><code>*MEAS_SCAN_START_TIME \"11/21/2017 08:32:31\" # Measurement start time\n*MEAS_SCAN_END_TIME \"11/21/2017 08:37:42\"   # Measurement end time\n*MEAS_DATA_COUNT \"3501\"                     # Number of data points\n*FILE_VERSION \"1\"                           # File version\n</code></pre> <p>Based on this information, define the following in <code>metadata-def.json</code>.</p> <p>Excerpt shown due to length.</p> <pre><code>{\n    \"file_sample\": {\n        \"name\": {\n            \"ja\": \"Sample Name\",\n            \"en\": \"Sample Name\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_comment\": {\n        \"name\": {\n            \"ja\": \"Comment\",\n            \"en\": \"Comment\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_memo\": {\n        \"name\": {\n            \"ja\": \"Memo\",\n            \"en\": \"Memo\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_operator\": {\n        \"name\": {\n            \"ja\": \"Operator\",\n            \"en\": \"Operator\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"file_usergroup\": {\n        \"name\": {\n            \"ja\": \"User Group\",\n            \"en\": \"User Group\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_cond_xg_voltage\": {\n        \"name\": {\n            \"ja\": \"Tube Voltage\",\n            \"en\": \"Tube Voltage\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_cond_xg_current\": {\n        \"name\": {\n            \"ja\": \"Tube Current\",\n            \"en\": \"Tube Current\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"hw_xg_target_name\": {\n        \"name\": {\n            \"ja\": \"X-ray Source\",\n            \"en\": \"X-ray Source\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"hw_xg_wave_length_alpha1\": {\n        \"name\": {\n            \"ja\": \"Wavelength \u03b11\",\n            \"en\": \"Wavelength \u03b11\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"hw_xg_wave_length_alpha2\": {\n        \"name\": {\n            \"ja\": \"Wavelength \u03b12\",\n            \"en\": \"Wavelength \u03b12\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_scan_start\": {\n        \"name\": {\n            \"ja\": \"Measurement Start Angle\",\n            \"en\": \"Measurement Start Angle\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_scan_stop\": {\n        \"name\": {\n            \"ja\": \"Measurement End Angle\",\n            \"en\": \"Measurement End Angle\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_scan_step\": {\n        \"name\": {\n            \"ja\": \"Measurement Step\",\n            \"en\": \"Measurement Step\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_scan_speed\": {\n        \"name\": {\n            \"ja\": \"Measurement Speed\",\n            \"en\": \"Measurement Speed\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"meas_scan_mode\": {\n        \"name\": {\n            \"ja\": \"Measurement Mode\",\n            \"en\": \"Measurement Mode\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_scan_start_time\": {\n        \"name\": {\n            \"ja\": \"Measurement Start Time\",\n            \"en\": \"Measurement Start Time\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_scan_end_time\": {\n        \"name\": {\n            \"ja\": \"Measurement End Time\",\n            \"en\": \"Measurement End Time\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    },\n    \"meas_data_count\": {\n        \"name\": {\n            \"ja\": \"Number of Data Points\",\n            \"en\": \"Number of Data Points\"\n        },\n        \"schema\": {\n            \"type\": \"number\"\n        }\n    },\n    \"file_version\": {\n        \"name\": {\n            \"ja\": \"File Version\",\n            \"en\": \"File Version\"\n        },\n        \"schema\": {\n            \"type\": \"string\"\n        }\n    }\n}\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#creating-input-form-customization-invoiceschemajson","title":"Creating Input Form Customization (invoice.schema.json)","text":"<p>Create <code>invoice.schema.json</code> to customize the input form. This time, we will create a form that allows input of sample information and measurement conditions.</p> <p>Excerpt shown due to length.</p> <pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n      \"basic\": {\n        \"type\": \"object\",\n        \"label\": {\n          \"ja\": \"Basic Information\",\n          \"en\": \"Basic Information\"\n        },\n        \"required\": [\n          \"dataName\"\n        ],\n        \"properties\": {\n          \"dataName\": {\n            \"type\": \"string\",\n            \"label\": {\n              \"ja\": \"Data Name\",\n              \"en\": \"Data Name\"\n            }\n          }\n        }\n      },\n      \"sample\": {\n        \"type\": \"object\",\n        \"label\": {\n          \"ja\": \"Sample Information\",\n          \"en\": \"Sample Information\"\n        },\n        \"required\": [\n          \"names\"\n        ],\n        \"properties\": {\n          \"generalAttributes\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"3adf9874-7bcb-e5f8-99cb-3d6fd9d7b55e\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"e2d20d02-2e38-2cd3-b1b3-66fdb8a11057\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"efcf34e7-4308-c195-6691-6f4d28ffc9bb\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"7cc57dfb-8b70-4b3a-5315-fbce4cbf73d0\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"1e70d11d-cbdd-bfd1-9301-9612c29b4060\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"5e166ac4-bfcd-457a-84bc-8626abe9188f\"\n                      }\n                  }\n                },\n                {\n                  \"type\": \"object\",\n                  \"required\": [\n                      \"termId\"\n                  ],\n                  \"properties\": {\n                      \"termId\": {\n                        \"const\": \"0d0417a3-3c3b-496a-b0fb-5a26f8a74166\"\n                      }\n                  }\n                }\n              ]\n          }\n        }\n      }\n  }\n}\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#environment-setup","title":"Environment Setup","text":""},{"location":"en/usage/structured_process/development_guide/#project-initialization","title":"Project Initialization","text":"<p>First, create a directory for the structured processing project and initialize the environment.</p> <pre><code>mkdir xrd_structured_processing\ncd xrd_structured_processing\n</code></pre> <p>Initialize the project using uv (recommended) or pip.</p> <p>Using uv (recommended)</p> <pre><code>uv init --python 3.12\nuv add rdetoolkit\n</code></pre> <p>Using pip</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install rdetoolkit\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#adding-configuration-files","title":"Adding Configuration Files","text":"<p>Add the necessary configuration files for RDE structured processing to the <code>data/tasksupport/rdeconfig.yml</code> directory.</p> <pre><code>system:\n    save_raw: true\n    save_nonshared_raw: false\n    magic_variable: false\n    save_thumbnail_image: true\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#basic-structure-recommended-by-rdetoolkit-for-structured-processing","title":"Basic Structure Recommended by rdetoolkit for Structured Processing","text":"<p>rdetoolkit recommends the following basic directory structure for structured processing:</p> <pre><code>container\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 inputdata\n\u2502   \u2502   \u2514\u2500\u2500 XRD_RIGAKU.ras\n\u2502   \u251c\u2500\u2500 invoice\n\u2502   \u2502   \u2514\u2500\u2500 invoice.json\n\u2502   \u2514\u2500\u2500 tasksupport\n\u2502       \u251c\u2500\u2500 invoice.schema.json\n\u2502       \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 modules\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 mymodule.py\n\u2514\u2500\u2500 requirements.txt\n</code></pre> Directory/File Description main.py Entry point for structured processing. Calls developed modules. modules Directory for placing custom modules. requirements.txt File defining required Python packages. data Directory for placing data used in structured processing. <p>When rdetoolkit is installed, libraries necessary for data processing such as <code>pandas</code>, <code>numpy</code>, <code>matplotlib</code> are automatically installed. These libraries are useful for data manipulation and visualization in structured processing.</p>"},{"location":"en/usage/structured_process/development_guide/#implementation-of-mainpy","title":"Implementation of main.py","text":"<p>The default created <code>main.py</code> becomes the entry point file for this project. It is a script for calling module groups developed by each project/user.</p> <p>By passing the developed module as an argument to <code>rdetoolkit.workflows.run()</code> as shown below, you can implement structured processing including pre/post processing necessary for RDE structured processing.</p> <p>The module we will develop this time is <code>modules.mymodule.my_xrd_func()</code>. Specify this function in the <code>custom_dataset_function</code> argument of <code>run()</code>.</p> <pre><code>import rdetoolkit\n\nfrom modules.mymodule import my_xrd_func\n\nrdetoolkit.workflows.run(custom_dataset_function=my_xrd_func)\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#custom-module-implementation","title":"Custom Module Implementation","text":"<p>Place custom modules in the <code>container/modules/</code> directory. Here, we will implement a function to process XRD data with the filename <code>mymodule.py</code>.</p> <p>The important point here is to include the following arguments in the function <code>my_xrd_func</code> you define:</p> <ul> <li><code>RdeInputDirPaths</code>: Data class containing path groups of data directories where various input data are stored.</li> <li><code>RdeOutputResourcePath</code>: Data class containing directory paths of output resources.</li> </ul> <p>By using the directory paths stored in these classes, you can safely and reliably register data in the RDE system.</p> <p>Furthermore, input files are stored in the <code>rawfiles</code> attribute of the <code>RdeInputDirPaths</code> class. Since they are stored in an array called <code>resource_paths.rawfiles</code> rather than <code>srcpaths</code>, we recommend using this attribute.</p> <p>In RDE, data is registered in units called data tiles within datasets. rdetoolkit automatically groups input data in units of these data tiles and passes data to custom structured processing, so we use files stored in the <code>rawfiles</code> attribute of <code>RdeInputDirPaths</code>.</p> <pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    pass\n</code></pre> <p>Next, define the processing to be implemented within the <code>my_xrd_func</code> function. RDE structured processing allows users to flexibly define their own processing. The most common case is to implement the following processing system:</p> <ul> <li>Read input data</li> <li>Extract metadata</li> <li>Create structured files</li> <li>Create plot images (for viewing visualized graphs on RDE)</li> </ul> <p>We will implement according to the following policy:</p> Processing Content Processing Details Function Name Read input data Read <code>.ras</code> file and separate measurement data and metadata <code>read_ras_file</code> Extract metadata Save separated metadata <code>save_metadata</code> Create structured files Save only measurement data to csv Use pandas to_csv() Create plot images Create XRD plot images <code>xrd_plot</code>"},{"location":"en/usage/structured_process/development_guide/#step1-read-input-data","title":"Step1: Read Input Data","text":"<p>In the <code>read_ras_file</code> function, read input data and separate measurement data and metadata. Implement as follows:</p> <pre><code>from pathlib import Path\nimport re\nimport pandas as pd\n\ndef parse_ras_file(filepath: str | Path) -&gt; tuple[dict[str, str], pd.DataFrame]:\n    \"\"\"Parse RAS file and extract metadata and measurement data\"\"\"\n\n    filepath = Path(filepath)\n    if not filepath.exists():\n        raise FileNotFoundError(f\"File not found: {filepath}\")\n\n    metadata = {}\n    measurement_data = []\n\n    with open(filepath, 'r', encoding='utf-8') as file:\n        lines = file.readlines()\n\n    in_data_section = False\n\n    for line in lines:\n        line = line.strip()\n\n        # Skip empty lines\n        if not line:\n            continue\n\n        # Start of measurement data section\n        if line == \"*RAS_INT_START\":\n            in_data_section = True\n            continue\n\n        # End of measurement data section\n        if line == \"*RAS_INT_END\":\n            in_data_section = False\n            continue\n\n        # Process measurement data\n        if in_data_section:\n            try:\n                values = line.split()\n                if len(values) &gt;= 3:\n                    two_theta = float(values[0])\n                    intensity = float(values[1])\n                    correction = float(values[2])\n                    measurement_data.append({\n                        'two_theta': two_theta,\n                        'intensity': intensity,\n                        'correction': correction\n                    })\n            except ValueError:\n                continue\n\n        # Process metadata (lines starting with *)\n        elif line.startswith(\"*\") and not line.startswith(\"*RAS_\"):\n            # Extract metadata using regular expressions\n            match = re.match(r'\\*(\\w+)\\s+\"?([^\"]*)\"?', line)\n            if match:\n                key = match.group(1).lower()\n                value = match.group(2).strip()\n                metadata[key] = value\n\n    # Convert measurement data to DataFrame\n    df = pd.DataFrame(measurement_data)\n\n    return metadata, df\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#step2-extract-metadata","title":"Step2: Extract Metadata","text":"<p>In the <code>save_metadata</code> function, save the extracted metadata. Implement as follows:</p> <pre><code>import json\nfrom rdetoolkit.rde2util import Meta\n\ndef save_metadata(metadata: dict[str, str], metadata_def_json_path: str | Path, save_path: str | Path):\n    \"\"\"Save metadata using rdetoolkit Meta utility\"\"\"\n\n    # Load metadata definition\n    with open(metadata_def_json_path, 'r', encoding='utf-8') as f:\n        metadata_def = json.load(f)\n\n    # Create Meta instance\n    meta = Meta(metadata_def)\n\n    # Map metadata to defined schema\n    mapped_metadata = {}\n    for key, value in metadata.items():\n        if key in metadata_def:\n            mapped_metadata[key] = value\n\n    # Save metadata\n    meta.save_meta_file(mapped_metadata, save_path)\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#step3-save-measurement-data","title":"Step3: Save Measurement Data","text":"<p>Save the measurement data as a CSV file. Add the following to the <code>my_xrd_func</code> function:</p> <pre><code>from pathlib import Path\nimport re\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\nfrom rdetoolkit.rde2util import Meta\n\ndef parse_ras_file(filepath: str | Path) -&gt; tuple[dict[str, str], pd.DataFrame]:\n    # ... Omitted: Include the content of the above parse_ras_file function here ...\n    return metadata, df\n\ndef save_metadata(metadata: dict[str, str], metadata_def_json_path: str | Path, save_path: str | Path):\n    # ... Omitted: Include the content of the above save_metadata function here ...\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    metadata, dataframe = parse_ras_file(resource_paths.rawfiles[0])\n\n    metadata_def_json_path = srcpaths.tasksupport.joinpath(\"metadata-def.json\")\n    save_path = resource_paths.meta.joinpath(\"metadata.json\")\n    save_metadata(metadata, metadata_def_json_path, save_path)\n\n    # **Added**: Save measurement data\n    dataframe.to_csv(resource_paths.struct.joinpath(\"mesurement.csv\"), index=False)\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#step4-create-plot-images","title":"Step4: Create Plot Images","text":"<p>In the <code>xrd_plot</code> function, create XRD data plot images. Implement as follows:</p> <pre><code>def parse_ras_file(filepath: str | Path) -&gt; tuple[dict[str, str], pd.DataFrame]:\n    # ... Omitted: Include the content of the above parse_ras_file function here ...\n    return metadata, df\n\n\ndef save_metadata(metadata: dict[str, str], metadata_def_json_path: str | Path, save_path: str | Path):\n    # ... Omitted: Include the content of the above save_metadata function here ...\n\ndef xrd_plot(data: pd.DataFrame, output_path: str | Path):\n    \"\"\"Create XRD plot image\"\"\"\n    plt.figure(figsize=(10, 6))\n    plt.plot(data['two_theta'], data['intensity'], label='Intensity')\n    plt.xlabel('2Theta (degrees)')\n    plt.ylabel('Intensity')\n    plt.title('XRD Pattern')\n    plt.legend()\n    plt.grid()\n    plt.savefig(output_path)\n    plt.close()\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    metadata, dataframe = parse_ras_file(resource_paths.rawfiles[0])\n\n    metadata_def_json_path = srcpaths.tasksupport.joinpath(\"metadata-def.json\")\n    save_path = resource_paths.meta.joinpath(\"metadata.json\")\n    save_metadata(metadata, metadata_def_json_path, save_path)\n\n    # Save measurement data\n    dataframe.to_csv(resource_paths.struct.joinpath(\"mesurement.csv\"), index=False)\n\n    # **Added**: Create plot image\n    xrd_plot(dataframe, resource_paths.main_image.joinpath(\"xrd_graph.png\"))\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#step5-add-exception-handling","title":"Step5: Add Exception Handling","text":"<p><code>rdetoolkit</code> defines exceptions that may occur during structured processing as <code>StructuredError</code>. By using this, we can display appropriate messages when errors occur.</p> <pre><code>from pathlib import Path\nimport re\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\nfrom rdetoolkit.rde2util import Meta\nfrom rdetoolkit.exceptions import StructuredError # **Added**\n\n# ... Omitted: Include the content of the above function groups here ...\n\ndef my_xrd_func(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"XRD data processing main function\"\"\"\n    try:\n        # RAS file analysis\n        metadata, dataframe = parse_ras_file(resource_paths.rawfiles[0])\n\n        # Save metadata\n        try:\n            save_metadata(metadata,\n                        srcpaths.tasksupport.joinpath(\"metadata-def.json\"),\n                        resource_paths.meta.joinpath(\"metadata.json\"))\n        except StructuredError as e:\n            print(f\"Error saving metadata: {e}\")\n            return None\n\n        # Save measurement data\n        dataframe.to_csv(resource_paths.struct.joinpath(\"mesurement.csv\"), index=False)\n\n        # Create plot image\n        xrd_plot(dataframe, resource_paths.main_image.joinpath(\"xrd_graph.png\"))\n    except Exception as e:\n        raise StructuredError(f\"An error occurred during XRD processing: {e}\") from e\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#step6-verify-structured-processing-operation","title":"Step6: Verify Structured Processing Operation","text":"<pre><code>cd container\npython3 main.py\n</code></pre> <p>Confirm that the following files are generated. (Empty directories are excluded from display.)</p> <pre><code>container/data\n\u251c\u2500\u2500 inputdata\n\u2502   \u2514\u2500\u2500 XRD_RIGAKU.ras\n\u251c\u2500\u2500 invoice\n\u2502   \u2514\u2500\u2500 invoice.json\n\u251c\u2500\u2500 job.failed\n\u251c\u2500\u2500 main_image\n\u2502   \u2514\u2500\u2500 xrd_graph.png\n\u251c\u2500\u2500 meta\n\u2502   \u2514\u2500\u2500 metadata.json\n\u251c\u2500\u2500 nonshared_raw\n\u2502   \u2514\u2500\u2500 XRD_RIGAKU.ras\n\u251c\u2500\u2500 raw\n\u2502   \u2514\u2500\u2500 XRD_RIGAKU.ras\n\u251c\u2500\u2500 structured\n\u2502   \u2514\u2500\u2500 mesurement.csv\n\u251c\u2500\u2500 tasksupport\n\u2502   \u251c\u2500\u2500 invoice.schema.json\n\u2502   \u251c\u2500\u2500 metadata-def.json\n\u2502   \u2514\u2500\u2500 rdeconfig.yml\n\u2514\u2500\u2500 thumbnail\n    \u2514\u2500\u2500 xrd_graph.png\n</code></pre>"},{"location":"en/usage/structured_process/development_guide/#when-errors-occur","title":"When Errors Occur","text":"<p>Logs are output to <code>rdesys.log</code> under <code>container/data/logs</code>. If errors occur, error messages are recorded here.</p>"},{"location":"en/usage/structured_process/development_guide/#submit-structured-processing-to-rde","title":"Submit Structured Processing to RDE","text":"<p>If there are no problems with operation, submit the structured processing to RDE. Execute the following command to generate a zip file, then submit this zip file to RDE.</p> <pre><code>uv run python -m rdetoolkit artifact -s . -o rde_submit_files.zip\n</code></pre> <pre><code># Output\n\ud83d\udce6 Archiving project files...\n\ud83d\udccc - Source Directory: .\n\ud83d\udccc - Output Archive: rde_submit_files.zip\n\u2705 \ud83d\udc33 Dockerfile found!: container/Dockerfile\n\u2705 \ud83d\udc0d requirements.txt found!: container/requirements.txt\n\ud83d\udd0d Scanning for external connections...OK\n\ud83d\udd0d Scanning for code security vulnerabilities...OK\n\u2705 Archive created successfully: rde_submit_files.zip\n\u2705 Archive and report generation completed successfully.: rde_submit_files.md\n</code></pre>"},{"location":"en/usage/structured_process/directory/","title":"Directory Structure Specification","text":""},{"location":"en/usage/structured_process/directory/#purpose","title":"Purpose","text":"<p>This document explains the technical specifications of directory structures supported by RDE structured processing. It provides detailed definitions of directories required for project setup and execution.</p>"},{"location":"en/usage/structured_process/directory/#input-directory-specification","title":"Input Directory Specification","text":"<p>Directory groups required before executing structured processing. These are created manually for local execution and auto-generated in RDE environments.</p>"},{"location":"en/usage/structured_process/directory/#required-input-directories","title":"Required Input Directories","text":"Directory Name Data Type Required Description <code>inputdata</code> Input Data \u25cb Stores raw data files to be processed <code>invoice</code> Invoice Data \u25cb Stores metadata file (invoice.json) <code>tasksupport</code> Configuration Files \u25cb Stores schema definitions and metadata definition files"},{"location":"en/usage/structured_process/directory/#input-directory-contents","title":"Input Directory Contents","text":"<pre><code>data/\n\u251c\u2500\u2500 inputdata/\n\u2502   \u251c\u2500\u2500 sample_data.csv      # Target data for processing\n\u2502   \u251c\u2500\u2500 measurement.xlsx     # Measurement data\n\u2502   \u2514\u2500\u2500 archive.zip          # Compressed data\n\u251c\u2500\u2500 invoice/\n\u2502   \u2514\u2500\u2500 invoice.json         # Invoice metadata\n\u2514\u2500\u2500 tasksupport/\n    \u251c\u2500\u2500 invoice.schema.json  # Invoice schema definition\n    \u251c\u2500\u2500 metadata-def.json   # Metadata definition\n    \u2514\u2500\u2500 rdeconfig.yaml       # Processing configuration file\n</code></pre>"},{"location":"en/usage/structured_process/directory/#output-directory-specification","title":"Output Directory Specification","text":"<p>Directory groups automatically generated as results of structured processing execution.</p>"},{"location":"en/usage/structured_process/directory/#standard-output-directories","title":"Standard Output Directories","text":"Directory Name Data Type Auto-Generated RDE Registration Description <code>raw</code> Raw Data \u25cb \u25cb Copy of input data (shareable) <code>structured</code> Structured Data \u25cb \u25cb Processed data files <code>meta</code> Metadata \u25cb \u25cb metadata.json file <code>main_image</code> Images \u25cb \u25cb Images for dataset detail display <code>other_image</code> Images \u25cb \u25cb Images for file list display <code>thumbnail</code> Images \u25cb \u25cb Thumbnails for dataset list display <code>nonshared_raw</code> Non-shared Data \u25cb \u25cb Non-shareable file groups <code>attachment</code> Attachment Files - \u25cb Manually placed attachment files <code>logs</code> Logs \u25cb - Processing log files <code>temp</code> Temporary Files \u25cb - Temporary work files <p>Important Notes</p> <p>The <code>attachment</code> directory is not automatically generated by rdetoolkit. Create it manually if needed.</p>"},{"location":"en/usage/structured_process/directory/#post-execution-directory-example","title":"Post-Execution Directory Example","text":"<pre><code>data/\n\u251c\u2500\u2500 inputdata/\n\u2502   \u2514\u2500\u2500 sample_data.csv\n\u251c\u2500\u2500 invoice/\n\u2502   \u2514\u2500\u2500 invoice.json\n\u251c\u2500\u2500 logs/\n\u2502   \u2514\u2500\u2500 rdesys.log\n\u251c\u2500\u2500 main_image/\n\u2502   \u2514\u2500\u2500 chart.png\n\u251c\u2500\u2500 meta/\n\u2502   \u2514\u2500\u2500 metadata.json\n\u251c\u2500\u2500 nonshared_raw/\n\u251c\u2500\u2500 other_image/\n\u2502   \u251c\u2500\u2500 detail1.png\n\u2502   \u2514\u2500\u2500 detail2.png\n\u251c\u2500\u2500 raw/\n\u2502   \u2514\u2500\u2500 sample_data.csv\n\u251c\u2500\u2500 structured/\n\u2502   \u2514\u2500\u2500 processed_data.csv\n\u251c\u2500\u2500 tasksupport/\n\u2502   \u251c\u2500\u2500 invoice.schema.json\n\u2502   \u2514\u2500\u2500 metadata-def.json\n\u251c\u2500\u2500 temp/\n\u2502   \u2514\u2500\u2500 temp_file.json\n\u2514\u2500\u2500 thumbnail/\n    \u2514\u2500\u2500 preview.png\n</code></pre>"},{"location":"en/usage/structured_process/directory/#multi-dataset-directory","title":"Multi-Dataset Directory","text":"<p>Specification for the <code>divided</code> directory used in ExcelInvoice mode and MultiDataTile mode.</p>"},{"location":"en/usage/structured_process/directory/#divided-directory-specification","title":"Divided Directory Specification","text":"Item Specification Naming Convention <code>data/divided/{index}/</code> Index Format 4-digit zero-padded (e.g., 0001, 0002, 0029) Subdirectories Same structure as standard output directories Excluded Directories <code>inputdata</code>, <code>invoice</code>, <code>tasksupport</code>"},{"location":"en/usage/structured_process/directory/#divided-directory-structure-example","title":"Divided Directory Structure Example","text":"<pre><code>data/\n\u251c\u2500\u2500 divided/\n\u2502   \u251c\u2500\u2500 0001/\n\u2502   \u2502   \u251c\u2500\u2500 structured/\n\u2502   \u2502   \u251c\u2500\u2500 meta/\n\u2502   \u2502   \u251c\u2500\u2500 thumbnail/\n\u2502   \u2502   \u251c\u2500\u2500 main_image/\n\u2502   \u2502   \u251c\u2500\u2500 other_image/\n\u2502   \u2502   \u251c\u2500\u2500 nonshared_raw/\n\u2502   \u2502   \u2514\u2500\u2500 raw/\n\u2502   \u2514\u2500\u2500 0002/\n\u2502       \u251c\u2500\u2500 structured/\n\u2502       \u251c\u2500\u2500 meta/\n\u2502       \u251c\u2500\u2500 thumbnail/\n\u2502       \u251c\u2500\u2500 main_image/\n\u2502       \u251c\u2500\u2500 other_image/\n\u2502       \u251c\u2500\u2500 nonshared_raw/\n\u2502       \u2514\u2500\u2500 raw/\n\u251c\u2500\u2500 inputdata/\n\u251c\u2500\u2500 invoice/\n\u251c\u2500\u2500 tasksupport/\n\u2514\u2500\u2500 (other standard directories)\n</code></pre>"},{"location":"en/usage/structured_process/directory/#directoryops-api-specification","title":"DirectoryOps API Specification","text":"<p>Technical specification for directory operations using the <code>rdetoolkit.core.DirectoryOps</code> class.</p>"},{"location":"en/usage/structured_process/directory/#basic-usage","title":"Basic Usage","text":"DirectoryOps Basic Operations<pre><code>from rdetoolkit.core import DirectoryOps\n\n# Instance creation\ndir_ops = DirectoryOps(\"data\")\n\n# Get standard directory path\nstructured_path = dir_ops.structured.path\nprint(structured_path)  # data/structured\n\n# Get indexed directory path\ndivided_path = dir_ops.structured(2).path\nprint(divided_path)  # data/divided/0002/structured\n</code></pre>"},{"location":"en/usage/structured_process/directory/#batch-operation-methods","title":"Batch Operation Methods","text":"Batch Directory Operations<pre><code># Create all directories at once\nall_paths = dir_ops.all()\nprint(all_paths)\n# ['data/invoice', 'data/attachment', 'data/tasksupport', \n#  'data/structured', 'data/meta', 'data/thumbnail', \n#  'data/main_image', 'data/other_image', 'data/nonshared_raw', 'data/raw']\n\n# Create indexed directories at once\nindexed_paths = dir_ops.all(1)\nprint(indexed_paths)\n# Above + ['data/divided/0001/structured', 'data/divided/0001/meta', ...]\n</code></pre>"},{"location":"en/usage/structured_process/directory/#file-list-retrieval-methods","title":"File List Retrieval Methods","text":"File List Retrieval<pre><code># File list in specified directory\nfiles = dir_ops.structured.list()\nprint(files)\n# ['data/structured/file1.csv', 'data/structured/file2.csv']\n\n# File list in divided directory\ndivided_files = dir_ops.structured(2).list()\nprint(divided_files)\n# ['data/divided/0002/structured/file1.csv', ...]\n</code></pre>"},{"location":"en/usage/structured_process/directory/#path-specification","title":"Path Specification","text":""},{"location":"en/usage/structured_process/directory/#absolute-and-relative-paths","title":"Absolute and Relative Paths","text":"<ul> <li>Base Directory: <code>data/</code> directory at project root</li> <li>Relative Path: Path notation relative to <code>data/</code></li> <li>Absolute Path: System absolute path notation</li> </ul>"},{"location":"en/usage/structured_process/directory/#file-naming-conventions","title":"File Naming Conventions","text":"File Type Naming Convention Example Metadata <code>metadata.json</code> <code>data/meta/metadata.json</code> Invoice <code>invoice.json</code> <code>data/invoice/invoice.json</code> Logs <code>rdesys.log</code> <code>data/logs/rdesys.log</code> Schema <code>*.schema.json</code> <code>invoice.schema.json</code> Configuration <code>rdeconfig.yaml</code> <code>rdeconfig.yaml</code>"},{"location":"en/usage/structured_process/directory/#next-steps","title":"Next Steps","text":"<p>After understanding the directory structure specifications, refer to the following documents:</p> <ul> <li>Understand directory roles in Structured Processing Concepts</li> <li>Customize directory settings in Configuration Files</li> <li>Learn how to use divided directories in Processing Modes</li> </ul>"},{"location":"en/usage/structured_process/errorhandling/","title":"Error Handling Methods","text":""},{"location":"en/usage/structured_process/errorhandling/#purpose","title":"Purpose","text":"<p>This document explains how to handle errors that may occur during RDE structured processing. You will learn common error patterns and effective troubleshooting procedures.</p>"},{"location":"en/usage/structured_process/errorhandling/#prerequisites","title":"Prerequisites","text":"<ul> <li>Understanding of basic RDEToolKit usage</li> <li>Basic knowledge of Python error handling</li> <li>Understanding of how to read log files</li> </ul>"},{"location":"en/usage/structured_process/errorhandling/#steps","title":"Steps","text":""},{"location":"en/usage/structured_process/errorhandling/#1-identify-error-types","title":"1. Identify Error Types","text":"<p>First, identify the type of error that occurred:</p> Error Information Retrieval<pre><code>import traceback\n\ndef identify_error():\n    try:\n        # Execute structured processing\n        result = workflows.run(custom_dataset_function)\n    except Exception as e:\n        print(f\"Error Type: {type(e).__name__}\")\n        print(f\"Error Message: {str(e)}\")\n        print(f\"Detailed Traceback:\")\n        traceback.print_exc()\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#2-resolve-file-related-errors","title":"2. Resolve File-Related Errors","text":""},{"location":"en/usage/structured_process/errorhandling/#file-not-found-errors","title":"File Not Found Errors","text":"File Existence Check<pre><code>import os\n\ndef check_file_exists(file_path):\n    if not os.path.exists(file_path):\n        print(f\"File not found: {file_path}\")\n        # Suggest alternative file paths\n        alternatives = [\n            file_path.replace('.csv', '.xlsx'),\n            os.path.join('data', os.path.basename(file_path))\n        ]\n        for alt in alternatives:\n            if os.path.exists(alt):\n                print(f\"Alternative file found: {alt}\")\n                return alt\n        return None\n    return file_path\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#permission-error-resolution","title":"Permission Error Resolution","text":"Permission Fixes<pre><code># Set directory permissions\nchmod 755 data/\nchmod 755 data/structured/\nchmod 755 data/logs/\n\n# Set file permissions\nchmod 644 data/invoice/invoice.json\nchmod 644 data/tasksupport/*.json\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#3-resolve-configuration-file-errors","title":"3. Resolve Configuration File Errors","text":""},{"location":"en/usage/structured_process/errorhandling/#json-format-validation","title":"JSON Format Validation","text":"JSON Validation<pre><code>import json\n\ndef validate_json_file(file_path):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n        print(f\"\u2705 {file_path} is valid JSON\")\n        return data\n    except json.JSONDecodeError as e:\n        print(f\"\u274c JSON format error in {file_path}:\")\n        print(f\"   Line {e.lineno}, Column {e.colno}: {e.msg}\")\n        return None\n    except FileNotFoundError:\n        print(f\"\u274c File not found: {file_path}\")\n        return None\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#schema-validation-error-handling","title":"Schema Validation Error Handling","text":"Schema Validation<pre><code>def validate_against_schema(data, schema_path):\n    try:\n        with open(schema_path, 'r') as f:\n            schema = json.load(f)\n\n        # Check required fields\n        if 'required' in schema:\n            for field in schema['required']:\n                if field not in data:\n                    print(f\"\u274c Missing required field: {field}\")\n                    return False\n\n        print(\"\u2705 Schema validation passed\")\n        return True\n    except Exception as e:\n        print(f\"\u274c Schema validation error: {e}\")\n        return False\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#4-use-rdetoolkit-error-handling-features","title":"4. Use RDEToolKit Error Handling Features","text":""},{"location":"en/usage/structured_process/errorhandling/#using-structurederror","title":"Using StructuredError","text":"Structured Error Implementation<pre><code>from rdetoolkit.exceptions import StructuredError\n\ndef dataset_with_error_handling(srcpaths, resource_paths):\n    try:\n        # File reading process\n        config = read_config_file(\"config.json\")\n    except FileNotFoundError as e:\n        # Set RDE error information\n        raise StructuredError(\n            \"Configuration file not found\", \n            ecode=3, \n            eobj=e\n        ) from e\n    except json.JSONDecodeError as e:\n        raise StructuredError(\n            \"Configuration file format is incorrect\", \n            ecode=4, \n            eobj=e\n        ) from e\n\n    # Normal processing\n    return process_data(config)\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#using-error-decorator","title":"Using Error Decorator","text":"Error Decorator<pre><code>from rdetoolkit.errors import catch_exception_with_message\n\n@catch_exception_with_message(\n    error_message=\"An unexpected error occurred\", \n    error_code=100, \n    verbose=False\n)\ndef dataset_with_decorator(srcpaths, resource_paths):\n    # Processing logic\n    return process_data()\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#5-debug-using-logs","title":"5. Debug Using Logs","text":""},{"location":"en/usage/structured_process/errorhandling/#detailed-log-configuration","title":"Detailed Log Configuration","text":"Log Configuration<pre><code>import logging\n\ndef setup_detailed_logging():\n    logging.basicConfig(\n        level=logging.DEBUG,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler('debug.log'),\n            logging.StreamHandler()\n        ]\n    )\n\n    logger = logging.getLogger(__name__)\n    return logger\n\ndef debug_processing(srcpaths, resource_paths):\n    logger = setup_detailed_logging()\n\n    logger.info(\"Starting structured processing\")\n    logger.debug(f\"Input paths: {srcpaths}\")\n    logger.debug(f\"Output paths: {resource_paths}\")\n\n    try:\n        # Execute processing\n        result = your_processing_logic()\n        logger.info(\"Processing completed successfully\")\n        return result\n    except Exception as e:\n        logger.error(f\"Error occurred during processing: {e}\")\n        logger.debug(\"Detailed traceback:\", exc_info=True)\n        raise\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#verification","title":"Verification","text":"<p>After resolving errors, verify the following:</p>"},{"location":"en/usage/structured_process/errorhandling/#check-jobfailed-file","title":"Check job.failed File","text":"Error File Check<pre><code>def check_error_file():\n    error_file = \"job.failed\"\n    if os.path.exists(error_file):\n        with open(error_file, 'r') as f:\n            content = f.read()\n        print(f\"Error information:\\n{content}\")\n        return False\n    else:\n        print(\"\u2705 No error file exists (normal completion)\")\n        return True\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#check-log-files","title":"Check Log Files","text":"Log Check Commands<pre><code># Check latest log entries\ntail -n 20 data/logs/rdesys.log\n\n# Search for error messages\ngrep -i \"error\" data/logs/rdesys.log\n\n# Search for warning messages\ngrep -i \"warning\" data/logs/rdesys.log\n</code></pre>"},{"location":"en/usage/structured_process/errorhandling/#troubleshooting-checklist","title":"Troubleshooting Checklist","text":""},{"location":"en/usage/structured_process/errorhandling/#pre-execution-check","title":"Pre-Execution Check","text":"<ul> <li>[ ] All required files exist</li> <li>[ ] File permissions are properly set</li> <li>[ ] Required Python packages are installed</li> <li>[ ] Configuration file format is correct</li> <li>[ ] Input data format matches expected format</li> </ul>"},{"location":"en/usage/structured_process/errorhandling/#error-occurrence-check","title":"Error Occurrence Check","text":"<ul> <li>[ ] Read error messages in detail</li> <li>[ ] Check job.failed file</li> <li>[ ] Check log files</li> <li>[ ] Verify input data content</li> <li>[ ] Verify configuration file content</li> <li>[ ] Ensure sufficient disk space</li> </ul>"},{"location":"en/usage/structured_process/errorhandling/#post-resolution-check","title":"Post-Resolution Check","text":"<ul> <li>[ ] Verify the same error doesn't recur</li> <li>[ ] Check that other functions are not affected</li> <li>[ ] Verify appropriate information is logged</li> <li>[ ] Confirm job.failed file is not generated</li> </ul>"},{"location":"en/usage/structured_process/errorhandling/#related-information","title":"Related Information","text":"<p>To learn more about error handling, refer to the following documents:</p> <ul> <li>Understand processing phases where errors occur in Structured Processing Concepts</li> <li>Learn how to handle configuration-related errors in Configuration Files</li> <li>Check data validation error handling in Validation</li> </ul>"},{"location":"en/usage/structured_process/feature_description/","title":"What is Automatic Transfer to Data Tile Description","text":""},{"location":"en/usage/structured_process/feature_description/#purpose","title":"Purpose","text":"<p>This document explains the automatic transfer feature to data tile description fields in RDE structured processing. You will understand the mechanism and configuration methods for automatically displaying metadata items in description fields.</p>"},{"location":"en/usage/structured_process/feature_description/#challenges-and-background","title":"Challenges and Background","text":"<p>Data set management faced the following challenges:</p> <ul> <li>Manual Description Creation: Need to manually create description text for each dataset</li> <li>Information Consistency: Important metadata information not reflected in description fields</li> <li>Work Efficiency: Duplicate work of entering the same information in multiple places</li> <li>Visibility: Difficulty in grasping dataset overview at a glance</li> </ul> <p>The automatic transfer feature from metadata was developed to solve these challenges.</p>"},{"location":"en/usage/structured_process/feature_description/#key-concepts","title":"Key Concepts","text":""},{"location":"en/usage/structured_process/feature_description/#automatic-transfer-mechanism","title":"Automatic Transfer Mechanism","text":"<pre><code>flowchart LR\n    A[metadata-def.json] --&gt; B[description setting]\n    C[metadata.json] --&gt; D[actual values]\n    B --&gt; E[automatic transfer process]\n    D --&gt; E\n    E --&gt; F[data tile description field]\n</code></pre>"},{"location":"en/usage/structured_process/feature_description/#configurable-items","title":"Configurable Items","text":"Configuration Item Description Required <code>\"description\": true</code> Setting for display in description field \u25cb <code>\"title\"</code> Display name definition \u25cb <code>\"type\"</code> Data type definition \u25cb"},{"location":"en/usage/structured_process/feature_description/#display-rules","title":"Display Rules","text":"<ul> <li>Only items with <code>description: true</code> are displayed</li> <li>Items with <code>null</code> or empty values are not displayed</li> <li>Displayed in definition order</li> <li>Supports both Japanese and English</li> </ul>"},{"location":"en/usage/structured_process/feature_description/#configuration-method","title":"Configuration Method","text":""},{"location":"en/usage/structured_process/feature_description/#1-configuration-in-metadata-defjson","title":"1. Configuration in metadata-def.json","text":"<p>Add <code>\"description\": true</code> to items you want to display in the description field:</p> metadata-def.json<pre><code>{\n  \"title\": \"Experimental Data Metadata\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"experiment_name\": {\n      \"type\": \"string\",\n      \"title\": \"Experiment Name\",\n      \"description\": true\n    },\n    \"temperature\": {\n      \"type\": \"number\",\n      \"title\": \"Temperature (\u00b0C)\",\n      \"description\": true\n    },\n    \"pressure\": {\n      \"type\": \"number\",\n      \"title\": \"Pressure (Pa)\"\n    },\n    \"sample_count\": {\n      \"type\": \"integer\",\n      \"title\": \"Sample Count\",\n      \"description\": true\n    }\n  }\n}\n</code></pre>"},{"location":"en/usage/structured_process/feature_description/#2-value-setting-in-structured-processing","title":"2. Value Setting in Structured Processing","text":"<p>Set metadata values in custom structured processing:</p> Metadata Generation<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Process experimental data\n    experiment_data = process_experiment_data()\n\n    # Generate metadata\n    metadata = {\n        \"experiment_name\": \"High Temperature Experiment Series A\",\n        \"temperature\": 850,\n        \"pressure\": 101325,  # Not displayed in description field\n        \"sample_count\": 25\n    }\n\n    # Save as metadata.json\n    metadata_file = Path(resource_paths.meta) / \"metadata.json\"\n    with open(metadata_file, 'w', encoding='utf-8') as f:\n        json.dump(metadata, f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"en/usage/structured_process/feature_description/#3-verify-display-results","title":"3. Verify Display Results","text":"<p>The data tile description field will display as follows:</p> <pre><code>Experiment Name: High Temperature Experiment Series A\nTemperature (\u00b0C): 850\nSample Count: 25\n</code></pre>"},{"location":"en/usage/structured_process/feature_description/#practical-usage-examples","title":"Practical Usage Examples","text":""},{"location":"en/usage/structured_process/feature_description/#multiple-data-type-configuration","title":"Multiple Data Type Configuration","text":"Various Data Type Configuration Example<pre><code>{\n  \"properties\": {\n    \"project_name\": {\n      \"type\": \"string\",\n      \"title\": \"Project Name\",\n      \"description\": true\n    },\n    \"completion_rate\": {\n      \"type\": \"number\",\n      \"title\": \"Completion Rate (%)\",\n      \"description\": true\n    },\n    \"is_validated\": {\n      \"type\": \"boolean\",\n      \"title\": \"Validated\",\n      \"description\": true\n    },\n    \"tags\": {\n      \"type\": \"array\",\n      \"title\": \"Tags\",\n      \"description\": true\n    }\n  }\n}\n</code></pre>"},{"location":"en/usage/structured_process/feature_description/#conditional-metadata-generation","title":"Conditional Metadata Generation","text":"Conditional Metadata Setting<pre><code>def generate_conditional_metadata(data):\n    metadata = {\n        \"project_name\": data.get(\"name\", \"Not Set\"),\n        \"completion_rate\": calculate_completion_rate(data)\n    }\n\n    # Add metadata based on conditions\n    if data.get(\"validated\"):\n        metadata[\"is_validated\"] = True\n        metadata[\"validation_date\"] = data[\"validation_date\"]\n\n    # Add tags only if they exist\n    if data.get(\"tags\"):\n        metadata[\"tags\"] = data[\"tags\"]\n\n    return metadata\n</code></pre>"},{"location":"en/usage/structured_process/feature_description/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/usage/structured_process/feature_description/#when-items-dont-appear-in-description-field","title":"When Items Don't Appear in Description Field","text":""},{"location":"en/usage/structured_process/feature_description/#configuration-check-checklist","title":"Configuration Check Checklist","text":"Configuration Check Script<pre><code>def check_description_settings(metadata_def_path, metadata_path):\n    # Check metadata-def.json\n    with open(metadata_def_path, 'r') as f:\n        schema = json.load(f)\n\n    # Check metadata.json\n    with open(metadata_path, 'r') as f:\n        metadata = json.load(f)\n\n    # Check description settings\n    for prop_name, prop_def in schema.get(\"properties\", {}).items():\n        if prop_def.get(\"description\") is True:\n            if prop_name in metadata and metadata[prop_name] is not None:\n                print(f\"\u2705 {prop_name}: Display target\")\n            else:\n                print(f\"\u274c {prop_name}: Value not set\")\n        else:\n            print(f\"\u26aa {prop_name}: Not display target\")\n</code></pre>"},{"location":"en/usage/structured_process/feature_description/#common-problems-and-solutions","title":"Common Problems and Solutions","text":"Problem Cause Solution Items not displayed <code>description: true</code> not set Add setting to metadata-def.json Values displayed as blank No value in metadata.json Set value in structured processing Display order differs from intention Definition order issue Adjust order in metadata-def.json"},{"location":"en/usage/structured_process/feature_description/#summary","title":"Summary","text":"<p>Key features of the automatic transfer to data tile description field:</p> <ul> <li>Automation: Automatic transfer from metadata to description field</li> <li>Selective Display: Display only important items selectively</li> <li>Consistency: Information display in unified format</li> <li>Efficiency: Reduction of manual work and centralized information management</li> </ul>"},{"location":"en/usage/structured_process/feature_description/#next-steps","title":"Next Steps","text":"<p>To utilize the automatic transfer feature, refer to the following documents:</p> <ul> <li>Learn schema design in Metadata Definition Files</li> <li>Understand processing flows in Structured Processing Concepts</li> <li>Check file operation methods in Directory Path Retrieval</li> </ul>"},{"location":"en/usage/structured_process/rdepath/","title":"Directory Path Retrieval Methods","text":""},{"location":"en/usage/structured_process/rdepath/#purpose","title":"Purpose","text":"<p>This document explains how to retrieve directory paths necessary for file read/write operations in RDE structured processing. You will learn efficient path management using <code>RdeInputDirPaths</code> and <code>RdeOutputResourcePath</code>.</p>"},{"location":"en/usage/structured_process/rdepath/#prerequisites","title":"Prerequisites","text":"<ul> <li>Understanding of basic RDEToolKit usage</li> <li>Basic knowledge of Python file operations</li> <li>Understanding of structured processing directory structure</li> </ul>"},{"location":"en/usage/structured_process/rdepath/#steps","title":"Steps","text":""},{"location":"en/usage/structured_process/rdepath/#1-retrieve-input-paths","title":"1. Retrieve Input Paths","text":"<p>Use <code>RdeInputDirPaths</code> to retrieve input data path information:</p> Input Path Retrieval<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Input data directory\n    input_dir = srcpaths.inputdata\n    print(f\"Input data directory: {input_dir}\")\n\n    # Invoice directory\n    invoice_dir = srcpaths.invoice\n    print(f\"Invoice directory: {invoice_dir}\")\n\n    # Task support directory\n    tasksupport_dir = srcpaths.tasksupport\n    print(f\"Task support directory: {tasksupport_dir}\")\n</code></pre>"},{"location":"en/usage/structured_process/rdepath/#2-retrieve-output-paths","title":"2. Retrieve Output Paths","text":"<p>Use <code>RdeOutputResourcePath</code> to retrieve output destination path information:</p> Output Path Retrieval<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Structured data directory\n    structured_dir = resource_paths.struct\n    print(f\"Structured data directory: {structured_dir}\")\n\n    # Metadata directory\n    meta_dir = resource_paths.meta\n    print(f\"Metadata directory: {meta_dir}\")\n\n    # Raw data directory\n    raw_dir = resource_paths.raw\n    print(f\"Raw data directory: {raw_dir}\")\n\n    # Image directories\n    main_image_dir = resource_paths.main_image\n    other_image_dir = resource_paths.other_image\n    thumbnail_dir = resource_paths.thumbnail\n\n    print(f\"Main image directory: {main_image_dir}\")\n    print(f\"Other image directory: {other_image_dir}\")\n    print(f\"Thumbnail directory: {thumbnail_dir}\")\n</code></pre>"},{"location":"en/usage/structured_process/rdepath/#3-read-files","title":"3. Read Files","text":"<p>Use the retrieved paths to read files:</p> File Reading<pre><code>import os\nimport pandas as pd\nfrom pathlib import Path\n\ndef read_input_files(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Get file list from input directory\n    input_files = os.listdir(srcpaths.inputdata)\n    print(f\"Input files: {input_files}\")\n\n    # Read CSV files\n    for file in input_files:\n        if file.endswith('.csv'):\n            file_path = Path(srcpaths.inputdata) / file\n            df = pd.read_csv(file_path)\n            print(f\"Loaded {file}: {df.shape}\")\n\n            # Process data\n            processed_df = process_dataframe(df)\n\n            # Save as structured data\n            output_path = Path(resource_paths.struct) / f\"processed_{file}\"\n            processed_df.to_csv(output_path, index=False)\n</code></pre>"},{"location":"en/usage/structured_process/rdepath/#4-save-files","title":"4. Save Files","text":"<p>Save processing results to appropriate directories:</p> File Saving<pre><code>import json\nfrom pathlib import Path\n\ndef save_processing_results(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Processing result data\n    results = {\n        \"status\": \"completed\",\n        \"processed_files\": 5,\n        \"timestamp\": \"2023-01-01T12:00:00Z\"\n    }\n\n    # Save as structured data\n    structured_file = Path(resource_paths.struct) / \"results.json\"\n    with open(structured_file, 'w', encoding='utf-8') as f:\n        json.dump(results, f, indent=2, ensure_ascii=False)\n\n    # Save as metadata\n    metadata = {\n        \"processing_version\": \"1.0\",\n        \"input_file_count\": len(os.listdir(srcpaths.inputdata)),\n        \"processing_date\": \"2023-01-01\"\n    }\n\n    meta_file = Path(resource_paths.meta) / \"metadata.json\"\n    with open(meta_file, 'w', encoding='utf-8') as f:\n        json.dump(metadata, f, indent=2, ensure_ascii=False)\n</code></pre>"},{"location":"en/usage/structured_process/rdepath/#verification","title":"Verification","text":"<p>Verify that path retrieval and operations were performed correctly:</p>"},{"location":"en/usage/structured_process/rdepath/#file-operation-verification","title":"File Operation Verification","text":"Operation Result Verification<pre><code>def verify_file_operations(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Check input file count\n    input_count = len(os.listdir(srcpaths.inputdata))\n    print(f\"Input file count: {input_count}\")\n\n    # Check output file count\n    output_dirs = {\n        \"structured\": resource_paths.struct,\n        \"meta\": resource_paths.meta,\n        \"raw\": resource_paths.raw,\n        \"main_image\": resource_paths.main_image\n    }\n\n    for name, path in output_dirs.items():\n        if Path(path).exists():\n            file_count = len(os.listdir(path))\n            print(f\"{name} directory file count: {file_count}\")\n        else:\n            print(f\"\u26a0\ufe0f {name} directory does not exist\")\n</code></pre>"},{"location":"en/usage/structured_process/rdepath/#related-information","title":"Related Information","text":"<p>To learn more about directory path retrieval, refer to the following documents:</p> <ul> <li>Understand processing flows where paths are used in Structured Processing Concepts</li> <li>Check the role of each directory in Directory Structure Specification</li> <li>Learn how to handle path-related errors in Error Handling</li> </ul>"},{"location":"en/usage/structured_process/structured/","title":"What is Structured Processing","text":""},{"location":"en/usage/structured_process/structured/#purpose","title":"Purpose","text":"<p>This page explains the basic concepts and processing flow of RDE structured processing. You will understand why structured processing is necessary and how it works.</p>"},{"location":"en/usage/structured_process/structured/#challenges-and-background","title":"Challenges and Background","text":"<p>Research data management faced the following challenges:</p> <ul> <li>Data Format Diversity: Different data formats across experimental instruments and research fields</li> <li>Inconsistent Metadata: Varying metadata description methods among researchers</li> <li>Reproducibility Assurance: Need for standardization and recording of data processing procedures</li> <li>Quality Control: Requirement for data consistency and validity verification</li> </ul> <p>The concept of RDE structured processing was created to address these challenges.</p>"},{"location":"en/usage/structured_process/structured/#key-concepts","title":"Key Concepts","text":""},{"location":"en/usage/structured_process/structured/#three-phases","title":"Three Phases","text":"<p>RDE structured processing consists of the following three phases:</p> <pre><code>flowchart LR\n    A[Initialization Phase] --&gt; B[Custom Processing Phase]\n    B --&gt; C[Termination Phase]\n\n    A1[Directory CreationFile ValidationConfiguration Loading] --&gt; A\n    B1[User-defined ProcessingData TransformationMetadata Generation] --&gt; B\n    C1[Output ValidationLog FinalizationCleanup] --&gt; C\n</code></pre>"},{"location":"en/usage/structured_process/structured/#1-initialization-phase","title":"1. Initialization Phase","text":"<p>Preparation stage automatically executed by the system:</p> <ul> <li>Directory Structure Creation: Automatic generation of standard output directories</li> <li>Input File Validation: Format and consistency checking</li> <li>Configuration Loading: Application of processing modes and configuration parameters</li> <li>Log System Initialization: Start recording processing history</li> </ul>"},{"location":"en/usage/structured_process/structured/#2-custom-processing-phase","title":"2. Custom Processing Phase","text":"<p>Core processing stage defined by researchers:</p> <ul> <li>Data Transformation: Processing raw data according to research objectives</li> <li>Quality Control: Data validity verification and anomaly detection</li> <li>Metadata Generation: Recording information about processing results</li> <li>Visualization: Generation of graphs and charts</li> </ul>"},{"location":"en/usage/structured_process/structured/#3-termination-phase","title":"3. Termination Phase","text":"<p>Completion stage automatically executed by the system:</p> <ul> <li>Output Validation: Consistency verification of generated files</li> <li>Log Finalization: Recording processing results and statistical information</li> <li>Temporary File Cleanup: Deletion of unnecessary files</li> <li>Execution Result Reporting: Success/failure determination and reporting</li> </ul>"},{"location":"en/usage/structured_process/structured/#standard-directory-structure","title":"Standard Directory Structure","text":"<p>Structured processing uses the following standard directory structure:</p> <pre><code>data/\n\u251c\u2500\u2500 inputdata/      # Input data (placed by researchers)\n\u251c\u2500\u2500 invoice/        # Invoice data (metadata)\n\u251c\u2500\u2500 tasksupport/    # Configuration files\n\u251c\u2500\u2500 raw/            # Copy of raw data\n\u251c\u2500\u2500 structured/     # Processed data\n\u251c\u2500\u2500 meta/           # Metadata files\n\u251c\u2500\u2500 main_image/     # Main display images\n\u251c\u2500\u2500 other_image/    # Other images\n\u251c\u2500\u2500 thumbnail/      # Thumbnail images\n\u251c\u2500\u2500 logs/           # Processing logs\n\u2514\u2500\u2500 temp/           # Temporary files\n</code></pre>"},{"location":"en/usage/structured_process/structured/#data-flow","title":"Data Flow","text":"<pre><code>flowchart TD\n    A[Raw Data] --&gt; B[Input Validation]\n    B --&gt; C[Custom Processing]\n    C --&gt; D[Quality Control]\n    D --&gt; E[Metadata Generation]\n    E --&gt; F[Output Validation]\n    F --&gt; G[RDE Dataset]\n\n    H[Configuration Files] --&gt; C\n    I[Schema Definition] --&gt; B\n    I --&gt; F\n</code></pre>"},{"location":"en/usage/structured_process/structured/#processing-modes","title":"Processing Modes","text":"<p>RDEToolKit provides four processing modes according to data types and registration methods:</p> Mode Purpose Features Invoice Standard single dataset registration Most basic mode ExcelInvoice Batch registration of multiple datasets Efficient registration via Excel files MultiDataTile Integrated management of related data Managing multiple data tiles as one dataset RDEFormat Migration/mock creation of existing data Registration of pre-structured data"},{"location":"en/usage/structured_process/structured/#benefits-and-effects","title":"Benefits and Effects","text":""},{"location":"en/usage/structured_process/structured/#benefits-for-researchers","title":"Benefits for Researchers","text":"<ul> <li>Standardization: Unified data formats and metadata</li> <li>Reproducibility: Recording and re-execution of processing procedures</li> <li>Efficiency: Time savings through automation</li> <li>Quality Improvement: Reliability assurance through validation features</li> </ul>"},{"location":"en/usage/structured_process/structured/#benefits-for-organizations","title":"Benefits for Organizations","text":"<ul> <li>Data Management: Unified data management system</li> <li>Searchability: Advanced search through structured metadata</li> <li>Sharing: Efficient sharing of standardized data</li> <li>Long-term Preservation: Sustainable data storage formats</li> </ul>"},{"location":"en/usage/structured_process/structured/#summary","title":"Summary","text":"<p>RDE structured processing is a comprehensive framework for ensuring the quality and reproducibility of research data. Key features include:</p> <ul> <li>Three-stage Processing Flow: Clear separation of initialization, custom processing, and termination</li> <li>Standardized Directory Structure: Consistent data organization</li> <li>Flexible Processing Modes: Support for various research needs</li> <li>Automation and Validation: Reduction of human errors and quality assurance</li> </ul>"},{"location":"en/usage/structured_process/structured/#next-steps","title":"Next Steps","text":"<p>After understanding the concepts of structured processing, refer to the following practical guides:</p> <ul> <li>Experience structured processing with Quick Start</li> <li>Learn details of each mode in Processing Modes</li> <li>Check customization methods in Configuration Files</li> <li>Learn troubleshooting in Error Handling</li> </ul>"},{"location":"en/user-guide/config/","title":"How to Use Configuration Files","text":""},{"location":"en/user-guide/config/#purpose","title":"Purpose","text":"<p>This guide explains how to create and use configuration files that control the behavior of RDEToolKit. By properly configuring configuration files, you can select processing modes, control file saving, and define custom settings.</p>"},{"location":"en/user-guide/config/#prerequisites","title":"Prerequisites","text":"<p>Before using configuration files, ensure the following:</p> <ul> <li>RDEToolKit is installed</li> <li>Project directory has been created</li> <li>Basic knowledge of YAML or TOML format</li> </ul>"},{"location":"en/user-guide/config/#steps","title":"Steps","text":""},{"location":"en/user-guide/config/#1-create-configuration-file","title":"1. Create Configuration File","text":"<p>RDEToolKit automatically searches for configuration files in the following locations and file names:</p>"},{"location":"en/user-guide/config/#supported-file-names-and-locations","title":"Supported File Names and Locations","text":"File Name Location Format <code>rdeconfig.yaml</code> <code>tasksupport/</code> or project root YAML <code>rdeconfig.yml</code> <code>tasksupport/</code> or project root YAML <code>pyproject.toml</code> project root TOML <p>Recommended Placement</p> <p>We recommend placing project-specific settings in <code>tasksupport/rdeconfig.yaml</code> and development environment-wide settings in <code>pyproject.toml</code>.</p>"},{"location":"en/user-guide/config/#2-define-basic-settings","title":"2. Define Basic Settings","text":""},{"location":"en/user-guide/config/#processing-mode-configuration","title":"Processing Mode Configuration","text":"YAML FormatTOML Format tasksupport/rdeconfig.yaml<pre><code>system:\n  # Extended mode specification\n  extended_mode: 'MultiDataTile'  # or 'rdeformat'\n\n  # File saving settings\n  save_raw: true\n  save_nonshared_raw: true\n\n  # Feature enable/disable\n  magic_variable: true\n  save_thumbnail_image: true\n</code></pre> pyproject.toml<pre><code>[tool.rdetoolkit.system]\nextended_mode = 'MultiDataTile'\nsave_raw = true\nsave_nonshared_raw = true\nmagic_variable = true\nsave_thumbnail_image = true\n</code></pre>"},{"location":"en/user-guide/config/#configuration-item-details","title":"Configuration Item Details","text":"Setting Item Type Default Value Description <code>extended_mode</code> string none Extended mode ('MultiDataTile' or 'rdeformat') <code>save_raw</code> boolean false Save input files to <code>raw</code> directory <code>save_nonshared_raw</code> boolean true Save input files to <code>nonshared_raw</code> directory <code>magic_variable</code> boolean false Enable Magic Variable functionality <code>save_thumbnail_image</code> boolean false Automatic thumbnail image generation"},{"location":"en/user-guide/config/#3-processing-mode-specific-settings","title":"3. Processing Mode-Specific Settings","text":""},{"location":"en/user-guide/config/#invoice-mode-default","title":"Invoice Mode (Default)","text":"tasksupport/rdeconfig.yaml<pre><code>system:\n  magic_variable: true\n  save_thumbnail_image: true\n</code></pre>"},{"location":"en/user-guide/config/#multi-data-tile-mode","title":"Multi Data Tile Mode","text":"tasksupport/rdeconfig.yaml<pre><code>system:\n  extended_mode: 'MultiDataTile'\n\nmultidata_tile:\n  ignore_errors: true  # Continue processing on errors\n</code></pre>"},{"location":"en/user-guide/config/#rde-format-mode","title":"RDE Format Mode","text":"tasksupport/rdeconfig.yaml<pre><code>system:\n  extended_mode: 'rdeformat'\n  save_raw: false\n  save_nonshared_raw: false\n</code></pre>"},{"location":"en/user-guide/config/#4-add-custom-settings","title":"4. Add Custom Settings","text":"<p>Define custom configuration values that can be referenced within structured processing:</p> YAML FormatTOML Format tasksupport/rdeconfig.yaml<pre><code>custom:\n  # Image processing settings\n  thumbnail_image_name: \"inputdata/sample_image.png\"\n  image_quality: 85\n  max_image_size: 1920\n\n  # Data processing settings\n  analysis_parameters:\n    threshold: 0.5\n    iterations: 100\n\n  # Output settings\n  output_format: \"csv\"\n  include_metadata: true\n</code></pre> pyproject.toml<pre><code>[tool.rdetoolkit.custom]\nthumbnail_image_name = \"inputdata/sample_image.png\"\nimage_quality = 85\nmax_image_size = 1920\noutput_format = \"csv\"\ninclude_metadata = true\n\n[tool.rdetoolkit.custom.analysis_parameters]\nthreshold = 0.5\niterations = 100\n</code></pre>"},{"location":"en/user-guide/config/#5-reference-settings-in-structured-processing","title":"5. Reference Settings in Structured Processing","text":"<p>How to use created configuration values within structured processing functions:</p> modules/process.py<pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Reference system settings\n    extended_mode = srcpaths.config.system.extended_mode\n    save_raw = srcpaths.config.system.save_raw\n    magic_variable = srcpaths.config.system.magic_variable\n\n    print(f\"Processing mode: {extended_mode}\")\n    print(f\"Save raw: {save_raw}\")\n    print(f\"Magic Variable: {magic_variable}\")\n\n    # Reference custom settings\n    if hasattr(srcpaths.config, 'custom'):\n        custom_config = srcpaths.config.custom\n\n        # Get image settings\n        thumbnail_name = custom_config.get('thumbnail_image_name')\n        image_quality = custom_config.get('image_quality', 75)\n\n        # Get analysis parameters\n        analysis_params = custom_config.get('analysis_parameters', {})\n        threshold = analysis_params.get('threshold', 0.5)\n\n        print(f\"Thumbnail image: {thumbnail_name}\")\n        print(f\"Image quality: {image_quality}\")\n        print(f\"Threshold: {threshold}\")\n</code></pre>"},{"location":"en/user-guide/config/#verification","title":"Verification","text":""},{"location":"en/user-guide/config/#verify-configuration-file-loading","title":"Verify Configuration File Loading","text":"<p>How to verify that settings are loaded correctly:</p> test_config.py<pre><code>from rdetoolkit.config import parse_config_file\n\n# Test configuration file loading\nconfig = parse_config_file()\n\nprint(\"=== Configuration Check ===\")\nprint(f\"Extended mode: {config.system.extended_mode}\")\nprint(f\"Save raw: {config.system.save_raw}\")\nprint(f\"Magic Variable: {config.system.magic_variable}\")\n\nif hasattr(config, 'custom'):\n    print(f\"Custom settings: {config.custom}\")\n</code></pre>"},{"location":"en/user-guide/config/#configuration-priority","title":"Configuration Priority","text":"<p>Priority when multiple configuration files exist:</p> <ol> <li><code>tasksupport/rdeconfig.yaml</code></li> <li><code>tasksupport/rdeconfig.yml</code></li> <li><code>./rdeconfig.yaml</code></li> <li><code>./rdeconfig.yml</code></li> <li><code>./pyproject.toml</code></li> </ol> <p>Configuration Conflicts</p> <p>When the same configuration item is defined in multiple files, the setting from the higher priority file is used.</p>"},{"location":"en/user-guide/config/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/user-guide/config/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"en/user-guide/config/#yaml-syntax-error","title":"YAML Syntax Error","text":"<pre><code>ERROR: YAML parsing failed\n</code></pre> <p>Solution: Check YAML syntax <pre><code># Correct example\nsystem:\n  extended_mode: 'MultiDataTile'\n  save_raw: true\n\n# Incorrect example (indentation error)\nsystem:\nextended_mode: 'MultiDataTile'\nsave_raw: true\n</code></pre></p>"},{"location":"en/user-guide/config/#configuration-values-not-applied","title":"Configuration Values Not Applied","text":"<p>Check items: 1. File name spelling mistakes 2. File placement location 3. YAML/TOML syntax errors 4. Incorrect configuration item names</p>"},{"location":"en/user-guide/config/#cannot-access-custom-settings","title":"Cannot Access Custom Settings","text":"safe_config_access.py<pre><code>def safe_get_custom_config(config, key, default=None):\n    \"\"\"Safely get custom configuration\"\"\"\n    if hasattr(config, 'custom') and key in config.custom:\n        return config.custom[key]\n    return default\n\n# Usage example\nthumbnail_name = safe_get_custom_config(\n    srcpaths.config, \n    'thumbnail_image_name', \n    'default_thumbnail.png'\n)\n</code></pre>"},{"location":"en/user-guide/config/#related-information","title":"Related Information","text":"<p>For detailed configuration file specifications:</p> <ul> <li>Magic Variables - Dynamic metadata replacement functionality (see Magic Variables section above)</li> <li>API Reference - Configuration-related API specifications</li> </ul>"},{"location":"en/user-guide/","title":"User Guide","text":""},{"location":"en/user-guide/#purpose","title":"Purpose","text":"<p>This section explains detailed usage methods and advanced features of RDEToolKit. After completing basic installation and initial execution, this provides information for more effective utilization of RDEToolKit.</p>"},{"location":"en/user-guide/#key-topics","title":"Key Topics","text":""},{"location":"en/user-guide/#basic-concepts","title":"Basic Concepts","text":"<ul> <li>What is Structured Processing - Core concepts and processing flow of RDEToolKit</li> <li>Processing Modes - Characteristics and usage of four processing modes</li> <li>Directory Structure - Standard file organization of RDE projects</li> </ul>"},{"location":"en/user-guide/#configuration-and-customization","title":"Configuration and Customization","text":"<ul> <li>Configuration File - Behavior control using rdeconfig.yaml and pyproject.toml</li> <li>Magic Variables - Dynamic metadata replacement functionality</li> </ul>"},{"location":"en/user-guide/#practical-usage","title":"Practical Usage","text":"<ul> <li>CLI Tools - Detailed command-line operations</li> <li>Validation - Data quality verification methods</li> </ul>"},{"location":"en/user-guide/#advanced-features","title":"Advanced Features","text":"<ul> <li>Docker Usage - Environment setup and execution using Docker</li> </ul>"},{"location":"en/user-guide/#usage-flow","title":"Usage Flow","text":"<ol> <li>Concept Understanding: Learn basic concepts in What is Structured Processing</li> <li>Environment Setup: Customize behavior with Configuration File</li> <li>Practical Application: Utilize features according to specific use cases</li> <li>Advanced Usage: Extend functionality with custom processing and plugins</li> </ol>"},{"location":"en/user-guide/#support-resources","title":"Support Resources","text":""},{"location":"en/user-guide/#documentation","title":"Documentation","text":"<ul> <li>API Reference - Technical specifications of all features</li> <li>Developer Guide - Contribution methods</li> </ul>"},{"location":"en/user-guide/#community","title":"Community","text":"<ul> <li>GitHub Issues - Bug reports and feature requests</li> <li>GitHub Discussions - Questions and information exchange</li> </ul> <p>Learning Approach</p> <p>To effectively learn RDEToolKit, we recommend first understanding the basic concepts in What is Structured Processing, then referring to topics according to your specific use cases.</p>"},{"location":"en/user-guide/#next-steps","title":"Next Steps","text":"<ul> <li>For beginners: Start with What is Structured Processing</li> <li>To modify settings: Refer to Configuration File</li> <li>For advanced features: Check Docker Usage</li> </ul>"},{"location":"en/user-guide/structured-processing/","title":"What is Structured Processing","text":""},{"location":"en/user-guide/structured-processing/#purpose","title":"Purpose","text":"<p>This page provides a detailed explanation of \"structured processing,\" the core concept of RDEToolKit. By understanding the background, mechanisms, and implementation methods of structured processing, you will be able to build effective data transformation workflows.</p>"},{"location":"en/user-guide/structured-processing/#challenges-and-background","title":"Challenges and Background","text":""},{"location":"en/user-guide/structured-processing/#research-data-management-challenges","title":"Research Data Management Challenges","text":"<p>Research activities faced several challenges in data management and sharing:</p> <ul> <li>Format Diversity: Different data formats across researchers and research fields</li> <li>Metadata Inconsistency: Inconsistent description methods and items</li> <li>Process Personalization: Data conversion procedures dependent on individuals</li> <li>Reproducibility Difficulties: Poor documentation and sharing of processing procedures</li> </ul>"},{"location":"en/user-guide/structured-processing/#need-for-rde-research-data-express","title":"Need for RDE (Research Data Express)","text":"<p>To solve these challenges, RDE was developed as a platform for managing and sharing research data in standardized formats. However, converting existing diverse data to RDE format was complex and time-consuming.</p>"},{"location":"en/user-guide/structured-processing/#key-concepts","title":"Key Concepts","text":""},{"location":"en/user-guide/structured-processing/#definition-of-structured-processing","title":"Definition of Structured Processing","text":"<p>Structured Processing refers to a series of processes that convert research data to RDE standard format, add appropriate metadata, and make it ready for sharing.</p> <pre><code>graph TD\n    A[Raw Data] --&gt; B[Structured Processing]\n    B --&gt; C[RDE Standard Format Data]\n    C --&gt; D[Data Sharing &amp; Publication]\n\n    B --&gt; B1[Data Transformation]\n    B --&gt; B2[Metadata Addition]\n    B --&gt; B3[Quality Verification]\n    B --&gt; B4[File Organization]\n</code></pre>"},{"location":"en/user-guide/structured-processing/#three-phase-workflow","title":"Three-Phase Workflow","text":"<p>RDEToolKit's structured processing is executed in the following three phases:</p>"},{"location":"en/user-guide/structured-processing/#1-initialization","title":"1. Initialization","text":"<ul> <li>Automatic Directory Structure Generation: Folder structure compliant with RDE standards</li> <li>Input Data Loading: Automatic file format detection</li> <li>Processing Mode Determination: Mode selection based on data characteristics</li> <li>Configuration File Analysis: Loading of operation parameters</li> </ul> <pre><code>graph TD\n    init1[Initialization] --&gt; init2[Directory Creation]\n    init2 --&gt; init3{Mode Selection}\n    init3 --&gt;|default| init6[Invoice Mode]\n    init3 --&gt; init7[Excel Invoice Mode]\n    init3 --&gt; init8[Multi Data Tile]\n    init3 --&gt; init9[RDE Format Mode]\n    init6 --&gt; init10[Custom Structured Processing]\n    init7 --&gt; init10\n    init8 --&gt; init10\n    init9 --&gt; init10\n</code></pre>"},{"location":"en/user-guide/structured-processing/#2-custom-structured-processing","title":"2. Custom Structured Processing","text":"<p>The stage where user-defined custom processing logic is executed:</p> <ul> <li>Data Transformation: Format conversion of research data</li> <li>Analysis Processing: Statistical analysis, visualization, machine learning</li> <li>Metadata Extraction: Automatic extraction from file information</li> <li>Quality Check: Data consistency verification</li> </ul> custom_processing_example.py<pre><code>def dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    # Load data\n    data = load_research_data(srcpaths.inputdata)\n\n    # Data transformation and analysis\n    processed_data = analyze_data(data)\n\n    # Save results\n    save_results(processed_data, resource_paths.data)\n\n    # Generate metadata\n    generate_metadata(processed_data, resource_paths.tasksupport)\n</code></pre>"},{"location":"en/user-guide/structured-processing/#3-finalization","title":"3. Finalization","text":"<p>Verification of processing results and final file organization:</p> <ul> <li>Validation: Structure verification using JSON Schema</li> <li>Thumbnail Generation: Automatic creation of representative images</li> <li>Metadata Description: Automatic generation of dataset descriptions</li> <li>File Organization: Finalization of directory structure</li> </ul> <pre><code>graph TD\n    end1[Custom Structured Processing] --&gt; end2[Validation]\n    end2 --&gt; end3{Setting:save_thumbnail_image}\n    end3 --&gt;|False| end6[Automatic Description Generation]\n    end3 --&gt;|True| end5[Thumbnail Generation from Main Images]\n    end5 --&gt; end6\n    end6 --&gt; end7[Completion]\n</code></pre>"},{"location":"en/user-guide/structured-processing/#four-processing-modes","title":"Four Processing Modes","text":"<p>RDEToolKit provides four processing modes based on data characteristics and usage:</p> Mode Activation Condition Features Usage Invoice Mode Default Basic structured processing Single data file Excel Invoice Mode <code>*._excel_invoice.xlsx</code> file Automatic Excel invoice processing Excel format invoices Multi Data Tile <code>extended_mode: 'MultiDataTile'</code> Batch processing, error skip Multiple data files RDE Format Mode <code>extended_mode: 'rdeformat'</code> Reprocessing of existing RDE data RDE standard format"},{"location":"en/user-guide/structured-processing/#custom-processing-function-implementation-patterns","title":"Custom Processing Function Implementation Patterns","text":"<p>In structured processing, custom processing is implemented using the following patterns:</p> processing_patterns.py<pre><code>from rdetoolkit.models.rde2types import RdeInputDirPaths, RdeOutputResourcePath\n\ndef dataset(srcpaths: RdeInputDirPaths, resource_paths: RdeOutputResourcePath):\n    \"\"\"\n    Standard structured processing function\n\n    Args:\n        srcpaths: Input file path information\n        resource_paths: Output resource path information\n    \"\"\"\n    # 1. Validate input data\n    validate_input_data(srcpaths)\n\n    # 2. Execute data processing\n    process_research_data(srcpaths, resource_paths)\n\n    # 3. Save results\n    save_processing_results(resource_paths)\n\n    # 4. Generate metadata\n    generate_metadata(resource_paths)\n</code></pre>"},{"location":"en/user-guide/structured-processing/#summary","title":"Summary","text":"<p>Key values of structured processing:</p> <ul> <li>Automation: Significant reduction of manual work</li> <li>Standardization: Unified conversion to RDE format</li> <li>Quality Assurance: Reliability through validation features</li> <li>Extensibility: Flexible response through custom processing</li> <li>Reproducibility: Documentation and sharing of processing procedures</li> </ul>"},{"location":"en/user-guide/structured-processing/#important-points","title":"Important Points","text":"<ul> <li>Single Responsibility: Each processing phase has clearly separated responsibilities</li> <li>Configuration-Driven: Flexible behavior control through configuration files</li> <li>Error Handling: Robust exception handling and log output</li> <li>Testability: Structure that enables unit testing</li> </ul>"},{"location":"en/user-guide/structured-processing/#next-steps","title":"Next Steps","text":"<p>To deepen your understanding of structured processing:</p> <ol> <li>Configuration Files - Details of processing modes and behavior settings</li> <li>CLI Tools - Detailed command line operations</li> <li>Validation - Data quality verification methods</li> <li>API Reference - Check all available features</li> </ol>"}]}